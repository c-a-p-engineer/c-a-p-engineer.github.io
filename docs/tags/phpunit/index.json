[{"content":"AIで3Dモデリングが簡単に！Tripo3Dの始め方をご紹介します 近年、AIを活用したさまざまな創作ツールが登場しています。その中でも注目を集めているのが、画像やテキストから3Dモデルを自動生成できるサービス「Tripo3D」です。\n本記事では、Tripo3Dの特徴や始め方、現在の料金体系、そして実際にChatGPTで生成した画像をもとに3Dモデルを作ってみた体験まで、わかりやすくご紹介します。\nTripo3Dってどんなサービス？ Tripo3D は、AIの力で誰でも簡単に3Dモデルが作れるクラウド型の生成サービスです。画像やテキスト、スケッチなどをアップロードするだけで、自動的に3Dモデルを生成してくれます。\n公式サイト：Tripo3D\n主な特徴  多様な入力に対応：テキスト、単一画像、複数画像、スケッチなど 高品質な出力：詳細な形状・マテリアル・リギング対応 幅広い用途：ゲーム開発、3Dプリント、AR/VR、プロダクトデザイン など 無料でも利用可能：制限付きながらも無料プランで試せます  Tripo3Dの始め方 Tripo3Dの利用を始めるまでの流れは非常にシンプルです。\nアカウント登録  Tripo3D にアクセス Googleアカウント、またはメールアドレスでサインアップ  ログイン後、入力方法を選択  テキスト入力 画像アップロード（PNG/JPEG） スケッチや複数画像（精度向上）  3Dモデルを自動生成 アップロードしたデータを元に、AIが自動で3Dモデルを生成します。\nモデルを確認・編集 生成されたモデルは回転・拡大縮小で自由に確認可能。\nリギング（骨組みの自動追加）やトポロジーの最適化もボタン1つで行えます。\nダウンロード or 共有 必要に応じてモデルをGLB/OBJ形式などでダウンロードし、外部ツールや3Dプリンタで活用できます。\nTripo3Dの料金体系（2025年3月時点） Tripo3Dはクレジット制で、生成やテクスチャの高品質化などにクレジットを使用します。無料プランから有料プランまで複数あり、用途に応じて選べます。\n   プラン名 月額料金 クレジット/月 主な機能     Basic 無料 600 限定機能のみ／1タスク／公開生成／コミュニティサポート   Professional $19.9（月額） 3,000 プライベート生成／マルチビュー入力／HDテクスチャ／高速キュー   Advanced $49.9（月額） 8,000 より高速な優先度／アルファ機能／商用利用向け   Premium $139.9（月額） 25,000 最高優先度／大規模利用者向け    ※年間契約にすることで割引あり\n※最新の価格・機能比較はこちら\nChatGPTで生成した画像をTripo3Dで3D化してみた！ 実際に、「ChatGPTで画像を生成 → Tripo3Dで3Dモデル化」という流れを試してみました。\nChatGPTで\u0026quot;某ダムの\u0026quot;の画像を生成 以下はChatGPT（DALL·E機能）で生成した画像です：\n正面\n背面\nこの2枚の画像をTripo3Dに読み込ませて3D化してみます。\nTripo3Dに読み込んで自動で3D化！ 画像をアップロードし、わずか数十秒で3Dモデルが完成します。\nTripo3Dの生成結果画面（v2.5）\n正面\nサイド\n背面\nここから以下の機能も利用できます：\n 自動リギング：ボーンを追加してアニメーション可能に 再トポロジー：より軽量・綺麗なメッシュ構造に変換 HDテクスチャ：クレジットを消費して高品質化 GLB形式でダウンロード：すぐに外部ツールで利用可能  作った3Dモデルはこう使える！   3Dプリント\n→ STLに変換して自宅プリンタや外部サービスで出力\n  ゲームやアプリ開発\n→ UnityやUnreal Engineなどにインポート可能\n  デジタルアート・アニメーション制作\n→ Blenderでさらに加工・アニメーション付けもOK\n  まとめ：AI × 3Dでものづくりがもっと身近に！ Tripo3Dは、3Dモデリングの経験がない人でも簡単に立体モデルを作れる素晴らしいツールです。\nChatGPTなどの生成AIとの組み合わせによって、「アイデア → 画像 → モデル → 実物」までが一貫して体験できます。\nまずは無料プランから、気軽に試してみてはいかがでしょうか？\n注意 最近はこういったAIを利用して他人の制作物の写真を取って3Dプリントして売るということがありますが法的に問題があるため、そういった行為はしないようにしてください。\n","description":"近年、AIを活用したさまざまな創作ツールが登場しています。その中でも注目を集めているのが、画像やテキストから3Dモデルを自動生成できるサービス「Tripo3D」です。","id":4,"section":"tech","tags":["AI"],"title":"AIで3Dモデリングが簡単に！Tripo3Dの始め方をご紹介します","uri":"https://c-a-p-engineer.github.io/tech/2025/03/27/tripo3d-start/"},{"content":"SVGで実現するインタラクティブ処理 Webデザインやインタラクティブなコンテンツ制作において、SVGは非常に柔軟で高機能なツールです。\nピクセルアート風のモンスターが画面いっぱいに動きながら、クリックした位置で爆発エフェクトを発生させるコードを例に、その仕組みと各部分の役割を解説します。\nSVGの仕組みのお陰で、要素ごとのアニメーションやイベントハンドリングがシームレスに実現できる点にも注目してください。\nサンプルコード              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160  \u0026lt;svg width=\u0026#34;300\u0026#34; height=\u0026#34;200\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; onclick=\u0026#34;explosionAt(evt)\u0026#34;\u0026gt; \u0026lt;!-- 外側ラッパー：上下のゆっくりボビングアニメーション --\u0026gt; \u0026lt;g id=\u0026#34;invaderWrapper\u0026#34; cursor=\u0026#34;pointer\u0026#34;\u0026gt; \u0026lt;!-- 内側のインベーダー風エイリアン（ピクセルアート） --\u0026gt; \u0026lt;g id=\u0026#34;invader\u0026#34;\u0026gt; \u0026lt;!-- Row0: パターン [0,1,1,0,0,1,1,0] --\u0026gt; \u0026lt;rect x=\u0026#34;30\u0026#34; y=\u0026#34;20\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;40\u0026#34; y=\u0026#34;20\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;70\u0026#34; y=\u0026#34;20\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;80\u0026#34; y=\u0026#34;20\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;!-- Row1: パターン [1,0,0,1,1,0,0,1] --\u0026gt; \u0026lt;rect x=\u0026#34;20\u0026#34; y=\u0026#34;30\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;50\u0026#34; y=\u0026#34;30\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;60\u0026#34; y=\u0026#34;30\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;90\u0026#34; y=\u0026#34;30\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;!-- Row2: パターン [1,1,1,1,1,1,1,1] --\u0026gt; \u0026lt;rect x=\u0026#34;20\u0026#34; y=\u0026#34;40\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;30\u0026#34; y=\u0026#34;40\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;40\u0026#34; y=\u0026#34;40\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;50\u0026#34; y=\u0026#34;40\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;60\u0026#34; y=\u0026#34;40\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;70\u0026#34; y=\u0026#34;40\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;80\u0026#34; y=\u0026#34;40\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;90\u0026#34; y=\u0026#34;40\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;!-- Row3: パターン [1,0,1,1,1,1,0,1] --\u0026gt; \u0026lt;rect x=\u0026#34;20\u0026#34; y=\u0026#34;50\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;40\u0026#34; y=\u0026#34;50\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;50\u0026#34; y=\u0026#34;50\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;60\u0026#34; y=\u0026#34;50\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;70\u0026#34; y=\u0026#34;50\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;90\u0026#34; y=\u0026#34;50\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;!-- Row4: パターン [1,0,1,1,1,1,0,1] --\u0026gt; \u0026lt;rect x=\u0026#34;20\u0026#34; y=\u0026#34;60\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;40\u0026#34; y=\u0026#34;60\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;50\u0026#34; y=\u0026#34;60\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;60\u0026#34; y=\u0026#34;60\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;70\u0026#34; y=\u0026#34;60\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;90\u0026#34; y=\u0026#34;60\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;!-- Row5: パターン [1,1,1,1,1,1,1,1] --\u0026gt; \u0026lt;rect x=\u0026#34;20\u0026#34; y=\u0026#34;70\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;30\u0026#34; y=\u0026#34;70\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;40\u0026#34; y=\u0026#34;70\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;50\u0026#34; y=\u0026#34;70\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;60\u0026#34; y=\u0026#34;70\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;70\u0026#34; y=\u0026#34;70\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;80\u0026#34; y=\u0026#34;70\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;90\u0026#34; y=\u0026#34;70\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;!-- Row6: パターン [0,1,0,1,1,0,1,0] --\u0026gt; \u0026lt;rect x=\u0026#34;30\u0026#34; y=\u0026#34;80\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;50\u0026#34; y=\u0026#34;80\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;60\u0026#34; y=\u0026#34;80\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;80\u0026#34; y=\u0026#34;80\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;!-- Row7: パターン [0,0,1,0,0,1,0,0] --\u0026gt; \u0026lt;rect x=\u0026#34;40\u0026#34; y=\u0026#34;90\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;rect x=\u0026#34;70\u0026#34; y=\u0026#34;90\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;!-- 横方向移動アニメーション：画面いっぱいに動く --\u0026gt; \u0026lt;animateTransform xlink:href=\u0026#34;#invader\u0026#34; attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0;200,0;0,0\u0026#34; dur=\u0026#34;2s\u0026#34; repeatCount=\u0026#34;indefinite\u0026#34; /\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;!-- 垂直ボビング（上下動）アニメーション：durを3秒に変更 --\u0026gt; \u0026lt;animateTransform xlink:href=\u0026#34;#invaderWrapper\u0026#34; attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0;0,50;0,0\u0026#34; dur=\u0026#34;3s\u0026#34; repeatCount=\u0026#34;indefinite\u0026#34; /\u0026gt; \u0026lt;!-- 爆発エフェクト（各アニメーションのbeginをindefiniteに変更） --\u0026gt; \u0026lt;g id=\u0026#34;explosion\u0026#34; opacity=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;circle cx=\u0026#34;0\u0026#34; cy=\u0026#34;0\u0026#34; r=\u0026#34;2\u0026#34; fill=\u0026#34;orange\u0026#34;\u0026gt; \u0026lt;animateTransform attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0; -20,-20\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;animate attributeName=\u0026#34;opacity\u0026#34; values=\u0026#34;1;0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;/circle\u0026gt; \u0026lt;circle cx=\u0026#34;0\u0026#34; cy=\u0026#34;0\u0026#34; r=\u0026#34;2\u0026#34; fill=\u0026#34;orange\u0026#34;\u0026gt; \u0026lt;animateTransform attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0; 20,-20\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;animate attributeName=\u0026#34;opacity\u0026#34; values=\u0026#34;1;0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;/circle\u0026gt; \u0026lt;circle cx=\u0026#34;0\u0026#34; cy=\u0026#34;0\u0026#34; r=\u0026#34;2\u0026#34; fill=\u0026#34;orange\u0026#34;\u0026gt; \u0026lt;animateTransform attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0; -20,20\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;animate attributeName=\u0026#34;opacity\u0026#34; values=\u0026#34;1;0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;/circle\u0026gt; \u0026lt;circle cx=\u0026#34;0\u0026#34; cy=\u0026#34;0\u0026#34; r=\u0026#34;2\u0026#34; fill=\u0026#34;orange\u0026#34;\u0026gt; \u0026lt;animateTransform attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0; 20,20\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;animate attributeName=\u0026#34;opacity\u0026#34; values=\u0026#34;1;0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;/circle\u0026gt; \u0026lt;circle cx=\u0026#34;0\u0026#34; cy=\u0026#34;0\u0026#34; r=\u0026#34;2\u0026#34; fill=\u0026#34;orange\u0026#34;\u0026gt; \u0026lt;animateTransform attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0; 0,-30\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;animate attributeName=\u0026#34;opacity\u0026#34; values=\u0026#34;1;0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;/circle\u0026gt; \u0026lt;circle cx=\u0026#34;0\u0026#34; cy=\u0026#34;0\u0026#34; r=\u0026#34;2\u0026#34; fill=\u0026#34;orange\u0026#34;\u0026gt; \u0026lt;animateTransform attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0; 0,30\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;animate attributeName=\u0026#34;opacity\u0026#34; values=\u0026#34;1;0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;/circle\u0026gt; \u0026lt;circle cx=\u0026#34;0\u0026#34; cy=\u0026#34;0\u0026#34; r=\u0026#34;2\u0026#34; fill=\u0026#34;orange\u0026#34;\u0026gt; \u0026lt;animateTransform attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0; -30,0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;animate attributeName=\u0026#34;opacity\u0026#34; values=\u0026#34;1;0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;/circle\u0026gt; \u0026lt;circle cx=\u0026#34;0\u0026#34; cy=\u0026#34;0\u0026#34; r=\u0026#34;2\u0026#34; fill=\u0026#34;orange\u0026#34;\u0026gt; \u0026lt;animateTransform attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0; 30,0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;animate attributeName=\u0026#34;opacity\u0026#34; values=\u0026#34;1;0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;/circle\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;!-- クリック時にエイリアンを非表示＆爆発エフェクトを表示 --\u0026gt; \u0026lt;set xlink:href=\u0026#34;#invader\u0026#34; attributeName=\u0026#34;opacity\u0026#34; to=\u0026#34;0\u0026#34; begin=\u0026#34;invaderWrapper.click\u0026#34; /\u0026gt; \u0026lt;set xlink:href=\u0026#34;#explosion\u0026#34; attributeName=\u0026#34;opacity\u0026#34; to=\u0026#34;1\u0026#34; begin=\u0026#34;invaderWrapper.click\u0026#34; /\u0026gt; \u0026lt;!-- 3秒後にエイリアンを復帰し、爆発エフェクトを非表示に --\u0026gt; \u0026lt;set xlink:href=\u0026#34;#invader\u0026#34; attributeName=\u0026#34;opacity\u0026#34; to=\u0026#34;1\u0026#34; begin=\u0026#34;invaderWrapper.click+3s\u0026#34; /\u0026gt; \u0026lt;set xlink:href=\u0026#34;#explosion\u0026#34; attributeName=\u0026#34;opacity\u0026#34; to=\u0026#34;0\u0026#34; begin=\u0026#34;invaderWrapper.click+3s\u0026#34; /\u0026gt; \u0026lt;script type=\u0026#34;application/ecmascript\u0026#34;\u0026gt;\u0026lt;![CDATA[ function explosionAt(evt) { // SVG要素の取得  var svg = evt.currentTarget; // クリック位置をSVG座標に変換  var pt = svg.createSVGPoint(); pt.x = evt.clientX; pt.y = evt.clientY; var svgP = pt.matrixTransform(svg.getScreenCTM().inverse()); // 爆発エフェクトの位置をクリック位置に設定  var explosion = document.getElementById(\u0026#34;explosion\u0026#34;); explosion.setAttribute(\u0026#34;transform\u0026#34;, \u0026#34;translate(\u0026#34; + svgP.x + \u0026#34;,\u0026#34; + svgP.y + \u0026#34;)\u0026#34;); explosion.setAttribute(\u0026#34;opacity\u0026#34;, \u0026#34;1\u0026#34;); // 爆発エフェクト内の各アニメーションを開始  var animations = explosion.querySelectorAll(\u0026#34;animate, animateTransform\u0026#34;); for (var i = 0; i \u0026lt; animations.length; i++) { animations[i].beginElement(); } // インベーダーを非表示にする  var invader = document.getElementById(\u0026#34;invader\u0026#34;); invader.setAttribute(\u0026#34;opacity\u0026#34;, \u0026#34;0\u0026#34;); // 3秒後にインベーダーを復帰し、爆発エフェクトを非表示にする  setTimeout(function(){ invader.setAttribute(\u0026#34;opacity\u0026#34;, \u0026#34;1\u0026#34;); explosion.setAttribute(\u0026#34;opacity\u0026#34;, \u0026#34;0\u0026#34;); }, 3000); } ]]\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/svg\u0026gt;   コード全体の概要 今回のコードは、以下の3つの主要なパートで構成されています。\n  モンスターの描画とアニメーション\n 複数の \u0026lt;rect\u0026gt; 要素でピクセル単位のモンスターを表現。 \u0026lt;animateTransform\u0026gt; により、モンスターが横方向に往復移動するアニメーションを実装。 外側のグループ（id=\u0026quot;invaderWrapper\u0026quot;）で上下のボビング（ゆっくり上下動）を実現しています。    爆発エフェクトの設定\n 複数の \u0026lt;circle\u0026gt; 要素と \u0026lt;animate\u0026gt; / \u0026lt;animateTransform\u0026gt; によるアニメーションで、クリック位置から小さな円が拡散する爆発エフェクトを再現。 爆発エフェクトの各アニメーションは、begin=\u0026quot;indefinite\u0026quot; に設定され、JavaScriptから呼び出して再生されます。    JavaScriptによるクリックイベント処理\n SVG全体にクリックイベント（onclick=\u0026quot;explosionAt(evt)\u0026quot;）を設定し、クリック位置をSVGの座標系に変換。 クリックされた場所に爆発エフェクトグループを移動させ、各アニメーションを開始。 同時に、モンスターを非表示にし、3秒後に復帰させる仕組みも実装されています。    各コード部分の詳細解説 1. モンスターの描画とアニメーション 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;g id=\u0026#34;invaderWrapper\u0026#34; cursor=\u0026#34;pointer\u0026#34;\u0026gt; \u0026lt;!-- 内側のインベーダー風モンスター（ピクセルアート） --\u0026gt; \u0026lt;g id=\u0026#34;invader\u0026#34;\u0026gt; \u0026lt;!-- 複数の \u0026lt;rect\u0026gt; 要素でピクセル単位のデザイン --\u0026gt; \u0026lt;rect x=\u0026#34;30\u0026#34; y=\u0026#34;20\u0026#34; width=\u0026#34;10\u0026#34; height=\u0026#34;10\u0026#34; fill=\u0026#34;lime\u0026#34; /\u0026gt; \u0026lt;!-- 以下、他のピクセル（\u0026lt;rect\u0026gt;）が同様に配置されています --\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;!-- 横方向移動アニメーション：\u0026lt;animateTransform\u0026gt;で実現 --\u0026gt; \u0026lt;animateTransform xlink:href=\u0026#34;#invader\u0026#34; attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0;200,0;0,0\u0026#34; dur=\u0026#34;2s\u0026#34; repeatCount=\u0026#34;indefinite\u0026#34; /\u0026gt; \u0026lt;/g\u0026gt;     描画部分\nモンスターは、8×8のグリッド状に配置された \u0026lt;rect\u0026gt; 要素で作成されています。各 \u0026lt;rect\u0026gt; は1ピクセルを模しており、ピクセルアートならではのレトロな雰囲気を醸し出します。\n  横方向移動のアニメーション\n\u0026lt;animateTransform\u0026gt; 要素により、モンスターは画面内を左右に動くアニメーションを実現。\nvalues=\u0026quot;0,0;200,0;0,0\u0026quot; で、200px分の移動を往復し、dur=\u0026quot;2s\u0026quot; で2秒周期の繰り返し動作となっています。\n  上下のボビング（ゆっくり上下動）\nモンスター全体を囲むグループ（invaderWrapper）に対して、別の \u0026lt;animateTransform\u0026gt; を使い、values=\u0026quot;0,0;0,50;0,0\u0026quot; と dur=\u0026quot;3s\u0026quot; で上下にゆっくりと動くボビング効果を追加しています。\n  2. 爆発エフェクト 1 2 3 4 5 6 7  \u0026lt;g id=\u0026#34;explosion\u0026#34; opacity=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;circle cx=\u0026#34;0\u0026#34; cy=\u0026#34;0\u0026#34; r=\u0026#34;2\u0026#34; fill=\u0026#34;orange\u0026#34;\u0026gt; \u0026lt;animateTransform attributeName=\u0026#34;transform\u0026#34; type=\u0026#34;translate\u0026#34; values=\u0026#34;0,0; -20,-20\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;animate attributeName=\u0026#34;opacity\u0026#34; values=\u0026#34;1;0\u0026#34; dur=\u0026#34;0.6s\u0026#34; begin=\u0026#34;indefinite\u0026#34; fill=\u0026#34;freeze\u0026#34; /\u0026gt; \u0026lt;/circle\u0026gt; \u0026lt;!-- 同様に他の方向へ飛び出す複数の円が定義されています --\u0026gt; \u0026lt;/g\u0026gt;     爆発エフェクトの基本構造\n爆発エフェクトは、クリック位置に表示されるグループとして定義されています。\n各 \u0026lt;circle\u0026gt; は、爆発の「粒子」を表現しており、アニメーションでクリック位置から外側へ移動しながらフェードアウトします。\n  アニメーションの制御\n\u0026lt;animateTransform\u0026gt; や \u0026lt;animate\u0026gt; 要素の begin 属性を \u0026quot;indefinite\u0026quot; に設定しているため、これらはJavaScriptから beginElement() を呼び出すことで再生されます。\n  3. JavaScriptによるクリックイベント処理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;script type=\u0026#34;application/ecmascript\u0026#34;\u0026gt;\u0026lt;![CDATA[ function explosionAt(evt) { // SVG要素とクリック位置の取得  var svg = evt.currentTarget; var pt = svg.createSVGPoint(); pt.x = evt.clientX; pt.y = evt.clientY; var svgP = pt.matrixTransform(svg.getScreenCTM().inverse()); // 爆発エフェクトの位置をクリック位置に設定  var explosion = document.getElementById(\u0026#34;explosion\u0026#34;); explosion.setAttribute(\u0026#34;transform\u0026#34;, \u0026#34;translate(\u0026#34; + svgP.x + \u0026#34;,\u0026#34; + svgP.y + \u0026#34;)\u0026#34;); explosion.setAttribute(\u0026#34;opacity\u0026#34;, \u0026#34;1\u0026#34;); // 爆発エフェクト内の各アニメーションを開始  var animations = explosion.querySelectorAll(\u0026#34;animate, animateTransform\u0026#34;); for (var i = 0; i \u0026lt; animations.length; i++) { animations[i].beginElement(); } // インベーダーを非表示にして、3秒後に復帰  var invader = document.getElementById(\u0026#34;invader\u0026#34;); invader.setAttribute(\u0026#34;opacity\u0026#34;, \u0026#34;0\u0026#34;); setTimeout(function(){ invader.setAttribute(\u0026#34;opacity\u0026#34;, \u0026#34;1\u0026#34;); explosion.setAttribute(\u0026#34;opacity\u0026#34;, \u0026#34;0\u0026#34;); }, 3000); } ]]\u0026gt;\u0026lt;/script\u0026gt;     クリック位置の取得\nSVGが持つ createSVGPoint() と getScreenCTM() を使い、ブラウザの画面上のクリック位置をSVGの座標系に変換します。\nこの仕組みは、SVG独自の座標システムを利用できるため非常に強力です。\n  爆発エフェクトの開始\nクリック位置に合わせて、爆発グループの transform 属性を更新し、各アニメーションを beginElement() で開始。\nその結果、クリックした場所から爆発が発生します。\n  モンスターの非表示・復帰\nクリック時にモンスター（invader）の表示を切り替え、3秒後に元に戻すことで、インタラクティブな演出を実現しています。\n  SVGの仕組みのお陰で実現できるインタラクション SVGは、ベクター形式のグラフィックスをXML形式で記述するため、\n 解像度に依存しない描画が可能で、どんなサイズにも拡大縮小できます。 また、**SMIL（Synchronized Multimedia Integration Language）**に基づいた \u0026lt;animate\u0026gt; や \u0026lt;animateTransform\u0026gt; といったタグを利用することで、コード内にアニメーションを直接埋め込むことができます。 さらに、DOMとして扱えるため、JavaScriptと組み合わせたインタラクティブな操作も可能です。  これらの特徴のお陰で、SVGはブラウザ上で手軽に動的なコンテンツを実現できるのです。\nまとめ 今回紹介したコードは、SVGの持つ柔軟なアニメーション機能とインタラクティブなイベント処理のお陰で、\n「クリックした場所でモンスターが爆発する」演出を実現しています。\nピクセルアート風のインベーダー、横移動と上下のボビング、そしてクリック位置で爆発エフェクトが発生する仕組みは、すべてSVGの強力な機能によって支えられています。\nこの手法を応用すれば、ゲーム風の演出やインタラクティブなWebコンテンツの制作がさらに楽しく、また高度な表現が可能になります。\n","description":"Gemini APIを利用するためには、APIキーが必要です。Google AI StudioでGemini APIキーを取得する手順と、その後の利用方法についてメモします。","id":5,"section":"tech","tags":["JavaScript"],"title":"SVGで実現するインタラクティブ処理","uri":"https://c-a-p-engineer.github.io/tech/2025/03/20/svg-interactive/"},{"content":"【AI】Google Gemini の無料APIキーを取得する方法 Gemini APIを利用するためには、APIキーが必要です。\nGoogle AI StudioでGemini APIキーを取得する手順と、その後の利用方法についてメモします。\nGoogle AI Studio\nGemini APIキーの取得手順 Google AI Studioにアクセス  Google AI Studio にアクセスします。 サイドバーの「Get API Key」を押下 「APIキーを作成」を押下 APIキーが発行される 「Gemini API」プロジェクトが作成される  サンプル GEMINI_API_KEY を発行したAPIキーにしてください。\n1 2 3 4 5 6 7 8 9  curl \u0026#34;https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=GEMINI_API_KEY\u0026#34; \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -X POST \\ -d \u0026#39;{ \u0026#34;contents\u0026#34;: [{ \u0026#34;parts\u0026#34;:[{\u0026#34;text\u0026#34;: \u0026#34;Explain how AI works\u0026#34;}] }] }\u0026#39;   料金 現在は無料で使用可能、作られたGemini APIは支払先が設定されてないはずなので課金されるようになってもおそらく使用不可になるだけです。\nですが課金されたくない場合などはとくに注意してみてください。\nただ該当のプロジェクトに課金アカウント連携して課金APIを使用していたら課金されるかとは思います。\n注意点   APIキーの管理とセキュリティ\nAPIキーは機密情報です。安全に管理し、GitHubなどの公開リポジトリにアップロードしないよう注意してください。\n  利用規約の確認\nGemini APIを利用する前に、必ず最新の利用規約を確認してください。\n  まとめ 本記事では、Gemini APIキーの取得手順と、取得後のAPIキーの使用方法について解説しました。\n手順に沿ってAPIキーを取得し、コード内で適切に利用することで、Gemini APIをさまざまな用途に活用できるようになります。\nぜひ、実際に試してみてください。\n参考資料  Google AI Studio Gemini APIドキュメント  ","description":"Gemini APIを利用するためには、APIキーが必要です。Google AI StudioでGemini APIキーを取得する手順と、その後の利用方法についてメモします。","id":6,"section":"tech","tags":["AI"],"title":"【AI】Google Gemini の無料APIキーを取得する方法","uri":"https://c-a-p-engineer.github.io/tech/2025/03/15/gemini-api-key-get/"},{"content":"【Google Colab】ランタイムを再起動する Google Colab や Jupyter Notebook でカーネルをプログラム的に終了・再起動する方法として利用されるこのメソッドをご紹介します。\ndo_shutdown メソッドの概要  do_shutdown は、IPythonKernel やそのサブクラスに実装されている内部メソッドで、カーネルのシャットダウン処理を行います。 引数に True を渡すと、確認なしで強制的にカーネルを終了し、場合によっては再起動することも可能です。 この仕組みは、特に Google Colab や Jupyter Notebook の「再起動」機能の裏側で利用されており、長時間実行中のプロセスをクリーンに終了するために役立ちます。  内部処理の流れ   インスタンス取得:\n1 2  import IPython app = IPython.Application.instance()   このコードで、シングルトンパターンに基づいた現在の IPython アプリケーションのインスタンスを取得します。\n  カーネルシャットダウン:\n1  app.kernel.do_shutdown(True)   ここで、取得したカーネルオブジェクトの do_shutdown メソッドを呼び出し、引数に True を渡すことで確認なしに強制終了を実施します。\n  使用例（Google Colab におけるカーネル再起動） Google Colab では、ライブラリのアップデートや環境変更後にカーネルを再起動するため、このコードがよく利用されます。\nたとえば、パッケージのインストール後に以下のセルを実行することで、カーネルの再起動が自動化されます。\n1 2 3 4  # カーネル再起動のためのコード import IPython app = IPython.Application.instance() app.kernel.do_shutdown(True)   まとめ このメソッドは、とくにノートブック環境におけるカーネル再起動の自動化など、実用的なシーンで役立ちます。\n参考  shutdown_kernel()  ","description":"Google Colab や Jupyter Notebook でカーネルをプログラム的に終了・再起動する方法として利用されるこのメソッドをご紹介します。","id":7,"section":"tech","tags":["Google Colab","Python"],"title":"【Google Colab】ランタイムを再起動する","uri":"https://c-a-p-engineer.github.io/tech/2025/03/11/colab-kernel-restart-doshutdown/"},{"content":"【Node.js】dependency-cruiser 依存関係を可視化する方法 dependency-cruiserは、JavaScript/TypeScriptプロジェクトのモジュール依存関係を解析・可視化するツールです。\ndependency-cruiserの概要  用途: プロジェクト内のモジュール間依存を解析し、循環依存や不要な依存を検出。 メリット: アーキテクチャの健全性維持、リファクタリングの指標、CI/CDで自動チェックが可能。  インストール手順 Graphvizのインストール GraphvizはDOT形式のグラフをSVG等にレンダリングするために必要です。\n Ubuntu例: 1  sudo apt-get install graphviz     dependency-cruiserのインストール グローバルまたはプロジェクト内にインストール可能。\n グローバルインストール: 1  npm install -g dependency-cruiser    プロジェクト内インストール: 1  npm install --save-dev dependency-cruiser     設定ファイルの作成 初期設定は以下のコマンドで簡単に作成できます。\n1  npx depcruise --init   作成された .dependency-cruiser.js では、doNotFollow オプションで特定ディレクトリ（例：node_modules）の内部解析を防ぎ、解析結果のノイズを抑えます。\n1 2 3  doNotFollow: { path: [\u0026#39;node_modules\u0026#39;, \u0026#39;test\u0026#39;, \u0026#39;.storybooks\u0026#39;, \u0026#39;.yarn\u0026#39;, \u0026#39;__*\u0026#39;, \u0026#39;__*.ts\u0026#39;, \u0026#39;@@*\u0026#39;] },   依存関係グラフの生成 プロジェクト全体のグラフ生成 以下のコマンドでプロジェクトの依存関係をSVG画像に出力します。\n1  npx depcruise ./ --output-type dot | dot -T svg \u0026gt; dependency-graph.svg    解説:  npx depcruise ./：カレントディレクトリの依存関係を解析 --output-type dot：Graphviz形式で出力 dot -T svg：SVG画像へ変換    モノレポ対応（各パッケージごとにグラフ生成） 複数パッケージが存在する場合、各フォルダ毎に以下のコマンドで個別グラフを作成します。\n1  find ./packages -maxdepth 1 -type d -exec bash -c \u0026#39;dir={}; npx depcruise \u0026#34;$dir\u0026#34; --output-type dot | dot -T svg \u0026gt; \u0026#34;dependency-${dir##*/}-graph.svg\u0026#34;\u0026#39; \\;    ポイント: 各パッケージのディレクトリ名がファイル名に反映され、管理しやすい出力結果となります。  ベストプラクティス  解析対象の絞り込み: includeOnlyやexcludeオプションを利用し、ソースコード部分のみ解析することでノイズを減少。 外部依存の制限: doNotFollowを設定して、node_modulesなど不要な内部解析を防止。 CI/CD連携: GitHub Actionsなどに組み込み、依存ルール違反を自動検出することで品質向上につなげる。  参考リンク  dependency-cruiser 公式リポジトリ (GitHub)  ","description":"dependency-cruiserは、JavaScript/TypeScriptプロジェクトのモジュール依存関係を解析・可視化するツールです。","id":8,"section":"tech","tags":["Node.js"],"title":"【Node.js】dependency-cruiser 依存関係を可視化する方法","uri":"https://c-a-p-engineer.github.io/tech/2025/03/05/dependency-cruiser/"},{"content":"【Python】エラー発生時にベル音を鳴らす方法【クロスプラットフォーム対応】 Pythonのエラー処理において、ユーザーに視覚だけでなく音でも通知したい場合があります。この記事では、エラー発生時にベル音を鳴らし、キー入力があればそのベル音を停止する方法を、WindowsとLinux（macOS含む）両方で動作する形で解説します。\n実装のポイント   クロスプラットフォーム対応\nWindowsの場合は msvcrt を、Linux/macOSの場合は select モジュールを使用し、標準入力からのキー入力を非ブロッキングで監視します。\n  ベル音の出力\nprint(\u0026quot;\\a\u0026quot;) を使用してASCIIベル文字を出力。ターミナルやシステム設定によっては音が鳴らない場合があるため、環境の設定も確認しましょう。\n  シンプルな関数化\nベル音を鳴らす処理を関数 beep_until_key() にまとめることで、再利用性の高いコードにしています。\n  コード解説 以下は、エラー発生後に2秒ごとにベル音を鳴らし、キー入力で停止する処理を関数化したサンプルコードです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  import os import time import sys # プラットフォームに応じた入力監視モジュールのインポート if os.name == \u0026#39;nt\u0026#39;: # Windowsの場合 import msvcrt else: # Linux, macOSの場合 import select def beep_until_key(interval=2): \u0026#34;\u0026#34;\u0026#34; キー入力があるまで、指定した間隔でベル音を鳴らし続ける関数。 Args: interval (int, optional): ベル音を鳴らす間隔（秒）。デフォルトは2秒。 \u0026#34;\u0026#34;\u0026#34; print(f\u0026#34;キー入力があるまでベル音を{interval}秒ごとに鳴らします。\u0026#34;) while True: # ASCIIベル文字を出力（ターミナルが対応していれば音が鳴る） print(\u0026#34;\\a\u0026#34;, end=\u0026#39;\u0026#39;, flush=True) time.sleep(interval) if os.name == \u0026#39;nt\u0026#39;: # Windows: msvcrtを利用して非ブロッキングにキー入力をチェック if msvcrt.kbhit(): msvcrt.getch() # 入力されたキーを読み捨て break else: # Linux/macOS: selectを利用してstdinの入力を非ブロッキングで監視 dr, _, _ = select.select([sys.stdin], [], [], 0) if dr: sys.stdin.readline() # 入力があれば読み捨て break # エラー発生時の使用例 try: 1 / 0 # 故意にエラーを発生させる例 except Exception as e: print(\u0026#34;エラー:\u0026#34;, e) beep_until_key(2)   コードのポイント   クロスプラットフォームのキー入力監視\n Windows: msvcrt.kbhit() でキー入力の有無を確認し、入力があれば msvcrt.getch() でそのキー入力を処理します。 Linux/macOS: select.select() を使って sys.stdin の状態を監視し、入力があれば sys.stdin.readline() で受け取ります。    ベル音の出力\nprint(\u0026quot;\\a\u0026quot;, end='', flush=True) により、ターミナルがベル音に対応している場合は音が鳴ります。ベル音が鳴らない場合は、環境設定を見直してください。\n  参考  Python公式ドキュメント - msvcrtモジュール Python公式ドキュメント - selectモジュール Python公式ドキュメント - timeモジュール  ","description":"Pythonのエラー処理において、ユーザーに視覚だけでなく音でも通知したい場合があります。この記事では、エラー発生時にベル音を鳴らし、キー入力があればそのベル音を停止する方法を、WindowsとLinux（macOS含む）両方で動作する形で解説します。","id":9,"section":"tech","tags":["Python"],"title":"【Python】エラー発生時にベル音を鳴らす方法【クロスプラットフォーム対応】","uri":"https://c-a-p-engineer.github.io/tech/2025/03/01/python-beep-on-error/"},{"content":"Windowsユーザの僕がMacを使用するときのメモ 普段Windowsを使用している僕ですが仕事の関係でMacを使うこともあるのでいちいち調べるのが面倒なのでメモ。\nキーボードのレイアウトや各種ショートカット、隠しファイルの扱いなど、いくつかのポイントで戸惑いが生じることがあります。HHBKプロフェッショナルのスイッチ変更、プロファイルインストール、ControlとCommandキーの入れ替え、そしてエンジニア必須の隠しファイル表示の設定方法についてメモです。\nHappy Hacking Keyboard Professional JPのスイッチ変更 僕は Happy Hacking Keyboard Professional JP を使用しているため背面のスイッチ1をONにしてMacモードにしました。\nHappy Hacking Keyboard | 背面スイッチの説明 | PFU\n2. HHBKのドライバインストール Mac特有のキーに合わせるためにHHBKにMac用のドライバを入れましょう。\nMac用ドライバ （HHKB Professionalシリーズ専用）\n3. ControlとCommandの入れ替え MacのCommandキーはほぼContorlキーなので入れ替えます。\nこうすることによって通常のキーボードを使用する際にわざわざ変に割り当てられたCommandキーを押す必要がなくなります。\nMacで修飾キーの動作を変更する\n4. 隠しファイルの表示 エンジニアにとって、隠しファイルの表示は開発環境の設定やトラブルシューティングに欠かせません。\nMacでは、ショートカットキー「command + shift + .」を使うことで、隠しファイルを素早く表示できます。最も手軽なこの方法は、日々の作業で隠しファイルにアクセスする際に非常に便利です。 まとめ WindowsユーザーがMacに移行する際は、環境に合わせたカスタマイズが必要です。HHBKプロフェッショナルのスイッチ変更やプロファイルインストール、ControlとCommandキーの入れ替え、そして隠しファイルの表示といった設定を行うことで、よりスムーズで効率的な作業環境を実現できます。各設定の手順をぜひ試し、ご自身の作業スタイルに最適な環境を整えてください。\n","description":"普段Windowsを使用している僕ですが仕事の関係でMacを使うこともあるのでいちいち調べるのが面倒なのでメモ。","id":10,"section":"tech","tags":["Mac"],"title":"Windowsユーザの僕がMacを使用するときのメモ","uri":"https://c-a-p-engineer.github.io/tech/2025/02/27/windows-to-mac-migration-memo/"},{"content":"【Python】YouTube動画＆音声をダウンロードする方法【yt-dlpを活用】 YouTubeの動画をダウンロードしてオフラインで視聴したい場合、Pythonを使うことで簡単に実現できます。本記事では、「yt-dlp」という強力なツールを活用して、YouTubeの動画や音声をダウンロードする方法を解説します。\n音声のみのダウンロード、字幕付きの動画保存など、さまざまなオプションも紹介します。\n yt-dlp/yt-dlp  yt-dlpの概要とインストール yt-dlpとは？ yt-dlp は youtube-dl の派生版で、より高機能かつ最新のYouTubeの仕様変更にも対応しています。yt-dlp を使うことで、YouTube動画を簡単にダウンロードし、解像度や音質を指定して保存できます。\nインストール方法 1  pip install -U yt-dlp   YouTube動画をダウンロードする基本コード 以下のコードを実行すると、720p以下の動画と最高音質の音声を結合してダウンロードできます。\n動画のダウンロード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  from yt_dlp import YoutubeDL # YouTube動画のURL youtube_url = \u0026#34;https://www.youtube.com/watch?v=oHIhCOl01J0\u0026#34; # ダウンロードオプション options = { \u0026#39;format\u0026#39;: \u0026#39;bestvideo[height\u0026lt;=720]+bestaudio/best\u0026#39;, \u0026#39;merge_output_format\u0026#39;: \u0026#39;mp4\u0026#39;, \u0026#39;outtmpl\u0026#39;: \u0026#39;downloaded_video.mp4\u0026#39; } # ダウンロード実行 with YoutubeDL(options) as ydl: ydl.download([youtube_url])   YouTube音声のみをダウンロードする方法 動画ではなく音声だけを取得したい場合は、以下のように実行します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  from yt_dlp import YoutubeDL # YouTube動画のURL youtube_url = \u0026#34;https://www.youtube.com/watch?v=oHIhCOl01J0\u0026#34; # ダウンロードオプション options = { \u0026#39;format\u0026#39;: \u0026#39;bestaudio/best\u0026#39;, \u0026#39;postprocessors\u0026#39;: [{ \u0026#39;key\u0026#39;: \u0026#39;FFmpegExtractAudio\u0026#39;, \u0026#39;preferredcodec\u0026#39;: \u0026#39;mp3\u0026#39;, \u0026#39;preferredquality\u0026#39;: \u0026#39;192\u0026#39; }], \u0026#39;outtmpl\u0026#39;: \u0026#39;downloaded_audio\u0026#39; } # ダウンロード実行 with YoutubeDL(options) as ydl: ydl.download([youtube_url])   yt-dlpの便利なオプション 解像度を指定してダウンロード たとえば、480pの動画を取得したい場合は、以下のように指定できます。\n1 2 3 4  options = { \u0026#39;format\u0026#39;: \u0026#39;bestvideo[height\u0026lt;=480]+bestaudio/best\u0026#39;, \u0026#39;merge_output_format\u0026#39;: \u0026#39;mp4\u0026#39; }   字幕付きの動画を保存 1 2 3 4 5 6  options = { \u0026#39;writesubtitles\u0026#39;: True, \u0026#39;subtitleslangs\u0026#39;: [\u0026#39;en\u0026#39;], \u0026#39;format\u0026#39;: \u0026#39;bestvideo+bestaudio/best\u0026#39;, \u0026#39;merge_output_format\u0026#39;: \u0026#39;mp4\u0026#39; }   プレイリスト全体をダウンロード 1 2 3 4 5  options = { \u0026#39;format\u0026#39;: \u0026#39;bestvideo+bestaudio/best\u0026#39;, \u0026#39;merge_output_format\u0026#39;: \u0026#39;mp4\u0026#39;, \u0026#39;yesplaylist\u0026#39;: True }   コマンドラインからyt-dlpを使用する方法 Pythonスクリプトを使わず、コマンドラインから yt-dlp を直接実行することもできます。\n動画のダウンロード（720p以下） 1  yt-dlp -f \u0026#34;bestvideo[height\u0026lt;=720]+bestaudio\u0026#34; --merge-output-format mp4 -o \u0026#34;downloaded_video.mp4\u0026#34; URL   音声のみをMP3でダウンロード 1  yt-dlp -f bestaudio -x --audio-format mp3 -o \u0026#34;downloaded_audio.mp3\u0026#34; URL   字幕付きの動画をダウンロード 1  yt-dlp --write-sub --sub-lang en -f \u0026#34;bestvideo+bestaudio\u0026#34; --merge-output-format mp4 -o \u0026#34;downloaded_video.mp4\u0026#34; URL   プレイリスト全体をダウンロード 1  yt-dlp -f \u0026#34;bestvideo+bestaudio\u0026#34; --merge-output-format mp4 --yes-playlist -o \u0026#34;%(title)s.%(ext)s\u0026#34; PLAYLIST_URL   注意点と規約遵守 YouTubeの動画をダウンロードすることは、著作権の観点から慎重に行う必要があります。YouTubeの利用規約では、著作権者の許可なしに動画をダウンロードすることを禁止しているため、個人的な利用目的のみで使用し、商用利用や不正なダウンロードは避けてください。\nまとめ yt-dlp を活用すれば、Pythonを使って簡単にYouTube動画や音声をダウンロードできます。Google Colabやローカル環境での利用方法、音声のみのダウンロード、字幕の取得など、さまざまなオプションを活用して目的に合った方法を選びましょう。\n参考  yt-dlp/yt-dlp  ","description":"YouTubeの動画をダウンロードしてオフラインで視聴したい場合、Pythonを使うことで簡単に実現できます。","id":11,"section":"tech","tags":["Python"],"title":"【Python】YouTube動画＆音声をダウンロードする方法【yt-dlpを活用】","uri":"https://c-a-p-engineer.github.io/tech/2025/02/07/python-yt-dlp/"},{"content":"【Github】SSHでの複数リポジトリ対応方法 GitHubなどのサービスで、用途やアカウントごとに異なるSSHキーを使い分ける方法をご紹介します。\n既存のSSHキーと別に新たなキーを作成し、~/.ssh/config を用いて複数リポジトリやアカウントに対応する設定手順を詳しく解説します。\n新しいSSHキーの生成 既存のキーと混同しないよう、用途ごとに別のSSHキーを作成します。たとえば、仕事用アカウント専用のキーを生成する場合は、以下のコマンドを実行します。\n1  ssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; -f ~/.ssh/github-work    -t ed25519: 安全性の高いED25519アルゴリズムを使用 -C \u0026ldquo;your_email@example.com\u0026rdquo;: キーの識別用コメント -f ~/.ssh/github-work: キーを保存するファイル名（既存のキーと重複しないように）  SSHエージェントへのキー追加 生成した新しいSSHキーを、SSHエージェントに登録しておくと、以降の接続時に毎回パスフレーズを入力する手間が省けます。\n1 2  eval \u0026#34;$(ssh-agent -s)\u0026#34; ssh-add ~/.ssh/github-work   GitHubアカウントへの公開鍵登録 生成した公開鍵（~/.ssh/github-work.pub）を対象のGitHubアカウントに登録します。\nGitHubの「SSH and GPG keys」ページにアクセスし、「New SSH key」からキーを追加してください。\nSSH設定ファイルの編集 複数のSSHキーを使い分けるため、~/.ssh/config ファイルにホストごとの設定を記述します。以下はサンプル設定です。\n# 個人用GitHubアカウント（既存のキー） Host github.com HostName github.com User git IdentityFile ~/.ssh/id_ed25519 # 仕事用GitHubアカウント（新しく生成したキー） Host github-work HostName github.com User git IdentityFile ~/.ssh/github-work  Host: 任意のエイリアス名。ここでは「github-work」として、仕事用の接続先を指定します。 HostName: 実際のサーバ名（GitHubの場合は「github.com」）。 User: 接続時に使用するユーザ（GitHubでは「git」）。 IdentityFile: 使用する秘密鍵のパスを指定。  この設定により、仕事用リポジトリをクローンする際は、以下のようにエイリアスを利用します。\n1  git clone git@github-work:work-username/repository.git   SSHクライアントは「github-work」の設定を参照し、指定された秘密鍵（~/.ssh/github-work）を使用して接続を行います。\nまとめ  用途ごとに新しいSSHキーを生成\nコマンドで別のファイル名を指定し、安全に運用。 SSHエージェントに追加\nキーの自動読み込みで作業効率アップ。 対象GitHubアカウントに公開鍵を登録\n各アカウントごとに適切な公開鍵を追加。 ~/.ssh/configでエイリアス設定\nリポジトリのクローン時にエイリアスを使い分け、複数アカウントの管理を簡単に。  これらの手順により、同一マシン上で複数のGitHubアカウントや用途に合わせたSSH接続をスムーズに運用できます。\n参考URL  GitHub公式ドキュメント - SSHキーの生成と登録 GitHub公式ドキュメント - SSHキーの追加  ","description":"GitHubなどのサービスで、用途やアカウントごとに異なるSSHキーを使い分ける方法をご紹介します。","id":12,"section":"tech","tags":["GitHub"],"title":"【Github】SSHでの複数リポジトリ対応方法","uri":"https://c-a-p-engineer.github.io/tech/2025/02/19/github-ssh-multiple-repos-setup/"},{"content":"【Google Colab】 上システム・ベンチマークを比較してみた Google Colab を活用して、Python を使ったシステム情報の取得や CPU / GPU のベンチマークを行いました。今回は「ローカルランタイム」、「CPU 専用環境」、「GPU 専用環境」、「TPU 環境」といった各環境の詳細情報と実行時間を比較し、その結果をまとめています。\nPython コード例 以下のコードは、システム情報（OS、CPU、メモリ、GPU）を取得し、CPU と GPU の行列積ベンチマークを実施するものです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86  import platform import psutil import tensorflow as tf import numpy as np import time import subprocess def get_size(bytes, suffix=\u0026#34;B\u0026#34;): \u0026#34;\u0026#34;\u0026#34;バイト数を適切な単位に変換する関数\u0026#34;\u0026#34;\u0026#34; factor = 1024 for unit in [\u0026#34;\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;M\u0026#34;, \u0026#34;G\u0026#34;, \u0026#34;T\u0026#34;, \u0026#34;P\u0026#34;]: if bytes \u0026lt; factor: return f\u0026#34;{bytes:.2f}{unit}{suffix}\u0026#34; bytes /= factor # --- OS 情報 --- print(\u0026#34;========== OS 情報 ==========\u0026#34;) uname = platform.uname() print(f\u0026#34;System : {uname.system}\u0026#34;) print(f\u0026#34;Node Name : {uname.node}\u0026#34;) print(f\u0026#34;Release : {uname.release}\u0026#34;) print(f\u0026#34;Version : {uname.version}\u0026#34;) print(f\u0026#34;Machine : {uname.machine}\u0026#34;) print(f\u0026#34;Processor : {uname.processor}\\n\u0026#34;) # --- CPU 情報 --- print(\u0026#34;========== CPU 情報 ==========\u0026#34;) print(f\u0026#34;Physical cores : {psutil.cpu_count(logical=False)}\u0026#34;) print(f\u0026#34;Total cores : {psutil.cpu_count(logical=True)}\u0026#34;) cpufreq = psutil.cpu_freq() print(f\u0026#34;Current Frequency: {cpufreq.current:.2f} Mhz\u0026#34;) print(\u0026#34;CPU Usage Per Core:\u0026#34;) for i, percentage in enumerate(psutil.cpu_percent(percpu=True, interval=1)): print(f\u0026#34; Core {i}: {percentage}%\u0026#34;) print(f\u0026#34;Total CPU Usage: {psutil.cpu_percent()}%\\n\u0026#34;) # --- Memory 情報 --- print(\u0026#34;========== Memory 情報 ==========\u0026#34;) svmem = psutil.virtual_memory() print(f\u0026#34;Total : {get_size(svmem.total)}\u0026#34;) print(f\u0026#34;Available : {get_size(svmem.available)}\u0026#34;) print(f\u0026#34;Used : {get_size(svmem.used)}\u0026#34;) print(f\u0026#34;Percentage: {svmem.percent}%\\n\u0026#34;) # --- GPU 情報 (nvidia-smi を使用) --- print(\u0026#34;========== GPU 情報 ==========\u0026#34;) try: gpu_output = subprocess.check_output( [\u0026#34;nvidia-smi\u0026#34;, \u0026#34;--query-gpu=name,driver_version,memory.total,memory.used,memory.free,temperature.gpu,utilization.gpu\u0026#34;, \u0026#34;--format=csv,noheader\u0026#34;], universal_newlines=True ) print(gpu_output) except Exception as e: print(\u0026#34;GPU 情報の取得に失敗しました:\u0026#34;, e) # --- CPU ベンチマーク (NumPy 行列積) --- def benchmark_cpu(): print(\u0026#34;----- CPU ベンチマーク (NumPy 行列積) -----\u0026#34;) A = np.random.rand(1000, 1000) B = np.random.rand(1000, 1000) start = time.time() _ = np.dot(A, B) end = time.time() print(f\u0026#34;実行時間: {end - start:.4f} seconds\\n\u0026#34;) # --- GPU ベンチマーク (TensorFlow 行列積) --- def benchmark_gpu(): print(\u0026#34;----- GPU ベンチマーク (TensorFlow 行列積) -----\u0026#34;) gpus_tf = tf.config.list_physical_devices(\u0026#39;GPU\u0026#39;) if not gpus_tf: print(\u0026#34;GPU が検出されませんでした。\u0026#34;) return # ランダムな行列の作成 A = tf.random.normal([1000, 1000]) B = tf.random.normal([1000, 1000]) # ウォームアップ _ = tf.matmul(A, B) start = time.time() C = tf.matmul(A, B) _ = C.numpy() # 計算完了を待つ end = time.time() print(f\u0026#34;実行時間: {end - start:.4f} seconds\\n\u0026#34;) benchmark_cpu() benchmark_gpu()   結果 上記のコードのCPUでの実行結果は以下のようになります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  ========== OS 情報 ========== System : Linux Node Name : 07de74ea16c1 Release : 6.1.85+ Version : #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024 Machine : x86_64 Processor : x86_64 ========== CPU 情報 ========== Physical cores : 1 Total cores : 2 Max Frequency : 0.00 Mhz Min Frequency : 0.00 Mhz Current Frequency: 2200.21 Mhz CPU Usage Per Core: Core 0: 30.3% Core 1: 16.0% Total CPU Usage: 19.9% ========== Memory 情報 ========== Total : 12.67GB Available : 10.93GB Used : 1.44GB Percentage: 13.8% ========== GPU 情報 ========== GPU 情報の取得に失敗しました: [Errno 2] No such file or directory: \u0026#39;nvidia-smi\u0026#39; ----- CPU ベンチマーク (NumPy 行列積) ----- 実行時間: 0.1201 seconds ----- GPU ベンチマーク (TensorFlow 行列積) ----- GPU が検出されませんでした。   各環境の比較結果 以下の表は、ローカルランタイム、CPU 専用、GPU 専用、TPU 環境のシステム情報とベンチマーク結果の比較です。\n自分のマシンが思った以上に貧弱でショックです…\n   項目 ローカルランタイム、CPU CPU 専用環境 GPU 専用環境 TPU 環境     OS 情報 Linux\nWSL2: 5.15.167.4-microsoft-standard-WSL2\n#1 SMP Tue Nov 5 00:21:55 UTC 2024 Linux\n6.1.85+\n#1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024 Linux\n6.1.85+\n#1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024 Linux\n6.1.85+\n#1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024   CPU 情報 6 physical / 12 logical\nCurrent Frequency: 1608.00 Mhz\nTotal Usage: 4.7% 1 physical / 2 logical\nCurrent Frequency: 2200.21 Mhz\nTotal Usage: 19.9% 1 physical / 2 logical\nCurrent Frequency: 2000.11 Mhz\nTotal Usage: 81.9% 48 physical / 96 logical\nCurrent Frequency: 2000.21 Mhz\nTotal Usage: 1.6%   Memory 情報 15.62GB total\n12.02GB available\n3.14GB used (23.1%) 12.67GB total\n10.93GB available\n1.44GB used (13.8%) 12.67GB total\n11.32GB available\n1.05GB used (10.7%) 334.56GB total\n329.65GB available\n2.73GB used (1.5%)   GPU 情報 NVIDIA GeForce GTX 1650 with Max‑Q Design\nDriver: 551.86\n4096 MiB total, 577 MiB used, 3362 MiB free\nTemp: 58°C, 23% utilization GPU 情報取得失敗（nvidia-smi が存在しない） Tesla T4\nDriver: 550.54.15\n15360 MiB total, 0 MiB used, 15095 MiB free\nTemp: 48°C, 0% utilization GPU 情報取得失敗（nvidia-smi が存在しない）   CPU ベンチマーク 0.1532 seconds 0.1201 seconds 0.1401 seconds 0.0067 seconds   GPU ベンチマーク 0.0740 seconds GPU 非検出 0.0203 seconds GPU 非検出    まとめ 今回の実験では、Google Colab 上で各種環境のシステム情報やベンチマーク結果を Python を使って取得しました。\n ローカルランタイム では GPU 情報が正しく取得され、CPU・GPU 両方のベンチマーク結果が得られました。 CPU 専用環境 では GPU 情報が取得できず、GPU ベンチマークは実施されませんでした。 GPU 専用環境 では Tesla T4 により高速な GPU ベンチマーク結果が得られました。 TPU 環境 は CPU ベンチマークのみとなり、GPU 情報の取得はできませんでした。  各環境ごとに使用状況や性能が大きく異なるため、用途に合わせた環境選択が重要です。\n","description":"Google Colab を活用して、Python を使ったシステム情報の取得や CPU / GPU のベンチマークを行いました。","id":13,"section":"tech","tags":["Google Colab","Python"],"title":"【Google Colab】 上システム・ベンチマークを比較してみた","uri":"https://c-a-p-engineer.github.io/tech/2025/02/19/python-colab-benchmark-comparison/"},{"content":"【Google Colab】ファイルをダウンロードする方法 今回は、Google Colab上でファイルを作成し、ダウンロードする方法をご紹介します。コードがシンプルなので、データ生成後のファイル取得がとっても簡単。\n実装方法 下記のコードをColabのセルにそのまま貼り付けて実行するだけでOKです。\nこのコードは、まずsample.txtというテキストファイルを作成し、その後すぐにダウンロードを開始します。\n1 2 3 4 5 6 7  from google.colab import files # ファイルの作成とダウンロードを同時に実行 with open(\u0026#39;sample.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: f.write(\u0026#39;Hello, this is a sample file from Google Colab!\u0026#39;) files.download(\u0026#39;sample.txt\u0026#39;)    1ステップで実行: ファイル作成とダウンロード処理を一連の流れで実行。作業がとても効率的です！ 公式ドキュメント: 詳細はGoogle ColabのI/Oノートブックでチェックできます。  ","description":"今回は、Google Colab上でファイルを作成し、ダウンロードする方法をご紹介します。コードがシンプルなので、データ生成後のファイル取得がとっても簡単。","id":14,"section":"tech","tags":["Google Colab","Python"],"title":"【Google Colab】ファイルをダウンロードする方法","uri":"https://c-a-p-engineer.github.io/tech/2025/02/16/google-colab-file-download/"},{"content":"【Google Colab】NEUTRINOを実行する方法 NEUTRINOは、楽譜データ（MusicXML）を基に音声を合成する技術です。今回はGoogle Colab上でNEUTRINOをセットアップし、変換処理から音声出力の確認までの手順を解説します。\n NEUTRINO公式サイト  この記事を読めばわかること：\n Google DriveからNEUTRINOのセットアップ MusicXMLから音声合成までの流れ Google Colabでの音声出力の確認方法  上から順次実行していけば歌声ができます。\nNEUTRINOのセットアップ まずは、必要なZIPファイルをGoogle Driveから取得し、Colabの作業ディレクトリ（/content/）に解凍します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  # @title NEUTRINOセットアップ（GoogleDriveバージョン） # @markdown ダウンロードサイト:https://studio-neutrino.com/535/\u0026lt;br\u0026gt; import gdown import zipfile import os # @markdown GoogleDriveのファイルIDを入れてください。 file_id = \u0026#34;1Zx_uFxpIzIuSmO_1lYXX4_NEmvSbO5FI\u0026#34; #@param {type:\u0026#34;string\u0026#34;} # Google Driveからファイルをダウンロード file_path = gdown.download(f\u0026#34;https://drive.google.com/uc?id={file_id}\u0026#34;, quiet=False) print(f\u0026#34;ダウンロードしたファイル: {file_path}\u0026#34;) # ZIPファイルを解凍 extract_path = \u0026#34;/content/\u0026#34; if zipfile.is_zipfile(file_path): with zipfile.ZipFile(file_path, \u0026#39;r\u0026#39;) as zip_ref: zip_ref.extractall(extract_path) print(f\u0026#34;ファイルを \u0026#39;{extract_path}\u0026#39; に解凍しました。\u0026#34;) else: print(\u0026#34;ダウンロードしたファイルはZIP形式ではありません。\u0026#34;) # 解凍したファイルに移動 !cd /content/NEUTRINO # 実行権限を付与 !find . -type f -exec chmod 755 {} \\;   ポイント解説:\n gdown を使用してGoogle Driveからファイルをダウンロード。 ZIP形式であることを確認後、解凍。 chmod 755 を適用し、全ファイルに実行権限を付与。  NEUTRINOの変換パイプラインを実行 次に、MusicXMLから音声を生成するための一連の処理を実行します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54  # @title NEWTRINO変換スタート # Run All process %%bash # プロジェクト設定 BASENAME=sample1 # 拡張子なしファイル名 NumThreads=4 InferenceMode=4 # musicXML_to_label の設定 SUFFIX=musicxml # NEUTRINO 設定 ModelDir=MERROW StyleShift=0 # NSF 設定 PitchShiftNsf=0 # WORLD 設定 PitchShiftWorld=0 FormantShift=1.0 SmoothPitch=0.0 SmoothFormant=0.0 EnhanceBreathiness=0.0 # 推論モードに応じたモデル選択 if [ ${InferenceMode} -eq 4 ]; then NsfModel=va SamplingFreq=48 elif [ ${InferenceMode} -eq 3 ]; then NsfModel=vs SamplingFreq=48 elif [ ${InferenceMode} -eq 2 ]; then NsfModel=ve SamplingFreq=24 fi # ライブラリのパスを設定 export LD_LIBRARY_PATH=$PWD/bin:$PWD/NSF/bin:$LD_LIBRARY_PATH echo \u0026#34;date +\u0026#34;%M:%S.%2N\u0026#34; : start MusicXMLtoLabel\u0026#34; ./bin/musicXMLtoLabel score/musicxml/${BASENAME}.${SUFFIX} score/label/full/${BASENAME}.lab score/label/mono/${BASENAME}.lab echo \u0026#34;date +\u0026#34;%M:%S.%2N\u0026#34; : start NEUTRINO\u0026#34; ./bin/NEUTRINO score/label/full/${BASENAME}.lab score/label/timing/${BASENAME}.lab ./output/${BASENAME}.f0 ./output/${BASENAME}.melspec ./model/${ModelDir}/ -w ./output/${BASENAME}.mgc ./output/${BASENAME}.bap -n 1 -o ${NumThreads} -k ${StyleShift} -d ${InferenceMode} -g 0 -t echo \u0026#34;date +\u0026#34;%M:%S.%2N\u0026#34; : start NSF\u0026#34; ./bin/NSF output/${BASENAME}.f0 output/${BASENAME}.melspec ./model/${ModelDir}/${NsfModel}.bin output/${BASENAME}.wav -l score/label/timing/${BASENAME}.lab -n 1 -p ${NumThreads} -s ${SamplingFreq} -f ${PitchShiftNsf} -g 0 -t echo \u0026#34;date +\u0026#34;%M:%S.%2N\u0026#34; : start WORLD\u0026#34; ./bin/WORLD output/${BASENAME}.f0 output/${BASENAME}.mgc output/${BASENAME}.bap output/${BASENAME}_world.wav -f ${PitchShiftWorld} -m ${FormantShift} -p ${SmoothPitch} -c ${SmoothFormant} -b ${EnhanceBreathiness} -n ${NumThreads} -t echo \u0026#34;date +\u0026#34;%M:%S.%2N\u0026#34; : END\u0026#34;   ポイント解説:\n musicXMLtoLabel によりMusicXMLからラベルデータを生成。 NEUTRINO を用いて音響パラメータ（F0、メルスペクトログラムなど）を生成。 NSF で音声波形を生成。 WORLD でピッチ・フォルマントの調整。  音声の確認 最後に、Colab上で生成された音声を確認します。\n1 2 3 4 5 6 7  from IPython.display import Audio, display print(\u0026#34;NSFで生成された音声:\u0026#34;) display(Audio(\u0026#34;/content/NEUTRINO/output/sample1.wav\u0026#34;)) print(\u0026#34;WORLDで生成された音声:\u0026#34;) display(Audio(\u0026#34;/content/NEUTRINO/output/sample1_world.wav\u0026#34;))   ポイント解説:\n Audio クラスを使い、ブラウザ上で直接音声を再生。 NSFとWORLDの異なる音声合成結果を比較可能。  まとめ Google Colab上でNEUTRINOをセットアップし、音声合成までの手順を紹介しました。\n今回の流れをおさらい：\n セットアップ：Google Driveからファイルを取得し、環境を整備。 変換パイプラインの実行：MusicXMLをラベル化し、NEUTRINO・NSF・WORLDを用いて音声生成。 音声の確認：Colab上で生成された音声を試聴。  この手順を活用し、オリジナルの歌声合成プロジェクトを楽しんでください！\n参考  NEUTRINO公式サイト  ","description":"NEUTRINOは、楽譜データ（MusicXML）を基に音声を合成する技術です。今回はGoogle Colab上でNEUTRINOをセットアップし、変換処理から音声出力の確認までの手順を解説します。","id":15,"section":"tech","tags":["Google Colab","Python","音声合成"],"title":"【Google Colab】NEUTRINOを実行する方法","uri":"https://c-a-p-engineer.github.io/tech/2025/02/07/google-colab-newtrino/"},{"content":"【Docker】WSLでDockerが壊れた？ docker-desktop Uninstalling のエラー原因と解決策 Windows Updateを行ったらDockerがドッカーンしたので対処方法まとめ\nエラーの概要 Docker Desktop を WSL2 で利用していると、Windows Updateを行ったら、以下のようなエラーが発生することがあります。\n1  docker-desktop Uninstalling 2   wsl --list --verbose コマンドを実行すると、docker-desktop の状態が \u0026ldquo;Uninstalling\u0026rdquo;（アンインストール中） となり、Docker が起動しなくなる現象です。\nこのエラーの影響として、\n docker ps や docker run などのコマンドが動作しない Docker Desktop が起動しない WSL の docker-desktop ディストリビューションが削除できない  といった問題が発生します。\nエラー発生の原因 この現象は主に以下の理由で発生します。\nDocker Desktop のアップデートやアンインストールが失敗した Docker Desktop のアップデートが途中で止まる、またはアンインストールプロセスが失敗すると、docker-desktop が「アンインストール中」の状態のまま残ってしまうことがあります。\nWSL の環境が破損している WSL のアップデートや設定の不整合が原因で、Docker の WSL インテグレーションが正しく動作しなくなる場合があります。\nWindows Update の影響 Windows Update による WSL2 カーネルの変更が原因で、Docker が正常に動作しなくなることもあります。\n解決策 以下の手順を順番に試して僕の環境は治りました。\nWSL のシャットダウン まず、WSL を完全にシャットダウンしてみましょう。\n1  wsl --shutdown   その後、Docker Desktop を再起動し、正常に動作するか確認してください。\ndocker-desktop を手動で削除 WSL の docker-desktop がアンインストールに失敗している場合、手動で削除します。\nPowerShell（管理者権限）で実行:\n1  wsl --unregister docker-desktop   再度、WSL の状態を確認：\n1  wsl --list --verbose   docker-desktop が消えていることを確認してください。\nこれでDocker Desktopを再起動すれば起動するはずです。\n","description":"Windows Updateを行ったらDockerがドッカーンしたので対処方法まとめ","id":16,"section":"tech","tags":["Docker"],"title":"【Docker】WSLでDockerが壊れた？ docker-desktop Uninstalling のエラー原因と解決策","uri":"https://c-a-p-engineer.github.io/tech/2025/01/30/fix-docker-desktop-wsl-uninstalling-error/"},{"content":"【Google Colab】AivisSpeech Engineで音声合成をする！ Google Colab 上で AivisSpeech Engineを手軽に試すためのサンプルコードをまとめました。\nAivisSpeech Engine とは AivisSpeech Engine（は、オープンソースとして開発されている音声合成エンジンの一種です。GitHub 上で公開されており、リポジトリからソースコードおよびバイナリを取得できます。複数の話者スタイル（スピーカー ID）をサポートしているほか、エンジン起動後はローカルホストの REST API（http://127.0.0.1:10101/）を通じて音声合成が可能です。\n公式の GitHub リポジトリでは、セットアップ方法の詳細や OS 別の導入手順について解説されていますので、興味がある方は下記リンクをご参照ください。\n AivisSpeech-Engine GitHub レポジトリ  エンジンのビルド済みバイナリは、Releases タブにて .7z 形式で公開されています。CPU 環境と GPU 環境の両方で動作しますが、GPU が使用できる環境であれば、エンジンを起動する前に別途「CUDA」や「cuDNN」などのライブラリを整える必要があります。\nGoogle Colab で試すためのサンプルコード 以下に示すスクリプトは、Google Colab 環境で AivisSpeech Engine を動作させるためのものです。実行すると、次のことが自動的に行われます。\n  AivisSpeech Engine バイナリのダウンロード \u0026amp; 解凍\n指定したバージョン（ENGINE_VERSION）に合わせて .7z.001 ファイルをダウンロードし、7zip で解凍します。\n  GPU が使用可能かどうかの判定\nGPU が使用可能ならば、NVIDIA の cuDNN 9.5.1 をインストールし、GPU 対応でエンジンを起動します。\nもし GPU が見つからなければ、CPU モードでエンジンを起動します。\n  スピーカー情報の取得\nエンジン起動直後は API が立ち上がるまで時間がかかることがあるため、複数回リトライしながら GET /speakers でスピーカーリストを取得します。\n  音声合成（テキスト→音声ファイル生成）\nPOST /audio_query および POST /synthesis エンドポイントにテキストやスタイル ID を渡して、音声ファイル（WAV）を生成します。\n  コード全体を Colab に貼り付けて、「セルを実行」するだけで動作します。各種パラメーター（音声の速度や音量、使用するスタイル ID など）を調整すれば、柔軟に音声を合成できます。\nサンプルコード全体 CPU/GPU どちらにも対応するように記載しています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  # @title 設定 # @markdown [AivisSpeech ENGINE リリースページ](https://github.com/Aivis-Project/AivisSpeech-Engine/releases/)\u0026lt;br\u0026gt; # @markdown http://127.0.0.1:10101/docs import os import tensorflow as tf import time os.environ[\u0026#39;ENGINE_VERSION\u0026#39;] = \u0026#34;1.0.0\u0026#34; # @param {type:\u0026#34;string\u0026#34;} !wget \u0026#34;https://github.com/Aivis-Project/AivisSpeech-Engine/releases/download/${ENGINE_VERSION}/AivisSpeech-Engine-Linux-x64-${ENGINE_VERSION}.7z.001\u0026#34; !7za x -y AivisSpeech-Engine-Linux-x64-${ENGINE_VERSION}.7z.001 if tf.test.gpu_device_name(): # GPU print(\u0026#34;GPU!!\u0026#34;) # https://github.com/Aivis-Project/AivisSpeech-Engine?tab=readme-ov-file#linux # cudnn9をインストールする print(\u0026#34;cudnn9 install!!\u0026#34;) !wget https://developer.download.nvidia.com/compute/cudnn/9.5.1/local_installers/cudnn-local-repo-ubuntu2004-9.5.1_1.0-1_amd64.deb !sudo dpkg -i cudnn-local-repo-ubuntu2004-9.5.1_1.0-1_amd64.deb !sudo cp /var/cudnn-local-repo-ubuntu2004-9.5.1/cudnn-*-keyring.gpg /usr/share/keyrings/ !sudo apt-get update !sudo apt-get -y install cudnn !./Linux-x64/run --use_gpu \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp; else: # CPU print(\u0026#34;CPU!!\u0026#34;) !./Linux-x64/run \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  # @title スピーカー一覧（起動待ち対策） import requests import json import time # APIエンドポイント url = \u0026#34;http://127.0.0.1:10101/speakers\u0026#34; # 最大リトライ回数と待機時間 max_retries = 10 wait_time = 10 # 秒 # リトライ処理 for attempt in range(1, max_retries + 1): try: response = requests.get(url, timeout=5) # タイムアウトを設定 response.raise_for_status() # HTTPエラーがあれば例外を発生させる # スピーカー情報を取得できた場合 speakers = response.json() print(json.dumps(speakers, indent=4, ensure_ascii=False)) break except requests.exceptions.ConnectionError: print(f\u0026#34;Attempt {attempt}/{max_retries}: Connection refused, retrying in {wait_time} seconds...\u0026#34;) except requests.exceptions.Timeout: print(f\u0026#34;Attempt {attempt}/{max_retries}: Request timed out, retrying in {wait_time} seconds...\u0026#34;) except requests.exceptions.HTTPError as e: print(f\u0026#34;Attempt {attempt}/{max_retries}: HTTP Error {e}, retrying in {wait_time} seconds...\u0026#34;) # 最大リトライ回数に達するまで待機 if attempt \u0026lt; max_retries: time.sleep(wait_time) else: print(\u0026#34;Failed to retrieve speakers after multiple attempts. Check if the engine is running.\u0026#34;)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85  # @title 音声生成 import requests import json # APIエンドポイント BASE_URL = \u0026#34;http://127.0.0.1:10101\u0026#34; def update_query_json(file_path, updates): \u0026#34;\u0026#34;\u0026#34; query.jsonファイルを更新する関数 Parameters: file_path (str): query.jsonのパス updates (dict): 更新するキーとその値の辞書 Returns: None \u0026#34;\u0026#34;\u0026#34; with open(file_path, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: data = json.load(file) for key, value in updates.items(): if key in data: data[key] = value else: print(f\u0026#34;Warning: \u0026#39;{key}\u0026#39; is not found in the JSON data.\u0026#34;) with open(file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: json.dump(data, file, ensure_ascii=False, indent=4) def synthesize_speech(text, style_id, output_wav=\u0026#34;audio.wav\u0026#34;): \u0026#34;\u0026#34;\u0026#34; テキストを音声に変換し、音声ファイルを保存する関数 Parameters: text (str): 音声に変換するテキスト style_id (int): 使用するスピーカーのID output_wav (str): 出力する音声ファイルのパス Returns: str: 生成された音声ファイルのパス \u0026#34;\u0026#34;\u0026#34; # テキストファイルに書き込み text = text.lower() with open(\u0026#34;text.txt\u0026#34;, \u0026#34;w\u0026#34;) as file: file.write(text) # 音声クエリを取得 query_response = requests.post( f\u0026#34;{BASE_URL}/audio_query?speaker={style_id}\u0026#34;, params={\u0026#34;text\u0026#34;: text} ) # クエリをJSON形式で保存 with open(\u0026#34;query.json\u0026#34;, \u0026#34;w\u0026#34;) as file: file.write(query_response.text) # スピード設定などクエリの値を更新 speed = 0.9 # @param {\u0026#34;type\u0026#34;:\u0026#34;number\u0026#34;,\u0026#34;placeholder\u0026#34;:\u0026#34;速度数値\u0026#34;} updates = { \u0026#34;speedScale\u0026#34;: speed, \u0026#34;volumeScale\u0026#34;: 1 # 全体の音量 } update_query_json(\u0026#34;query.json\u0026#34;, updates) # 音声合成を実行し、音声ファイルを保存 with open(\u0026#34;query.json\u0026#34;, \u0026#34;r\u0026#34;) as file: synthesis_response = requests.post( f\u0026#34;{BASE_URL}/synthesis?speaker={style_id}\u0026#34;, headers={\u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;}, data=file.read() ) with open(output_wav, \u0026#34;wb\u0026#34;) as file: file.write(synthesis_response.content) return output_wav # STYLE_IDの設定（適宜変更） style_id = \u0026#34;888753762\u0026#34; # @param {\u0026#34;type\u0026#34;:\u0026#34;string\u0026#34;,\u0026#34;placeholder\u0026#34;:\u0026#34;スタイルID\u0026#34;} text = \u0026#34;世間ではビーンだのゴーンだのの話題で騒がしいが、ワイはこれら二つのワードには共通点があると思う。それは頭に「股間の」とつけて意味が通じるということだ。 股間がビーン、股間がゴーン。ちなワイの股間はゾーン。\u0026#34; synthesize_speech(text=text, style_id=style_id, output_wav=\u0026#34;audio.wav\u0026#34;) from IPython.display import Audio Audio(\u0026#34;audio.wav\u0026#34;, autoplay=True)   サンプル音声 サンプルとして作った音声です。\n 参考  AivisSpeech-Engine GitHub レポジトリ  ","description":"Google Colab 上で AivisSpeech Engineを手軽に試すためのサンプルコードをまとめました。","id":17,"section":"tech","tags":["Google Colab","Python","音声合成"],"title":"【Google Colab】AivisSpeech Engineで音声合成をする！","uri":"https://c-a-p-engineer.github.io/tech/2025/01/23/google-colab-aivis-speech-engine/"},{"content":"Django のロギング設定メモ Django でロギングを設定する方法について詳しく解説します。ロギングを適切に設定することで、アプリケーションのエラーハンドリングやデバッグが容易になります。\nロギングの概要 Django には組み込みのロギング機能があり、設定ファイル（settings.py）で詳細な設定を行うことができます。ロギングを設定することで、アプリケーションの挙動を監視し、問題発生時に迅速に対応できるようになります。\nロギング設定のサンプルコード 以下は、Django プロジェクトにおけるロギング設定の例です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62  import os from logging.handlers import TimedRotatingFileHandler # プロジェクトのベースディレクトリ BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # ログを保存するディレクトリ LOG_DIR = os.path.join(BASE_DIR, \u0026#34;logs\u0026#34;) # ログディレクトリが存在しない場合は作成 if not os.path.exists(LOG_DIR): os.makedirs(LOG_DIR) LOGGING = { \u0026#34;version\u0026#34;: 1, # ロギングの設定バージョン（1固定） \u0026#34;disable_existing_loggers\u0026#34;: False, # 既存のロガーを無効化しない \u0026#34;handlers\u0026#34;: { \u0026#34;file\u0026#34;: { \u0026#34;level\u0026#34;: \u0026#34;DEBUG\u0026#34;, # DEBUG レベル以上のログを記録 \u0026#34;class\u0026#34;: \u0026#34;logging.handlers.TimedRotatingFileHandler\u0026#34;, # 時間でログをローテーション \u0026#34;filename\u0026#34;: os.path.join(LOG_DIR, \u0026#34;django.log\u0026#34;), \u0026#34;when\u0026#34;: \u0026#34;midnight\u0026#34;, # 毎日ログをローテーション \u0026#34;interval\u0026#34;: 1, # 1日ごとにローテーション \u0026#34;backupCount\u0026#34;: 7, # 7日分のログを保持 \u0026#34;formatter\u0026#34;: \u0026#34;verbose\u0026#34;, \u0026#34;encoding\u0026#34;: \u0026#34;utf-8\u0026#34;, # 文字化け防止 }, \u0026#34;console\u0026#34;: { \u0026#34;level\u0026#34;: \u0026#34;DEBUG\u0026#34;, # DEBUG レベル以上のログをコンソール出力 \u0026#34;class\u0026#34;: \u0026#34;logging.StreamHandler\u0026#34;, # コンソール用のハンドラ \u0026#34;formatter\u0026#34;: \u0026#34;verbose\u0026#34;, }, }, \u0026#34;formatters\u0026#34;: { \u0026#34;verbose\u0026#34;: { \u0026#34;format\u0026#34;: \u0026#34;\\t\u0026#34;.join( [ \u0026#34;[%(levelname)s]\u0026#34;, # ログレベル（INFO, DEBUG など） \u0026#34;asctime:%(asctime)s\u0026#34;, # ログの出力日時 \u0026#34;module:%(module)s\u0026#34;, # モジュール名 \u0026#34;message:%(message)s\u0026#34;, # ログメッセージ ] ) }, }, \u0026#34;root\u0026#34;: { \u0026#34;handlers\u0026#34;: [\u0026#34;file\u0026#34;, \u0026#34;console\u0026#34;], # ルートロガーの出力先 \u0026#34;level\u0026#34;: \u0026#34;INFO\u0026#34;, # ルートロガーのログレベル（INFO以上） }, \u0026#34;loggers\u0026#34;: { \u0026#34;django\u0026#34;: { \u0026#34;handlers\u0026#34;: [\u0026#34;file\u0026#34;, \u0026#34;console\u0026#34;], # Django 内部のロギングを記録 \u0026#34;level\u0026#34;: \u0026#34;INFO\u0026#34;, # INFO レベル以上のログを記録 \u0026#34;propagate\u0026#34;: True, # 上位のロガーにもログを伝播 }, \u0026#34;django.utils.autoreload\u0026#34;: { \u0026#34;handlers\u0026#34;: [\u0026#34;file\u0026#34;, \u0026#34;console\u0026#34;], # Django の自動リロード時のログ設定 \u0026#34;level\u0026#34;: \u0026#34;CRITICAL\u0026#34;, # CRITICAL レベル以上のみ記録 \u0026#34;propagate\u0026#34;: False, # 上位のロガーには伝播しない }, }, }   設定のポイント ログディレクトリの作成 ログを保存するディレクトリ logs/ が存在しない場合、自動的に作成する処理を追加しています。\n1 2  if not os.path.exists(LOG_DIR): os.makedirs(LOG_DIR)   これにより、アプリケーションを実行した際にエラーが発生することを防ぎます。\nTimedRotatingFileHandler の利用  TimedRotatingFileHandler を使用することで、毎日 0 時にログをローテーション（新しいファイルに切り替え）します。 backupCount: 7 を指定することで、過去 7 日分のログを保持し、それ以前のログは削除されます。  ログのフォーマット ログのフォーマットを verbose という名前で設定し、以下のような情報を記録するようにしています。\n1 2 3 4 5 6 7 8  \u0026#34;format\u0026#34;: \u0026#34;\\t\u0026#34;.join( [ \u0026#34;[%(levelname)s]\u0026#34;, \u0026#34;asctime:%(asctime)s\u0026#34;, \u0026#34;module:%(module)s\u0026#34;, \u0026#34;message:%(message)s\u0026#34;, ] )   これにより、ログが見やすく整理され、デバッグしやすくなります。\nroot ロガーの設定  すべてのログを file と console に出力します。 level: INFO に設定し、INFO 以上のレベルのログを記録します。  django.utils.autoreload の CRITICAL 設定 Django の自動リロードに関するログは CRITICAL レベルのみ記録し、不要な情報を減らしています。\nログレベルの説明    レベル 説明     DEBUG デバッグ用の詳細な情報   INFO 一般的な操作ログ   WARNING 潜在的な問題が発生した場合の警告   ERROR エラー発生時のログ   CRITICAL 致命的なエラー    ログの出力例 設定したログフォーマットにより、以下のようなログが記録されます。\n[INFO] asctime:2024-01-20 12:34:56,789 module:views message:ユーザーがログインしました。 [ERROR] asctime:2024-01-20 12:35:10,123 module:views message:ログイン処理でエラーが発生しました。 まとめ Django のロギング設定を適切に行うことで、アプリケーションのエラーや動作状況を記録し、トラブルシューティングが容易になります。\nぜひ、Django プロジェクトでのロギング設定に活用してください！\n参考  Django Logging Configuration Python logging モジュール  ","description":"Django でロギングを設定する方法について詳しく解説します。ロギングを適切に設定することで、アプリケーションのエラーハンドリングやデバッグが容易になります。","id":18,"section":"tech","tags":["Python"],"title":"【Python】Django のロギング設定メモ","uri":"https://c-a-p-engineer.github.io/tech/2025/01/20/python-django-logging/"},{"content":"【Docker Compose】 command や entrypoint に環境変数を展開する際の注意点 ～$ENVではなく$$ENVを使おう～ Docker Composeを使ってサービスを定義する際、commandやentrypointフィールドで環境変数を利用することはよくあります。しかし、これらのフィールドで環境変数を展開する際に $ENV と記述しても期待通りに動作しないことがあります。その理由と正しい使い方を解説します。\nなぜ $$ENV が必要なのか？ Docker ComposeのYAMLファイルで $ を使うと、Docker Compose自体がその値を解釈しようとします。これはComposeファイルで環境変数を参照するための機能ですが、この動作の結果として、サービス内で実行されるコマンドに渡る前に値が失われたり、正しく展開されない場合があります。\n$$ を使うことで、Composeファイルの中で $ をエスケープできます。エスケープされた $$ はコンテナ内でシングル $ として解釈され、期待通りに環境変数が展開されます。\n実例で理解する 誤った設定例: $ENV_VARIABLEを直接使う 以下のComposeファイルでは、commandで環境変数を展開しようとしています。\n1 2 3 4 5 6  services:example-service:image:alpineenvironment:ENV_VARIABLE:\u0026#34;Hello, Docker!\u0026#34;command:echo $ENV_VARIABLE  この設定では、Composeが $ENV_VARIABLE を解釈しようとします。しかし、Composeファイルには ENV_VARIABLE の定義がなく、空文字列として扱われます。そのため、実行時には以下のように出力されます。\n$ 正しい設定例: $$ENV_VARIABLEを使用する 次のように設定を変更することで問題を解決できます。\n1 2 3 4 5 6  services:example-service:image:alpineenvironment:ENV_VARIABLE:\u0026#34;Hello, Docker!\u0026#34;command:echo $$ENV_VARIABLE  この設定では、$$ENV_VARIABLE がシングル $ENV_VARIABLE としてコンテナ内で解釈され、環境変数が正しく展開されます。実行時には以下のように出力されます。\nHello, Docker! entrypoint フィールドでも同様 command フィールドと同様に、entrypoint フィールドを利用する場合でも $$ を使う必要があります。\n設定例 1 2 3 4 5 6  services:example-service:image:alpineenvironment:ENV_VARIABLE:\u0026#34;Hello, Docker!\u0026#34;entrypoint:[\u0026#34;sh\u0026#34;,\u0026#34;-c\u0026#34;,\u0026#34;echo $$ENV_VARIABLE\u0026#34;]  この設定により、ENV_VARIABLE が正しく展開されます。\n注意点   エスケープ忘れに注意\n$ をそのまま使用すると、Composeファイルの処理時に解釈されてしまい、環境変数が期待通りに展開されません。\n  シェル構文に依存\ncommand や entrypoint での環境変数の展開にはシェルの構文が必要です。[\u0026quot;sh\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;...\u0026quot;] を使う形で設定することをオススメします。\n  デバッグのすすめ\n動作確認を行う際には、docker-compose config コマンドを活用して、生成された設定を確認するのがよいでしょう。\n  参考資料  Compose 内の環境変数  ","description":"Docker Composeを使ってサービスを定義する際、`command`や`entrypoint`フィールドで環境変数を利用することはよくあります。しかし、これらのフィールドで環境変数を展開する際に `$ENV` と記述しても期待通りに動作しないことがあります。","id":19,"section":"tech","tags":["Docker"],"title":"【Docker Compose】 command や entrypoint に環境変数を展開する際の注意点 ～$ENVではなく$$ENVを使おう～","uri":"https://c-a-p-engineer.github.io/tech/2025/01/15/docker-compose-env-variable-expansion/"},{"content":"【Docker】Amazon Cognitoをローカルでエミュレートできる「cognito-local」を使ってみよう Amazon Cognitoは、ユーザー認証やデータ管理をクラウドでサポートするための大変便利なサービスですが、利用にはAWSアカウントやインターネット接続が必要です。これはローカルで開発を行う人にとって不便な場合もあります。\nこんな問題を解決してくれるのが、ローカルデバッグに便利な「cognito-local」です。今回はこのツールについて解説し、そのインストール方法や使い方を簡単に紹介します。\ncognito-localとは cognito-localは、Amazon Cognitoの機能をローカル環境でエミュレートするためのツールです。これにより、インターネット接続なしでも、ユーザー認証やユーザープールの管理などの機能をローカルで開発したりテストしたりできるようになります。\n主な機能  ユーザープールの作成と管理  ローカルでユーザープールを作成し、ユーザーの追加や削除、属性の更新が可能   認証フローのエミュレーション  サインアップ、サインイン、パスワード変更などがテスト可能   Lambdaトリガーのサポート  カスタム認証やユーザー属性の検証をテストできる    インストール方法 cognito-localはDockerまたはNode.js系のプロジェクトとして使用できます。ここではいずれのセットアップ方法を簡単に解説します。\nDockerを使用する場合 Dockerを使用してcognito-localを起動するには、以下のコマンドを実行するだけです。\n1  docker run --publish 9229:9229 jagregory/cognito-local:latest   該当コマンドでcognito-localがポート、9229で起動します。データを永続化するためには、Dockerボリュームをマウントします。\nNode.jsを使用する場合 Node.js環境では、次のように設定します。\n1 2  npm install --save-dev cognito-local npx cognito-local   これにより、cognito-localがデフォルトのポート、9229で起動します。\n制限事項 cognito-localはAmazon Cognitoのすべての機能をエミュレートするわけではありません。一部のAPIや機能は未サポートまたは部分的なサポートにとどまります。ため、正確な機能が必要な場合は、AWS本番環境での検証を必ず行いましょう。\nUserPoolの作成 このコマンドを使用することでUserPoolを作成することが可能です。\n1  aws --endpoint http://localhost:9229 cognito-idp create-user-pool --pool-name MyUserPool   おわりに cognito-localは、ローカルでAmazon Cognitoの機能をすばやく検証するための助けとなるツールです。DockerやNode.jsを使えば、簡単にセットアップできるので、ぜひ試してみてください。\n他にもCognito互換のソフトウェアがあります。\n frouriojs/magnito 公式リポジトリ  LocalStackは現在 Pro（有料）になります。\n LocalStack / Cognito  参考 リポジトリや関連資料は下記のURLを参考してください。\n cognito-local 公式リポジトリ Qiita: cognito-localのローカルテスト方法  ","description":"Amazon Cognitoは、ユーザー認証やデータ管理をクラウドでサポートするための大変便利なサービスですが、利用にはAWSアカウントやインターネット接続が必要です。これはローカルで開発を行う人にとって不便な場合もあります。","id":20,"section":"tech","tags":["Docker"],"title":"【Docker】Amazon Cognitoをローカルでエミュレートできる「cognito-local」を使ってみよう","uri":"https://c-a-p-engineer.github.io/tech/2025/01/10/docker-cognito-local/"},{"content":"【Google Colab】VSCodeを設定して使ってみよう！ Google Colabは、データサイエンティストやプログラマーにとって便利な環境ですが、標準のインターフェイスではVSCodeのような統合開発環境 (IDE) を利用することはできません。しかし、少し工夫をすることで、Google Colab上でVSCodeを使うことが可能です。本記事では、Code Serverとngrokを活用して、Colab上でVSCodeを設定する手順をわかりやすく解説します。\nCode Serverのインストール Code Serverは、ブラウザベースでVSCodeを動作させるためのオープンソースツールです。以下のコマンドを実行してCode Serverをインストールします。\n1 2 3 4  # @title VSCodeインストール !wget https://github.com/coder/code-server/releases/download/v4.13.0/code-server-4.13.0-linux-amd64.tar.gz !tar -xvf code-server-4.13.0-linux-amd64.tar.gz !mv code-server-4.13.0-linux-amd64/code-server /usr/local/bin/   Code Serverの設定 Code Serverが正常に動作するためには、設定ファイルを作成する必要があります。以下のコマンドで、必要な設定を行います。\n1 2 3 4  # @title CodeServer設定 !mkdir -p ~/.config/code-server !echo \u0026#34;bind-addr: 0.0.0.0:8888\u0026#34; \u0026gt; ~/.config/code-server/config.yaml !echo \u0026#34;auth: none\u0026#34; \u0026gt;\u0026gt; ~/.config/code-server/config.yaml   これにより、Code Serverがポート8888でリッスンし、認証なしでアクセス可能になります。\nCode Serverの起動 Code Serverをバックグラウンドで実行するには以下のコマンドを使用します。\n1 2  # @title Codeserver軌道 !nohup /usr/local/bin/code-server \u0026gt; server.log 2\u0026gt;\u0026amp;1 \u0026amp;   このコマンドを実行すると、Code Serverが起動し、サーバーログがserver.logに保存されます。\nngrokを使った外部公開 Colabは外部から直接アクセスすることができません。そのため、ngrokを使って、Code Serverを外部に公開します。\n必要なパッケージをインストール まず、ngrokをインストールします。\n1  !pip install pyngrok   ngrokトークンの設定とサーバー公開 以下のコードを使ってngrokを設定し、公開URLを取得します。\n1 2 3 4 5 6 7 8 9 10 11 12  # @title ngrokを使った公開 import os from flask import Flask from pyngrok import ngrok, conf # ngrokトークンを設定 ngrok_token = \u0026#34;\u0026lt;ngrok_token\u0026gt;\u0026#34; # ngrokのトークンを入力 conf.get_default().auth_token = ngrok_token # ポート8888を公開 public_url = ngrok.connect(8888) print(f\u0026#34;ngrok URL: {public_url}\u0026#34;)   \u0026lt;ngrok_token\u0026gt; には、ngrokの公式サイトから取得した認証トークンを入力してください。このコードを実行すると、ngrok URLとして外部からアクセス可能なリンクが表示されます。このURLをブラウザに入力すると、VSCodeのインターフェイスが表示されます。\nVSCodeの画面が現れてターミナルなども操作可能で感動します！\n注意点   セキュリティ\n認証が無効化されているため、ngrok URLを第三者に共有しないように注意してください。\n  リソース制限\nColabのリソース制限があるため、大規模なプロジェクトには不向きです。\n  セッションの持続性\nGoogle Colabのセッションが終了すると、サーバーも停止します。作業中はセッションを維持するようにしましょう。\n  まとめ 本記事では、Google Colab上でVSCodeを使用するための設定手順を解説しました。この方法を使えば、Google Colabのリソースを活用しながら、VSCodeの利便性を享受できます。必要なコマンドを実行するだけで簡単にセットアップできるため、ぜひ試してみてください。\n","description":"Google ColabはVSCodeのような統合開発環境 (IDE) を利用することはできません。しかし、少し工夫をすることで、Google Colab上でVSCodeを使うことが可能です。","id":21,"section":"tech","tags":["Google Colab"],"title":"【Google Colab】VSCodeを設定して使ってみよう！","uri":"https://c-a-p-engineer.github.io/tech/2024/12/28/google-colab-vscode-setup-guide/"},{"content":"【Google Colab】%%timeと%%timeitの使い方と違いを解説 Google Colabには、コードの実行時間を測定できる便利なマジックコマンドとして%%timeと%%timeitがあります。これらを使うことで、コードの実行速度を簡単に把握し、効率化を図ることができます。\nこの記事では、これら2つのマジックコマンドの違いや具体的な使い方、そしてオプションの設定方法について解説します。\n%%timeとは？ %%timeは、特定のコードブロックを1回実行し、その実行時間を計測するマジックコマンドです。主に、処理がどのくらい時間を要するのかを確認したいときに使います。\nサンプルコード 以下は、リストに値を追加する処理の実行時間を測定する例です。\n1 2 3 4 5  %%time # リストに1から100万までの数字を追加する処理 large_list = [] for i in range(1, 1000001): # 1から100万までループ large_list.append(i) # リストに値を追加   実行結果 CPU times: user 87 ms, sys: 12 ms, total: 99 ms Wall time: 98 ms  CPU times: プロセッサが計算に費やした時間 Wall time: 実際に経過した時間（I/O処理なども含む）  この結果から、リスト作成処理が約98ミリ秒かかったことがわかります。\n%%timeitとは？ %%timeitは、コードブロックを複数回実行して、その平均実行時間と標準偏差を測定するマジックコマンドです。主に、短い処理やアルゴリズムの効率性を比較したいときに使います。\nサンプルコード 以下は、リスト内包表記を使ったリスト作成処理の実行時間を測定する例です。\n1 2 3  %%timeit # リスト内包表記を使って1から100万までのリストを作成 large_list = [i for i in range(1, 1000001)] # 1から100万までの値を一括でリスト化   実行結果 76.8 ms ± 16.5 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)  mean: 平均実行時間（1回の実行にかかった時間） std. dev.: 標準偏差（計測値のばらつき） 7 runs: 7セットの計測が行われた 10 loops each: 各セットで10回ループ実行された  この結果から、リスト内包表記を用いることで1回のリスト作成処理が平均76.8ミリ秒で完了することがわかります。標準偏差16.5ミリ秒は、実行環境や処理内容によるばらつきを示しています。\n%%timeと%%timeitの違い 両者の違いを簡単にまとめます。\n   特徴 %%time %%timeit     実行回数 1回実行 複数回実行して平均を出す   測定内容 実行時間（Wall timeとCPU time） 平均実行時間と標準偏差   適用シーン 長時間処理やI/O操作のあるコード 短時間処理やアルゴリズムの比較    例えば、ファイルの読み書きやネットワーク通信が含まれる処理には%%timeを、計算処理のパフォーマンス比較には%%timeitを使うと良いでしょう。\n%%timeitのオプション設定 %%timeitには、実行回数や繰り返し回数を指定するオプションがあります。これらを活用することで、より正確な計測が可能です。\n主なオプション  -n: 1セットあたりのループ回数を指定します。 -r: セットの繰り返し回数を指定します。  オプションの使用例 以下は、-nと-rオプションを指定して%%timeitを実行する例です。\n1 2 3  %%timeit -n 100 -r 5 # リスト内包表記を使って1から100万までのリストを作成 large_list = [i for i in range(1, 1000001)]   この例では、1セットあたり100回のループを行い、それを5セット繰り返して計測します。これにより、計測の精度を高めることができます。\n他のオプション %%timeitにはさらに以下のようなオプションがあります。\n  -q (quiet)\n実行結果の詳細を非表示にし、必要最低限の情報だけを表示します。例えば、計測結果の数字のみが表示されます。\n  -o (output)\n実行結果をPythonオブジェクトとして取得します。これにより、計測結果をプログラム内で再利用することが可能です。\n  サンプルコード 1 2 3  result = %timeit -o -n 10 [i**2 for i in range(1000)] # 平方数のリスト作成を計測 print(\u0026#34;平均実行時間:\u0026#34;, result.average) # 平均実行時間を取得 print(\u0026#34;標準偏差:\u0026#34;, result.stdev) # 標準偏差を取得   このコードでは、resultオブジェクトに計測結果が格納されるため、プログラム内でさらなる分析が可能です。\n使用時の注意点   計測結果のばらつき\n実行環境（ハードウェアやバックグラウンドプロセス）により、結果が毎回異なる場合があります。特にGoogle Colabでは、実行するタイミングやセッションによって処理速度が変わる可能性があります。\n  短時間処理の測定精度\n短時間の処理では、キャッシュやメモリの影響で測定結果が正確でない場合があります。その場合、-nや-rを適切に調整して測定精度を高めましょう。\n  まとめ Google Colabの%%timeと%%timeitを使えば、Pythonコードの実行時間を簡単に測定できます。特に、%%timeitはオプションを活用することで計測の精度を高めたり、結果を再利用したりすることが可能です。\n使い分けのポイント  %%time: 長時間処理やI/Oを含む処理の測定に最適 %%timeit: 短時間処理やアルゴリズムの比較に最適  %%timeitのオプションまとめ  -n: 1セットあたりのループ回数 -r: セットの繰り返し回数 -q: 結果を簡潔に表示 -o: 計測結果をPythonオブジェクトとして取得  これらのツールを活用して、コードの効率化に役立ててください！\n","description":"Google Colabには、コードの実行時間を測定できる便利なマジックコマンドとして`%%time`と`%%timeit`があります。これらを使うことで、コードの実行速度を簡単に把握し、効率化を図ることができます。","id":22,"section":"tech","tags":["Google Colab"],"title":"【Google Colab】%%timeと%%timeitの使い方と違いを解説","uri":"https://c-a-p-engineer.github.io/tech/2024/12/28/google-colab-measure-time-timeit-usage/"},{"content":"【Python】行列ライブラリ比較：Pandas, DuckDB, Polars, Dask, Vaexのベンチマーク 大規模なデータ処理を行う際、Pythonには多数の行列操作ライブラリが用意されています。代表的な5つの行列ライブラリである Pandas, DuckDB, Polars, Dask, Vaex を比較し、それぞれの特徴とパフォーマンスを見ていきます。\n比較環境 GoogleColabのCPUインスタンスで実行して比較します。\n比較内容 本ミッションでは、Pythonで大規模データ（1,000,000行・30,000,000行・50,000,000行）を扱う代表的なライブラリ5つ（pandas / DuckDB / Polars / Dask / Vaex）を対象に、以下を比較しています：\n 読込時間（LoadTime_sec） groupby処理時間（GroupByTime_sec） 読込後のメモリ使用量差分（LoadMemoryDiff_MB） groupby後のメモリ使用量差分（GroupByMemoryDiff_MB）  いずれも“差分”として、処理前後のメモリ変化を計測しています。行数を増やしながらどのような挙動を示すかを可視化することで、各ライブラリの得意領域を探ります。\n結果サマリ（全行数） 下表は、全ての行数(1,000,000 / 30,000,000 / 50,000,000)を通した結果をまとめたものです。\n   Library Rows 読込時間(sec) GroupBy(sec) 読み込みメモリ(MD) GroupByメモリ(MB)     pandas 1,000,000 0.718694 0.200022 23.769531 23.886719   DuckDB 1,000,000 0.389037 0.046632 51.914062 1.015625   Polars 1,000,000 0.211263 0.166592 34.203125 18.828125   Dask 1,000,000 0.033127 0.476037 2.503906 43.242188   Vaex 1,000,000 0.424267 0.400279 58.261719 33.507812   pandas 30,000,000 11.407202 3.223912 699.160156 18.492188   DuckDB 30,000,000 8.985925 1.395745 884.289062 0.257812   Polars 30,000,000 6.188008 1.856967 920.175781 80.382812   Dask 30,000,000 0.014753 16.430000 8.972656 421.085938   Vaex 30,000,000 15.347542 9.269258 556.410156 64.843750   pandas 50,000,000 19.488823 3.526238 1208.144531 -54.378906   DuckDB 50,000,000 20.179205 1.729918 1232.980469 0.515625   Polars 50,000,000 6.843395 5.500243 1525.531250 0.687500   Dask 50,000,000 0.028209 25.887592 10.386719 406.511719   Vaex 50,000,000 26.561565 19.205436 1110.734375 31.863281     GroupBy：集約（groupby(\u0026quot;category\u0026quot;)[\u0026quot;value\u0026quot;].sum()）の所要秒数  詳細分析 1. 1,000,000 行（1百万行）  Polarsが読込時間0.21秒、groupby 0.17秒と、非常に高速です。 Daskは読込時間が突出して短い(0.03秒)ですが、その後のgroupby処理にやや時間(0.48秒)がかかっています。 メモリではDuckDBが読込時に約52MB差分と大きめ。一方で、groupby後には差分が1MB程度に収まっており、処理効率の高さが伺えます。  2. 30,000,000 行（3千万行）  Polarsが引き続き読込(6.19秒)・groupby(1.86秒)ともに高速。 DuckDBも読込(8.99秒)・groupby(1.40秒)で優秀。 pandasは読込に11.41秒、groupbyに3.22秒かかっていますが、一般的なPython実装としては妥当な数字。 Daskは読込が驚異的に短い(0.01秒)ものの、groupbyに16.43秒という大幅な時間を要しています。分散処理用ライブラリらしく、準備段階は速いものの、実際の計算をcompute()するときに大きなコストが発生。 メモリ差分では、Polarsのgroupby後に約80MB増えている点が特徴。DuckDBはgroupby後のメモリ増が非常に小さい(0.26MB)のが目立ちます。  3. 50,000,000 行（5千万行）  Polarsが読込6.84秒、groupby5.50秒で依然好調。しかし読込後のメモリ差分は約1.5GB（1525MB増）と非常に大きいことが分かります。 pandasは読込19.49秒、groupby3.53秒で順当な伸び。メモリ差分は約1.2GB増加後、なぜかgroupby後に -54MBと減少しており、一時的なオブジェクト解放が行われた可能性があります。 DuckDBは読込20.18秒、groupby1.73秒で高速集約。メモリ差分は約1.23GB増。groupby後はほぼ変わらないため、一度にメモリを確保し、効率的に処理していると思われます。 Daskのgroupbyは25.89秒で、分散フレームワークらしく計算時に負荷が集中。メモリは読込後10MB増のまま、一気にgroupby後406MBも増加。 Vaexは読込26.56秒、groupby19.21秒でやや遅めながら、1億行規模に近いサイズでも扱いやすいという特徴があります。  総合評価  Polars：高速性が目立つ反面、読込時のメモリ増大が大きい。Rust実装の恩恵で、単一ノード上での速度は極めて優秀。 DuckDB：SQLで同様の処理ができ、高速なgroupbyが大きな強み。メモリ効率も良好で、大規模データを扱う際の選択肢として有力。 pandas：Pythonエコシステムでもっとも使われるが、大きなデータセットでは処理時間・メモリ消費がやや厳しい印象。ただし学習コストが低く、既存資産との連携面で強みがある。 Dask：読込が非常に速い反面、groupby処理に時間がかかりやすい。並列・分散環境で本領を発揮するので、ローカルPC単体の計測では真価が表れにくい場合がある。 Vaex：オンメモリにロードせず扱える設計だが、初回読込でやや時間がかかる。数千万～億行規模でも操作しやすい点は大きな魅力。  さらなる検討  1億行超級でさらに拡張：\nDuckDBやPolars、Vaexあたりは、より大規模なデータセットへの適用が期待できます。 分散処理（Dask / Sparkなど）：\nローカルPC単体ではパフォーマンスが伸び悩む場合がありますが、クラスタ運用でスケールアウトすると真価を発揮。 メモリ最適化：\nPolarsのように高速な一方、メモリ使用量が大きくなるライブラリもあるため、環境ごとのチューニングやクラスタ構成が重要になります。  まとめ  高速性：PolarsとDuckDBが際立つ結果となりましたが、メモリ面や集約処理時の挙動には差が見られます。 安定性：pandasはシングルスレッドで扱いやすい半面、大規模データには向かないケースも。 柔軟性：DaskやVaexは大きなデータを分散またはオンメモリ外で扱えるため、データサイズが膨大になってくるほど活躍の余地があります。  比較用コード Google Colabで実行して比較できます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275  # ==================================================== # セクション0: 必要なライブラリのインストール # ==================================================== !pip install pandas duckdb polars dask vaex --quiet import pandas as pd import duckdb import polars as pl import dask.dataframe as dd import vaex import time import psutil import os import gc import matplotlib.pyplot as plt # ==================================================== # ユーティリティ関数群 # ==================================================== def get_memory_usage_mb(): \u0026#34;\u0026#34;\u0026#34; 現在のプロセスが使用しているメモリ(MB)を取得して返す。 \u0026#34;\u0026#34;\u0026#34; process = psutil.Process(os.getpid()) return process.memory_info().rss / 1024**2 # MB単位 def generate_csv(file_name, num_rows): \u0026#34;\u0026#34;\u0026#34; 大量のデータを一度にメモリへ保持せず、1行ずつCSVファイルに書き込む。 これにより、ファイル作成時のメモリ使用量を抑えることができる。 \u0026#34;\u0026#34;\u0026#34; with open(file_name, mode=\u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: # ヘッダー行 f.write(\u0026#34;id,category,value\\n\u0026#34;) for i in range(num_rows): category = f\u0026#34;cat{i % 10}\u0026#34; value = i * 0.5 # CSV行として書き込み f.write(f\u0026#34;{i},{category},{value}\\n\u0026#34;) def benchmark_pandas(csv_file): \u0026#34;\u0026#34;\u0026#34; pandasでのCSV読込 \u0026amp; groupby集計の時間とメモリ差分を計測して返す。 戻り値: (load_time, groupby_time, load_mem_diff, groupby_mem_diff, grouped_result) \u0026#34;\u0026#34;\u0026#34; gc.collect() # --- 読込 --- mem_before_load = get_memory_usage_mb() start_time = time.perf_counter() df = pd.read_csv(csv_file) load_time = time.perf_counter() - start_time mem_after_load = get_memory_usage_mb() load_mem_diff = mem_after_load - mem_before_load # 差分メモリ # --- groupby --- mem_before_groupby = get_memory_usage_mb() start_time = time.perf_counter() df_grouped = df.groupby(\u0026#34;category\u0026#34;)[\u0026#34;value\u0026#34;].sum() groupby_time = time.perf_counter() - start_time mem_after_groupby = get_memory_usage_mb() groupby_mem_diff = mem_after_groupby - mem_before_groupby # 差分メモリ return load_time, groupby_time, load_mem_diff, groupby_mem_diff, df_grouped def benchmark_duckdb(csv_file): \u0026#34;\u0026#34;\u0026#34; DuckDBでのCSV読込 \u0026amp; groupby集計の時間とメモリ差分を計測。 戻り値: (load_time, groupby_time, load_mem_diff, groupby_mem_diff, grouped_result) \u0026#34;\u0026#34;\u0026#34; gc.collect() # --- 読込 --- mem_before_load = get_memory_usage_mb() start_time = time.perf_counter() con = duckdb.connect() con.execute(f\u0026#34;CREATE TABLE sample_data AS SELECT * FROM \u0026#39;{csv_file}\u0026#39;\u0026#34;) load_time = time.perf_counter() - start_time mem_after_load = get_memory_usage_mb() load_mem_diff = mem_after_load - mem_before_load # --- groupby --- mem_before_groupby = get_memory_usage_mb() start_time = time.perf_counter() df_grouped = con.execute(\u0026#34;\u0026#34;\u0026#34; SELECT category, SUM(value) AS total_value FROM sample_data GROUP BY category \u0026#34;\u0026#34;\u0026#34;).df() groupby_time = time.perf_counter() - start_time mem_after_groupby = get_memory_usage_mb() groupby_mem_diff = mem_after_groupby - mem_before_groupby return load_time, groupby_time, load_mem_diff, groupby_mem_diff, df_grouped def benchmark_polars(csv_file): \u0026#34;\u0026#34;\u0026#34; PolarsでのCSV読込 \u0026amp; groupby集計の時間とメモリ差分を計測して返す。 戻り値: (load_time, groupby_time, load_mem_diff, groupby_mem_diff, grouped_result) \u0026#34;\u0026#34;\u0026#34; gc.collect() # --- 読込 --- mem_before_load = get_memory_usage_mb() start_time = time.perf_counter() df = pl.read_csv(csv_file) load_time = time.perf_counter() - start_time mem_after_load = get_memory_usage_mb() load_mem_diff = mem_after_load - mem_before_load # --- groupby --- mem_before_groupby = get_memory_usage_mb() start_time = time.perf_counter() df_grouped = ( df .group_by(\u0026#34;category\u0026#34;) .agg([ pl.col(\u0026#34;value\u0026#34;).sum().alias(\u0026#34;total_value\u0026#34;) ]) ) groupby_time = time.perf_counter() - start_time mem_after_groupby = get_memory_usage_mb() groupby_mem_diff = mem_after_groupby - mem_before_groupby return load_time, groupby_time, load_mem_diff, groupby_mem_diff, df_grouped def benchmark_dask(csv_file): \u0026#34;\u0026#34;\u0026#34; DaskでのCSV読込 \u0026amp; groupby集計の時間とメモリ差分を計測して返す。 戻り値: (load_time, groupby_time, load_mem_diff, groupby_mem_diff, grouped_result) \u0026#34;\u0026#34;\u0026#34; gc.collect() # --- 読込 --- mem_before_load = get_memory_usage_mb() start_time = time.perf_counter() df = dd.read_csv(csv_file) # Daskの遅延読込 load_time = time.perf_counter() - start_time mem_after_load = get_memory_usage_mb() load_mem_diff = mem_after_load - mem_before_load # --- groupby --- mem_before_groupby = get_memory_usage_mb() start_time = time.perf_counter() df_grouped = df.groupby(\u0026#34;category\u0026#34;)[\u0026#34;value\u0026#34;].sum().compute() # 実際の計算 groupby_time = time.perf_counter() - start_time mem_after_groupby = get_memory_usage_mb() groupby_mem_diff = mem_after_groupby - mem_before_groupby return load_time, groupby_time, load_mem_diff, groupby_mem_diff, df_grouped def benchmark_vaex(csv_file): \u0026#34;\u0026#34;\u0026#34; VaexでのCSV読込 \u0026amp; groupby集計の時間とメモリ差分を計測して返す。 戻り値: (load_time, groupby_time, load_mem_diff, groupby_mem_diff, grouped_result) \u0026#34;\u0026#34;\u0026#34; gc.collect() # --- 読込 --- mem_before_load = get_memory_usage_mb() start_time = time.perf_counter() df = vaex.from_csv(csv_file, convert=False) # オンメモリ化しない読み込み load_time = time.perf_counter() - start_time mem_after_load = get_memory_usage_mb() load_mem_diff = mem_after_load - mem_before_load # --- groupby --- mem_before_groupby = get_memory_usage_mb() start_time = time.perf_counter() df_grouped = df.groupby(by=\u0026#34;category\u0026#34;, agg={\u0026#34;value\u0026#34;: \u0026#34;sum\u0026#34;}) groupby_time = time.perf_counter() - start_time mem_after_groupby = get_memory_usage_mb() groupby_mem_diff = mem_after_groupby - mem_before_groupby return load_time, groupby_time, load_mem_diff, groupby_mem_diff, df_grouped def plot_bar_chart(results_df, x_col, y_col, title): \u0026#34;\u0026#34;\u0026#34; 棒グラフを表示する汎用関数 x_col: X軸に表示する列名 (Library) y_col: Y軸に表示する列名 (Time or Memory) \u0026#34;\u0026#34;\u0026#34; plt.figure(figsize=(7, 4)) plt.bar(results_df[x_col], results_df[y_col], color=[\u0026#34;#4c72b0\u0026#34;, \u0026#34;#55a868\u0026#34;, \u0026#34;#c44e52\u0026#34;, \u0026#34;#8172b2\u0026#34;, \u0026#34;#ccb974\u0026#34;]) plt.title(title) plt.xlabel(x_col) plt.ylabel(y_col) plt.xticks(rotation=45) plt.tight_layout() plt.show() # ==================================================== # セクション1: 複数パターンのデータ行数でテスト # ==================================================== SAMPLE_SIZES = [1_000_000, 30_000_000, 50_000_000] # 行数パターン all_results = [] for num_rows in SAMPLE_SIZES: print(f\u0026#34;\\n========== 処理開始: num_rows={num_rows} ==========\u0026#34;) # 1) CSVファイルの作成 (メモリ節約版) csv_file = f\u0026#34;sample_data_{num_rows}.csv\u0026#34; print(f\u0026#34;{num_rows} 行のサンプルCSVを作成中: {csv_file}\u0026#34;) start_write = time.perf_counter() generate_csv(csv_file, num_rows) end_write = time.perf_counter() print(f\u0026#34;CSVファイル生成完了 (所要時間: {end_write - start_write:.2f}秒)\u0026#34;) # 2) 各ライブラリでベンチマーク print(\u0026#34;\\n=== ベンチマーク開始 ===\u0026#34;) benchmarks = [] # pandas print(\u0026#34;\\n--- pandas ---\u0026#34;) load_t, groupby_t, load_mem_diff, groupby_mem_diff, _ = benchmark_pandas(csv_file) benchmarks.append([\u0026#34;pandas\u0026#34;, num_rows, load_t, groupby_t, load_mem_diff, groupby_mem_diff]) # DuckDB print(\u0026#34;\\n--- DuckDB ---\u0026#34;) load_t, groupby_t, load_mem_diff, groupby_mem_diff, _ = benchmark_duckdb(csv_file) benchmarks.append([\u0026#34;DuckDB\u0026#34;, num_rows, load_t, groupby_t, load_mem_diff, groupby_mem_diff]) # Polars print(\u0026#34;\\n--- Polars ---\u0026#34;) load_t, groupby_t, load_mem_diff, groupby_mem_diff, _ = benchmark_polars(csv_file) benchmarks.append([\u0026#34;Polars\u0026#34;, num_rows, load_t, groupby_t, load_mem_diff, groupby_mem_diff]) # Dask print(\u0026#34;\\n--- Dask ---\u0026#34;) load_t, groupby_t, load_mem_diff, groupby_mem_diff, _ = benchmark_dask(csv_file) benchmarks.append([\u0026#34;Dask\u0026#34;, num_rows, load_t, groupby_t, load_mem_diff, groupby_mem_diff]) # Vaex print(\u0026#34;\\n--- Vaex ---\u0026#34;) load_t, groupby_t, load_mem_diff, groupby_mem_diff, _ = benchmark_vaex(csv_file) benchmarks.append([\u0026#34;Vaex\u0026#34;, num_rows, load_t, groupby_t, load_mem_diff, groupby_mem_diff]) print(\u0026#34;\\n=== ベンチマーク終了 ===\u0026#34;) # 3) 結果をDataFrame化 → グラフ表示 results_df = pd.DataFrame( benchmarks, columns=[\u0026#34;Library\u0026#34;, \u0026#34;Rows\u0026#34;, \u0026#34;LoadTime_sec\u0026#34;, \u0026#34;GroupByTime_sec\u0026#34;, \u0026#34;LoadMemoryDiff_MB\u0026#34;, \u0026#34;GroupByMemoryDiff_MB\u0026#34;] ) print(\u0026#34;\\n=== 処理結果の比較表 ===\u0026#34;) print(results_df) # --- 読込時間グラフ --- plot_bar_chart(results_df, \u0026#34;Library\u0026#34;, \u0026#34;LoadTime_sec\u0026#34;, f\u0026#34;Read Time Comparison ({num_rows} rows)\u0026#34;) # --- groupby処理時間グラフ --- plot_bar_chart(results_df, \u0026#34;Library\u0026#34;, \u0026#34;GroupByTime_sec\u0026#34;, f\u0026#34;GroupBy Time Comparison ({num_rows} rows)\u0026#34;) # --- 読込時のメモリ差分グラフ --- plot_bar_chart(results_df, \u0026#34;Library\u0026#34;, \u0026#34;LoadMemoryDiff_MB\u0026#34;, f\u0026#34;Memory Diff after Load ({num_rows} rows)\u0026#34;) # --- groupby時のメモリ差分グラフ --- plot_bar_chart(results_df, \u0026#34;Library\u0026#34;, \u0026#34;GroupByMemoryDiff_MB\u0026#34;, f\u0026#34;Memory Diff after GroupBy ({num_rows} rows)\u0026#34;) # 全結果をまとめる all_results.extend(benchmarks) print(f\u0026#34;\\n========== 処理完了: num_rows={num_rows} ==========\\n\u0026#34;) # ==================================================== # セクション2: すべての行数をまとめた結果 # ==================================================== final_results_df = pd.DataFrame( all_results, columns=[\u0026#34;Library\u0026#34;, \u0026#34;Rows\u0026#34;, \u0026#34;LoadTime_sec\u0026#34;, \u0026#34;GroupByTime_sec\u0026#34;, \u0026#34;LoadMemoryDiff_MB\u0026#34;, \u0026#34;GroupByMemoryDiff_MB\u0026#34;] ) print(\u0026#34;=== 全行数の結果をまとめたテーブル ===\u0026#34;) print(final_results_df)   参考  Pandas Documentation DuckDB Documentation Polars Documentation Dask Documentation Vaex Documentation  ","description":"大規模なデータ処理を行う際、Pythonには多数の行列操作ライブラリが用意されています。代表的な5つの行列ライブラリである Pandas, DuckDB, Polars, Dask, Vaex を比較し、それぞれの特徴とパフォーマンスを見ていきます。","id":23,"section":"tech","tags":["Python"],"title":"【Python】行列ライブラリ比較：Pandas, DuckDB, Polars, Dask, Vaexのベンチマーク","uri":"https://c-a-p-engineer.github.io/tech/2024/12/26/python-matrix-library-comparison/"},{"content":"【Python】簡単にファイルの差分を比較する方法：HTMLで色付き・行番号付きの表示を実現 ファイルの内容を比較し、その差分を視覚的に分かりやすく表示したい場面はよくあります。コードの変更点を確認したり、設定ファイルの違いをチェックしたりする際に便利です。この記事では、Python標準ライブラリのdifflibを活用し、HTML形式で差分を色付き・行番号付きで表示する方法を詳しく解説します。\nPythonで差分を比較する方法 Pythonにはファイルやテキストの差分を比較するための強力なライブラリdifflibが標準で含まれています。このライブラリを使えば、簡単に2つのテキストデータを比較することが可能です。\ndifflibとは？ difflibはPythonの標準ライブラリで、以下のような機能を提供します。\n 2つの文字列やファイルの差分を簡単に比較できる 差分を分かりやすい形式で出力可能（リスト形式やHTML形式など） プログラム上で差分の操作が容易  基本的な使い方 difflibのndiff関数を使うことで、2つの文字列リスト間の差分を計算できます。\n1 2 3 4 5 6 7 8 9  import difflib # サンプルデータ text1 = [\u0026#34;line1\\n\u0026#34;, \u0026#34;line2\\n\u0026#34;, \u0026#34;line3\\n\u0026#34;] text2 = [\u0026#34;line1\\n\u0026#34;, \u0026#34;line2 modified\\n\u0026#34;, \u0026#34;line4\\n\u0026#34;] # 差分を取得 diff = difflib.ndiff(text1, text2) print(\u0026#34;\\n\u0026#34;.join(diff))   上記のコードでは、ndiffを使って差分を取得し、結果を標準出力に出力しています。次に、この結果をさらに見やすく表示する方法を紹介します。\nサンプルコードの全体像 以下は、2つのファイルを読み込んで差分を取得し、HTML形式で色付き・行番号付きで表示する完全なPythonコードです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  import difflib # アップロードしたファイルを開いて読み込む with open(\u0026#34;file1.txt\u0026#34;, \u0026#34;r\u0026#34;) as f1, open(\u0026#34;file2.txt\u0026#34;, \u0026#34;r\u0026#34;) as f2: file1_lines = f1.readlines() file2_lines = f2.readlines() # 差分を取得 diff = difflib.ndiff(file1_lines, file2_lines) # HTML形式で差分を色付きかつ行番号付きで整形 diff_output = \u0026#34;\u0026lt;div style=\u0026#39;font-family: monospace;\u0026#39;\u0026gt;\u0026#34; line_number_1 = 1 # file1の行番号 line_number_2 = 1 # file2の行番号 for line in diff: if line.startswith(\u0026#34; \u0026#34;): # 変更がない行 diff_output += f\u0026#34;\u0026lt;div style=\u0026#39;background-color: #fefefe;\u0026#39;\u0026gt;{line_number_1:04d} | {line_number_2:04d} | {line.strip()}\u0026lt;/div\u0026gt;\u0026#34; line_number_1 += 1 line_number_2 += 1 elif line.startswith(\u0026#34;-\u0026#34;): # 削除された行 diff_output += f\u0026#34;\u0026lt;div style=\u0026#39;background-color: #f8d7da;\u0026#39;\u0026gt;- {line_number_1:04d} | ---- | {line.strip()}\u0026lt;/div\u0026gt;\u0026#34; line_number_1 += 1 elif line.startswith(\u0026#34;+\u0026#34;): # 追加された行 diff_output += f\u0026#34;\u0026lt;div style=\u0026#39;background-color: #d4edda;\u0026#39;\u0026gt;+ ---- | {line_number_2:04d} | {line.strip()}\u0026lt;/div\u0026gt;\u0026#34; line_number_2 += 1 diff_output += \u0026#34;\u0026lt;/div\u0026gt;\u0026#34; # HTMLファイルに出力 output_file = \u0026#34;diff.html\u0026#34; with open(output_file, \u0026#34;w\u0026#34;) as f: f.write(diff_output) # GoogleColabでHTMLで結果を表示 # from IPython.core.display import display, HTML # display(HTML(diff_output))   コードの詳細解説 ファイルの読み込み with openを使うことで、2つのテキストファイルを安全に開き、それぞれの行をリスト形式で取得します。\n1 2 3  with open(\u0026#34;file1.txt\u0026#34;, \u0026#34;r\u0026#34;) as f1, open(\u0026#34;file2.txt\u0026#34;, \u0026#34;r\u0026#34;) as f2: file1_lines = f1.readlines() file2_lines = f2.readlines()   差分取得のロジック difflib.ndiffを使い、2つのファイル間の差分を取得します。この関数は各行の差分を+, -,  （空白）で区別します。\n +：file2に追加された行 -：file1から削除された行 空白（ ）：変更がない行  HTML形式で整形する処理 取得した差分をHTMLで整形し、視覚的に分かりやすく表示するためにスタイルを指定しています。背景色を変えることで、変更点を直感的に把握できるようにしています。\n1 2  if line.startswith(\u0026#34; \u0026#34;): # 変更がない行 diff_output += f\u0026#34;\u0026lt;div style=\u0026#39;background-color: #fefefe;\u0026#39;\u0026gt;{line_number_1:04d} | {line_number_2:04d} | {line.strip()}\u0026lt;/div\u0026gt;\u0026#34;   HTMLで結果を表示 最終的にdiff.htmlに出力、IPython.displayを使ってHTMLの差分をレンダリングします。Jupyter NotebookやGoogle Colabで動作するコードです。\n1 2 3  # GoogleColabでHTMLで結果を表示 from IPython.core.display import display, HTML display(HTML(diff_output))   実用例と活用シーン   開発現場でのコードレビュー\n変更されたコードの確認を効率的に行えます。\n  設定ファイルの違いを比較\n複数の環境間での設定ファイルの差異を確認するのに役立ちます。\n  教育・学習用途\nプログラミングの教育現場で、コードの変更点を直感的に伝えるために活用できます。\n  参考  Python公式ドキュメント - difflib  ","description":"ファイルの内容を比較し、その差分を視覚的に分かりやすく表示したい場面はよくあります。コードの変更点を確認したり、設定ファイルの違いをチェックしたりする際に便利です。","id":24,"section":"tech","tags":["Python"],"title":"【Python】簡単にファイルの差分を比較する方法：HTMLで色付き・行番号付きの表示を実現","uri":"https://c-a-p-engineer.github.io/tech/2024/12/23/python-diff-html-comparison/"},{"content":"Google Colabでmoviepyを使用してGPUエンコードを行う方法 Google Colab環境でmoviepyを使用して動画エンコードを行う際に、GPUエンコーダーとしてh264_nvencを指定してもエラーが発生し、GPUエンコードが機能しない問題があります。本記事では、この問題の原因と解決策について詳しく解説します。\n問題の概要 Google Colab上でGPUを有効化した状態で、moviepyを使用して動画エンコードを行う際に、以下のようなエラーが発生することがあります。\n1  Unknown encoder \u0026#39;h264_nvenc   このエラーは、h264_nvencエンコーダーが存在しない、または使用できない場合に発生します。しかし、ffmpegコマンドで確認すると、h264_nvencが利用可能なエンコーダーに含まれているにもかかわらず、動作しない状況が発生します。\n問題の原因 この問題は、Google Colab上のmoviepyが使用するffmpegのパスが正しく設定されていないことが原因である可能性があります。そのため、moviepyが正しいffmpegを参照していないためにエンコーダーが利用できなくなっています。\n解決策 ffmpegのパスを明示的に設定する 以下のコードをスクリプトの冒頭に追加することで、moviepyが正しいffmpegのバイナリを参照するようになります。\n1 2  from moviepy.config import change_settings change_settings({\u0026#34;FFMPEG_BINARY\u0026#34;: \u0026#34;ffmpeg\u0026#34;})   GPUエンコードの確認 上記コードを適用した後、moviepyで以下のように動画エンコードを試してください。\n1 2 3 4 5 6 7  from moviepy.editor import VideoFileClip clip = VideoFileClip(\u0026#34;input_video.mp4\u0026#34;) clip.write_videofile( \u0026#34;output_video.mp4\u0026#34;, codec=\u0026#34;h264_nvenc\u0026#34; )   これで、GPUエンコーダーh264_nvencを使用したエンコードが正常に動作するはずです。\n補足情報 Google Colab上でh264_nvencが利用可能かどうかを確認するために、以下のコマンドを使用することもできます。\n1  !ffmpeg -encoders | grep nvenc   このコマンドの結果として、h264_nvencやhevc_nvencなどのエンコーダーが表示されていれば、正しくインストールされています。\nまとめ Google Colab環境でmoviepyを使用してGPUエンコードを行う際に、h264_nvencエンコーダーが使用できない場合は、moviepyのFFMPEG_BINARY設定を正しく変更することで問題を解決できます。これにより、Colab上で効率的に動画処理を行うことが可能になります。\n参考  Google ColabとmoviepyでGPUエンコーディングを試す - Qiita fmpeg_write_video - moviepy Documentation  ","description":"Google Colab環境で`moviepy`を使用して動画エンコードを行う際に、GPUエンコーダーとして`h264_nvenc`を指定してもエラーが発生し、GPUエンコードが機能しない問題があります。","id":25,"section":"tech","tags":["Python"],"title":"【Google Colab】moviepyを使用してGPUエンコードを行う方法","uri":"https://c-a-p-engineer.github.io/tech/2024/12/22/google-colab-ngrok/"},{"content":"【Python】Google Colabでngrokを使ってアクセスする方法 Google Colab でWebサーバーを立てたりすると通常ではアクセスできないので ngrok を使ってアクセスする方法のメモ。\nngrokとは ngrokはローカルで動作しているWebサーバー（localhost）を、外部からアクセス可能なURLとして公開するためのトンネリングツールです。\nGoogle Colabやローカル開発環境でテスト中のWebサービスを、クライアントや他の開発者に簡単に共有したい場合、ngrokを通じて一時的なパブリックURLを発行できます。\nオペレーターにとっては、ミッション達成への迅速なアクセスルートを提供するための戦術的支援ツールと言えます。\nngrokトークンの取得方法 ngrokの利用には無料アカウント作成が可能で、アカウント作成後に認証トークンを発行します。\n具体的な手順は以下のとおりです：\n ngrokにアクセスし、アカウントを作成（無料プランでOK）。 ログイン後、ダッシュボードからAuth Tokenが表示されます。 このトークンをngrok利用時にコード内で設定します。  認証トークンは、まるでローカルのミッションを外部ネットワークへ安全に届けるための暗号キーのような存在です。\nサンプルコード 以下はGoogle Colab上でFlaskサーバーを起動し、ngrokを用いて外部からアクセス可能なURLを発行するサンプルコードです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  !pip install flask pyngrok import os from flask import Flask from pyngrok import ngrok, conf # ngrokトークンを設定 conf.get_default().auth_token = \u0026#34;\u0026lt;YOUR_NGROK_TOKEN\u0026gt;\u0026#34; app = Flask(__name__) @app.route(\u0026#34;/\u0026#34;) def home(): return \u0026#34;Hello, World!\u0026#34; if __name__ == \u0026#34;__main__\u0026#34;: # ngrokで5000番ポートを外部公開 public_url = ngrok.connect(5000) print(f\u0026#34;ngrok URL: {public_url}\u0026#34;) # Flaskサーバーを起動 app.run(port=5000)   ポイント：\n conf.get_default().auth_token = \u0026quot;\u0026lt;YOUR_NGROK_TOKEN\u0026gt;\u0026quot;でトークンを設定します。 ngrok.connect(5000)で、Flaskが使用する5000番ポートをトンネル経由で公開。 実行後、出力にhttps://xxxx.ngrok.ioといった形式のURLが表示され、これをブラウザで開くと\u0026quot;Hello, World!\u0026quot;が表示されます。  まとめ  ngrokを使うことで、ローカルで起動したWebアプリケーションを外部へ公開可能。 認証トークンはアカウント作成後に取得し、conf.get_default().auth_tokenで設定。 このサンプルを活用することで、Google Colab上で手軽にWebサービスをデプロイする代替策として利用できます。  ","description":"Google Colab でWebサーバーを立てたりすると通常ではアクセスできないので ngrok を使ってアクセスする方法のメモ。","id":26,"section":"tech","tags":["Python"],"title":"【Python】Google Colabでngrokを使ってアクセスする方法","uri":"https://c-a-p-engineer.github.io/tech/2024/12/20/google-colab-ngrok/"},{"content":"ターミナルのプロンプト記号の意味を理解しよう ターミナルを操作していると、コマンドの先頭に$や#などの記号が表示されることに気づくと思います。これらの記号は、ただの飾りではなく、ユーザーの操作環境や権限に関する重要な情報を提供しています。この記事では、それぞれの記号の意味と役割について詳しく説明します。\n$: 一般ユーザーのプロンプト $記号は、一般ユーザーが使用していることを示すプロンプトです。LinuxやmacOSなどのシステムでは、通常の操作を行うユーザーは特別な権限を持たないため、システム全体に影響を与えるコマンドの実行が制限されます。\n 例: 1  [user@hostname ~]$   この表示は、userというユーザーがhostnameというコンピュータで、ホームディレクトリ（~）にいることを示しています。$記号が最後に付いているため、このユーザーは一般権限でシステムを操作していることが分かります。\n  #: rootユーザーのプロンプト #記号は、システムの管理者権限（rootユーザー）で操作していることを示します。rootユーザーは、システムのすべてのファイルや設定にアクセスできるため、慎重に操作する必要があります。\n 例: 1  [root@hostname ~]#   これは、rootユーザーがホームディレクトリにいる状態でシステムを操作していることを示します。rootユーザーはシステム管理の特別な権限を持っているため、誤った操作がシステム全体に影響を与える可能性があるため、注意が必要です。\n  %: 特定のシェルでのプロンプト %記号は、Cシェル（csh）やTcshなどの特定のシェル環境で一般ユーザーとして操作していることを示します。bashやzshなどのシェルでは$が一般的ですが、他のシェルでは%が使用されることがあります。\n 例: 1  [user@hostname ~]%   これは、一般ユーザーがCシェル環境で操作していることを示すプロンプトです。\n  プロンプトのカスタマイズ これらの記号やプロンプトはデフォルトの設定ですが、シェルの設定ファイル（例: .bashrc）を変更することでカスタマイズできます。たとえば、プロンプトの表示内容を変更して、現在の日時やシステムの状態を表示することも可能です。\nカスタマイズの方法については、以下のコマンドを使用して現在のプロンプト設定を確認できます：\necho $PS1 これにより、現在のプロンプトがどのように構成されているかが分かります。\n終わりに ターミナルのプロンプトに表示される$や#、%といった記号は、ユーザーの操作権限やシェル環境を示す重要な指標です。これらの記号を正しく理解することで、ターミナルでの操作がより効率的になり、誤操作を防ぐことができます。とくに、rootユーザーの権限で操作する場合は、システム全体に影響を与える可能性があるため注意が必要です。\n参考  演習で学ぶインフラLinux - Linuxコマンドの基本：プロンプト  ","description":"ターミナルを操作していると、コマンドの先頭に$や#などの記号が表示されることに気づくと思います。","id":27,"section":"tech","tags":["bash"],"title":"ターミナルのプロンプト記号の意味を理解しよう","uri":"https://c-a-p-engineer.github.io/tech/2024/12/13/terminal-prompt-symbols/"},{"content":"CSSでテキストを「\u0026hellip;」で省略表示するシンプルな方法 長いテキストを省略表示したいときに、CSSだけで簡単に「\u0026hellip;」を付ける方法をご紹介します。この方法は、特定の行数でテキストを切り取るシンプルな実装です。\n実装方法 以下のCSSコードをコピーして使用してください。\n1 2 3 4 5 6  .text-truncate { overflow: hidden; /* 表示領域を超えたテキストを非表示にする */ display: -webkit-box; /* 行数制御を有効にする */ -webkit-box-orient: vertical; /* テキストを縦方向に並べる */ -webkit-line-clamp: 3; /* 最大3行に制限 */ }   使用例 以下のHTML構造にCSSクラスを追加するだけで機能します。\n1 2 3  \u0026lt;div class=\u0026#34;text-truncate\u0026#34;\u0026gt; 長いテキストをここに挿入してください。このテキストは、3行を超えると「...」で省略されます。これにより、限られたスペースでコンテンツを簡潔に表示することができます。 \u0026lt;/div\u0026gt;   試しに4行が入っている div を作っています。\n .text-truncate { overflow: hidden; /* 表示領域を超えたテキストを非表示にする */ display: -webkit-box; /* 行数制御を有効にする */ -webkit-box-orient: vertical; /* テキストを縦方向に並べる */ -webkit-line-clamp: 3; /* 最大3行に制限 */ }  1行目\n2行目\n3行目\n4行目  3行目の最後に「…」が付くようになります。\n動作の仕組み  overflow: hidden: コンテンツがボックスの高さを超えた場合に非表示にします。 display: -webkit-box: ボックス内のテキストを複数行で表示します。 -webkit-box-orient: vertical: テキストを縦方向に配置します。 -webkit-line-clamp: 表示する最大行数を設定します（例: 3行）。  注意点 この方法は現在、一部のブラウザ（主にWebkit系）でのみ動作します。最新ブラウザをターゲットにしている場合には問題ありませんが、古いブラウザのサポートを検討する際には他の方法を検討してください。\n参考資料  MDN Web Docs: -webkit-line-clamp\n-webkit-line-clamp の公式ドキュメント。使用方法やブラウザ対応状況について詳しく解説されています。 MDN Web Docs: overflow\nCSSプロパティ overflow に関する詳細情報。要素の表示領域を超えた内容をどう処理するかを制御します。 MDN Web Docs: display\ndisplay プロパティの公式ドキュメント。-webkit-box の意味と使い方を確認できます。  ","description":"長いテキストを省略表示したいときに、CSSだけで簡単に「...」を付ける方法をご紹介します。","id":28,"section":"tech","tags":["CSS"],"title":"CSSでテキストを「...」で省略表示するシンプルな方法","uri":"https://c-a-p-engineer.github.io/tech/2024/12/13/css-text-truncate/"},{"content":"【bash】簡単にJSONファイルを自動整形する方法 整形されていないJSONは読みにくく、解析が困難になることがあります。この記事では、Bashコマンドを使って簡単にJSONファイルを整形する方法を解説します。\nJSON整形に必要なツール：jq jqは、JSONデータを処理するための強力なコマンドラインツールです。以下の機能を備えています：\n JSONデータの整形 特定のデータ抽出 データの加工や変換  jqのインストール まず、jqをインストールしましょう。環境ごとにインストール方法が異なります。\nDebian/Ubuntu 1 2  sudo apt update sudo apt install jq   macOS (Homebrewを使用) 1  brew install jq   その他の環境 公式ドキュメントで詳細な手順を確認できます。\n jq  JSONファイルを整形する基本コマンド jqを使えば、1行のコマンドでJSONファイルを整形できます。\n基本コマンド構文 1  jq \u0026#39;.\u0026#39; input.json \u0026gt; output.json   コマンドの説明  jq '.'  JSON全体を指定して整形します。この場合、データの加工や変更は行われません。   input.json  整形したいJSONファイルを指定します。   \u0026gt;  整形結果を別のファイルにリダイレクトします。   output.json  整形後のファイル名を指定します。    実行例 整形前のJSON 以下のような整形されていないexample.jsonファイルを例にします：\n1  {\u0026#34;name\u0026#34;:\u0026#34;Alice\u0026#34;,\u0026#34;age\u0026#34;:25,\u0026#34;city\u0026#34;:\u0026#34;Tokyo\u0026#34;}   コマンドの実行 次のコマンドを実行します：\n1  jq \u0026#39;.\u0026#39; example.json \u0026gt; formatted_example.json   整形後のJSON 整形後のformatted_example.jsonは以下のようになります：\n1 2 3 4 5  { \u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;age\u0026#34;: 25, \u0026#34;city\u0026#34;: \u0026#34;Tokyo\u0026#34; }   このように、可読性が大幅に向上します。\nファイルを直接上書きしたい場合 元のファイルをそのまま上書きしたい場合は、以下のコマンドを使用します：\n1  jq \u0026#39;.\u0026#39; input.json \u0026gt; temp.json \u0026amp;\u0026amp; mv temp.json input.json   この方法では、一時ファイルを使用して安全に上書きします。\njqの便利な使い方 jqは整形だけでなく、以下のような操作も可能です：\n特定のキーの抽出 1  jq \u0026#39;.name\u0026#39; input.json   このコマンドは、JSON内のnameキーの値を抽出します。\nインデント幅の調整 デフォルトのインデント幅は2ですが、カスタマイズも可能です。\n1  jq --indent 4 \u0026#39;.\u0026#39; input.json   エラー対策 無効なJSONを処理しようとするとエラーになる jqは有効なJSONのみを処理できます。エラーが出る場合は、以下のようにJSONの形式を確認してください：\n JSONファイルが正しい形式であるか確認する。 必要に応じて、オンラインのJSONバリデーターで検証する。  まとめ Bashとjqを使うことで、JSONファイルを簡単に整形できるようになります。\nメリット  可読性の向上 コマンド1行で実行可能 インストールも簡単  シンプルな整形だけでなく、データの抽出や加工も可能なjqをぜひ活用してください。JSONの取り扱いがさらに便利になります！\n参考リンク  jq jq GitHub  ","description":"整形されていないJSONは読みにくく、解析が困難になることがあります。この記事では、Bashコマンドを使って簡単にJSONファイルを整形する方法を解説します。","id":29,"section":"tech","tags":["bash"],"title":"【bash】簡単にJSONファイルを自動整形する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/11/25/bash-json-format/"},{"content":"【PostgreSQL】データベースを初期化する方法 開発やテスト環境では、データベースを完全にリセットしたい場面が頻繁にあります。PostgreSQLでは、DROP SCHEMA と CREATE SCHEMA を使うことで簡単にデータベースを初期化できます。本記事では、PostgreSQL 16.3環境での具体的な手順、使用例、注意点について詳しく解説します。\nPostgreSQLでスキーマをリセットする理由 PostgreSQLでは、スキーマ（データベース内の論理構造）を削除・再作成することで、データベースをクリーンな状態に戻すことが可能です。以下のような場合に役立ちます：\n テストデータや不要なデータが蓄積している場合 テーブル構造やカラムを大幅に変更する必要がある場合 開発環境で初期状態を再現して動作確認をしたい場合  この方法は、すべてのテーブルやデータを削除し、新しいスキーマを作成するため、効率的で簡潔な初期化手段となります。\nDROP SCHEMAとCREATE SCHEMAの基本構文 DROP SCHEMA 指定したスキーマを削除します。CASCADE オプションを使用すると、スキーマ内のすべてのオブジェクト（テーブル、ビューなど）も同時に削除されます。\n1  DROPSCHEMApublicCASCADE;  このコマンドは、publicスキーマとその中のすべてのオブジェクトを削除します。\nCREATE SCHEMA 新しいスキーマを作成します。通常、デフォルトのpublicスキーマを再作成します。\n1  CREATESCHEMApublic;  このコマンドで、新たにpublicスキーマが作成されます。\nデータベースをリセットする具体的な手順 以下の手順でデータベースをリセットできます。\nPostgreSQLに接続 ターミナルまたはSQLクライアントツール（例: psql）を使用してデータベースに接続します。\n1  psql -U \u0026lt;ユーザー名\u0026gt; -d \u0026lt;データベース名\u0026gt;   publicスキーマの削除 次のSQLコマンドを実行して、publicスキーマを削除します。\n1  DROPSCHEMApublicCASCADE;  publicスキーマの再作成 削除したpublicスキーマを再作成します。\n1  CREATESCHEMApublic;  権限の再設定 再作成したpublicスキーマに対して、必要な権限を設定します。\n1 2  GRANTALLONSCHEMApublicTOpublic;GRANTALLONSCHEMApublicTO\u0026lt;ユーザー名\u0026gt;;  テーブルやデータの再作成 必要に応じて、テーブルやデータを再作成します。たとえば、以下のようにテーブルを作成し、データを挿入します。\n1 2 3 4 5 6  CREATETABLEexample_table(idSERIALPRIMARYKEY,nameVARCHAR(100)NOTNULL);INSERTINTOexample_table(name)VALUES(\u0026#39;Sample Data\u0026#39;);  注意点とベストプラクティス バックアップの取得\nスキーマを削除すると、データは完全に消失します。事前にバックアップを取得することを強く推奨します。\n1  pg_dump -U \u0026lt;ユーザー名\u0026gt; -d \u0026lt;データベース名\u0026gt; -f backup.sql   本番環境での使用を避ける\nこの手法は、開発やテスト環境での使用を想定しています。本番環境での実行は慎重に行ってください。\n権限設定の確認\nスキーマ再作成後、適切な権限が設定されていないと、アプリケーションが正常に動作しない可能性があります。権限設定を忘れずに行ってください。\nスクリプト化の検討\n頻繁にデータベースをリセットする場合は、SQLスクリプトを作成して自動化を検討してください。\nまとめ PostgreSQL 16.3環境でデータベースを初期化する際、DROP SCHEMAとCREATE SCHEMAを組み合わせることで、効率的にリセットが可能です。ただし、データの消失を伴うため、バックアップの取得や権限設定など、適切な手順を踏むことが重要です。これらの手法を活用して、開発やテスト環境の管理を効率化しましょう。\n参考資料  PostgreSQL 16.3 Documentation: DROP SCHEMA PostgreSQL 16.3 Documentation: CREATE SCHEMA PostgreSQL 16.3 Documentation: GRANT  これらの資料を参考に、適切な手順でデータベースのリセットを行ってください。\n","description":"開発やテスト環境では、データベースを完全にリセットしたい場面が頻繁にあります。","id":30,"section":"tech","tags":["PostgreSQL"],"title":"【PostgreSQL】データベースを初期化する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/11/25/postgresql-reset-schema/"},{"content":"PythonでPowerPointスライドをPNG画像に変換する方法 プレゼンテーション資料や報告書の一部を画像として保存したいときに、PowerPointスライド（PPTXファイル）をPNG形式の画像に変換する方法はとても便利です。この記事では、Pythonを用いてPPTXファイルをPNG形式に変換する方法を、手順を追って詳しく解説します。\nここでは、Pythonライブラリとシェルコマンドを使って、PowerPointファイルをPDFに変換し、そのPDFからスライドごとにPNG画像を生成する方法を紹介します。この方法は、Google ColabやローカルのPython環境でも実行でき、手軽にプレゼン資料を画像に変換したい場合に役立ちます。\n必要なライブラリと環境の準備 このコードを実行するには以下のライブラリとツールが必要です。\n  Pythonライブラリ：\n pdf2image: PDFから画像に変換するライブラリ os: フォルダやファイルパスを操作する標準ライブラリ    ツール：\n unoconv: PPTXファイルをPDFに変換するためのコマンドラインツール。LibreOfficeを使ってPowerPointをPDFに変換します。 poppler-utils: PDFから画像に変換する際に必要なツールセット。pdfinfo を含む。    これらのライブラリとツールはGoogle Colab上で簡単にセットアップできます。\nインストール方法（Google Colabの場合） Google Colabで実行する場合、以下のコマンドで必要なツールとライブラリをインストールします。\n1 2 3 4 5 6 7 8  # pdf2imageのインストール !pip install pdf2image # unoconvのインストール !apt-get install -y unoconv # pdf2imageとpopplerのインストール !apt-get install -y poppler-utils   ローカル環境での実行も可能ですが、unoconvをインストールするためにLibreOfficeが必要になる点に注意してください。\nPowerPointファイルをPDFに変換する方法 まず、PPTXファイルのパスを指定し、出力フォルダを設定します。そして、PPTXファイルをPDFに変換します。\nコード解説 1 2 3 4 5 6 7 8 9 10 11 12 13  import os # PPTXファイルのパスを指定 pptx_file_path = \u0026#34;sample.pptx\u0026#34; # ここにPPTXファイルのパスを入力 # 出力フォルダを自動で設定 output_folder = os.path.join(os.path.dirname(pptx_file_path), \u0026#34;slides_images\u0026#34;) os.makedirs(output_folder, exist_ok=True) # 1. PPTXをPDFに変換 pdf_file_path = pptx_file_path.replace(\u0026#34;.pptx\u0026#34;, \u0026#34;.pdf\u0026#34;) command = f\u0026#39;unoconv -f pdf \u0026#34;{pptx_file_path}\u0026#34;\u0026#39; os.system(command)   このコードは以下の手順を行います。\n PPTXファイルのパス指定：PowerPointファイルのパスを変数pptx_file_pathで指定します。 出力フォルダの設定：変換後のPDFと画像ファイルを保存するフォルダを指定し、存在しない場合は自動でフォルダを作成します。 PPTXからPDFへの変換：unoconvコマンドを使用してPPTXファイルをPDF形式に変換します。  PDFファイルをPNG画像に変換する方法 PDFファイルが生成されたら、次にPDFをスライドごとにPNG形式の画像に変換します。このステップではpdf2imageライブラリを使用して、PDFの各ページを個別のPNGファイルとして保存します。\nコード解説 1 2 3 4 5 6 7 8 9 10 11  from pdf2image import convert_from_path # 2. PDFが存在する場合、PDFを1ページずつ画像に変換 if os.path.exists(pdf_file_path): pages = convert_from_path(pdf_file_path, dpi=300) for i, page in enumerate(pages): image_path = os.path.join(output_folder, f\u0026#34;slide_{i+1}.png\u0026#34;) page.save(image_path, \u0026#34;PNG\u0026#34;) print(f\u0026#34;Page {i+1} saved as {image_path}\u0026#34;) else: print(\u0026#34;PDFファイルが見つかりません。PPTXの変換に失敗している可能性があります。\u0026#34;)   変換の手順  PDFの存在チェック：if os.path.exists(pdf_file_path)でPDFファイルが存在するか確認します。PDFが存在しない場合は、PPTXからPDFへの変換に失敗している可能性があります。 PDFから画像への変換：convert_from_path(pdf_file_path, dpi=300)を使って、PDFの各ページを画像形式で読み込みます。ここでdpi=300を設定することで、画像の解像度を調整しています。 PNG画像として保存：各ページをPNG形式で保存し、スライド番号ごとにファイル名を付けて出力フォルダに保存します。  コード全体 以下は、PPTXファイルをPNG形式の画像に変換するための全コードです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  import os from pdf2image import convert_from_path # PPTXファイルのパスを指定 pptx_file_path = \u0026#34;sample.pptx\u0026#34; # 出力フォルダの自動設定 output_folder = os.path.join(os.path.dirname(pptx_file_path), \u0026#34;slides_images\u0026#34;) os.makedirs(output_folder, exist_ok=True) # 1. PPTXをPDFに変換 pdf_file_path = pptx_file_path.replace(\u0026#34;.pptx\u0026#34;, \u0026#34;.pdf\u0026#34;) command = f\u0026#39;unoconv -f pdf \u0026#34;{pptx_file_path}\u0026#34;\u0026#39; os.system(command) # 2. PDFが存在する場合、PDFを1ページずつ画像に変換 if os.path.exists(pdf_file_path): pages = convert_from_path(pdf_file_path, dpi=300) for i, page in enumerate(pages): image_path = os.path.join(output_folder, f\u0026#34;slide_{i+1}.png\u0026#34;) page.save(image_path, \u0026#34;PNG\u0026#34;) print(f\u0026#34;Page {i+1} saved as {image_path}\u0026#34;) else: print(\u0026#34;PDFファイルが見つかりません。PPTXの変換に失敗している可能性があります。\u0026#34;)   まとめと注意点 このコードを使用することで、PowerPointスライドを簡単にPNG画像に変換できます。\n注意点  PDFファイルの解像度：convert_from_pathで指定するdpi値を変更することで、出力画像の解像度を調整できますが、高すぎると処理時間が長くなるため注意してください。  以上で、PythonでPPTXファイルをPNG画像に変換する方法の紹介は終了です。ぜひ試してみてください！\n","description":"プレゼンテーション資料や報告書の一部を画像として保存したいときに、PowerPointスライド（PPTXファイル）をPNG形式の画像に変換する方法はとても便利です。この記事では、Pythonを用いてPPTXファイルをPNG形式に変換する方法を、手順を追って詳しく解説します。","id":31,"section":"tech","tags":["Python"],"title":"【Python】PowerPointスライドをPNG画像に変換する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/11/12/python_pptx2pdf2png/"},{"content":"【Python】pptxファイルからノートを抽出する方法 Pythonを使ってPowerPoint（.pptx）ファイルからスライドごとのノートを抽出する方法について解説します。プレゼンテーションの資料として、スライド内容と併せてノート情報を参照したいケースは多いと思います。このコードでは、python-pptxライブラリを使用してスライドのノートを抽出する方法を紹介します。\n必要なライブラリと環境設定 このサンプルコードでは、PowerPointファイルを操作するためにpython-pptxライブラリを使用します。python-pptxはPowerPointファイルのスライド内容、ノート、画像などの操作が可能なライブラリです。\nライブラリのインストール まず、python-pptxライブラリをインストールします。\n1  pip install python-pptx   また、Google Colabなどのクラウド環境で実行する場合、ファイルパスの指定には注意が必要です。\n2. コードの概要と解説 以下のコードでは、PowerPointファイル内の各スライドのノートを抽出して、ページ番号とノートを対応させた辞書に格納し、結果を出力します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  from pptx import Presentation # PPTXファイルのパスを指定 pptx_file_path = \u0026#34;sample.pptx\u0026#34; # プレゼンテーションを読み込み prs = Presentation(pptx_file_path) # 各スライドのノートを取得 slide_notes = {} # ページ番号をキーに for i, slide in enumerate(prs.slides, start=1): # start=1で1からカウント notes = \u0026#34;\u0026#34; if slide.has_notes_slide and slide.notes_slide.notes_text_frame: notes = slide.notes_slide.notes_text_frame.text slide_notes[i] = notes # ページ番号をキーとして格納 print(f\u0026#34;Page {i} Notes: {notes}\u0026#34;) # スライドごとのノートがページ番号で格納されています   各部分の解説 コードの各部分について詳しく解説します。\nプレゼンテーションファイルの読み込み 1 2 3  from pptx import Presentation pptx_file_path = \u0026#34;sample.pptx\u0026#34; prs = Presentation(pptx_file_path)    Presentationクラスを使用して、指定したファイルパスのPowerPointファイルを読み込みます。 pptx_file_pathには、読み込みたいPowerPointファイルのパスを指定します。  スライドのノートを抽出 1 2 3 4 5 6 7  slide_notes = {} for i, slide in enumerate(prs.slides, start=1): notes = \u0026#34;\u0026#34; if slide.has_notes_slide and slide.notes_slide.notes_text_frame: notes = slide.notes_slide.notes_text_frame.text slide_notes[i] = notes print(f\u0026#34;Page {i} Notes: {notes}\u0026#34;)    prs.slidesでプレゼンテーション内のスライドにアクセスします。 enumerate関数を使用し、スライドを1から数えるためにstart=1を指定しています。 slide.has_notes_slideでノートが存在するかを確認し、存在する場合にはnotes_slide.notes_text_frame.textでノートのテキストを取得します。 slide_notes辞書に、スライド番号をキーとしてノートを格納します。  実行結果の確認 このコードを実行すると、各スライドごとにノートが表示されます。\n1 2 3  Page 1 Notes: 〇〇についての詳細 Page 2 Notes: 次回の進行内容 Page 3 Notes: 質問と回答の一覧   slide_notes辞書には、ページ番号をキーとした形式でノートが格納されています。例えば、slide_notes[1]で1枚目のスライドのノートにアクセスできます。\n応用例 抽出したノートをCSVファイルに出力 ノート情報をCSVファイルとして保存したい場合は、Pythonのcsvライブラリを使って出力できます。\n1 2 3 4 5 6 7  import csv with open(\u0026#34;slide_notes.csv\u0026#34;, \u0026#34;w\u0026#34;, newline=\u0026#34;\u0026#34;) as csvfile: writer = csv.writer(csvfile) writer.writerow([\u0026#34;Slide Number\u0026#34;, \u0026#34;Notes\u0026#34;]) for slide_number, notes in slide_notes.items(): writer.writerow([slide_number, notes])   これにより、スライド番号とノートのテキストがCSV形式で保存され、データの共有や確認がしやすくなります。\nまとめ この方法を使うことで、PythonでPowerPointファイルからスライドごとのノートを簡単に抽出できるようになります。とくに発表資料や共有資料で、各スライドに関連するメモを確認したい場合に役立ちます。また、抽出したデータを他の形式に変換したり、分析のためにデータベースに保存するなど、幅広い応用が可能です。\n python-pptxを使うことでプレゼンテーション資料の自動処理ができ、とくにビジネスシーンや教育の現場での効率化に貢献します。 今回のサンプルコードを活用し、資料の自動分析や生成の基礎として役立ててください。  参考  python-pptx Documentation  ","description":"プレゼンテーション資料や報告書の一部を画像として保存したいときに、PowerPointスライド（PPTXファイル）をPNG形式の画像に変換する方法はとても便利です。この記事では、Pythonを用いてPPTXファイルをPNG形式に変換する方法を、手順を追って詳しく解説します。","id":32,"section":"tech","tags":["Python"],"title":"【Python】pptxファイルからノートを抽出する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/11/12/python_pptx_note/"},{"content":"【Elixir】OptionParser.parse! でCLIオプションをパースする方法：Mixタスクでの実用例 ElixirでCLIツールやMixタスクを作成する際、ユーザーからのコマンドライン入力に応じて処理を分岐させたり、動的な引数を渡したりすることがよくあります。ElixirのOptionParser.parse!を使うことで、コマンドラインオプションを簡単に解析し、柔軟な処理を行うことが可能です。\n本記事では、OptionParser.parse!の使い方について、シンプルでわかりやすいサンプルコードを使って解説します。\nOptionParser.parse!の基本構文 OptionParser.parse!は、CLIオプションのパースを簡単に実現できるElixirの標準ライブラリです。次のような構文で使用します。\n1  OptionParser.parse!(args, switches: [option_name: :type])    args : パース対象となる引数リスト switches : 各オプションに期待するデータ型を指定するキーワードリスト  switchesで指定できる主な型は以下の通りです。\n :boolean : 真偽値として処理 :integer : 整数として処理 :string : 文字列として処理 [:integer, :keep] : 同じオプションが複数回指定された場合にすべて保持  それでは、これらのオプション指定について、サンプルコードを使って具体的に確認します。\nサンプルコードの解説 以下は、mix example.runというカスタムMixタスクを作成し、CLIオプションをパースするためのサンプルコードです。このコードを実行することで、指定されたオプションを解析し、その結果を出力します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  defmodule Mix.Tasks.Example.Run do use Mix.Task @shortdoc \u0026#34;A simple example task to demonstrate OptionParser.parse!\u0026#34; @moduledoc \u0026#34;\u0026#34;\u0026#34; A custom mix task to demonstrate CLI option parsing with OptionParser.parse!. Usage: mix example.run --mode production --verbose --retry 3 --user-id 1001 --user-id 1002 \u0026#34;\u0026#34;\u0026#34; def run(args) do Mix.Task.run(\u0026#34;app.start\u0026#34;, []) # オプションのパース {opts, _args} = OptionParser.parse!(args, switches: [ mode: :string, verbose: :boolean, retry: :integer, user_id: [:integer, :keep] ], aliases: [user_id: :user_id] ) IO.inspect(opts) end end   各オプションの説明  mode: :string : --modeオプションは文字列値を期待しています。たとえば--mode productionのように使います。 verbose: :boolean : --verboseオプションは指定されるとtrue、指定がなければfalseになります。 retry: :integer : --retryオプションは整数値を期待し、再試行回数などを指定する用途に使えます。 user_id: [:integer, :keep] : --user-idオプションは複数回指定可能で、複数のIDをリストとして保持します。  実行例と結果 このカスタムタスクを以下のように実行します。\n1  mix example.run --mode production --verbose --retry 3 --user-id 1001 --user-id 1002   実行すると、以下のようなパース結果が出力されます。\n1  [mode: \u0026#34;production\u0026#34;, verbose: true, retry: 3, user_id: 1001, user_id: 1002]   この結果から、各オプションが指定された通りに解釈されていることがわかります。--user-idオプションは複数回指定されていますが、取得した値は単一の整数として保持されています。\n※ここで注意してほしいのですが、--user-id は user_id のように変化します。\nOptionParser.parse!の詳細と応用 このコードを使えば、カスタムMixタスクにおいて、コマンドライン引数から柔軟にデータを取得し処理が可能です。また、OptionParser.parse!では、エラー処理やデフォルト値の設定なども追加できるため、実際のアプリケーションに応じたカスタマイズが推奨されます。\nたとえば、オプションが未指定の場合にデフォルト値を設定したり、無効なデータ型の入力があった場合にエラーメッセージを出力することで、ユーザーフレンドリーなCLIツールを作成することが可能です。\nまとめ OptionParser.parse!は、ElixirでCLIツールやMixタスクを構築する際に非常に便利な関数です。今回のサンプルコードのように、CLIオプションを柔軟に扱うことで、ユーザーフレンドリーなツールを作成できます。プロジェクトに応じたエラーハンドリングやデフォルト値の設定などを追加し、さらにカスタマイズして使うと良いでしょう。\n参考リンク  Elixir OptionParser Documentation (HexDocs)  ","description":"ElixirでCLIツールやMixタスクを作成する際、ユーザーからのコマンドライン入力に応じて処理を分岐させたり、動的な引数を渡したりすることがよくあります。","id":33,"section":"tech","tags":["Elixir"],"title":"【Elixir】OptionParser.parse! でCLIオプションをパースする方法：Mixタスクでの実用例","uri":"https://c-a-p-engineer.github.io/tech/2024/11/08/elixir-cli-optionparser-mix-task/"},{"content":"【Elixir】Phoenix LiveView live_redirect内にlive_componentを配置する方法：aタグでシンプルに対応する Phoenix LiveViewを使って開発する際、live_redirectの内部にlive_componentを配置すると、コンパイルエラーが発生することがあります。このエラーはlive_componentがlive_redirect内で正しく扱われないために発生します。この記事では、このエラーの原因と、aタグでシンプルに解決する方法を解説します。実際のサンプルコードを用いながら、エラーの回避方法について説明します。\nlive_redirect内でlive_componentを使ったときに発生するエラー たとえば、以下のようにlive_redirectの内部にlive_componentを配置しようとするとエラーが発生します。\n1 2 3  \u0026lt;%= live_redirect to: Routes.page_path(@socket, :show, entry.id) do %\u0026gt; \u0026lt;.live_component module={MyAppWeb.MyComponent} id=\u0026#34;component_id\u0026#34; some_data=\u0026#34;data\u0026#34; /\u0026gt; \u0026lt;% end %\u0026gt;   このコードをコンパイルすると、以下のようなエラーが表示されます：\n** (ArgumentError) cannot convert component MyAppWeb.MyComponent with id \u0026quot;component_id\u0026quot; to HTML. A component must always be returned directly as part of a LiveView template. これは、live_redirectブロック内で直接\u0026lt;.live_component /\u0026gt;を使うことがサポートされていないために発生します。Phoenixでは、live_componentを他のHTML要素やコンテンツタグでラップすることができません。この制約をクリアするために、aタグを活用します。\nエラーの原因と解決方法 Phoenix LiveViewでは、HTML要素やcontent_tagで囲んで\u0026lt;.live_component /\u0026gt;を配置すると、内部的にlive_componentがHTMLに変換されようとします。ですが、live_componentはテンプレートで直接使用されることが求められているため、コンテンツタグ内に配置されるとエラーになります。\nこの問題を解決するには、live_redirectをaタグに置き換えることで、リンク機能を持つタグの内部にlive_componentを配置できます。\naタグでシンプルに実装する方法 live_redirectの代わりに、\u0026lt;a\u0026gt;タグを直接使用し、必要なデータをdata-phx-linkやdata-phx-link-state属性として設定することで、LiveViewが要求する「リダイレクト機能」を持ったリンクとして動作します。以下に詳細なコードを示します。\nサンプルコード 元のコード まず、問題が発生する元のコード例を以下に示します：\n1 2 3  \u0026lt;%= live_redirect to: Routes.page_path(@socket, :show, entry.id) do %\u0026gt; \u0026lt;.live_component module={MyAppWeb.MyComponent} id=\u0026#34;component_id\u0026#34; some_data=\u0026#34;data\u0026#34; /\u0026gt; \u0026lt;% end %\u0026gt;   修正後のコード このコードを、以下のように修正します。\n1 2 3 4 5 6 7 8 9  \u0026lt;a href={Routes.page_path(@socket, :show, entry.id)} data-phx-link=\u0026#34;redirect\u0026#34; data-phx-link-state=\u0026#34;push\u0026#34;\u0026gt; \u0026lt;.live_component module={MyAppWeb.MyComponent} id={\u0026#34;component_#{entry.id}\u0026#34;} some_data=\u0026#34;data\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt;   修正後のコードのポイント   \u0026lt;a\u0026gt;タグのhref属性:\n live_redirectのtoの代わりに、href属性でリンク先を指定します。Routes.page_path(@socket, :show, entry.id)に動的なリンクを設定できます。    data-phx-link属性:\n data-phx-link=\u0026quot;redirect\u0026quot;で、クリック時にLiveViewがリダイレクトを認識できるようにします。    data-phx-link-state属性:\n data-phx-link-state=\u0026quot;push\u0026quot;にすることで、URLの履歴管理を行い、ブラウザの「戻る」操作などで正しく戻れるようにします。    \u0026lt;.live_component /\u0026gt;の配置:\n \u0026lt;.live_component /\u0026gt;を\u0026lt;a\u0026gt;タグ内のどこにでも配置でき、たとえば評価用のコンポーネントやアイコンを配置する場合にも活用できます。    まとめ この記事では、Phoenix LiveViewでlive_redirectの中にlive_componentを配置しようとしたときに発生するエラーとその解決方法について解説しました。live_redirectを\u0026lt;a\u0026gt;タグに置き換えることで、リダイレクト機能をそのままにして、live_componentを任意の場所に配置できるようになります。\nこのような構造により、ページ遷移のリダイレクトリンクをカスタマイズしやすくなり、live_componentを自由に組み込むことができるようになります。Phoenix LiveViewでのコンポーネントの利用をもっと効率化できるよう、ぜひこの方法を活用してみてください。\n","description":"Phoenix LiveViewを使って開発する際、`live_redirect`の内部に`live_component`を配置すると、コンパイルエラーが発生することがあります。","id":34,"section":"tech","tags":["Elixir"],"title":"【Elixir】Phoenix LiveView live_redirect内にlive_componentを配置する方法：aタグでシンプルに対応する","uri":"https://c-a-p-engineer.github.io/tech/2024/11/09/elixir-live_component_link/"},{"content":"Windowsで一定時間後に自動的にシャットダウン・再起動・スリープを行う方法 Windowsでは、コマンドプロンプトを使って簡単にシャットダウン、再起動、スリープをタイマーで設定することが可能です。Windows 10およびWindows 11に対応した方法を詳しく紹介します。\nカウントダウン表示やコマンドのキャンセル方法も解説しますので、ぜひ参考にしてください。\n対象環境  OS: Windows 10, Windows 11 コマンド使用環境: コマンドプロンプト（管理者権限が推奨）  シャットダウンを一定時間後に自動実行する方法 まず、コマンドプロンプトを開いて次のコマンドを実行します。/tオプションでシャットダウンまでの待ち時間を秒単位で指定できます。\nコマンド例 1  shutdown /s /t \u0026lt;秒数\u0026gt;    /s: シャットダウンを実行 /t \u0026lt;秒数\u0026gt;: 指定時間後にシャットダウンを実行  具体例 たとえば、30分（1800秒）後にPCを自動的にシャットダウンする場合は次のコマンドを使用します。\n1  shutdown /s /t 1800   再起動を一定時間後に実行する方法 再起動をタイマー設定する場合も、shutdownコマンドに/rオプションを付けることで簡単に設定できます。\nコマンド例 1  shutdown /r /t \u0026lt;秒数\u0026gt;    /r: 再起動を実行 /t \u0026lt;秒数\u0026gt;: 指定時間後に再起動を実行  具体例 10分（600秒）後に再起動する場合のコマンドは次の通りです。\n1  shutdown /r /t 600   スリープを一定時間後に実行する方法 スリープに関してはshutdownコマンドでは直接対応していないため、rundll32.exeを利用します。このコマンドを使うと、指定時間後にPCをスリープ状態にすることが可能です。\nコマンド例 1  timeout /t \u0026lt;秒数\u0026gt; \u0026amp;\u0026amp; rundll32.exe powrprof.dll,SetSuspendState 0,1,0    timeout /t \u0026lt;秒数\u0026gt;: 指定時間後に待機 rundll32.exe powrprof.dll,SetSuspendState 0,1,0: スリープを実行  具体例 1時間（3600秒）後にPCをスリープ状態にする場合のコマンドは以下の通りです。\n1  timeout /t 3600 \u0026amp;\u0026amp; rundll32.exe powrprof.dll,SetSuspendState 0,1,0   カウントダウンの表示方法 シャットダウンまでの時間をカウントダウン表示させるには、次のコマンドを使用します。これにより、1秒ごとにカウントダウンを行い、残り時間が表示されます。\nコマンド例 1  for /l %i in (\u0026lt;開始秒数\u0026gt;,-1,1) do (echo %i \u0026amp; timeout /t 1)   例: 10秒のカウントダウンを表示させる場合\n1  for /l %i in (10,-1,1) do (echo %i \u0026amp; timeout /t 1)   シャットダウンのキャンセル方法 設定したシャットダウンや再起動をキャンセルしたい場合は、次のコマンドを実行します。\nコマンド例 1  shutdown /a    /a: 現在のシャットダウンをキャンセル  注意点 一度タイマーが設定されると、変更はできません。変更する場合は、まずキャンセルを実行し、再度新しいタイマーを設定する必要があります【13†source】【14†source】。\nまとめ Windowsで一定時間後にシャットダウン、再起動、スリープを自動で行う方法は、コマンドプロンプトを使えば非常に簡単に設定できます。とくにshutdownコマンドを活用すれば、手軽にPCの電源管理を行うことが可能です。各コマンドはキャンセルもできるため、柔軟に操作できます。\n参考URL shutdown\nこれで、効率的にPCのシャットダウンやスリープを管理できますので、ぜひお試しください！\n","description":"Windowsでは、コマンドプロンプトを使って簡単にシャットダウン、再起動、スリープをタイマーで設定することが可能です。","id":35,"section":"tech","tags":["Windows"],"title":"Windowsで一定時間後に自動的にシャットダウン・再起動・スリープを行う方法","uri":"https://c-a-p-engineer.github.io/tech/2024/10/06/windows-shutdown/"},{"content":"【Python】標準出力の効果的な出力制御 Pythonで標準出力を操作する際、一般的には print() 関数を使うことがほとんどです。しかし、より細かく標準出力を制御したい場合や、リアルタイム性が求められるアプリケーションを作成する際には、sys.stdout.write() と sys.stdout.flush() を使用する必要があります。\nsys.stdout.write() とは？ sys.stdout.write() は、文字列を標準出力（コンソール）に出力する関数です。通常使われる print() 関数との違いは、改行が自動で行われない点です。これにより、出力を細かく制御できるようになります。\n基本的な使い方 まずは sys.stdout.write() の基本的な例を見てみましょう。\n1 2 3  import sys sys.stdout.write(\u0026#34;Hello, world!\u0026#34;)   このコードは「Hello, world!」をコンソールに出力しますが、print() と違って自動で改行しません。改行を追加したい場合は、\u0026quot;\\n\u0026quot; を文字列に含める必要があります。\n1  sys.stdout.write(\u0026#34;Hello, world!\\n\u0026#34;)   このように、sys.stdout.write() では改行を手動で指定することで、自由なフォーマットで出力をコントロールできます。\nprint() との違い print() 関数は、簡単で直感的に標準出力にデータを出力するために作られた関数です。次の例は print() を使用した場合の動作を示しています。\n1  print(\u0026#34;Hello, world!\u0026#34;)   print() では、デフォルトで文字列の最後に改行が追加されるため、次の出力が新しい行に表示されます。しかし、sys.stdout.write() では、改行を手動で追加しない限り、出力は一行に連続して表示されます。この違いを活かすことで、出力の細かい制御が可能になります。\nsys.stdout.flush() とは？ sys.stdout.flush() について見ていきます。これは標準出力のバッファ（内部メモリ）を強制的にフラッシュ（クリア）するための関数です。\nPythonでは、通常、出力はバッファリングされます。つまり、ある程度のデータが溜まるまで出力が遅れることがあります。バッファリングはパフォーマンス向上に役立ちますが、リアルタイム性が求められるプログラムでは不都合が生じることがあります。\nバッファリングとは？ バッファリングは、データの一部を一時的にメモリに保存し、一定量が溜まったときに一度に出力する仕組みです。これにより、頻繁な入出力操作を効率化できますが、即座に結果を出力したい場合には不適です。\nたとえば、長時間の処理やリアルタイムのログ出力が必要なプログラムでは、バッファリングが原因で出力が遅延し、ユーザーに正しい情報がタイムリーに伝わらない可能性があります。\nsys.stdout.flush() の使用方法 sys.stdout.flush() を使うと、標準出力に蓄積されたバッファを強制的に出力できます。\n1 2 3 4 5  import sys sys.stdout.write(\u0026#34;Processing...\u0026#34;) sys.stdout.flush() # 長時間の処理がここに入る   このコードでは、\u0026ldquo;Processing\u0026hellip;\u0026rdquo; というメッセージが即座に出力され、その後の長時間の処理が実行されます。sys.stdout.flush() を呼ばない場合、\u0026ldquo;Processing\u0026hellip;\u0026rdquo; のメッセージが長時間の処理の後に表示される可能性があります。\nsys.stdout.write() と sys.stdout.flush() を使った具体的な例 実際のプログラムで、これらの関数をどのように使うかを見てみましょう。ここでは、進捗バーを出力するシンプルな例を紹介します。\n1 2 3 4 5 6 7  import sys import time for i in range(101): sys.stdout.write(f\u0026#34;\\r進捗: {i}%\u0026#34;) sys.stdout.flush() time.sleep(0.1) # 0.1秒待機    sys.stdout.write() で同じ行に進捗率を上書きしています。\\r を使ってカーソルを行の先頭に戻し、次の進捗を表示します。 sys.stdout.flush() によって、即座に進捗が標準出力に反映されるようにしています。  この方法により、リアルタイムに進捗バーが表示されるため、ユーザーに対して処理の進行状況をわかりやすく伝えることができます。\nsys.stdout.write() と sys.stdout.flush() を使うべき場面 これらの関数は、以下のような場面でとくに有用です。\n リアルタイムのログ出力：ログデータを即座にコンソールやファイルに書き込む際に役立ちます。バッファリングによる遅延を防ぎ、重要な情報をリアルタイムに確認できます。 インタラクティブなプログラム：ユーザーが入力や処理の進行を即座に確認できるようにしたい場合に使用します。たとえば、ゲームやユーザー入力を扱うツールなどです。 長時間処理の進捗表示：長時間の処理中に進捗状況を表示することで、ユーザーに安心感を与えることができます。  まとめ Pythonで標準出力を細かく制御するには、sys.stdout.write() と sys.stdout.flush() を活用することで、バッファリングの問題を解消し、リアルタイム性の高い出力が可能になります。通常の print() 関数では実現できない細かい制御を行いたいとき、とくにログ出力や進捗表示などで役立つでしょう。\nこの2つの関数を理解し、適切に使うことで、標準出力の最適化を図り、より効率的でユーザーフレンドリーなプログラムを作成できるようになります。\n","description":"Pythonで標準出力を操作する際、一般的には `print()` 関数を使うことがほとんどです。","id":36,"section":"tech","tags":["Python"],"title":"【Python】標準出力の効果的な出力制御","uri":"https://c-a-p-engineer.github.io/tech/2024/09/24/python-sys-stdout-write-flush/"},{"content":"【Python】標準出力の効果的な出力制御 Pythonで標準出力を操作する際、一般的には print() 関数を使うことがほとんどです。しかし、より細かく標準出力を制御したい場合や、リアルタイム性が求められるアプリケーションを作成する際には、sys.stdout.write() と sys.stdout.flush() を使用する必要があります。\nsys.stdout.write() とは？ sys.stdout.write() は、文字列を標準出力（コンソール）に出力する関数です。通常使われる print() 関数との違いは、改行が自動で行われない点です。これにより、出力を細かく制御できるようになります。\n基本的な使い方 まずは sys.stdout.write() の基本的な例を見てみましょう。\n1 2 3  import sys sys.stdout.write(\u0026#34;Hello, world!\u0026#34;)   このコードは「Hello, world!」をコンソールに出力しますが、print() と違って自動で改行しません。改行を追加したい場合は、\u0026quot;\\n\u0026quot; を文字列に含める必要があります。\n1  sys.stdout.write(\u0026#34;Hello, world!\\n\u0026#34;)   このように、sys.stdout.write() では改行を手動で指定することで、自由なフォーマットで出力をコントロールできます。\nprint() との違い print() 関数は、簡単で直感的に標準出力にデータを出力するために作られた関数です。次の例は print() を使用した場合の動作を示しています。\n1  print(\u0026#34;Hello, world!\u0026#34;)   print() では、デフォルトで文字列の最後に改行が追加されるため、次の出力が新しい行に表示されます。しかし、sys.stdout.write() では、改行を手動で追加しない限り、出力は一行に連続して表示されます。この違いを活かすことで、出力の細かい制御が可能になります。\nprint 補足 先に書いたように「デフォルトで文字列の最後に改行が追加される」ので、目的ごとにprint() 関数の各オプションを利用してください。\n   オプション 説明 デフォルト値 使用例     sep 引数間の区切り文字を指定 \u0026quot; \u0026quot; （スペース） print(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;, sep=\u0026quot;,\u0026quot;) → A,B   end 出力の最後に追加する文字列 \u0026quot;\\n\u0026quot; （改行） print(\u0026quot;Hello\u0026quot;, end=\u0026quot;!\u0026quot;) → Hello!   file 出力先を指定（標準出力以外） sys.stdout （標準出力） print(\u0026quot;Text\u0026quot;, file=f) （ファイルに出力）   flush バッファリングを無効にし即時出力 False print(\u0026quot;Loading\u0026quot;, flush=True) （即時出力）    sys.stdout.flush() とは？ sys.stdout.flush() について見ていきます。これは標準出力のバッファ（内部メモリ）を強制的にフラッシュ（クリア）するための関数です。\nPythonでは、通常、出力はバッファリングされます。つまり、ある程度のデータが溜まるまで出力が遅れることがあります。バッファリングはパフォーマンス向上に役立ちますが、リアルタイム性が求められるプログラムでは不都合が生じることがあります。\nバッファリングとは？ バッファリングは、データの一部を一時的にメモリに保存し、一定量が溜まったときに一度に出力する仕組みです。これにより、頻繁な入出力操作を効率化できますが、即座に結果を出力したい場合には不適です。\nたとえば、長時間の処理やリアルタイムのログ出力が必要なプログラムでは、バッファリングが原因で出力が遅延し、ユーザーに正しい情報がタイムリーに伝わらない可能性があります。\nsys.stdout.flush() の使用方法 sys.stdout.flush() を使うと、標準出力に蓄積されたバッファを強制的に出力できます。\n1 2 3 4 5  import sys sys.stdout.write(\u0026#34;Processing...\u0026#34;) sys.stdout.flush() # 長時間の処理がここに入る   このコードでは、\u0026ldquo;Processing\u0026hellip;\u0026rdquo; というメッセージが即座に出力され、その後の長時間の処理が実行されます。sys.stdout.flush() を呼ばない場合、\u0026ldquo;Processing\u0026hellip;\u0026rdquo; のメッセージが長時間の処理の後に表示される可能性があります。\nsys.stdout.write() と sys.stdout.flush() を使った具体的な例 実際のプログラムで、これらの関数をどのように使うかを見てみましょう。ここでは、進捗バーを出力するシンプルな例を紹介します。\n1 2 3 4 5 6 7  import sys import time for i in range(101): sys.stdout.write(f\u0026#34;\\r進捗: {i}%\u0026#34;) sys.stdout.flush() time.sleep(0.1) # 0.1秒待機    sys.stdout.write() で同じ行に進捗率を上書きしています。\\r を使ってカーソルを行の先頭に戻し、次の進捗を表示します。 sys.stdout.flush() によって、即座に進捗が標準出力に反映されるようにしています。  この方法により、リアルタイムに進捗バーが表示されるため、ユーザーに対して処理の進行状況をわかりやすく伝えることができます。\nsys.stdout.write() と sys.stdout.flush() を使うべき場面 これらの関数は、以下のような場面でとくに有用です。\n リアルタイムのログ出力：ログデータを即座にコンソールやファイルに書き込む際に役立ちます。バッファリングによる遅延を防ぎ、重要な情報をリアルタイムに確認できます。 インタラクティブなプログラム：ユーザーが入力や処理の進行を即座に確認できるようにしたい場合に使用します。たとえば、ゲームやユーザー入力を扱うツールなどです。 長時間処理の進捗表示：長時間の処理中に進捗状況を表示することで、ユーザーに安心感を与えることができます。  まとめ Pythonで標準出力を細かく制御するには、sys.stdout.write() と sys.stdout.flush() を活用することで、バッファリングの問題を解消し、リアルタイム性の高い出力が可能になります。通常の print() 関数では実現できない細かい制御を行いたいとき、とくにログ出力や進捗表示などで役立つでしょう。\nこの2つの関数を理解し、適切に使うことで、標準出力の最適化を図り、より効率的でユーザーフレンドリーなプログラムを作成できるようになります。\n","description":"Pythonで標準出力を操作する際、一般的には print() 関数を使うことがほとんどです。","id":37,"section":"tech","tags":["Python"],"title":"【Python】標準出力の効果的な出力制御","uri":"https://c-a-p-engineer.github.io/tech/2024/09/29/python-sys-stdout-write-flush/"},{"content":"Pythonで出力を取得、バッファする方法 Pythonのprint()関数は通常、コンソールに出力されます。しかし、特定の状況では、標準出力をキャプチャしてプログラム内で利用したい場合があります。たとえば、ログを収集したり、テスト中の出力を確認したりするために、出力をバッファに保存して操作することが求められます。\nsys.stdoutをリダイレクトして、Pythonの標準出力をバッファにキャプチャする方法について詳しく解説します。\n標準出力とは？ 標準出力（stdout）は、通常プログラムがデータを出力するために使用するデフォルトの出力先です。コンソールやターミナル上で実行されるPythonプログラムでは、print()によって生成されたデータは標準出力に送られ、コンソールに表示されます。\nしかし、標準出力を「バッファ（メモリ上に一時的に保存）」することで、その出力をプログラム内で操作できるようになります。\n出力をキャプチャする方法 Pythonでは、sys.stdoutをio.StringIO()というクラスにリダイレクトすることで、標準出力をバッファにキャプチャすることができます。以下の手順で実装していきましょう。\n必要なモジュールをインポート まず、標準出力のリダイレクトに必要なモジュールをインポートします。\n1 2  import sys import io   バッファの作成 次に、io.StringIO()を使用して、出力を保存するためのバッファを作成します。このバッファに標準出力がリダイレクトされます。\n1  output_buffer = io.StringIO()   標準出力をバッファにリダイレクト 次に、元の標準出力を保存してから、新たに作成したoutput_bufferに標準出力をリダイレクトします。これにより、print()による出力がバッファに保存されるようになります。\n1 2  original_stdout = sys.stdout # 元の標準出力を保存 sys.stdout = output_buffer # 標準出力をバッファにリダイレクト   出力をキャプチャ これで、通常コンソールに表示されるはずの出力がバッファに保存されるようになります。print()関数を使って何かを出力してみましょう。\n1  print(\u0026#34;この出力はキャプチャされます。\u0026#34;)   標準出力を元に戻す すべての出力がバッファに保存された後、元の標準出力に戻す必要があります。これにより、後続の出力が再びコンソールに表示されるようになります。\n1  sys.stdout = original_stdout # 標準出力を元に戻す   バッファからキャプチャされた出力を取得 最後に、output_buffer.getvalue()を使って、バッファに保存された出力を文字列として取得します。\n1 2  captured_output = output_buffer.getvalue() print(f\u0026#34;キャプチャされた出力: {captured_output}\u0026#34;)   フルコード 以下に、出力をバッファにキャプチャするフルコードを示します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import sys import io # 出力をキャプチャするためのバッファを作成 output_buffer = io.StringIO() # sys.stdoutを一時的にバッファに変更 original_stdout = sys.stdout # 元のsys.stdoutを保存 sys.stdout = output_buffer # stdoutをリダイレクト # 任意のprint文 print(\u0026#34;この出力はキャプチャされます。\u0026#34;) # sys.stdoutを元に戻す sys.stdout = original_stdout # バッファからキャプチャされた出力を取得 captured_output = output_buffer.getvalue() # 結果を表示 print(f\u0026#34;キャプチャされた出力: {captured_output}\u0026#34;)   まとめ Pythonの標準出力をバッファにキャプチャすることで、出力内容を動的に取得して処理できます。これは、ログの記録やテストのための便利な方法です。上記の手法を活用して、柔軟な出力管理を行いましょう。\n参考 io \u0026mdash; ストリームを扱うコアツール\n","description":"特定の状況では、標準出力をキャプチャしてプログラム内で利用したい場合があります。今回はそんな方法の紹介です。","id":38,"section":"tech","tags":["Python"],"title":"【Python】出力を取得、バッファする方法","uri":"https://c-a-p-engineer.github.io/tech/2024/09/18/python-io-buffer/"},{"content":"Google ColabでGoogle Driveのゴミ箱内のファイルを削除する Google Driveを利用していると、不要になったファイルをゴミ箱に移動することがよくあります。しかし、ゴミ箱の中にはファイルがどんどん溜まってしまい、いずれ管理が面倒になることがあります。そこで今回は、Google Colabを使って、Google Driveのゴミ箱内のファイルを一括削除できるコードを紹介します。\nこのコードは、Google Drive APIを使用し、ゴミ箱内のすべてのファイルをリスト化して、削除する機能を持っています。また、削除するファイルの名前やパスを表示することで、どのファイルが削除されたかを確認できるようにしています。\nコードの説明 以下に紹介するコードは、Google Colab上でGoogle Drive APIを利用し、ゴミ箱にあるファイルを一覧取得し、順番に削除していきます。また、ファイルの削除状況を確認するために進捗バーを表示し、どのファイルが削除されたかをコンソールに出力します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79  # @title GoogleDriveゴミ箱削除 from googleapiclient.discovery import build from google.auth.transport.requests import Request from google.oauth2.credentials import Credentials from google.colab import auth from google.auth import default from tqdm import tqdm import time def authenticate(): \u0026#34;\u0026#34;\u0026#34;ユーザーを認証し、Google Drive APIのサービスを構築する\u0026#34;\u0026#34;\u0026#34; auth.authenticate_user() # Colab特有の認証プロセス creds, _ = default() # デフォルトの認証情報を取得 return build(\u0026#39;drive\u0026#39;, \u0026#39;v3\u0026#39;, credentials=creds) def list_all_trashed_files(service): \u0026#34;\u0026#34;\u0026#34;ゴミ箱内のすべてのファイルを古い順にリスト化\u0026#34;\u0026#34;\u0026#34; items = [] page_token = None query = \u0026#34;trashed=true\u0026#34; fields = \u0026#34;nextPageToken, files(id, name, parents, createdTime)\u0026#34; # ページネーションを処理しつつ、すべての削除対象ファイルをリスト化 while True: results = service.files().list(q=query, orderBy=\u0026#34;createdTime\u0026#34;, fields=fields, pageToken=page_token).execute() items.extend(results.get(\u0026#39;files\u0026#39;, [])) page_token = results.get(\u0026#39;nextPageToken\u0026#39;, None) if not page_token: break return items def get_full_file_path(service, file_id): \u0026#34;\u0026#34;\u0026#34;ファイルIDからファイルパスを取得する\u0026#34;\u0026#34;\u0026#34; try: path_elements = [] current_file = service.files().get(fileId=file_id, fields=\u0026#39;id, name, parents\u0026#39;).execute() # 親フォルダをたどりながらパスを生成 while \u0026#39;parents\u0026#39; in current_file: parent_id = current_file[\u0026#39;parents\u0026#39;][0] current_file = service.files().get(fileId=parent_id, fields=\u0026#39;id, name, parents\u0026#39;).execute() path_elements.insert(0, current_file[\u0026#39;name\u0026#39;]) path_elements.append(current_file[\u0026#39;name\u0026#39;]) return \u0026#39;/\u0026#39; + \u0026#39;/\u0026#39;.join(path_elements) except Exception as e: return f\u0026#34;パス取得失敗: {str(e)}\u0026#34; def delete_file(service, file): \u0026#34;\u0026#34;\u0026#34;単一のファイルを削除し、結果を表示\u0026#34;\u0026#34;\u0026#34; try: file_path = get_full_file_path(service, file[\u0026#39;id\u0026#39;]) service.files().delete(fileId=file[\u0026#39;id\u0026#39;]).execute() print(f\u0026#34;削除: {file[\u0026#39;name\u0026#39;]} (ID: {file[\u0026#39;id\u0026#39;]}) - パス: {file_path}\u0026#34;) except Exception as e: print(f\u0026#34;削除失敗: {file[\u0026#39;name\u0026#39;]} (ID: {file[\u0026#39;id\u0026#39;]}) - エラー: {str(e)}\u0026#34;) def empty_trash(service): \u0026#34;\u0026#34;\u0026#34;ゴミ箱内のファイルを削除し、進捗を表示\u0026#34;\u0026#34;\u0026#34; items = list_all_trashed_files(service) if not items: print(\u0026#34;ゴミ箱に削除対象ファイルはありません。\u0026#34;) return total_items = len(items) print(f\u0026#34;削除対象の総ファイル数: {total_items}\u0026#34;) # tqdmで進捗表示 with tqdm(total=total_items, desc=\u0026#34;ファイル削除中\u0026#34;, unit=\u0026#34;file\u0026#34;) as pbar: for file in items: delete_file(service, file) pbar.update(1) # メイン処理 if __name__ == \u0026#39;__main__\u0026#39;: service = authenticate() empty_trash(service)   コードのポイント   認証のセットアップ (authenticate関数)\nGoogle Colab環境で認証を行い、Google Drive APIにアクセスできるようにします。default()を使って、認証情報を自動的に取得します。このプロセスは、Google Colab上で行う特有の方法です。\n  ゴミ箱内のファイル一覧取得 (list_all_trashed_files関数)\nfiles().list メソッドを利用して、ゴミ箱内にあるすべてのファイルを取得します。取得したファイルは古い順にソートされます。\n  ファイルパスの取得 (get_full_file_path関数)\n削除されるファイルのパスを取得します。ファイルの親フォルダをたどりながら、完全なファイルパスを構築します。\n  ファイル削除 (delete_file関数)\nGoogle Driveからファイルを削除し、その結果をコンソールに出力します。削除されたファイルの名前、ID、およびパスを表示します。\n  ゴミ箱内のすべてのファイルを削除 (empty_trash関数)\nゴミ箱内のファイルをすべて削除します。tqdm を使って、削除処理の進捗が視覚的に確認できるようにしています。\n  まとめ このスクリプトを使用することで、Google Colab上でGoogle Driveのゴミ箱内のファイルを簡単に一括削除することができます。特に、大量のファイルがゴミ箱に溜まっている場合には、効率的に作業を進めることができるため非常に便利です。\nGoogle Drive APIを使った自動化の良い例として、ぜひGoogle Colabを使って試してみてください。\n","description":"Google Driveのゴミ箱内のファイルを一括削除できるコードを紹介します。","id":39,"section":"tech","tags":["Python"],"title":"Google ColabでGoogle Driveのゴミ箱内のファイルを削除する","uri":"https://c-a-p-engineer.github.io/tech/2024/09/15/google-colab-google-drive-trash/"},{"content":"Google Colab RustでHello, world! Google ColabはPythonを中心とした開発環境ですが、Rustのプログラムも実行できます。Google ColabでRustを使用して「Hello, world!」を実行するための手順を詳しく説明します。\nRustのインストール まず、Google ColabにRustをインストールします。Rustup（Rustのインストーラ）を使用してインストールします。\n以下のコードをGoogle Colabのセルにコピーして実行してください。\n1 2 3 4 5 6 7 8 9  # Rustup (Rustのインストーラ) を使用してRustをインストールします。 !curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y # パスを設定します。 import os os.environ[\u0026#39;PATH\u0026#39;] += f\u0026#34;:{os.path.expanduser(\u0026#39;~\u0026#39;)}/.cargo/bin\u0026#34; # Rustのバージョンを確認して、正しくインストールされたか確認します。 !rustc --version   このコードはRustをインストールし、環境変数にRustのバイナリパスを追加し、Rustのバージョンを確認します。\nRustプログラムの作成 次に、簡単なRustプログラムを作成します。このプログラムは「Hello, world!」と出力するだけのシンプルなものです。\n以下のコードを新しいセルにコピーして実行してください。\n1 2 3 4 5 6 7 8  # Rustプログラムをファイルに書き込みます。 program = \u0026#34;\u0026#34;\u0026#34; fn main() { println!(\u0026#34;Hello, world!\u0026#34;); } \u0026#34;\u0026#34;\u0026#34; with open(\u0026#39;hello_world.rs\u0026#39;, \u0026#39;w\u0026#39;) as file: file.write(program)   このコードはhello_world.rsという名前のファイルを作成し、その中にRustの「ハローワールド」プログラムを書き込みます。\nプログラムのコンパイルと実行 最後に、作成したRustプログラムをコンパイルし、実行します。\n以下のコードを新しいセルにコピーして実行してください。\n1 2 3 4 5  # Rustプログラムをコンパイルします。 !rustc hello_world.rs # コンパイルされたバイナリを実行します。 !./hello_world   このコードはhello_world.rsをコンパイルし、生成されたバイナリを実行して「Hello, world!」と表示します。\nまとめ Google Colab上でRustの「Hello, World!」プログラムを実行することができました。\nRustを使って複雑なプログラムに挑戦してみてください。\n","description":"Pythonで開発を行っていると、インストール済みのパッケージやその詳細を確認したい場面があります。","id":40,"section":"tech","tags":["Python"],"title":"Google Colab RustでHello, world!","uri":"https://c-a-p-engineer.github.io/tech/2024/08/08/google-colab-rust/"},{"content":"Pythonパッケージを調べる方法 Pythonで開発を行っていると、インストール済みのパッケージやその詳細を確認したい場面があります。また、特定のパッケージ内の関数やクラスを調べることも必要です。ここでは、Pythonパッケージを調べる方法と、その実行結果を示します。\nインストール済みパッケージの確認方法 pipコマンドを使用する pipコマンドを使うと、インストール済みのパッケージ一覧や特定のパッケージの詳細情報を確認できます。\n  インストール済みのパッケージ一覧を表示する\n1  pip list   実行結果例:\n1 2 3 4  Package Version ---------- ------- numpy 1.21.2 pandas 1.3.3     パッケージの詳細情報を表示する\n1  pip show numpy   実行結果例:\n1 2 3 4 5 6  Name: numpy Version: 1.21.2 Summary: NumPy is the fundamental package for array computing with Python. Home-page: https://www.numpy.org Author: Travis E. Oliphant et al. License: BSD     condaコマンドを使用する Anaconda環境を使用している場合、condaコマンドを使用します。\n  インストール済みのパッケージ一覧を表示する\n1  conda list   実行結果例:\n1 2 3 4 5  # packages in environment at /opt/anaconda3: # # Name Version Build Channel numpy 1.21.2 pypi_0 pypi pandas 1.3.3 pypi_0 pypi     パッケージ内の関数やクラスの調べ方 パッケージ内の関数やクラスの詳細を調べるための方法を紹介します。\ndir()関数を使用する  簡単に使用でき、指定したオブジェクトのすべての属性やメソッドを一覧表示します。 出力されるリストは文字列のリストで、属性名やメソッド名が含まれます。 詳細な説明は含まれていないため、具体的な機能や使い方はわかりません。  1 2 3  import numpy as np print(dir(np))   実行結果例:\n1  [\u0026#39;ALLOW_THREADS\u0026#39;, \u0026#39;AxisError\u0026#39;, \u0026#39;BUFSIZE\u0026#39;, \u0026#39;CLIP\u0026#39;, \u0026#39;ComplexWarning\u0026#39;, ...   help()関数を使用する  オブジェクトのヘルプドキュメントを表示します。 オブジェクトの詳細な説明、使い方、ドキュメントを確認。  1 2 3  import numpy as np help(np)   実行結果例の一部:\n1 2 3 4 5 6 7  Help on module numpy: NAME numpy DESCRIPTION NumPy is the fundamental package for array computing with Python. It ...   inspectモジュールを使用する  オブジェクトのソースコードや詳細な情報を取得します。 オブジェクトの内部構造、ソースコード、メソッドや関数の引数情報などを確認。  1 2 3 4  import inspect import numpy as np print(inspect.getmembers(np, inspect.isfunction))   実行結果例の一部:\n1  [(\u0026#39;abs\u0026#39;, \u0026lt;function abs at 0x7f8c4c1b7f70\u0026gt;), (\u0026#39;add\u0026#39;, \u0026lt;function add at 0x7f8c4c1b7040\u0026gt;), ...   __doc__属性を使用する  オブジェクトに関連付けられたドキュメントストリングを表示します。 クラス、関数、モジュールなどの説明文を確認。  1 2 3  import numpy as np print(np.__doc__)   実行結果例の一部:\n1 2 3 4 5 6 7  NumPy ==== Provides 1. An array object of arbitrary homogeneous items 2. Fast mathematical operations over arrays 3. Linear Algebra, Fourier Transforms, Random Number Generation   まとめ  pip listとpip showでインストール済みパッケージやその詳細を確認 conda listでAnaconda環境のパッケージを確認 dir()、help()、inspectモジュール、__doc__属性でパッケージ内の関数やクラスの詳細を調査  これらの方法を活用して、Python開発におけるパッケージ管理を効率的に行いましょう。\n","description":"Pythonで開発を行っていると、インストール済みのパッケージやその詳細を確認したい場面があります。","id":41,"section":"tech","tags":["Python"],"title":"Pythonパッケージを調べる方法","uri":"https://c-a-p-engineer.github.io/tech/2024/08/06/python-package-help/"},{"content":"【Elixir】AWS RDSへの接続方法 Elixir で AWS RDSを使用する際にTLS接続を確保するためにサーバー証明書の検証が必要になることがあります。Elixirプロジェクトでaws_rds_castoreライブラリを用いた証明書検証の方法を解説します。\nなぜ証明書検証が必要なのか サーバー証明書の検証は、データの送受信が安全であることを保証します。不正なサーバーに接続するリスクを防ぎ、データの盗聴や改ざんを防ぐために必須の手順です。\naws_rds_castoreライブラリの概要 aws_rds_castoreは、AWS RDSのサーバー証明書を検証するためのElixir用ライブラリです。このライブラリを使用することで、接続の安全性を確保し、信頼できる接続を維持できます。\n導入手順 ライブラリを導入します。\n1 2 3 4 5  defp deps do [ {:aws_rds_castore, \u0026#34;~\u0026gt; 1.1\u0026#34;} ] end   パッケージの取得\n1  $ mix deps.get.   設定例 設定方法はとても簡単です。 database_url を AwsRdsCAStore.ssl_opts/1 で変換して ssl_opts に設定するだけです。\n1 2 3 4 5 6 7 8 9 10  database_url = \u0026#34;ecto://postgres:postgres@localhost/ecto_simple?ssl=true\u0026amp;pool_size=10\u0026#34; # In runtime.exs: config :my_app, MyApp.Repo, url: database_url, ssl: true, ssl_opts: AwsRdsCAStore.ssl_opts(database_url), pool_size: String.to_integer(System.get_env(\u0026#34;POOL_SIZE\u0026#34;) || \u0026#34;10\u0026#34;), socket_options: maybe_ipv6   以上の方法で AWS RDS への接続が可能です。\n参考  (https://hex.pm/packages/aws_rds_castore)  ","description":"Elixir で AWS RDSを使用する際にTLS接続を確保するためにサーバー証明書の検証が必要になることがあります。","id":42,"section":"tech","tags":["Elixir"],"title":"【Elixir】AWS RDSへの接続方法","uri":"https://c-a-p-engineer.github.io/tech/2024/07/26/elixir-awd-rds-ca/"},{"content":"【Elixir】MixプロジェクトでJasonを導入し、config.exsで使用する方法 ElixirプロジェクトでJSONエンコーディングとデコーディングを行うために、Jasonライブラリを導入し、無理やりconfig.exsで使用する方法について\nプロジェクトのセットアップ まず、新しいMixプロジェクトを作成します。\n1 2  mix new jason_example cd jason_example   Jasonライブラリの導入 mix.exsファイルにJasonライブラリを依存関係として追加します。\n1 2 3 4 5  defp deps do [ {:jason, \u0026#34;~\u0026gt; 1.2\u0026#34;} ] end   その後、以下のコマンドを実行して依存関係を取得します。\n1  mix deps.get   config.exsでのJasonの使用 config/config.exsファイルにJasonを使用してJSONデータを読み込むコードを追加します。\n普通だったらこのように import したりすれば使用できるのですが config.exs などではエラーが出てきます。\n1  import Jason   ではどのように実行するかです。\nサンプルコード プロジェクトのルートにあるlib/jason_example.exファイルを編集し、config.exsで設定した値を読み込むサンプルコードを追加します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import Config # サンプルJSON文字列（実際には機密情報や環境変数から取得することが推奨されます） app_secret = ~s({ \u0026#34;api_key\u0026#34;: \u0026#34;1234567890abcdef\u0026#34;, \u0026#34;endpoint\u0026#34;: \u0026#34;https://api.example.com\u0026#34;, \u0026#34;timeout\u0026#34;: 30 }) # JSONライブラリを動的に読み込み、デコード app_config = try do # JSONライブラリのパスを追加 Code.prepend_path(\u0026#34;_build/#{Mix.env()}/lib/jason/ebin\u0026#34;) # JSON文字列をデコード case Jason.decode(app_secret) do {:ok, decoded} -\u0026gt; IO.inspect(decoded) decoded {:error, reason} -\u0026gt; IO.puts(\u0026#34;JSONのデコードに失敗しました: #{reason}\u0026#34;) %{} end rescue e in Jason.DecodeError -\u0026gt; IO.puts(\u0026#34;例外: 無効なJSON文字列です: #{e}\u0026#34;) %{} catch kind, reason -\u0026gt; IO.puts(\u0026#34;エラーが発生しました: #{kind}- #{reason}\u0026#34;) %{} end # デコードされたデータをConfigに設定 config :my_app, :app_config, app_config   まとめ このガイドでは、Elixir MixプロジェクトでJasonライブラリを導入し、config.exsでJSONデータを読み込んで設定として使用する方法を紹介しました。以下に重要なポイントをまとめます。\n mix.exsファイルにJasonライブラリを依存関係として追加。 config.exsでJasonを使用してJSONデータをデコードし、Configに設定。 アプリケーションの開始時に設定されたJSONデータを読み込み、使用。  この方法を使用することで、Elixirプロジェクトで柔軟にJSONデータを扱うことができます。かなり無理矢理やっていますが苦肉の策です……\n","description":"ElixirプロジェクトでJSONエンコーディングとデコーディングを行うために、Jasonライブラリを導入し、無理やり`config.exs`で使用する方法について","id":43,"section":"tech","tags":["Elixir"],"title":"【Elixir】MixプロジェクトでJasonを導入し、config.exsで使用する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/07/20/elixir-jason-config/"},{"content":"【Docker】指定のバージョンのGitをインストールする方法 Dockerにインストールされるgitのバージョンが古かったので指定のバージョンのGitをインストールする方法メモ。\n脆弱性対策のために普通にインストールするだけでは脆弱性があるバージョンだったためで指定のバージョンを入れる必要があったため記録。\nDockerfile Dockerfileを作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  # ベースイメージを指定FROMubuntu:20.04# 必要なパッケージをインストールRUN apt-get update \u0026amp;\u0026amp; \\  apt-get install -y \\  wget \\  make \\  gcc \\  libssl-dev \\  libcurl4-gnutls-dev \\  libexpat1-dev \\  gettext# 環境変数としてGitのバージョンを指定ARG GIT_VERSION=2.30.0# Gitの指定バージョンをダウンロード、コンパイル、インストールRUN wget https://github.com/git/git/archive/v${GIT_VERSION}.tar.gz \\  \u0026amp;\u0026amp; tar -xzf v${GIT_VERSION}.tar.gz \\  \u0026amp;\u0026amp; cd git-${GIT_VERSION} \\  \u0026amp;\u0026amp; make prefix=/usr/local all \\  \u0026amp;\u0026amp; make prefix=/usr/local install# Gitのバージョンを確認RUN git --version  GIT_VERSION に指定する値は Git Tags から確認してください。\nこれでgitの指定のバージョンがインストールされます。\n","description":"Dockerにインストールされるgitのバージョンが古かったので指定のバージョンのGitをインストールする方法メモ","id":44,"section":"tech","tags":["Docker"],"title":"【Docker】指定のバージョンのGitをインストールする方法","uri":"https://c-a-p-engineer.github.io/tech/2024/07/18/docker-git-version/"},{"content":"Bootstrap 5で作るレスポンシブ対応ヘッダーメニューバー Bootstrap 5で簡単にレスポンシブ対応のヘッダーメニューバーを作成するメモ\nサンプルコード 実現するためのサンプルコードです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Bootstrap demo\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- ナビゲーションバーの開始 --\u0026gt; \u0026lt;nav class=\u0026#34;navbar navbar-expand-lg bg-light\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Navbar\u0026lt;/a\u0026gt; \u0026lt;!-- トグルボタン --\u0026gt; \u0026lt;button class=\u0026#34;navbar-toggler\u0026#34; type=\u0026#34;button\u0026#34; data-bs-toggle=\u0026#34;collapse\u0026#34; data-bs-target=\u0026#34;#navbarSupportedContent\u0026#34; aria-controls=\u0026#34;navbarSupportedContent\u0026#34; aria-expanded=\u0026#34;false\u0026#34; aria-label=\u0026#34;Toggle navigation\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;navbar-toggler-icon\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;!-- ナビゲーションバー --\u0026gt; \u0026lt;div class=\u0026#34;collapse navbar-collapse\u0026#34; id=\u0026#34;navbarSupportedContent\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;navbar-nav me-auto mb-2 mb-lg-0\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link active\u0026#34; aria-current=\u0026#34;page\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item dropdown\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34; role=\u0026#34;button\u0026#34; data-bs-toggle=\u0026#34;dropdown\u0026#34; aria-expanded=\u0026#34;false\u0026#34;\u0026gt; Dropdown \u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Another action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;hr class=\u0026#34;dropdown-divider\u0026#34;\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Something else here\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link disabled\u0026#34;\u0026gt;Disabled\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;form class=\u0026#34;d-flex\u0026#34; role=\u0026#34;search\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;form-control me-2\u0026#34; type=\u0026#34;search\u0026#34; placeholder=\u0026#34;Search\u0026#34; aria-label=\u0026#34;Search\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-outline-success\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;!-- BootstrapのJSを読み込み --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   コード解説  Navbar構造:  navbar-expand-lgクラスにより、画面幅が大きい場合は通常のナビゲーションバーとして機能します。 navbar-togglerボタンがクリックされると、ナビゲーションバーが折りたたまれた状態から展開されます。 collapse navbar-collapseクラスにより、画面幅が広い場合はメニューが通常のナビゲーションバーとして表示されます。    参考  Navbar Bootstrap 5  ","description":"Bootstrap 5で簡単にレスポンシブ対応のヘッダーメニューバーを作成するメモ","id":45,"section":"tech","tags":["CSS"],"title":"Bootstrap 5で作るレスポンシブ対応ヘッダーメニューバー","uri":"https://c-a-p-engineer.github.io/tech/2024/07/16/bootstrap-5-slide-in-menu-tutorial/"},{"content":"【GitHub】GitHub Actions リポジトリチェックアウトを高速化する方法 GitHub Actionsは、CI/CDパイプラインを簡単に構築できる強力なツールです。しかし、リポジトリのチェックアウトが遅いと、ワークフロー全体の速度に悪影響を与えることがあります。チェックアウトを高速化するための3つの方法のメモ。\n浅いチェックアウト（Shallow Checkout） 浅いチェックアウトを行うことで、必要なコミット履歴のみを取得し、時間を短縮できます。これには、fetch-depthオプションを使用します。\n設定方法 以下は、最新の1コミットだけを取得する設定例です：\n1 2 3 4 5 6 7 8 9  jobs:build:runs-on:ubuntu-lateststeps:- name:Checkout repositoryuses:actions/checkout@v4with:fetch-depth:1# 最新の1コミットだけを取得  この設定により、不要な履歴の取得を防ぎ、チェックアウトの速度が向上します。\n特定のブランチやタグをチェックアウト 必要なブランチやタグだけをチェックアウトすることで、ムダなデータのダウンロードを防ぎます。\n設定方法 以下は、特定のブランチをチェックアウトする設定例です：\n1 2 3 4 5 6 7 8 9  jobs:build:runs-on:ubuntu-lateststeps:- name:Checkout specific branchuses:actions/checkout@v4with:ref:refs/heads/main # 特定のブランチを指定  この方法では、指定したブランチやタグのみが取得され、チェックアウトがより迅速に行われます。\nactions/checkout の最新バージョンを使用 actions/checkoutアクションの最新バージョンを使用することで、パフォーマンスの改善や新機能を利用できます。常に最新バージョンを使用することが推奨されます。\n設定方法 以下は、v4バージョンを使用する設定例です：\n1 2 3 4 5 6 7  jobs:build:runs-on:ubuntu-lateststeps:- name:Checkout repositoryuses:actions/checkout@v4  最新バージョンの利用により、最新の最適化やバグ修正が反映された状態でアクションを実行できます。\nまとめ GitHub Actionsでリポジトリのチェックアウトを高速化するためには、以下の方法を試してみてください：\n 浅いチェックアウト：fetch-depthオプションを使用して取得するコミットを制限する。 特定のブランチやタグをチェックアウト：必要なブランチやタグのみをチェックアウトする。 最新バージョンのactions/checkoutを使用：常に最新バージョンを使用する。  これらの方法を組み合わせることで、ワークフローの効率を大幅に向上させることができます。\n参考  actions/checkout  ","description":"GitHub Actions のチェックアウトを高速化するための3つの方法のメモ。","id":46,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions リポジトリチェックアウトを高速化する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/07/14/github-actions-fast-checkout/"},{"content":"【Linux】Linuxで環境変数を一括表示する方法 環境変数は、システムやアプリケーションに設定情報を提供する重要な要素です。Linuxでは、環境変数を簡単に確認するためのコマンドがいくつか用意されています。この記事では、Linux環境で環境変数を一括して表示する方法について説明します。\nprintenv コマンド printenvコマンドは、環境変数を一括して表示するためのもっともシンプルな方法の1つです。\n1  printenv   このコマンドを実行すると、すべての環境変数が名前と値のペアで表示されます。\nenv コマンド envコマンドも、現在のシェルセッションに設定されているすべての環境変数を表示します。\n1  env   envコマンドは、環境変数の一覧を表示するだけでなく、特定の環境変数を一時的に設定してコマンドを実行する場合にも使用されます。\nset コマンド setコマンドは、環境変数だけでなくシェル変数も含めてすべての変数を表示します。環境変数に加えて、シェルのローカル変数も表示されるため、より詳細な情報を確認することができます。\n1  set   フィルタリング 特定の環境変数のみを表示したい場合は、grepコマンドを組み合わせて使用できます。\n例: PATHという名前の環境変数のみを表示する 1  printenv | grep PATH   まとめ  printenv: 環境変数をシンプルに表示する。 env: 環境変数の一覧を表示する。 set: 環境変数とシェル変数の両方を表示する。 grep: 特定の環境変数をフィルタリングして表示する。  これらのコマンドを使い分けることで、Linux環境における環境変数の確認が簡単になります。日常的なシステム管理やトラブルシューティングに役立ててください。\n参考  GNU Coreutils: printenv GNU Coreutils: env GNU Bash Manual: Shell Builtin Commands  ","description":"環境変数は、システムやアプリケーションに設定情報を提供する重要な要素です。","id":47,"section":"tech","tags":["Linux","Linuxコマンド"],"title":"【Linux】Linuxで環境変数を一括表示する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/07/14/linux-print-environment-variables/"},{"content":"【Docker】LocalStackでAWS Secrets Managerを使用、初期設定のメモ Dockerを使用してLocalStackを設定し、起動時にJSONファイルからシークレットを読み込んでAWS Secrets Managerに設定するシェルスクリプトを紹介します。\nLocalStackはAWSクラウドのスタブをローカルで実行できるツールで、開発およびテスト環境に最適です。また、AWS CLIを使用してシークレットの設定と確認を行うコマンドも紹介します。\nDocker Composeファイルの作成 まず、LocalStackを設定するためのdocker-compose.ymlファイルを作成します。このファイルでは、LocalStackサービスを定義し、必要な環境変数を設定します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  version:\u0026#39;3.8\u0026#39;services:localstack:image:localstack/localstackports:# シークレットマネージャー用ポート- \u0026#34;4566:4566\u0026#34;environment:# 使用サービス（シークレットマネージャー- SERVICES=secretsmanager# AWS 設定値- AWS_ACCESS_KEY_ID=dummy- AWS_SECRET_ACCESS_KEY=dummy- AWS_DEFAULT_REGION=us-east-1- AWS_DEFAULT_OUTPUT=jsonvolumes:# localstack データを永続化- ../.data/localstack:/var/lib/localstack# localstack hook# https://docs.localstack.cloud/references/init-hooks/- ./localstack:/etc/localstack/init  hook 初期化スクリプトの前にhookの設定ディレクトリの説明です。\nコンテナ側のディレクトリにシェルスクリプトもしくはPythonを配置することで各タイミングで実行してくれるとのことです。\n/etc └── localstack └── init ├── boot.d \u0026lt;-- コンテナ実行時（LocalStack開始前 ├── ready.d \u0026lt;-- LocalStack リクエスト準備完了 ├── shutdown.d \u0026lt;-- LocalStack シャットダウン時 └── start.d \u0026lt;-- Python プロセスが実行中、LocalStack開始 初期化シェルスクリプトの作成 次に、LocalStack起動時に実行される初期化スクリプトを作成します。このスクリプトは、JSONファイルからシークレットを読み込み、AWS Secrets Managerに登録します。\n/etc/localstack/init/start.d/init_secrets.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  #!/bin/bash  echo \u0026#39;START INIT SECRET!!\u0026#39; # Install jq apt-get update \u0026amp;\u0026amp; apt-get install -y jq # Wait for LocalStack to be ready until curl -s http://localhost:4566/health | jq -e \u0026#39;.services.secretsmanager == \u0026#34;running\u0026#34;\u0026#39; \u0026gt; /dev/null; do echo \u0026#34;Waiting for LocalStack to be ready...\u0026#34; sleep 5 done # Get the current directory CURRENT_DIR=$(dirname \u0026#34;$0\u0026#34;) # Load JSON configuration file CONFIG_FILE=\u0026#34;${CURRENT_DIR}/config.json\u0026#34; CONFIG_CONTENT=$(cat $CONFIG_FILE) # Iterate over keys and create secrets for key in $(echo \u0026#34;${CONFIG_CONTENT}\u0026#34; | jq -r \u0026#39;keys[]\u0026#39;); do value=$(echo \u0026#34;${CONFIG_CONTENT}\u0026#34; | jq -r \u0026#34;.${key}\u0026#34;) # Check if the value is an array or an object if echo \u0026#34;${value}\u0026#34; | jq -e \u0026#39;type == \u0026#34;array\u0026#34; or type == \u0026#34;object\u0026#34;\u0026#39; \u0026gt; /dev/null; then # JSON format: no double quotes echo \u0026#34;key:${key}\u0026#34; echo \u0026#34;value:${value}\u0026#34; aws --endpoint-url=http://localhost:4566 secretsmanager create-secret --name \u0026#34;${key}\u0026#34; --secret-string \u0026#34;${value}\u0026#34; else # String format: add double quotes echo \u0026#34;key:${key}\u0026#34; echo \u0026#34;value:${value}\u0026#34; aws --endpoint-url=http://localhost:4566 secretsmanager create-secret --name \u0026#34;${key}\u0026#34; --secret-string \u0026#34;\\\u0026#34;${value}\\\u0026#34;\u0026#34; fi done echo \u0026#39;END INIT SECRET!!\u0026#39; exit 0   JSON設定ファイルの準備 初期化スクリプトが読み込むJSON設定ファイルを作成します。このファイルには、登録したいシークレットを定義します。\n/etc/localstack/init/start.d/config.json シェルと同一の場所に配置します。\n最上位の名前 MySecretKey1 がシークレット名になるようにしています。\n1 2 3 4 5 6 7 8  { \u0026#34;MySecretKey1\u0026#34;: \u0026#34;MySecretValue1\u0026#34;, \u0026#34;MySecretKey2\u0026#34;: \u0026#34;MySecretValue2\u0026#34;, \u0026#34;MySecretKey3\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;myuser\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;mypassword\u0026#34; } }   コンテナの起動とシークレットの初期化 すべてのファイルを準備したら、以下のコマンドを実行してDocker Composeを使用してコンテナを起動します。LocalStackが起動し、初期化スクリプトが実行されてシークレットが設定されます。\n1  docker-compose up   AWS CLIでのシークレットの設定と確認 シークレットが正しく設定されていることを確認するために、AWS CLIを使用してシークレットのリストと詳細を取得するコマンドを実行します。\nシークレットのリストを取得 以下のコマンドを実行して、登録されているすべてのシークレットのリストを取得します。\n1  aws --endpoint-url=http://localhost:4566 secretsmanager list-secrets   シークレットの詳細を取得 特定のシークレットの詳細を確認するために、シークレット名を指定して以下のコマンドを実行します。\n1  aws --endpoint-url=http://localhost:4566 secretsmanager describe-secret --secret-id MySecretKey1   シークレットの値を取得 シークレットの値を取得するには、以下のコマンドを実行します。\n1  aws --endpoint-url=http://localhost:4566 secretsmanager get-secret-value --secret-id MySecretKey1   これで、LocalStack上のAWS Secrets Managerにシークレットが設定されていることを確認できます。\n参考  LocalStack公式サイト AWS CLI ドキュメント Docker Compose ドキュメント LocalStack Init Hooks ドキュメント  ","description":"Dockerを使用してLocalStackを設定し、起動時にJSONファイルからシークレットを読み込んでAWS Secrets Managerに設定するシェルスクリプトを紹介します。","id":48,"section":"tech","tags":["Docker"],"title":"【Docker】LocalStackでAWS Secrets Managerを使用、初期設定のメモ","uri":"https://c-a-p-engineer.github.io/tech/2024/07/11/docker-localstack-secrets-manager/"},{"content":"【Elixir】ガード節について Elixirは柔軟で強力なパターンマッチング機能を持ち、その一環としてガード節（guard clause）を利用することで、さらに詳細な条件でのマッチングが可能になります。Elixirのガード節について、基本的な使い方から具体的な例、使用できる関数と演算子についてのメモ。\nガード節とは？ ガード節は、関数のパターンマッチングに追加の条件を設定するためのものです。これにより、特定の条件を満たす場合にのみ関数が呼び出されるようになります。ガード節は、whenキーワードを用いて定義されます。\n基本的な使い方 以下は、ガード節を使用した基本的な関数定義の例です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  defmodule GuardExample do # 数値が整数かつ0以上100以下の場合にマッチする関数 def check_number(n) when is_integer(n) and n \u0026gt;= 0 and n \u0026lt;= 100 do \u0026#34;The number is an integer between 0 and 100.\u0026#34; end # 数値が負の整数の場合にマッチする関数 def check_number(n) when is_integer(n) and n \u0026lt; 0 do \u0026#34;The number is a negative integer.\u0026#34; end # 数値が浮動小数点数の場合にマッチする関数 def check_number(n) when is_float(n) do \u0026#34;The number is a float.\u0026#34; end # その他の入力（数値でない場合）にマッチする関数 def check_number(_n) do \u0026#34;The input is not a number.\u0026#34; end end # 実行例 IO.puts GuardExample.check_number(50) # 出力: \u0026#34;The number is an integer between 0 and 100.\u0026#34; IO.puts GuardExample.check_number(-10) # 出力: \u0026#34;The number is a negative integer.\u0026#34; IO.puts GuardExample.check_number(3.14) # 出力: \u0026#34;The number is a float.\u0026#34; IO.puts GuardExample.check_number(\u0026#34;abc\u0026#34;) # 出力: \u0026#34;The input is not a number.\u0026#34;   ガード節の例 リストの長さをチェックする関数 リストの長さをチェックする例です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  defmodule ListChecker do # リストが指定された長さの場合にマッチする関数 def check_list_length(list, len) when is_list(list) and length(list) == len do \u0026#34;The list has the specified length.\u0026#34; end # リストが指定された長さでない場合にマッチする関数 def check_list_length(list, _len) when is_list(list) do \u0026#34;The list does not have the specified length.\u0026#34; end # その他の入力（リストでない場合）にマッチする関数 def check_list_length(_list, _len) do \u0026#34;The input is not a list.\u0026#34; end end # 実行例 IO.puts ListChecker.check_list_length([1, 2, 3], 3) # 出力: \u0026#34;The list has the specified length.\u0026#34; IO.puts ListChecker.check_list_length([1, 2, 3], 2) # 出力: \u0026#34;The list does not have the specified length.\u0026#34; IO.puts ListChecker.check_list_length(\u0026#34;abc\u0026#34;, 3) # 出力: \u0026#34;The input is not a list.\u0026#34;   文字列の長さをチェックする関数 文字列が特定の長さ以上であるかをチェックする関数を作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  defmodule StringChecker do # 文字列が指定された長さ以上の場合にマッチする関数 def check_string_length(str, len) when is_binary(str) and byte_size(str) \u0026gt;= len do \u0026#34;The string has the specified length or more.\u0026#34; end # 文字列が指定された長さ未満の場合にマッチする関数 def check_string_length(str, len) when is_binary(str) and byte_size(str) \u0026lt; len do \u0026#34;The string does not have the specified length.\u0026#34; end # その他の入力（文字列でない場合）にマッチする関数 def check_string_length(_str, _len) do \u0026#34;The input is not a string.\u0026#34; end end # 実行例 IO.puts StringChecker.check_string_length(\u0026#34;hello\u0026#34;, 3) # 出力: \u0026#34;The string has the specified length or more.\u0026#34; IO.puts StringChecker.check_string_length(\u0026#34;hi\u0026#34;, 3) # 出力: \u0026#34;The string does not have the specified length.\u0026#34; IO.puts StringChecker.check_string_length(123, 3) # 出力: \u0026#34;The input is not a string.\u0026#34;   ガード節で使用できる関数まとめ 以下はガード節で使用できる関数を簡単にまとめた表です。\n厳密には Elixir のKernelのものなら使用できるようです。\n   操作内容 チェック内容 使用する関数/演算子 例     チェック アトム is_atom/1 when is_atom(var)    バイナリ is_binary/1 when is_binary(var)    ビットストリング is_bitstring/1 when is_bitstring(var)    ブール値 is_boolean/1 when is_boolean(var)    浮動小数点数 is_float/1 when is_float(var)    関数 is_function/1, is_function/2 when is_function(var)    整数 is_integer/1 when is_integer(var)    リスト is_list/1 when is_list(var)    マップ is_map/1 when is_map(var)    数値 is_number/1 when is_number(var)    プロセスID is_pid/1 when is_pid(var)    ポート is_port/1 when is_port(var)    リファレンス is_reference/1 when is_reference(var)    タプル is_tuple/1 when is_tuple(var)   数値の比較 同値・大小比較 ==, !=, ===, !==, \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;= when var \u0026gt; 0   論理演算 論理条件 and, or, not when var \u0026gt; 0 and var \u0026lt; 100   算術演算 算術演算 +, -, *, /, div/2, rem/2 when rem(var, 2) == 0   その他のチェック リストの長さ length/1 when length(list) == 3    バイト数 byte_size/1 when byte_size(str) \u0026gt;= len    マップのサイズ map_size/1 when map_size(map) \u0026gt; 2    タプルのサイズ tuple_size/1 when tuple_size(tuple) == 2    先頭要素の取得 hd/1 when hd(list) == 1    末尾要素の取得 tl/1 when tl(list) == [2, 3]    ※ \u0026amp;\u0026amp;, ||、 そして ! 使用できないとのこと。\nまとめ Elixirのガード節は、関数のパターンマッチングをさらに強化し、特定の条件を満たす場合にのみ関数を呼び出すことを可能にします。ガード節で使用できる関数や演算子には制限がありますが、これらを適切に活用することで、効率的かつ柔軟なコードを書くことができます。\n参考  Patterns and guards — Elixir#guards  ","description":"Elixirは柔軟で強力なパターンマッチング機能を持ち、その一環としてガード節（guard clause）を利用することで、さらに詳細な条件でのマッチングが可能になります。","id":49,"section":"tech","tags":["Elixir"],"title":"【Elixir】ガード節について","uri":"https://c-a-p-engineer.github.io/tech/2024/07/02/elixir-guards/"},{"content":"Gmailの容量を削減する方法 Gmailの容量がいっぱいになって困っていたので今回は、Gmailの容量を効果的に削減するための方法メモ。\n大容量メールの削除 Gmailには、サイズが大きいメールを簡単に特定する機能があります。\n Gmailを開く\nGmailを開きます。 **検索バーに「size:10mb」**と入力:\n検索バーに「size:10mb」と入力しするとサイズが10MB以上のメールを検索します。 不要なメールを選択:\n表示されたメールの中から不要なメールを選択します。 削除:\n選択したメールを削除します。  古いメールの削除 1年以上前の古いメールも不要な場合が多いです。\n Gmailを開く:\nウェブブラウザでGmailを開きます。 **検索バーに「older_than:1y」**と入力:\n検索バーに「older_than:1y」と入力し、1年以上前のメールを検索します。 不要なメールを選択:\n表示された古いメールの中から不要なメールを選択します。 削除:\n選択したメールを削除します。  メール検索のクエリ一覧    クエリ 説明     size:10mb 10MB以上のメールを検索   size:5mb 5MB以上のメールを検索   older_than:1y 1年以上前のメールを検索   before:2022/01/01 2022年1月1日以前のメールを検索   has:attachment 添付ファイル付きのメールを検索    これらの方法を試して、Gmailの容量を効率的に削減しましょう。定期的にこれらの操作を行うことで、常にスムーズにメールを利用ができます。\nスパムとゴミ箱の整理 スパムフォルダやゴミ箱フォルダには不要なメールがたまりやすいです。30日保存された後、削除されますが整理すると容量が結構空きます。\nまとめ これらの方法を試して、Gmailの容量を効率的に削減しましょう。僕はメールの整理を行っていたためやったら2GB程空きました！\n参考  Gmail の検索を絞り込む - Gmail ヘルプ  ","description":"Gmailの容量がいっぱいになって困っていたので今回は、Gmailの容量を効果的に削減するための方法メモ。","id":50,"section":"tech","tags":["Google"],"title":"Gmailの容量を削減する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/07/01/gmail-clean/"},{"content":"Pythonでの多言語翻訳を簡単に！deep-translatorの使い方と特徴 Pythonには、さまざまな翻訳ライブラリがありますが、オススメなのが「deep-translator」です。\ndeep-translatorとは deep-translatorは、複数の翻訳サービス（Google Translate、Microsoft Translator、DeepLなど）を利用して、翻訳を簡単に行うためのPythonライブラリです。このライブラリは、シンプルなAPIを提供し、初心者でも簡単に利用できるよう設計されています。\n対応翻訳サービス deep-translator が対応している翻訳サービス一覧です。\n Google Translator Microsoft Translator DeepL Translator Baidu Translator Libre Translator Tencent Translator Papago Translator ChatGPT Translator  インストール方法 deep-translatorのインストールは非常に簡単です。以下のコマンドを実行するだけで、インストールが完了します。\n1  pip install deep-translator   使用例 以下は、deep-translatorを使用した簡単な翻訳の例です。\n1 2 3 4 5 6 7 8  from deep_translator import GoogleTranslator # 翻訳するテキスト text = \u0026#34;This is a test.\u0026#34; # 英語から日本語への翻訳 translated_text = GoogleTranslator(source=\u0026#39;en\u0026#39;, target=\u0026#39;ja\u0026#39;).translate(text) print(translated_text) # Output: これはテストです。   このように、deep-translatorを使えば、複数の翻訳サービスを簡単に利用することができます。APIキーが必要なサービスもありますが、無料で利用できる範囲も広いです。\n参考  deep-translator GitHubリポジトリ deep-translator ドキュメント  ","description":"Pythonには、さまざまな翻訳ライブラリがありますが、オススメなのが「deep-translator」です。","id":51,"section":"tech","tags":["Python"],"title":"【Python】多言語翻訳を簡単に！deep-translatorの使い方","uri":"https://c-a-p-engineer.github.io/tech/2024/06/20/python-deep-translator-/"},{"content":"Phoenix LiveViewのライブナビゲーションイベント Phoenix LiveViewを活用することで、リアルタイムのページナビゲーションを実現できます。ライブナビゲーションイベントの仕組みとその実装方法について詳しく解説します。\nライブナビゲーションイベントとは？ Phoenix LiveViewのライブナビゲーションイベントは、ページの読み込み状況をリアルタイムで監視し、必要に応じてローディングインジケーターを表示するための機能です。以下の2つのイベントを使用します。\n phx:page-loading-start: ページ読み込みが開始されたときに発生します。 phx:page-loading-stop: ページ読み込みが終了したときに発生します。 phx:navigate: イベントはブラウザの URL バーに表示されるたびにトリガーされます。（v0.18から  これらのイベントは、ナビゲーションの種類や目的に応じて適切にハンドリングされます。\nイベントの詳細情報 各イベントには、以下のような詳細情報が含まれます。\n kind: イベントの種類（redirect、patch、initial、element） to: 読み込み対象のURL（elementイベント以外） target: イベントをトリガーしたDOM要素（elementイベントの場合）  実装例 ページの読み込み中にローディングバーを表示するには、以下のコードを使用します。\n1 2 3  window.addEventListener(\u0026#34;phx:page-loading-start\u0026#34;, info =\u0026gt; console.log(\u0026#34;phx:page-loading-start\u0026#34;, info)); window.addEventListener(\u0026#34;phx:page-loading-stop\u0026#34;, info =\u0026gt; console.log(\u0026#34;phx:page-loading-stop\u0026#34;, info)); window.addEventListener(\u0026#34;phx:navigate\u0026#34;, info =\u0026gt; console.log(\u0026#34;phx:navigate\u0026#34;, info));   ライブナビゲーションの詳細な実装方法 ライブナビゲーションは、クライアントサイドおよびサーバーサイドから実装できます。\nクライアントサイド クライアントサイドでは、リンクにpatch={url}またはnavigate={url}を渡すことでナビゲーションを実行します：\n1  \u0026lt;.link patch={~p\u0026#34;/pages/#{@page + 1}\u0026#34;}\u0026gt;Next\u0026lt;/.link\u0026gt;   サーバーサイド サーバーサイドでは、Phoenix.LiveView.push_patch/2またはPhoenix.LiveView.push_navigate/2を使用します：\n1  {:noreply, push_patch(socket, to: ~p\u0026#34;/pages/#{@page + 1}\u0026#34;)}   ベストプラクティス  patch操作: 現在のLiveViewを更新し、URLと現在のパラメータを更新する際に使用します。handle_params/3コールバックが呼び出され、最小限の変更がクライアントに送信されます。 navigate操作: 現在のLiveViewを解除し、新しいLiveViewをマウントする際に使用します。同じセッション内でのみ機能します。  まとめ Phoenix LiveViewのライブナビゲーションイベントを使用することで、ユーザーエクスペリエンスを向上させることができます。\n参考     Live navigation events\n","description":"Phoenix LiveViewを活用することで、リアルタイムのページナビゲーションを実現できます。","id":52,"section":"tech","tags":["Elixir"],"title":"【Elixir】Phoenix LiveViewのライブナビゲーションイベント","uri":"https://c-a-p-engineer.github.io/tech/2024/06/17/elixir-phoenix-live-navigation-events/"},{"content":"【FFmpeg】動画の速度を変更する方法 今回はFFmpegを使用して、動画の速度を変更する方法について説明します。\n動画の速度を変更するコマンド FFmpegを使用して動画の再生速度を変更するには、以下のコマンドを使用します。\n1  ffmpeg -i \u0026#34;input.mp4\u0026#34; -vf setpts=PTS/1.1 -af atempo=1.1 \u0026#34;output.mp4\u0026#34;   コマンドの詳細説明 このコマンドは、入力ビデオファイル（input.mp4）の再生速度を変更し、出力ファイル（output.mp4）に保存します。各オプションの意味は以下の通りです。\n ffmpeg: FFmpegコマンドラインツールの呼び出し。 -i \u0026ldquo;input.mp4\u0026rdquo;: 入力ファイルを指定。 -vf setpts=PTS/1.1: ビデオの表示時間スタンプ (PTS) を1.1で割ることで、ビデオの再生速度を1.1倍に変更。 -af atempo=1.1: オーディオの再生速度を1.1倍に変更。 \u0026ldquo;output.mp4\u0026rdquo;: 出力ファイルを指定。  コマンドの効果 このコマンドは、ビデオとオーディオの再生速度をそれぞれ1.1倍にし、結果を output.mp4 に保存します。これにより、動画の再生速度が10％速くなります。\n参考  FFmpeg setpts, asetpts FFmpeg atempo  ","description":"今回はFFmpegを使用して、動画の速度を変更する方法について説明します。","id":53,"section":"tech","tags":["動画"],"title":"【FFmpeg】動画の速度を変更する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/06/14/ffmpeg-change-speed/"},{"content":"【Docker】WSL 2とDockerによるディスク容量の削減方法 WSL 2（Windows Subsystem for Linux 2）とDockerを使用していると、時には大量のディスク容量を消費することがあります。\nとくに、C:\\Users\\Username\\AppData\\Local\\Docker\\wsl\\data\\ext4.vhdxのファイルが大きくなることが問題となる場合があります。この記事では、ディスク容量を削減するための具体的な方法について解説します。\nちなみにはこれらの方法で肥大した容量を100GB程度削減できました。\n不要なファイルの削除 まず、WSL 2ディストリビューション内の不要なファイルやパッケージを削除します。以下のコマンドを使用して、ディストリビューションにアクセスし、不要なファイルを削除しましょう。\n1 2 3 4 5 6 7  # WSLにアクセス wsl # 不要なファイルを削除 (例: キャッシュ、ログファイル) sudo apt-get clean sudo rm -rf /var/cache/apt/archives/* sudo rm -rf /var/log/*   Dockerのクリーンアップ Dockerが大量のディスク容量を使用している場合、以下のコマンドで不要なイメージ、コンテナ、ボリューム、ネットワークを削除できます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  # 不要なイメージを削除 docker image prune -a # 停止中のコンテナを削除 docker container prune # 使われていないボリュームを削除 docker volume prune # 不要なネットワークを削除 docker network prune # 一括クリーンアップ docker system prune -a --volumes   WSL 2 ディストリビューションの圧縮 ext4.vhdxファイルのサイズを削減するために、WSL 2ディストリビューションを圧縮します。以下の手順をPowerShellで実行します。\n1 2 3 4 5 6 7 8 9 10 11  # PowerShellを管理者権限で実行 # WSL 2 ディストリビューションの名前を確認 wsl --list --verbose # 圧縮コマンド wsl --shutdown optimize-vhd -Path \u0026#34;C:\\Users\\Username\\AppData\\Local\\Docker\\wsl\\data\\ext4.vhdx\u0026#34; -Mode full # WSLを再起動 wsl   ディストリビューションの再インストール 最終手段として、WSL 2ディストリビューションを再インストールする方法があります。この方法を行う前に、必ずデータのバックアップを行ってください。\n1 2 3 4 5 6 7 8  # 現在のディストリビューションをエクスポート wsl --export \u0026lt;DistributionName\u0026gt; \u0026lt;BackupFileName\u0026gt;.tar # 現在のディストリビューションを削除 wsl --unregister \u0026lt;DistributionName\u0026gt; # バックアップからインポート wsl --import \u0026lt;DistributionName\u0026gt; \u0026lt;InstallLocation\u0026gt; \u0026lt;BackupFileName\u0026gt;.tar   まとめ  不要なファイルの削除: WSL 2内のキャッシュやログファイルを削除。 Dockerのクリーンアップ: 不要なイメージ、コンテナ、ボリューム、ネットワークを削除。 WSL 2ディストリビューションの圧縮: ext4.vhdxファイルのサイズを圧縮し、WSLを再起動。 ディストリビューションの再インストール: 必要に応じてディストリビューションを再インストール。  これらの方法を活用して、WSL 2とDockerによるディスク使用量を効率的に管理しましょう。定期的なメンテナンスで、快適な開発環境を維持することができます。\n参考  WSL 2 Documentation Docker Documentation  ","description":"LibreTranslateは、オープンソースの翻訳ツールで、無料で多言語の翻訳サービスを提供します。機械学習を利用してテキスト翻訳を行います。","id":54,"section":"tech","tags":["Docker"],"title":"【Docker】WSL 2とDockerによるディスク容量の削減方法","uri":"https://c-a-p-engineer.github.io/tech/2024/06/11/wsl2-docker-disk-space-optimization/"},{"content":"【Docker】LibreTranslate を使用して翻訳する LibreTranslateは、オープンソースの翻訳ツールで、無料で多言語の翻訳サービスを提供します。機械学習を利用してテキスト翻訳を行います。\n Libre Translate  ちなみにですがLibreTranslateはAPIキーを取得すればローカルにDockerを建てたりする必要もなく翻訳を使用することが可能です。\nコンテナを起動する 今回使用するDockerImageです。\n libretranslate/libretranslate\n  このコマンドでコンテナを起動します。\n1  docker run -ti --rm -p 5000:5000 libretranslate/libretranslate   このコマンドにより、LibreTranslateがバックグラウンドで実行され、ローカルのポート5000でアクセス可能になります。\nLibreTranslateの使用方法 APIエンドポイントの紹介 LibreTranslateは、REST APIを提供しており、以下のエンドポイントを利用できます。\n /translate：テキスト翻訳を行うエンドポイント  実際の翻訳リクエストの例 次に、実際に翻訳リクエストを送信する方法を紹介します。以下の例では、curlコマンドを使用して英語から日本語への翻訳を行います。\n1 2 3 4 5 6 7  curl -X POST \u0026#34;http://localhost:5000/translate\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{ \u0026#34;q\u0026#34;: \u0026#34;Hello, world!\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;en\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;ja\u0026#34; }\u0026#39;   このリクエストを送信すると、以下のようなJSONレスポンスが返ってきます。\n1  {\u0026#34;translatedText\u0026#34;:\u0026#34;お問い合わせ!\u0026#34;}   ……とりあえず本当にこれが返ってきます。\n公式サイトのサンプルを見てみると alternatives （代替案）という別の候補も見れるみたいです。なんでそんな回答になるのかぁ…\n1 2 3 4 5 6 7 8 9 10 11 12  { \u0026#34;alternatives\u0026#34;: [ \u0026#34;こんにちは、世界!\u0026#34;, \u0026#34;こんにちは!\u0026#34;, \u0026#34;世界中!\u0026#34; ], \u0026#34;detectedLanguage\u0026#34;: { \u0026#34;confidence\u0026#34;: 100, \u0026#34;language\u0026#34;: \u0026#34;en\u0026#34; }, \u0026#34;translatedText\u0026#34;: \u0026#34;お問い合わせ!\u0026#34; }   パラメータの説明  q：翻訳するテキスト source：ソース言語のコード（ISO 639-1） target：ターゲット言語のコード（ISO 639-1）  まとめ 今回無料で使える翻訳システムということでLibre Translateを使用してみましたが精度が微妙なので使うかはまた検討する必要があると思います。\n参考  Libre Translate  ","description":"LibreTranslateは、オープンソースの翻訳ツールで、無料で多言語の翻訳サービスを提供します。機械学習を利用してテキスト翻訳を行います。","id":55,"section":"tech","tags":["Docker"],"title":"【Docker】Libre Translate を使用して翻訳する","uri":"https://c-a-p-engineer.github.io/tech/2024/06/08/docker-libretranslate/"},{"content":"【Elixir】Ectoでのカスタム列の定義方法 Elixir の Ecto でカスタム列を定義する方法について解説します。特定の要件に応じたデータのキャスト、ロード、ダンプを行うことができます。\nEctoのカスタムタイプ Ectoのカスタムタイプは、Ectoスキーマで扱うデータ型を拡張するためのものです。デフォルトで提供される型に加え、独自の型を定義することで、特定のバリデーションや変換を適用できます。\n Ecto.Type  カスタムタイプの実装方法 カスタムタイプを実装するには、Ecto.Typeモジュールの振る舞いを定義します。具体的には以下の関数を実装する必要があります。\n type/0: データベースに格納する型を返す cast/1: 外部入力を内部の型に変換する load/1: データベースから読み込んだ値を内部の型に変換する dump/1: 内部の型をデータベースに格納する形式に変換する  サンプルコードの解説 以下に、正規化されたDecimal値を扱うカスタムタイプのサンプルコードを示します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  defmodule MyApp.Fields.RoundedDecimal do @moduledoc \u0026#34;\u0026#34;\u0026#34; 少数第3位以下を四捨五入するカスタムEctoタイプ。 \u0026#34;\u0026#34;\u0026#34; @behaviour Ecto.Type @doc \u0026#34;\u0026#34;\u0026#34; データベースで使用する基礎的な型を返します。 \u0026#34;\u0026#34;\u0026#34; def type, do: :decimal @doc \u0026#34;\u0026#34;\u0026#34; 与えられた値をキャストして少数第3位以下を四捨五入します。 \u0026#34;\u0026#34;\u0026#34; def cast(value) when is_binary(value) do case Decimal.parse(value) do {:ok, decimal} -\u0026gt; {:ok, Decimal.round(decimal, 2)} _ -\u0026gt; :error end end def cast(%Decimal{} = value), do: {:ok, Decimal.round(value, 2)} def cast(_), do: :error @doc \u0026#34;\u0026#34;\u0026#34; データベースから読み込んだ値を少数第3位以下を四捨五入して返します。 \u0026#34;\u0026#34;\u0026#34; def load(value), do: {:ok, Decimal.round(value, 2)} @doc \u0026#34;\u0026#34;\u0026#34; データベースに保存する前に少数第3位以下を四捨五入します。 \u0026#34;\u0026#34;\u0026#34; def dump(%Decimal{} = value), do: {:ok, Decimal.round(value, 2)} def dump(_), do: :error end   解説  @use Ecto.Type: このモジュールがEcto.Typeの振る舞いを実装していることを示します。 type/0: データベースで使用する基本型を返します。この場合は:decimalです。 cast/1: 与えられた値をキャストして少数第3位以下を四捨五入します。 load/1: データベースから読み込んだ値を少数第3位以下を四捨五入して返します。 dump/1は、データベースに保存する前に少数第3位以下を四捨五入します。  使用例 実際に RoundedDecimal カスタムタイプを使用してデータベースに値を保存し、読み込む際に少数第3位以下を四捨五入します。\nスキーマ定義 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  defmodule MyApp.Product do use Ecto.Schema import Ecto.Changeset schema \u0026#34;products\u0026#34; do field :price, MyApp.Fields.RoundedDecimal timestamps() end @doc false def changeset(product, attrs) do product |\u0026gt; cast(attrs, [:price]) |\u0026gt; validate_required([:price]) end end   使用例 1 2 3 4 5 6 7 8 9 10  # 値をキャストして少数第3位以下を四捨五入 changeset = MyApp.Product.changeset(%MyApp.Product{}, %{price: \u0026#34;123.4567\u0026#34;}) IO.inspect(changeset) # 123.46 # 値をデータベースに保存 {:ok, product} = Repo.insert(changeset) # 値をデータベースから読み込み {:ok, loaded_product} = Repo.get(MyApp.Product, product.id) IO.inspect(loaded_product.price) # 123.46   まとめ Ectoでカスタムタイプを定義することで、データベースとのやり取りにおけるデータ変換やバリデーションを柔軟に行うことができます。\n今回紹介したサンプルコードを参考にして、独自の要件に応じたカスタムタイプを実装してみてください。\n参考  Ecto.Type  ","description":"Elixir の Ecto　でカスタム列を定義する方法について解説します。特定の要件に応じたデータのキャスト、ロード、ダンプを行うことができます。","id":56,"section":"tech","tags":["Elixir"],"title":"【Elixir】Ectoでのカスタム列の定義方法","uri":"https://c-a-p-engineer.github.io/tech/2024/06/01/elixir-ecto-custom-column-type/"},{"content":"技術書典16 にオフライン参加・出展した記録 今回始めて技術書典16にオフライン参加・出展しました。これは出展時の記録と次回どのようにすればよかったのかという反省メモです。\n一応オンライン参加は技術書典15で経験済み。\n 技術書典  オフライン参加 オンライン参加とオフライン参加の大きな違いはやはり実際に会場で販売や展示をするということです。\n事前用意 事前に色々と用意することがあります。\n技術書典アプリは決済キャンセルをする関係で必ず入れましょう。サークル参加せずに購入側だとしても後払い決済ができる技術書典アプリはとても助かるので入れましょう。\n頒布物の用意 まずは頒布物ですが、多くは本になると思います。\nオンライン参加の場合は本のみ販売可能ですが、オフライン参加の場合は本以外も販売可能です。\n オンラインマーケットでキーボード、ハードウェア、ボードゲーム、グッズなどは販売できますか？ – 技術書典ヘルプセンター  オフライン出展が決まった場合は本以外のものも可能と覚えておくといいと思います。\n頒布物が用意できたら以下の2つの手続きが必要になります。\n 販売物の管理 -\u0026gt; 商品登録 マーケットの出品 -\u0026gt; 出品  商品登録だけしても出品しないと販売されないので注意してください。\n印刷 僕の場合は本の販売のため印刷が必要でした。\n僕が使用した印刷所は「ねこのしっぽ」さんです。\n技術書典と連携しており印刷申込時ににイベントを指定していると当日サークル場所に届けておいてくれます。\n ねこのしっぽ  印刷時の注意点\n 印刷所のHPで連携イベントの入稿予定日などを確認しておく 表紙は用紙サイズ x 2 + 本の厚さ（ページ数による変動）のサイズで納品が必要  背幅計算   本のページ数は4の倍数（印刷所によっては8の倍数とも聞く 表紙と本は別々に入稿 PNG納品時、dpiは高めの方が良い。（低いと粗くなる 白黒印刷時は色の見分けがつきにくいものになることがある 表紙サイズや色など懸念点があると印刷所から確認が入る 技術書典の審査が1週間ほどかかった  審査中に印刷申し込みをしないと間に合わない可能性もある 審査落ちした場合に修正の必要がでるので早めに審査依頼    各種申込 僕は「完全手ぶらセット」を申し込みしました。メールで来るため逐次確認して必要なら申込みしましょう。\n 技術書典16では出展者向け「完全手ぶらセット」を無料で提供します！  技術書典16では託児施設を無料提供します！   当日 当日やること。\n設営 180cmの机とパイプ椅子2脚が用意されています。\nディスプレイや値札などを付けて設営します。\nディスプレイ用の棚などがあると見やすくて良いでしょう。\n本の見本は2冊ほどあると良いです。\n頒布物確認 イベント運営が順次回ってくるので頒布物を確認できる状態で用意してください。\n設営中に来る可能性もあるため頒布物を早めに出しておくのが良いでしょう。\n後払いキャンセル 後払い決済で間違えた商品を購入してしまうかたは必ずいます。\nその時は技術書典アプリから以下の流れでキャンセルして再購入してもらってください。\n 技術書典アプリ起動 販売履歴 キャンセル対象の購入履歴を選択 決済キャンセル  売り切れたら 売り切れたら対象の商品を技術書典のマイページから公開停止にしてください。\n反省点  初参加だったため準備不足感があった 商品をもっと目立たせないといけない 二人以上居ないとトイレや昼休憩は取りにくい 他のサークルを見に行く余裕がなかった 事前にTwitter（X）などで宣伝しなかった 後払い決済の人が多かったが現金の人もいたためお釣りの用意をしておくのが良い 商品がいくつかある場合は説明用ポスターなどがあると良い  人が来るタイミングが重なってしまうと説明 \u0026amp; 決済で待たせてしまう    最後に 色々と大変でしたがとてもいい体験ができました。イベントへの出展という実績も解除できたので次回はよりスムーズにできるようにしたいです。\n","description":"今回始めて技術書典16にオフライン参加・出展しました。これは出展時の記録と次回どのようにすればよかったのかという反省メモです。","id":57,"section":"tech","tags":["雑記"],"title":"技術書典16 にオフライン参加・出展した記録","uri":"https://c-a-p-engineer.github.io/tech/2024/05/30/techbookfest16/"},{"content":"【PostgreSQL】JSONフィールドを使用する PostgreSQLはJSONデータをそのまま保存でき、柔軟な検索機能を利用することで、複雑なデータ構造を効率的に扱うことができます。PostgreSQLでのJSONフィールドの検索方法について解説します。\nJSONフィールドの基本操作 JSONとJSONBの違い PostgreSQLでは、JSONデータ型とJSONBデータ型の2種類がサポートされています。それぞれの違いを以下の表にまとめました。\n   特性 JSON JSONB     保存形式 テキスト形式 バイナリ形式   保存速度 高速（そのまま保存するため） 低速（バイナリに変換するため）   検索速度 低速（解析が必要） 高速（直接検索可能）   ストレージ効率 非効率（そのままのサイズ） 効率的（バイナリ圧縮）   重複キーの扱い 許可（後からのキーが優先） 不許可（エラーが発生）   インデックス サポートされていない GINやBTREEインデックスをサポート    JSONデータの挿入方法 まずは、JSONデータを含むテーブルを作成し、データを挿入する方法を見てみましょう。\n1 2 3 4 5 6 7 8  CREATETABLEusers(idSERIALPRIMARYKEY,dataJSONB);INSERTINTOusers(data)VALUES(\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;address\u0026#34;: {\u0026#34;city\u0026#34;: \u0026#34;Tokyo\u0026#34;, \u0026#34;zipcode\u0026#34;: \u0026#34;100-0001\u0026#34;}}\u0026#39;),(\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;age\u0026#34;: 25, \u0026#34;address\u0026#34;: {\u0026#34;city\u0026#34;: \u0026#34;Osaka\u0026#34;, \u0026#34;zipcode\u0026#34;: \u0026#34;530-0001\u0026#34;}}\u0026#39;);  JSONフィールドの基本検索 単一キーの検索 JSONフィールド内の特定のキーを検索するには、-\u0026gt;\u0026gt;演算子を使用します。たとえば、すべてのユーザーの名前を取得するには次のようにします。\n1  SELECTdata-\u0026gt;\u0026gt;\u0026#39;name\u0026#39;ASnameFROMusers;  ネストされたキーの検索 ネストされたJSONオブジェクト内のキーを検索するには、-\u0026gt;演算子を使用します。たとえば、すべてのユーザーの都市名を取得するには次のようにします。\n1  SELECTdata-\u0026gt;\u0026#39;address\u0026#39;-\u0026gt;\u0026gt;\u0026#39;city\u0026#39;AScityFROMusers;  複雑な検索クエリ 複数条件の検索 複数の条件で検索する場合、WHERE句を組み合わせて使用します。たとえば、年齢が30以上のユーザーを検索するには次のようにします。\n1  SELECT*FROMusersWHERE(data-\u0026gt;\u0026gt;\u0026#39;age\u0026#39;)::int\u0026gt;=30;  配列内のオブジェクト検索 JSONフィールドが配列を含む場合、その中のオブジェクトを検索することもできます。たとえば、特定の条件に一致する配列内のオブジェクトを検索するには次のようにします。\n1  SELECT*FROMusersWHEREdata@\u0026gt;\u0026#39;{\u0026#34;address\u0026#34;: {\u0026#34;city\u0026#34;: \u0026#34;Tokyo\u0026#34;}}\u0026#39;;  他のデータ型への変換 JSONフィールド内の値を他のデータ型に変換することも可能です。以下にいくつかの例を示します。\n  数値に変換する場合：\n1  SELECT(data-\u0026gt;\u0026gt;\u0026#39;age\u0026#39;)::intASageFROMusers;    ブール値に変換する場合：\n1  SELECT(data-\u0026gt;\u0026gt;\u0026#39;active\u0026#39;)::booleanASactiveFROMusers;    日付に変換する場合：\n1  SELECT(data-\u0026gt;\u0026gt;\u0026#39;created_at\u0026#39;)::timestampAScreated_atFROMusers;    文字列に変換する場合：\n1  SELECT(data-\u0026gt;\u0026gt;\u0026#39;zipcode\u0026#39;)::textASzipcodeFROMusers;    キーの存在確認 JSONフィールド内で特定のキーが存在するかどうかを確認する方法を、WHERE句に組み込んで使用することもできます。以下にいくつかの例を示します。\n  キーが存在するか確認する場合：\n1  SELECT*FROMusersWHEREdata?\u0026#39;name\u0026#39;;    キーが存在しない場合の確認：\n1  SELECT*FROMusersWHERENOT(data?\u0026#39;name\u0026#39;);    ネストされたキーが存在するか確認する場合：\n1  SELECT*FROMusersWHEREdata-\u0026gt;\u0026#39;address\u0026#39;?\u0026#39;city\u0026#39;;    インデックスの活用 GINインデックス JSONBデータ型の検索を高速化するためには、GINインデックスを使用することが推奨されます。次のようにインデックスを作成します。\n1  CREATEINDEXidx_gin_users_dataONusersUSINGGIN(data);  JSONBとパフォーマンス JSONBは、検索や操作の速度が速いだけでなく、効率的なストレージも提供します。とくに、大量のデータを扱う場合や複雑なクエリを実行する場合に、そのパフォーマンスの利点を最大限に活用できます。\nまとめ PostgreSQLでJSONフィールドを検索する方法について解説しました。基本的なクエリの書き方から、複雑な検索条件の設定、インデックスの活用までをカバーしました。JSONデータを効率的に扱うことで、アプリケーションのデータ管理がより柔軟かつ強力になります。ぜひ、実際のプロジェクトでこれらのテクニックを活用してみてください。\n参考  PostgreSQL Documentation: JSON Functions and Operators PostgreSQL Documentation: Index Types  ","description":"PostgreSQLはJSONデータをそのまま保存でき、柔軟な検索機能を利用することで、複雑なデータ構造を効率的に扱うことができます。PostgreSQLでのJSONフィールドの検索方法について解説します。","id":58,"section":"tech","tags":["PostgreSQL"],"title":"【PostgreSQL】JSONフィールドを使用する","uri":"https://c-a-p-engineer.github.io/tech/2024/05/23/postgresql-json/"},{"content":"【PostgreSQL】MySQLのGROUP_CONCATと同様の機能を実現する STRING_AGG PostgreSQLでMySQLのGROUP_CONCAT関数と同様の機能を実現する方法について説明します。STRING_AGG関数を利用する場合の問題点とその解決策を紹介し、サンプルコードを交えて具体的な使用方法を解説します。\nGROUP_CONCATとは？ MySQLのGROUP_CONCAT関数は、特定のグループに属する複数の行の値を1つの文字列に連結する関数です。以下はその基本的な使用例です。\n1  SELECTGROUP_CONCAT(column_name)FROMtable_nameGROUPBYgroup_column;  PostgreSQLでの実現方法 PostgreSQLには直接的にGROUP_CONCATに対応する関数はありませんが、同様の機能をSTRING_AGG関数を用いて実現できます。以下にその基本的な使用例を示します。\n1  SELECTSTRING_AGG(column_name,\u0026#39;,\u0026#39;)FROMtable_nameGROUPBYgroup_column;  STRING_AGGでの注意点 STRING_AGGを使用する際の問題点として、NULL値を含む列を連結する場合に予期せぬ結果を生む可能性があります。この場合、NULL値を除外するためにCOALESCE関数を併用することが推奨されます。\nSTRING_AGGの実用例 以下に具体的なテーブルとデータを使用した実例を示します。\nサンプルテーブルとデータ 1 2 3 4 5 6 7 8 9 10 11  CREATETABLEsales(idSERIALPRIMARYKEY,product_nameVARCHAR(100),sale_dateDATE);INSERTINTOsales(product_name,sale_date)VALUES(\u0026#39;Product A\u0026#39;,\u0026#39;2023-01-01\u0026#39;),(\u0026#39;Product B\u0026#39;,\u0026#39;2023-01-02\u0026#39;),(\u0026#39;Product A\u0026#39;,\u0026#39;2023-01-03\u0026#39;),(\u0026#39;Product B\u0026#39;,\u0026#39;2023-01-04\u0026#39;);  STRING_AGGの使用例 1 2 3  SELECTproduct_name,STRING_AGG(sale_date::TEXT,\u0026#39;, \u0026#39;)ASsale_datesFROMsalesGROUPBYproduct_name;  結果  product_name | sale_dates --------------+------------------- Product A | 2023-01-01, 2023-01-03 Product B | 2023-01-02, 2023-01-04 NULL値の処理 NULL値を無視して連結するには、COALESCEを使います。\n1 2 3  SELECTproduct_name,STRING_AGG(COALESCE(sale_date::TEXT,\u0026#39;\u0026#39;),\u0026#39;, \u0026#39;)ASsale_datesFROMsalesGROUPBYproduct_name;  まとめ PostgreSQLでMySQLのGROUP_CONCATと同様の機能を実現するためには、STRING_AGG関数を使用します。\n参考  PostgreSQL Documentation: STRING_AGG  ","description":"PostgreSQLでMySQLのGROUP_CONCAT関数と同様の機能を実現する方法について説明します。STRING_AGG関数を利用する場合の問題点とその解決策を紹介し、サンプルコードを交えて具体的な使用方法を解説します。","id":59,"section":"tech","tags":["PostgreSQL"],"title":"【PostgreSQL】MySQLのGROUP_CONCATと同様の機能を実現する STRING_AGG","uri":"https://c-a-p-engineer.github.io/tech/2024/05/23/postgresql-group_concat/"},{"content":"【Elixir】EctoでSELECT句のクエリを柔軟に扱う：select_merge関数の効果的な使い方 ElixirのEctoライブラリのselect_merge/3関数を使ったクエリの動的な構築方法を、具体例を交えて詳しく解説します。動的クエリがアプリケーションの柔軟性をどのように向上させるかを学び、実用的な利用シナリオを掘り下げます。\nselect_mergeの基本 select_merge/3は、Ectoクエリにおいて、すでに定義されたselectステートメントに条件を動的に追加するために使用します。この関数は、クエリの柔軟性を大きく向上させるため、動的なレポート生成やユーザーの入力に基づいて結果を変更する必要がある場合にとくに有用です。\nサンプルコード 以下の例では、usersテーブルからデータを取得する基本的なEctoクエリを作成し、特定のフィールドを動的に選択する方法を示します。\nまずはスキーマを定義。\n1 2 3 4 5 6 7 8 9 10  # モジュールとスキーマの定義 defmodule MyApp.User do use Ecto.Schema schema \u0026#34;users\u0026#34; do field :name, :string field :age, :integer field :email, :string end end   次にクエリを定義します。\n# クエリ関数の定義 defmodule MyApp.UserQuery do import Ecto.Query alias MyApp.User alias MyApp.Repo # 動的にフィールドを選択する関数 def dynamic_select(fields) do base_query = from u in User fields_query = Enum.reduce(fields, base_query, fn field, query -\u0026gt; select_merge(query, [u], %{^field =\u0026gt; field(u, ^field)}) end) Repo.all(fields_query) end end このコードでは、まずユーザーのスキーマを定義し、その後dynamic_select関数を用いてフィールドを動的に選択しています。この関数は、フィールドのリストを引数として受け取り、それをselect_mergeを用いてクエリに追加しています。\n実際に使う場合はこのように出力列のキーワードリストを渡して実行すればOKです。\n1 2  fields = [:name, :email] MyApp.UserQuery.dynamic_select(fields)   こうすることで必要な列だけに絞ったりして高速化を図ったり必要なデータを取ってきたりすることが可能です。\n参考  Ecto.Query - select_merge/3  ","description":"ElixirのEctoライブラリの`select_merge/3`関数を使ったクエリの動的な構築方法を、具体例を交えて詳しく解説します。","id":60,"section":"tech","tags":["Elixir"],"title":"【Elixir】EctoでSELECT句のクエリを柔軟に扱う：select_merge関数の効果的な使い方","uri":"https://c-a-p-engineer.github.io/tech/2024/05/01/elixir-ecto-name-bindings/"},{"content":"【Python】音声ファイルを解析してリップシンク（口パク動画）を作成する方法 音声ファイルを解析してリップシンク（口パク動画）を作成する方法。\n音声ファイルに合わせてキャラクターが話しているかのようなリップシンク動画を作成する手順を解説します。このプロセスではlibrosaで音声を分析し、cv2 (OpenCV) で画像を処理し、最後に moviepy を用いて音声とビデオを結合します。\n用意 以下の3つのファイルを用意します。\n 音声ファイル\n 口閉じ\n 口開き\n  実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  import cv2 import librosa import numpy as np from moviepy.editor import VideoFileClip, AudioFileClip, CompositeVideoClip # 音声ファイルと画像ファイルのパスを指定 audio_path = \u0026#39;./audio.wav\u0026#39; close_image_path = \u0026#39;./close.png\u0026#39; open_image_path = \u0026#39;./open.png\u0026#39; # 音声ファイルを読み込み、サンプリングレートをそのままにして音質を保持 y, sr = librosa.load(audio_path, sr=None) # 無音区間を検出して非無音セグメントを取得、top_dbを20に設定して細かい音も拾う segments = librosa.effects.split(y, top_db=20, ref=np.max) # 画像ファイルを読み込み close_img = cv2.imread(close_image_path) open_img = cv2.imread(open_image_path) # ビデオを生成する準備 fourcc = cv2.VideoWriter_fourcc(*\u0026#39;mp4v\u0026#39;) video = cv2.VideoWriter(\u0026#39;output.mp4\u0026#39;, fourcc, 30.0, (close_img.shape[1], close_img.shape[0])) # 各フレームに対して画像を選択し、ビデオフレームに追加 frame_rate = 30 frame_duration = 1 / frame_rate total_duration = len(y) / sr t = 0 while t \u0026lt; total_duration: segment_status = any(start / sr \u0026lt;= t \u0026lt; end / sr for start, end in segments) frame = open_img if segment_status else close_img video.write(frame) t += frame_duration # ビデオファイルを保存 video.release() # moviepyを使ってビデオファイルに音声ファイルを結合 video_clip = VideoFileClip(\u0026#39;output.mp4\u0026#39;) audio_clip = AudioFileClip(audio_path) final_clip = video_clip.set_audio(audio_clip) final_clip.write_videofile(\u0026#39;final_output.mp4\u0026#39;, codec=\u0026#39;libx264\u0026#39;)   こちらが完成した動画になります。それなりにそれっぽいものができあがりました！\n\nパッケージの説明  librosa: 音声ファイルの読み込みや音声解析のために使用します。とくに、音声からの無音区間の検出に役立ちます。 cv2 (OpenCV): 画像の読み込みやビデオファイルの生成に使用します。このライブラリは画像処理において非常に強力です。 moviepy: 生成したビデオファイルに音声を結合する際に使用します。Pythonのスクリプト内で完結するため、ffmpegのコマンドライン操作に比べて簡単に扱うことができます。  まとめ 今回は口の開閉しかないので単純なものになっています。さらに複雑に口に合わせた変化をするのであれば音声ファイルの詳しい解析が必要になります。\n","description":"音声ファイルを解析してリップシンク（口パク動画）を作成する方法。","id":61,"section":"tech","tags":["Python"],"title":"【Python】音声ファイルを解析してリップシンク（口パク動画）を作成する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/04/28/python-lip-sync/"},{"content":"【Elixir】Ecto で名前付きバインドを利用する方法 Elixir の Ecto ライブラリを使用するとき、クエリの組み立てに柔軟性を持たせる方法の1つとして、名前付きバインドがあります。この記事では、Ecto で名前付きバインドをどのように使用するかを解説します。\n名前付きバインドの基本 名前付きバインドを使用することで、複数のテーブルを結合するクエリを簡単に管理できます。具体的な例を以下に示します。\n基本的な結合 1 2 3 4 5  posts_with_comments = from p in Post, join: c in Comment, as: :comment, on: c.post_id == p.id   上記の例では、Post と Comment を結合しており、as: :comment オプションを使って、この結合に comment という名前を付けています。\n名前付きバインドを使用する 名前付きバインドがあると、バインドの位置を気にすることなく、以下のようにクエリを構成できます。\n1 2 3 4 5  from [p, comment: c] in posts_with_comments, select: { p.title, c.body }   ここでは posts_with_comments から p （Post）と c （Comment）を選択し、そのタイトルと本文を取得しています。\n高度な使用例 名前付きバインドは、サブクエリや遅延バインドにも使用できます。\nサブクエリと親のバインドを参照 1 2 3 4 5 6 7  child_query = from c in Comment, where: parent_as(:posts).id == c.post_id from p in Post, as: :posts, inner_lateral_join: c in subquery(child_query)   この例では、child_query で親クエリのバインド :posts を参照しています。これはとくにサブクエリを扱う場合に有効です。\n汎用的なソート関数 名前付きバインドを活用すると、以下のような汎用的なソート関数も作成できます。\n1 2 3  def sort(query, as, field) do from [{^as, x}] in query, order_by: field(x, ^field) end   この関数では、指定されたバインド名とフィールド名でクエリをソートします。\nまとめ Ecto の名前付きバインドは、クエリの柔軟性と可読性を高める強力なツールです。とくに複数のテーブルが絡む複雑なクエリを扱う際に、その真価を発揮します。名前付きバインドを適切に使用することで、Elixir アプリケーションのデータハンドリングがより効率的かつエラーに強くなります。\nこの技術を使って、Elixir の Ecto をさらに活用してみてください。\n参考  Ecto.Query - Named bindings  ","description":"Elixir の Ecto ライブラリを使用するとき、クエリの組み立てに柔軟性を持たせる方法の1つとして、名前付きバインドがあります。この記事では、Ecto で名前付きバインドをどのように使用するかを解説します。","id":62,"section":"tech","tags":["Elixir"],"title":"【Elixir】Ecto で名前付きバインドを利用する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/04/24/elixir-ecto-name-bindings/"},{"content":"Google Colab で Selenium の動作を録画してみる。 Google Colab で Selenium の動作を録画してみました。これで動作時にの動きを録画保存できます。\n環境構築 まずは環境構築を行います。\n1 2 3 4 5 6 7 8 9 10  # @title 設定 # Selenium # xvfb インストール !sudo apt install ffmpeg xvfb !pip install selenium xvfbwrapper # ChoromeDriver !apt-get update !apt install chromium-chromedriver # 日本語対応 !apt install fonts-ipafont-gothic   Selenium実行 環境構築がサクッとできたのでSeleniumも実行してみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  # @title Selenium録画 !pacmd load-module module-null-sink sink_name=MySink from selenium import webdriver from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.support.ui import WebDriverWait as wait from selenium.webdriver.chrome.options import Options from selenium.webdriver.common.by import By import os from datetime import date import json import time from xvfbwrapper import Xvfb import sys, getopt, time, subprocess, shlex print(\u0026#39;Sreencast website animation\u0026#39;) xvfb = Xvfb(width=720, height=720, colordepth=24) xvfb.start() chrome_options = webdriver.ChromeOptions() chrome_options.add_argument(\u0026#39;--no-sandbox\u0026#39;) chrome_options.add_argument(\u0026#39;--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36\u0026#39;) wd = webdriver.Chrome(options=chrome_options) url = \u0026#34;https://twitter.com/c_a_p_engineer/status/1753985361796321397/video/1\u0026#34; wd.get(url) wd.save_screenshot(\u0026#34;1.png\u0026#34;) ffmpeg_stream = \u0026#39;ffmpeg -y -r 30 -f x11grab -s 720x720 -i :%d+nomouse -c:v libx264rgb -crf 15 -preset:v ultrafast -c:a pcm_s16le -af aresample=async=1:first_pts=0 ouxkt.mkv\u0026#39; % xvfb.new_display args = shlex.split(ffmpeg_stream) p = subprocess.Popen(args) print(p) time.sleep(30) # record for 10 secs wd.save_screenshot(\u0026#34;2.png\u0026#34;) p.kill() wd.quit() xvfb.stop()   撮影結果 スクリーンショット\n撮影した動画（出力ファイルはmkvですがmp4に変換したものを載せています。\n 録画できました！\nただ、録音はされてないので今後の課題になります。\n参考  python - Google colab virtual sink audio and video recording - Stack Overflow  ","description":"Google Colab で Selenium の動作を録画してみました。","id":63,"section":"tech","tags":["Google Colab","Python"],"title":"Google Colab で Selenium の動作を録画してみる。","uri":"https://c-a-p-engineer.github.io/tech/2024/04/19/google-colab-selenium-record/"},{"content":"Google Colab VOICEVOX ENGINEで音声生成 （CPU、GPU対応環境） Google Colab VOICEVOX ENGINEで音声生成をする際にCPU、GPUを自動で判定して環境にあったVOICEVOX環境を生成します。\nこれによりGPUが使えない状況でもCPUの環境を自動的に作ってくれます。\n環境構築 まずは環境構築を行います。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # @title VOICEVOX ENGINE設定 # @markdown [VOICEVOX ENGINE リリースページ](https://github.com/VOICEVOX/voicevox_engine/releases/) import os import tensorflow as tf os.environ[\u0026#39;ENGINE_VERSION\u0026#39;] = \u0026#34;0.18.1\u0026#34; # @param {type:\u0026#34;string\u0026#34;} if tf.test.gpu_device_name(): # GPU !wget \u0026#34;https://github.com/VOICEVOX/voicevox_engine/releases/download/${ENGINE_VERSION}/voicevox_engine-linux-nvidia-${ENGINE_VERSION}.7z.001\u0026#34; !7za x -y voicevox_engine-linux-nvidia-${ENGINE_VERSION}.7z.001 else: # CPU !wget \u0026#34;https://github.com/VOICEVOX/voicevox_engine/releases/download/${ENGINE_VERSION}/voicevox_engine-linux-cpu-${ENGINE_VERSION}.7z.001\u0026#34; -o \u0026#34;voicevox_engine.7z\u0026#34; !7za x -y voicevox_engine-linux-cpu-${ENGINE_VERSION}.7z.001   VOICEVOX ENGINE 起動 VOICEVOX ENGINEの起動を行います。\n1 2 3 4 5 6 7 8 9 10  # @title VOICEVOX ENGINE 起動 # VOICEVOX ENGINE バックグランド起動 import tensorflow as tf if tf.test.gpu_device_name(): # GPU !./linux-nvidia/run --use_gps --allow_origin \u0026#39;*\u0026#39; --cors_policy_mode \u0026#39;all\u0026#39; --host \u0026#39;127.0.0.1\u0026#39; \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp; else: # CPU !./linux-cpu/run --allow_origin \u0026#39;*\u0026#39; --cors_policy_mode \u0026#39;all\u0026#39; --host \u0026#39;127.0.0.1\u0026#39; \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp;   テキスト合成サンプル 実際にテキスト合成をしてみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  # @title テキスト合成 # 音声変換ファイル用意 !echo -n \u0026#34;こんにちは、音声合成の世界へようこそ\u0026#34; \u0026gt;text.txt # 音声クエリ変換 !curl -s \\ -X POST \\ \u0026#34;127.0.0.1:50021/audio_query?speaker=1\u0026#34;\\ --get --data-urlencode text@text.txt \\ \u0026gt; query.json # 音声ファイル変換 !curl -s \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -X POST \\ -d @query.json \\ \u0026#34;127.0.0.1:50021/synthesis?speaker=1\u0026#34; \\ \u0026gt; audio.wav # 音声再生 from IPython.display import Audio Audio(\u0026#34;audio.wav\u0026#34;, autoplay=True)   まとめ これでVOICEVOXをGoogle Colabで使用したい時に自動的に環境に合わせてVOICEVOX環境を構築してくれます。\nVOICEVOX ENGINE は APIサーバーなので ngrok などを使えばローカル環境などから接続して使用することも可能になります。\n","description":"Google Colab VOICEVOX ENGINEで音声生成をする際にCPU、GPUを自動で判定して環境にあったVOICEVOX環境を生成します。","id":64,"section":"tech","tags":["Google Colab","Python"],"title":"Google Colab VOICEVOX ENGINEで音声生成 （CPU、GPU対応環境）","uri":"https://c-a-p-engineer.github.io/tech/2024/04/10/google-colab-voicevox-engine/"},{"content":"Google Colab で Selenium の環境構築と実行 Google Colab で Selenium の環境構築と実行のメモ。\n以前にも Google Colab で Selenium の実行方法を記載しましたが、以前書いたものは Google Colab 上でしか使えないものだったため、ローカルとの互換性を持たせたソースのメモです。\n環境構築 まずは環境構築を行います。\n1 2 3 4 5 6 7 8  # インストール !pip install selenium # ChoromeDriver !apt-get update !apt install chromium-chromedriver # 日本語対応 !apt install fonts-ipafont-gothic   Selenium実行 環境構築がサクッとできたのでSeleniumも実行してみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  from selenium import webdriver from selenium.webdriver.common.by import By # 対象URLを指定 url = \u0026#34;http://example.com\u0026#34; # driver のオプション設定 options = webdriver.ChromeOptions() options.add_argument(\u0026#39;--headless\u0026#39;) # ヘッドレスモードを利用 options.add_argument(\u0026#39;--no-sandbox\u0026#39;) # sandbox 機能を利用しない options.add_argument(\u0026#39;--disable-dev-shm-usage\u0026#39;) # /dev/shm を利用しない (メモリ不足対策) options.add_argument(\u0026#39;--lang=ja-JP\u0026#39;) # 日本語対応 # オプションを指定してブラウザを立ち上げます browser = webdriver.Chrome(options=options) # 対象URLのコンテンツを取得 browser.get(url) # コンテンツからaタグのリストを作成 tags = browser.find_elements(By.TAG_NAME, \u0026#34;h1\u0026#34;) for tag in tags: print(tag.text) browser.save_screenshot(\u0026#39;example_screenshot.png\u0026#39;) browser.quit()   これで h1 タグのテキスト内容とスクリーンショットを撮ってくれます。\nこれで Google Colab で簡単にSeleniumを使って色々できます。\n","description":"Google Colab で Selenium の環境構築と実行のメモ","id":65,"section":"tech","tags":["Google Colab","Python"],"title":"Google Colab で Selenium の環境構築と実行","uri":"https://c-a-p-engineer.github.io/tech/2024/04/11/google-colab-selenium-python/"},{"content":"Google ColabでFlask環境を構築し、Webアプリケーションを公開する方法 Google Colab上でFlaskアプリケーションを構築し、serve_kernel_port_as_window と serve_kernel_port_as_iframe 関数を使ってアプリケーションを公開する方法を紹介します。\nFlaskのインストール まずはFlaskをインストールします。FlaskはPythonで書かれた軽量なWebアプリケーションフレームワークで、シンプルながら強力な機能を提供します。\n1  !pip install flask   Flaskアプリケーションの定義 Flaskを使って基本的なWebアプリケーションを定義します。以下のコードは、ルートURL（/）にアクセスした際に \u0026ldquo;Hello, World!\u0026rdquo; と表示するアプリケーションです。\n1 2 3 4 5 6  from flask import Flask app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def hello_world(): return \u0026#39;Hello, World!\u0026#39;   アプリケーションの起動 アプリケーションを起動するには、特定のポートでFlaskアプリケーションを実行します。Colabでは、アプリケーションを別のスレッドで起動するのが一般的です。\n1 2 3 4 5 6 7 8 9  # 公開ポート PROT = 7860 if __name__ == \u0026#39;__main__\u0026#39;: from threading import Thread thread = Thread(target=lambda: app.run(port=PROT, debug=True, use_reloader=False)) thread.start()   アプリケーションの公開 Colabでは、serve_kernel_port_as_window と serve_kernel_port_as_iframe 関数を使って、特定のポートで実行されているアプリケーションを公開できます。\n serve_kernel_port_as_window:  新しいブラウザウィンドウ（またはタブ）でアプリケーションを表示します。主に、ユーザーが直接インタラクションを必要とするアプリケーションに適しています。    1 2  from google.colab import output output.serve_kernel_port_as_window(PROT)    serve_kernel_port_as_iframe:  現在のColabノートブックのiframe内でアプリケーションを表示します。ノートブック内で直接結果を表示したい場合に便利です。    1 2  from google.colab import output output.serve_kernel_port_as_iframe(PROT)   注意点  serve_kernel_port_as_iframe と serve_kernel_port_as_window を同時に使用することも可能ですが、通常はどちらか一方で十分です。 Colab環境でポートを公開する際は、セキュリティ面での懸念を考慮し、公開する内容に注意してください。  この方法を利用すれば、Google Colabを使って手軽にFlaskアプリケーションの開発とテストを行い、その結果をリアルタイムで確認するができます。開発プロセスの迅速化や、教育目的でのデモンストレーションにも非常に有効です。\n","description":"Google Colab上でFlaskアプリケーションを構築し、アプリケーションを公開する方法を紹介します。","id":66,"section":"tech","tags":["Google Colab","Python"],"title":"Google ColabでFlask環境を構築し、Webアプリケーションを公開する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/04/09/google-colab-flask/"},{"content":"Google Colabでudockerを使ってDockerコンテナを実行する方法 Google Colabでudockerを使ってDockerコンテナを実行する方法\nudocker環境設定 以下のGitHubのREADMEの通りにGoogle Colab上で環境を作成します。\n docker-in-colab  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  # Copyright 2024 Drengskapur # # Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # @title {display-mode:\u0026#34;form\u0026#34;} # @markdown \u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;center\u0026gt;\u0026lt;img src=\u0026#34;https://cdn.jsdelivr.net/gh/drengskapur/docker-in-colab/assets/docker.svg\u0026#34; height=\u0026#34;150\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://cdn.jsdelivr.net/gh/drengskapur/docker-in-colab/assets/colab.svg\u0026#34; height=\u0026#34;150\u0026#34;\u0026gt;\u0026lt;/center\u0026gt;\u0026lt;br/\u0026gt; # @markdown \u0026lt;center\u0026gt;\u0026lt;h1\u0026gt;Docker in Colab\u0026lt;/h1\u0026gt;\u0026lt;/center\u0026gt;\u0026lt;center\u0026gt;github.com/drengskapur/docker-in-colab\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;b\u0026gt;udocker(\u0026#34;run hello-world\u0026#34;)\u0026lt;/b\u0026gt;\u0026lt;/center\u0026gt;\u0026lt;br/\u0026gt; def udocker_init(): import os if not os.path.exists(\u0026#34;/home/user\u0026#34;): !pip install udocker \u0026gt; /dev/null !udocker --allow-root install \u0026gt; /dev/null !useradd -m user \u0026gt; /dev/null print(f\u0026#39;Docker-in-Colab 1.1.0\\n\u0026#39;) print(f\u0026#39;Usage: udocker(\u0026#34;--help\u0026#34;)\u0026#39;) print(f\u0026#39;Examples: https://github.com/indigo-dc/udocker?tab=readme-ov-file#examples\u0026#39;) def execute(command: str): user_prompt = \u0026#34;\\033[1;32muser@pc\\033[0m\u0026#34; print(f\u0026#34;{user_prompt}$ udocker {command}\u0026#34;) !su - user -c \u0026#34;udocker $command\u0026#34; return execute udocker = udocker_init()   これでDocker環境ができました。\nhello-world コンテナを実行してみます。\n1  udocker(\u0026#34;run hello-world\u0026#34;)   以下が表示されたら成功になります。\n1  Hello from Docker!   コマンド紹介 ヘルプ 1  udocker(\u0026#34;--help\u0026#34;)   コンテナリスト 1  udocker(\u0026#34;ps --help\u0026#34;)   コンテナの実行 1  udocker(\u0026#34;run --help\u0026#34;)   udockerの一般的な制限事項 udockerは、ルート権限を必要とする操作を行うことはできません。以下は、udockerで行うことができない操作の例です。\n ホストが保護するデバイスやファイルへのアクセス TCP/IPの特権ポート（1024未満の範囲）でのリスニング ファイルシステムのマウント suコマンドの使用不可 システム時間の変更 ルーティングテーブル、ファイアウォールルール、ネットワークインターフェースの変更  これらの権限を必要とするコンテナの場合、代わりにDockerを使用する必要があります。\nudockerはコンテナの作成を目的としていません。コンテナの作成はDockerおよびDockerfileを使用して行う方が適しています。\nudockerはDockerのすべての機能を提供するわけではなく、Dockerの代替として意図されていません。\nudockerは主に、ユーザースペースでのコンテナ実行環境を提供することを目的としています。udockerは特に、Dockerコンテナにカプセル化されたユーザーアプリケーションの実行に適しています。\nPRootエンジンを使用してのデバッグやstraceの使用は、デバッガーとPRootが同じトレースメカニズムを使用するため、機能しません。\nまとめ Google Colab 環境上でudockerを使用すればコンテナ自体は使えるようです。\nただし、それでも本来のDockerのような動作をすることはできなかったり、compose もサポートされていないため、求めているものに対しては不十分かもしれません。\n","description":"Google Colabでudockerを使ってDockerコンテナを実行する方法","id":67,"section":"tech","tags":["Docker","Google Colab","Python"],"title":"Google Colabでudockerを使ってDockerコンテナを実行する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/04/09/google-colab-udocker/"},{"content":"Google Colab VOICEVOXで音声生成 CPU、GPU対応環境、自動作成版 Google Colab VOICEVOXで音声生成をする際にCPU、GPUを自動で判定して環境にあったVOICEVOX環境を生成します。\nこれによりGPUが使えない状況でもCPUの環境を自動的に作ってくれます。\n環境構築 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  # @title VOICEVOX設定 import torch import os # 必要なライブラリのパスを追加 os.environ[\u0026#39;LD_LIBRARY_PATH\u0026#39;] += f\u0026#34;:/content/voicevox_core/\u0026#34; # 英語(米国)のロケールを設定 os.environ[\u0026#39;LANG\u0026#39;] = \u0026#39;en_US.UTF-8\u0026#39; os.environ[\u0026#39;LC_ALL\u0026#39;] = \u0026#39;en_US.UTF-8\u0026#39; if torch.cuda.is_available(): # GPU利用 print(\u0026#34;GPU\u0026#34;) # VOIVEVOX設定 !curl -sSfL https://github.com/VOICEVOX/voicevox_core/releases/latest/download/download.sh | bash -s -- --device cuda !wget https://github.com/VOICEVOX/voicevox_core/releases/download/0.15.3/voicevox_core-0.15.3+cuda-cp38-abi3-linux_x86_64.whl !pip install voicevox_core-0.15.3+cuda-cp38-abi3-linux_x86_64.whl # cuda11インストール # CUDAリポジトリのGPGキーとリポジトリの設定をダウンロード !wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin !sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600 # CUDA 11のローカルリポジトリパッケージをダウンロード !wget http://developer.download.nvidia.com/compute/cuda/11.0.3/local_installers/cuda-repo-ubuntu1804-11-0-local_11.0.3-450.51.06-1_amd64.deb # パッケージをインストールし、リポジトリリストに追加 !sudo dpkg -i cuda-repo-ubuntu1804-11-0-local_11.0.3-450.51.06-1_amd64.deb # GPGキーを追加 !sudo apt-key add /var/cuda-repo-ubuntu1804-11-0-local/7fa2af80.pub # システムを更新し、CUDAをインストール !sudo apt-get update !sudo DEBIAN_FRONTEND=noninteractive apt-get -y install cuda-11-0 else: # CPU利用 print(\u0026#34;CPU\u0026#34;) # VOIVEVOX設定 !curl -sSfL https://github.com/VOICEVOX/voicevox_core/releases/latest/download/download.sh | bash -s !wget https://github.com/VOICEVOX/voicevox_core/releases/download/0.15.3/voicevox_core-0.15.3+cpu-cp38-abi3-linux_x86_64.whl !pip install voicevox_core-0.15.3+cpu-cp38-abi3-linux_x86_64.whl # Python実行ファイル取得 !wget https://raw.githubusercontent.com/VOICEVOX/voicevox_core/406f6c41408836840b9a38489d0f670fb960f412/example/python/run.py    GPU: 約8分 CPU: 約1分  GPUの場合、色々なものをインストールため、設定に時間がかかります。そのため短い言葉などならCPUを利用した方が良いです。大量の生成を行うならGPUの方が良いかも知れません。\n音声生成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # @title 音声生成 import IPython.display audio=f\u0026#39;temp.wav\u0026#39; text = \u0026#34;\u0026#34;\u0026#34; いろはにほへと、 ちりぬるを、 わかよたれそ、 つねならむ、 うゐのおくやま、 けふこえて、 あさきゆめみし、 ゑひもせす \u0026#34;\u0026#34;\u0026#34; !pip install numpy !python ./run.py --dict-dir \u0026#34;./voicevox_core/open_jtalk_dic_utf_8-1.11\u0026#34; --text \u0026#34;{text}\u0026#34; --out \u0026#34;{audio}\u0026#34; --speaker-id \u0026#34;50\u0026#34; IPython.display.Audio(audio, autoplay=True)    GPU: 9秒（初回15秒、初回だけ時間がかかります。 CPU: 17秒  まとめ これでVOICEVOXをGoogle Colabで使用したい時に自動的に環境に合わせてVOICEVOX環境を構築してくれます。\n","description":"Google Colab VOICEVOXで音声生成をする際にCPU、GPUを自動で判定して環境にあったVOICEVOX環境を生成します。","id":68,"section":"tech","tags":["Google Colab","Python"],"title":"Google Colab VOICEVOXで音声生成 CPU、GPU対応環境、自動作成版","uri":"https://c-a-p-engineer.github.io/tech/2024/04/09/google-colab-voicevox-cpu-gpu/"},{"content":"PythonでGPUとCPUの処理を効率的に分ける方法 PPythonでGPUとCPUの処理を分ける方法メモ。プログラム内で条件分岐を使用し、GPUが利用可能な場合とそうでない場合に、それぞれ異なる処理を行う方法をTensorFlowとPyTorchを用いて説明します。\nTensorFlowでの処理の分け方 TensorFlowを使用している場合、GPUの有無を判断するコードは以下のようになります。\n1 2 3 4 5 6 7 8  import tensorflow as tf if tf.test.gpu_device_name(): print(\u0026#34;GPUを使用しています:\u0026#34;, tf.test.gpu_device_name()) # GPUを使用する処理をここに書く else: print(\u0026#34;GPUは利用できません。CPUを使用します。\u0026#34;) # CPUを使用する処理をここに書く   このコードはまず、tf.test.gpu_device_name()関数を呼び出し、GPUデバイスの名前を取得します。戻り値が空でなければ、GPUが利用可能であると判断し、GPUを使用する処理を実行します。そうでない場合は、CPUを使用する処理を実行します。\nPyTorchでの処理の分け方 PyTorchを使用している場合、GPUの有無を判断するコードは以下のようになります。\n1 2 3 4 5 6 7 8  import torch if torch.cuda.is_available(): print(\u0026#34;GPUを使用しています:\u0026#34;, torch.cuda.get_device_name(0)) # GPUを使用する処理をここに書く else: print(\u0026#34;GPUは利用できません。CPUを使用します。\u0026#34;) # CPUを使用する処理をここに書く   torch.cuda.is_available()関数を使ってGPUの利用可能性をチェックし、Trueが返されればGPUが利用可能であるとして、GPUを使用する処理を実行します。利用できない場合は、CPUを使用する処理を実行します。\nまとめ PythonではAIの使用などでGPUを使うことがあります、GPUが使えない場合の対処が必要な場合の処理をこれでかき分けることが可能になります。\n","description":"PythonでGPUとCPUの処理を分ける方法メモ。","id":69,"section":"tech","tags":["Python"],"title":"PythonでGPUとCPUの処理を分ける方法","uri":"https://c-a-p-engineer.github.io/tech/2024/04/09/python-cpu-gpu/"},{"content":"【Elixir】warning: the underscored variable \u0026ldquo;_variable\u0026rdquo; is used after being set.の対処法 warning: the underscored variable \u0026quot;_variable\u0026quot; is used after being set.の対処法。\n警告の背景 Elixirでは、変数名の前にアンダースコア(_)を付けることで、「この変数は使用されない」という意図を示します。これはElixirのみならず、Erlangや他の関数型言語においても見られる慣習です。しかし、アンダースコアで始まる変数に値を割り当てた後で、その変数をコード内で使用すると、Elixirコンパイラは開発者に対して警告を発します。これは、「本来使用されるべきでない変数が使用されている」という状況を指摘するためです。\n警告メッセージの解析 警告メッセージは以下の形式で表示されます。\nwarning: the underscored variable \u0026quot;_variable\u0026quot; is used after being set. A leading underscore indicates that the value of the variable should be ignored. If this is intended please rename the variable to remove the underscore. このメッセージは、「アンダースコアで始まる変数_variableがセットされた後に使用されている。アンダースコアで始まる変数はその値が無視されるべきであることを示す。もしこれが意図的であるならば、アンダースコアを取り除いて変数名を変更してください」という意味です。\n対処法 変数名の変更 問題のあるコードの例として、以下のような関数があるとします。\n1 2 3 4  def process_data(_params) do _result = do_some_operation() # ここで_resultを使用 end   この場合、_result変数は実際には使用されているため、アンダースコアを取り除き、変数名を変更することで警告を解消します。\n1 2 3 4  def process_data(params) do result = do_some_operation() # ここでresultを使用 end   不要な変数の削除 もしアンダースコア付きの変数が本当に不要である場合（たとえば、値を受け取るがその後で使用しない場合）、その変数の代入自体を削除することも1つの解決策です。\nまとめ warning: the underscored variable \u0026quot;_variable\u0026quot; is used after being set.という警告は、Elixirのコーディング慣習を理解し、適切に適用することの重要性を教えてくれます。このような警告に直面したときは、変数の使用意図を再評価し、必要に応じてコードをリファクタリングする良い機会と捉えることができます。正しい命名規則の適用は、コードの可読性と保守性を向上させる上で不可欠です。\n","description":"warning the underscored variable \"_variable\" is used after being set.の対処法。","id":70,"section":"tech","tags":["Elixir"],"title":"【Elixir】the underscored variable \"_variable\" is used after being set.の対処法","uri":"https://c-a-p-engineer.github.io/tech/2024/03/20/elixir-warning-underscored-variable/"},{"content":"【Elixir】CLIで入力を受け取る mix コマンドなどを作成した際に引数以外にも入力値を受け取って処理を行いたい際に使える方法。\nコマンドライン入力の受け取り方 IO.gets/2 を使用します。\n1 2 3 4 5 6 7 8 9 10 11 12  # 名前の入力を促すメッセージを表示 IO.puts(\u0026#34;あなたの名前は何ですか？\u0026#34;) # コマンドラインからの入力を受け取る name = IO.gets(\u0026#34;What is your name?\\n\u0026#34;) # 受け取った入力を変数に格納し、トリム（改行文字を削除） name = String.trim(name) # 挨拶と共に入力された名前を表示 IO.puts(\u0026#34;こんにちは、#{name}さん！\u0026#34;)    IO.gets 関数は、引数としてプロンプトに表示する文字列を取ります。この例では空文字列 \u0026quot;\u0026quot; を使用していますが、必要に応じてプロンプトメッセージを指定できます。 受け取った入力には改行文字が含まれているため、String.trim 関数を使用して改行文字を削除します。これにより、扱いやすい形式の文字列を得ることができます。 この例では、受け取った入力をそのまま画面に表示していますが、この値を使ってさらに複雑な処理を行うことも可能です。  ","description":"mix コマンドなどを作成した際に引数以外にも入力値を受け取って処理を行いたい際に使える方法。","id":71,"section":"tech","tags":["Elixir"],"title":"【Elixir】CLIで入力を受け取る","uri":"https://c-a-p-engineer.github.io/tech/2024/03/20/elixir-io-gets/"},{"content":"【Elixir】clauses with the same name and arity の意味と対処方法 warning: clauses with the same name and arity (number of arguments) should be grouped together が出た際の対処方法。\nエラーメッセージ warning: clauses with the same name and arity (number of arguments) should be grouped together, \u0026quot;def handle_event/3\u0026quot; was previously defined\nこのメッセージは、handle_event/3関数がまとめられていないという意味になります。\n解決策 ステップ1: 関数の定義を確認 まずは関数の定義を確認してください。\n以下のように同一関数名が別々の位置にあるかと思います。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  def handle_event(\u0026#34;refresh\u0026#34;, _params, socket) do # イベント \u0026#34;refresh\u0026#34; の処理 refresh() {:noreply, update(socket, :page, \u0026amp;(\u0026amp;1 + 1))} end def refresh() do # リフレッシュで使用する関数 end def handle_event(\u0026#34;load_more\u0026#34;, _params, socket) do # イベント \u0026#34;load_more\u0026#34; の処理 {:noreply, update(socket, :items, fn items -\u0026gt; List.concat(items, additional_items()) end)} end   ステップ2: 関数を再編成 2つの対処方法があります。\n同一関数名でまとめる場合。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # 同一関数名でまとめる def handle_event(\u0026#34;refresh\u0026#34;, _params, socket) do # イベント \u0026#34;refresh\u0026#34; の処理 refresh() {:noreply, update(socket, :page, \u0026amp;(\u0026amp;1 + 1))} end def handle_event(\u0026#34;load_more\u0026#34;, _params, socket) do # イベント \u0026#34;load_more\u0026#34; の処理 {:noreply, update(socket, :items, fn items -\u0026gt; List.concat(items, additional_items()) end)} end def refresh() do # リフレッシュで使用する関数 end   関数を1つにまとめて、パターンマッチングを使用して分岐を管理。\n1 2 3 4 5 6 7 8 9 10  def handle_event(event_type, _params, socket) do case event_type do \u0026#34;refresh\u0026#34; -\u0026gt; refresh() {:noreply, update(socket, :page, \u0026amp;(\u0026amp;1 + 1))} \u0026#34;load_more\u0026#34; -\u0026gt; {:noreply, update(socket, :items, fn items -\u0026gt; List.concat(items, additional_items()) end)} end end   これでこの warning に対応できます。\n","description":"warning clauses with the same name and arity (number of arguments) should be grouped together が出た際の対処方法。","id":72,"section":"tech","tags":["Elixir"],"title":"【Elixir】clauses with the same name and arity の意味と対処方法","uri":"https://c-a-p-engineer.github.io/tech/2024/03/20/elixir-warning-grouped/"},{"content":"【Elixir】clauses with the same name and arity の意味と対処方法 Elixirのプロジェクト管理ツールであるmixは、プロジェクトのコンパイル、テスト、依存関係の管理など、多くのタスクを簡単に実行できます。Elixirのプロジェクトでカスタムmixコマンドを作成する方法についてご紹介いたします。\nMixタスクのテンプレートを理解する ElixirのMix.Taskモジュールを利用して独自のmixタスクを作成ができます。これには、モジュールでuse Mix.Taskを宣言し、run/1関数を定義する必要があります。\n1 2 3 4 5 6 7 8 9  defmodule Mix.Tasks.YourCustomTask do use Mix.Task @shortdoc \u0026#34;ここにタスクの短い説明を記述します。\u0026#34; def run(args) do # タスクが実行された時のロジックをここに記述します。 end end   カスタムmixタスクを作成する カスタムタスクを作成するには、プロジェクトのlibディレクトリにタスク用のファイルを作成します。例として、hello_worldというタスクを作成する場合、lib/mix/tasks/hello_world.exに以下の内容を記述します。\n1 2 3 4 5 6 7 8 9  defmodule Mix.Tasks.HelloWorld do use Mix.Task @shortdoc \u0026#34;Hello Worldを表示します。\u0026#34; def run(_args) do IO.puts \u0026#34;Hello, World!\u0026#34; end end   このコードは、mix hello_worldを実行したときに\u0026quot;Hello, World!\u0026ldquo;を出力するシンプルなタスクを作成します。\nタスクの実行 カスタムタスクを作成した後、コマンドラインから直接呼び出せます。ただし、Elixirプロジェクトのルートディレクトリで実行する必要があります。\n$ mix hello_world アプリケーションの起動を組み込む 特定のカスタムタスクでは、アプリケーションのコンポーネントや環境に依存する処理が必要になる場合があります。これを実現するには、Mix.Task.run \u0026quot;app.start\u0026quot;, []をタスクのrun関数内で呼び出すことで、タスク実行前にアプリケーションを起動できます。\n1 2 3 4 5 6 7 8 9 10 11  defmodule Mix.Tasks.Example do use Mix.Task @shortdoc \u0026#34;アプリケーションを起動して特定のタスクを実行します。\u0026#34; def run(_args) do Mix.Task.run \u0026#34;app.start\u0026#34;, [] # アプリケーションが起動した後の処理をここに記述します。 IO.puts \u0026#34;アプリケーション起動後のタスクを実行中...\u0026#34; end end   このステップは、アプリケーションのリソースや環境設定に依存するタスクを作成する際にとくに重要です。\nまとめ Elixirのmixを使って独自のタスクを作成することは、開発プロセスをカスタマイズし、効率化する強力な方法です。この記事では、基本的なカスタムmixタスクの作成方法を説明しました。Mix.TaskのAPIを深く探ることで、より複雑なタスクの作成も可能になります。Elixirの柔軟性とmixのパワーを最大限に活用して、開発体験を向上させましょう。\n","description":"Elixirのプロジェクト管理ツールであるmixは、プロジェクトのコンパイル、テスト、依存関係の管理など、多くのタスクを簡単に実行できます。","id":73,"section":"tech","tags":["Elixir"],"title":"【Elixir】mixコマンドを自作する","uri":"https://c-a-p-engineer.github.io/tech/2024/03/20/elixir-mix-command/"},{"content":"Google ColabでPHPプログラミングを始める方法 Google ColabでPHPをを動かす！\nPHPのインストール まず、PHPをGoogle Colabにインストールする手順から始めましょう。以下のコマンドを新しいColabノートブックのセルに貼り付けて実行します。\n1  !apt install -y php   これらのコマンドにより、PHPがインストールされます。\nPHPバージョンの確認 インストール後、PHPが正しくインストールされたかを確認するために、バージョン情報を表示します。\n1  !php -version   このコマンドの出力でPHPのバージョン情報が表示されれば、インストール成功です。\nPHPを実行する PHPを実行してみます。\n1  !php -r \u0026#39;echo \u0026#34;Hello,World!\\n\u0026#34;;\u0026#39;   これが出力された成功です\n1  Hello,World!   PHPサーバーを起動させる まずはPHPファイルを作成します。\n1 2 3  %%writefile index.php \u0026lt;?php echo \u0026#34;Hello World!\u0026#34;   サーバーを起動 以下のやり方でPHPのサーバーを起動して公開することが可能です。\n# Google Colab でポートを公開 from google.colab import output output.serve_kernel_port_as_window(8888, path=\u0026quot;\u0026quot;) # PHPサーバーを起動 !php -S localhost:8888 -t ./ これでGoogle Colab上でPHPの実行、サーバー公開が可能になります。\n","description":"Google ColabでPHPをを動かす！","id":74,"section":"tech","tags":["Google Colab","PHP"],"title":"Google ColabでPHPプログラミングを始める方法","uri":"https://c-a-p-engineer.github.io/tech/2024/03/18/google-colab-php/"},{"content":"Google ColabでElixirプログラミングを始める方法 Google Colabは、ブラウザ上でPythonコードを簡単に実行できる環境です。しかしPython以外のプログラミング言語、たとえばElixirを動かすことも可能です。\nこの記事では、Google ColabでElixirをセットアップし、使用する方法を紹介します。\nElixirのインストール まず、ElixirをGoogle Colabにインストールする手順から始めましょう。以下のコマンドを新しいColabノートブックのセルに貼り付けて実行します。\n1 2 3 4  !wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb \u0026amp;\u0026amp; sudo dpkg -i erlang-solutions_2.0_all.deb !sudo apt-get update !sudo apt-get install esl-erlang !sudo apt-get install elixir   これらのコマンドにより、Elixirとそれに必要なErlangがシステムにインストールされます。\nElixirバージョンの確認 インストール後、Elixirが正しくインストールされたかを確認するために、バージョン情報を表示します。\n1  !elixir -v   このコマンドの出力でElixirのバージョン情報が表示されれば、インストール成功です。\n単一行のElixirコードの実行 単一行のElixirコードを実行するには、以下のように!elixirコマンドを使用します。\n1  !elixir -e \u0026#34;IO.puts \u0026#39;Hello, Elixir on Google Colab!\u0026#39;\u0026#34;   このコマンドは、Elixirの標準出力に\u0026quot;Hello, Elixir on Google Colab!\u0026ldquo;と表示します。\n複数行のElixirコードを実行する方法 複数行のElixirコードを実行するためには、ヒアドキュメントを利用して一時ファイルにコードを書き込み、そのファイルを実行する方法が便利です。以下の手順を一つのセルにまとめて実行します。\n1 2 3 4 5 6 7  %%bash cat \u0026gt; example.exs \u0026lt;\u0026lt;EOF IO.puts \u0026#34;Hello, Elixir!\u0026#34; IO.puts \u0026#34;これは1つのセルで複数行のコードを実行する方法です。\u0026#34; EOF elixir example.exs   これにより、example.exsファイルが作成され、そのファイルに記載されたElixirコードが実行されます。\nまとめ Google ColabはPythonに特化したプラットフォームですが、上記の手順に従うことでElixir言語の実行環境を構築ができます。Elixirのインストールから複数行のコード実行まで、Colabを使って幅広いプログラミング言語の学習や実験が可能になります。\nこれで、Google Colabを使ってElixirプログラミングの世界に飛び込む準備が整いました。Elixirの強力な機能を探求し、新しいプロジェクトに生かしてみてください。\n","description":"Google Colabは、ブラウザ上でPythonコードを簡単に実行できる環境です。しかしPython以外のプログラミング言語、たとえばElixirを動かすことも可能です。","id":75,"section":"tech","tags":["Elixir"],"title":"Google ColabでElixirプログラミングを始める方法","uri":"https://c-a-p-engineer.github.io/tech/2024/03/15/google-colabo-elixir/"},{"content":"【Elixir】Ectoで個別にエラーを追加する方法 ElixirのEctoで個別にエラーを追加する方法。\nちょっと面倒な時にやる僕が個人的にやっている方法。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  Ectoスキーマの準備 まず、Ectoスキーマを定義します。この例では具体的なフィールドは定義しませんが、必要に応じて追加してください。\n1 2 3 4 5 6 7 8  defmodule Demo.Param do use Ecto.Schema import Ecto.Changeset embedded_schema do # 実際のフィールド定義をここに記述 end end   エラーメッセージの追加 次に、特定の条件が満たされたときにエラーメッセージを追加します。これは、Ecto.Changeset.add_error/3関数を使用して行われます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  defmodule DemoWeb.Demo.Index do use DemoWeb, :live_view @impl true def mount(params, session, socket) do { :ok, socket |\u0026gt; assign( :changeset, Demo.Param.changeset(%Demo.Param{}, %{}) ) } end # バリデーション @impl true def handle_event(\u0026#34;bulk-send\u0026#34;, %{\u0026#34;param\u0026#34; =\u0026gt; %{\u0026#34;test\u0026#34; =\u0026gt; test}}, socket) do changeset = Demo.Schema.changeset(%Demo.Schema{}, %{})  # エラー条件 changeset = if length(bulk_plans) \u0026gt; 0 do Ecto.Changeset.add_error(changeset, :message, \u0026#34;エラー\u0026#34;) else changeset end # Actionの変更 changeset = %{changeset | action: :validate} {:noreply, socket |\u0026gt; assign(:send_changeset, changeset)} end end   参考  Ecto.Schema Primitive types  ","description":"ElixirのEctoで個別にエラーを追加する方法","id":76,"section":"tech","tags":["Elixir"],"title":"【Elixir】Ectoで個別にエラーを追加する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/03/13/elixir-ecto-add_error/"},{"content":"Google Colabでプログレスバーを表示する技術 Google Colabratory でプログレスバーを表示するための方法を紹介します。\nプログレスバーは、長時間実行される処理の進捗をユーザーに視覚的に伝えるための重要なツールです。これにより、プロセスの完了時間を推定したり、プログラムが正常に動作しているかどうかを確認できます。\ntqdm ライブラリの使用 Colabで最も一般的に使用されるプログレスバーの実装方法は、tqdmライブラリを使用することです。tqdmは、繰り返し処理に対して簡単にプログレスバーを追加できるPythonライブラリです。\nインストールとインポート Colabにはtqdmがプリインストールされていますが、最新版を使用したい場合は、次のコマンドでアップデートできます。\n1  !pip install tqdm -U   次に、tqdmをインポートします。\n1  from tqdm import tqdm   簡単な使用例 forループにtqdmを適用する例を以下に示します。\n1 2 3 4 5  from tqdm import tqdm import time for i in tqdm(range(100)): time.sleep(0.1) # サンプルの処理として0.1秒待機   このコードは、0から99までの数値に対して繰り返し処理を行い、各ステップで0.1秒待機します。この間、プログレスバーが進行状況を表示します。\ntqdm.notebook でより視覚的なプログレスバーを Colabのノートブック環境では、tqdm.notebookモジュールを使用すると、より視覚的に魅力的なプログレスバーを表示できます。\n1 2 3 4 5  from tqdm.notebook import tqdm import time for i in tqdm(range(100)): time.sleep(0.1)   from tqdm.notebook import tqdmを使用することで、Colabのノートブックに最適化されたプログレスバーを利用できます。\nまとめ Google Colabでプログレスバーを表示するには、tqdmライブラリが非常に便利です。長時間実行する処理の進捗を視覚的に確認することで、作業の効率化につながります。この記事で紹介した方法を活用して、Colabでのデータ分析や機械学習プロジェクトをさらに進化させましょう。\n","description":"Google Colabratory でプログレスバーを表示するための方法を紹介します。","id":77,"section":"tech","tags":["Google Colab","Python"],"title":"Google Colabでプログレスバーを表示する技術","uri":"https://c-a-p-engineer.github.io/tech/2024/03/12/google-tqdm/"},{"content":"Emoji Kitchen: WEB上で絵文字の組み合わせを楽しむ 絵文字を組み合わせて遊ぼう！\n🫠 + 🐰 を組み合わせると以下のような溶けるうさぎが作れたりするツールです。\nWEBサイトの特徴   emojikitchen.dev: 絵文字のユニークなイラストを広範囲にわたって提供し、ユーザーが自由に組み合わせを探索できるようにします。\nEmoji Kitchen (emojikitchen.dev)\n  emojikitchen.com: Google Emoji Kitchenチームによる創造的な作品を紹介し、ユーザーが絵文字の多彩な組み合わせを探索し、コピーすることができます。\nEmojiKitchen (emojikitchen.com)\n  emoji.supply/kitchen: Gboard for Androidで利用可能な絵文字の組み合わせをブラウズし、共有するためのプラットフォームです。\nEmoji Kitchen Browser (emoji.supply/kitchen)\n  利用の魅力 これらのサイトを通じて、ユーザーは自らのコミュニケーションをカスタマイズし、より具体的かつクリエイティブな方法で感情やメッセージを伝えることができます。絵文字の組み合わせを通じて、日常のやり取りに新しい楽しみを加えることが可能です。\nまとめ Emoji KitchenのWEBサイトは、絵文字を用いた表現を豊かにするための素晴らしいリソースです。これらのサイトが提供する絵文字の組み合わせにより、ユーザーは個性的でパーソナライズされたコミュニケーションを楽しむことができます。\n","description":"絵文字を組み合わせて遊ぼう！","id":78,"section":"tech","tags":["画像","ツール","オンラインツール"],"title":"Emoji Kitchen WEB上で絵文字の組み合わせを楽しむ","uri":"https://c-a-p-engineer.github.io/tech/2024/03/11/emoji-kitchen/"},{"content":"Google MusicFX AIによる音楽創造 MusicFXは、AI技術を駆使してテキストベースのプロンプトから音楽を生成するツールです。このツールは、音楽制作ができない人にはとってもありがたい！\nMusicFX\nMusicFXの特徴  直感的な使用法: ユーザーは、所望の曲のスタイルや感情をテキストで入力し、AIがそれに応じた音楽を生成します。 多様なカスタマイズオプション: ジャンル、テンポ、楽器など、豊富なカスタマイズオプションを提供しています。。 膨大な楽曲生成: 10万以上のトラックを生成し、音楽制作の可能性を広げています。 楽曲の長さ: 30,50,70秒の楽曲が生成できます。  使い方  プロンプトの入力: 生成したい音楽のジャンルや特徴を記述します。 生成とカスタマイズ: AIは入力に基づいて曲を生成し、ユーザーは更なるカスタマイズを行うことができます。 音楽の調整: 生成された音楽を聴き、必要に応じて調整を加えます。  実際に作ってみた 実際に「Japanese, Kabuki」と入力して作ってもらいました。\nSorry, your browser doesn't support embedded videos.  まとめ GoogleのMusicFXは、AIと音楽制作の未来を形作る画期的なツールです。このツールは、テクノロジーとクリエイティビティが交差する点で、無限の可能性を提供します。MusicFXにより、プロの音楽家だけでなく、音楽愛好家も自らのビジョンを現実のものにする新たな手段を得ることができます。\n","description":"MusicFXは、AI技術を駆使してテキストベースのプロンプトから音楽を生成するツールです。このツールは、音楽制作ができない人にはとってもありがたい！","id":79,"section":"tech","tags":["AI","音楽"],"title":"Google MusicFX AIによる音楽創造","uri":"https://c-a-p-engineer.github.io/tech/2024/03/11/google-musicfx/"},{"content":"【Elixir】EctoでChangesetからデータを効率的に取得する方法 Ectoのchangesetの各フィールドからデータを取得したい時の対応。\nget_field 関数による特定フィールドのデータ取得 get_field関数は、changesetから特定のフィールドの現在の値を取得する際に使用します。この関数は、変更された値が存在する場合はその値を、そうでない場合は元の値を返します。\n使用例 1 2 3  # `changeset`から特定のフィールドの値を取得 value = Ecto.Changeset.get_field(changeset, :field_name) # `value`は`:field_name`フィールドの値です   この関数は特定のフィールドからデータを取得したい時にとても助かります。\n","description":"Ectoの`changeset`の各フィールドからデータを取得したい時の対応。","id":80,"section":"tech","tags":["Elixir"],"title":"【Elixir】EctoでChangesetからデータを取得する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/03/11/elixir-changeset-getfiled/"},{"content":"FFmpeg】FFprobeを使って動画ファイルの詳細情報を把握する FFprobeは、動画や音声ファイルの詳細情報を取得するための強力なツールです。\n基本的な使用方法 FFprobeの基本的な使用方法は、ファイルからメタデータやストリーム情報を取得することです。以下は、いくつかの基本的なコマンド例です：\n ビデオストリームの時間を表示するコマンド: ffprobe -v error -i input -select_streams v:0 -show_entries stream=duration -of default=noprint_wrappers=1:nokey=1  フォーマット（コンテナ）の全体時間を表示するコマンド（読みやすい形式で）: ffprobe -v error -i input -show_entries format=duration -of default=noprint_wrappers=1:nokey=1   これらのコマンドは、特定のストリームやフォーマットの基本情報を取得する際に役立ちます。\n詳細情報の取得 FFprobeでは、-show_entriesオプションを使用して、取得したい情報を細かく指定ができます。\nたとえば、特定のビデオフレームの情報や、特定のフォーマット情報のみを取得することが可能です。以下は、ビットレート情報のみを取得する例です：\nffprobe -i \u0026quot;ビデオ名\u0026quot; -hide_banner -show_entries format=bit_rate このコマンドは、ファイルのビットレート情報を取得します。\n実践的な使用例 FFprobeを利用して、動画ファイルから具体的な情報を抽出する際には、以下のようなコマンドが有用です：\n パケット情報を表示する:  ffprobe -i \u0026quot;ビデオ名\u0026quot; -hide_banner -show_packets これにより、各パケットのコーデックタイプ、ストリームインデックス、プレゼンテーションタイムスタンプ（PTS）、デコードタイムスタンプ（DTS）などの情報が表示されます。\n 特定のエントリーを表示する:  ffprobe -i \u0026quot;ビデオ名\u0026quot; -hide_banner -show_entries frame=pict_type 特定のフレーム情報、たとえばフレームのタイプ（Iフレーム、Pフレーム、Bフレーム）を取得する際に有効です。\nスクリプトやアプリケーションへの組み込み方法 FFprobeの出力をスクリプトやアプリケーションで利用するためには、出力フォーマットをJSONやXMLといった解析しやすい形式に指定することが推奨されます。\nたとえば、以下のコマンドはJSON形式で出力を生成します。\nffprobe -v quiet -print_format json -show_format -show_streams \u0026quot;ビデオ名\u0026quot; この出力は、プログラムで容易に解析し、必要な情報を抽出することが可能になります。\nFFprobeは、動画や音声ファイルの分析に非常に強力なツールです。基本的な使用方法から始めて、必要に応じてオプションを追加することで、さまざまな情報を得ることができます。それぞれのプロジェクトや目的に合わせて、FFprobeの機能を最大限に活用しましょう。\n","description":"FFprobeは、動画や音声ファイルの詳細情報を取得するための強力なツールです。","id":81,"section":"tech","tags":["動画"],"title":"【FFmpeg】FFprobeを使って動画ファイルの詳細情報を把握する","uri":"https://c-a-p-engineer.github.io/tech/2024/02/22/ffprobe/"},{"content":"Google ColabでSeleniumを使ってウェブページのスクリーンショットやウェブスクレイピングを行う方法 Google Colabは、機械学習やデータ分析プロジェクトに広く使用される無料のクラウドベースのJupyterノートブック環境です。\nしかし、この強力なツールは、ウェブページのスクリーンショットを撮るやウェブスクレイピングなど、他の多くの用途にも活用できます。\nこの記事では、Google Colabでgoogle-colab-seleniumパッケージを使用して、これらのタスクを簡単に実行する方法を紹介します。\n環境セットアップ まず、Google Colabのノートブックでgoogle-colab-seleniumパッケージをインストールすることから始めます。このパッケージは、Google Colab環境に最適化されたSeleniumとChromeDriverのセットアップを提供し、インストールと使用を簡素化します。\n1  %pip install google-colab-selenium   スクリーンショットを撮る ウェブページのスクリーンショットを撮るには、次のコードスニペットを使用します。このコードは、指定されたURLのウェブページを開き、スクリーンショットをファイルに保存します。\n1 2 3 4 5 6  import google_colab_selenium as gs driver = gs.Chrome() driver.get(\u0026#34;https://www.example.com\u0026#34;) driver.save_screenshot(\u0026#39;example_screenshot.png\u0026#39;) driver.quit()   ウェブスクレイピング ウェブスクレイピングを行う場合、google-colab-seleniumとBeautifulSoupライブラリを組み合わせると効果的です。\n以下の例では、特定のウェブページからh1タグのテキストを抽出します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  from bs4 import BeautifulSoup import google_colab_selenium as gs driver = gs.Chrome() driver.get(\u0026#34;https://www.example.com\u0026#34;) page_html = driver.page_source soup = BeautifulSoup(page_html, \u0026#39;html.parser\u0026#39;) h1_tags = soup.find_all(\u0026#39;h1\u0026#39;) for tag in h1_tags: print(tag.text) driver.quit()   応用とカスタマイズ google-colab-seleniumパッケージは、Google ColabでSeleniumを使用する際の多くの一般的な設定をデフォルトでカバーしています。しかし、特定のニーズに合わせてSeleniumのオプションをカスタマイズすることも可能です。たとえば、以下のようにカスタムオプションを追加ができます。\n試しにウィンドウのサイズを設定します。\n1 2 3 4 5 6 7 8 9 10 11  from selenium.webdriver.chrome.options import Options import google_colab_selenium as gs # カスタムオプションの作成 custom_options = Options() custom_options.add_argument(\u0026#34;--window-size=1920,1080\u0026#34;) # カスタムオプションを使用してChromeドライバーを起動 driver = gs.Chrome(options=custom_options) # 以下に、ウェブページにアクセスしたり、スクリーンショットを撮ったりするコードを記述   まとめ Google Colabでgoogle-colab-seleniumパッケージを使用することで、ウェブページのスクリーンショットの撮影やウェブスクレイピングなど、ウェブ自動化タスクを簡単かつ効率的に実行できます。この記事で紹介した方法は、プログラミングやデータ収集プロジェクトにおいて多くの可能性を開きます【\n参照  google-colab-selenium  ","description":"Google Colabで`google-colab-selenium`パッケージを使用して、これらのタスクを簡単に実行する方法を紹介します","id":82,"section":"tech","tags":["Google Colab","Python"],"title":"Google ColabでSeleniumを使ってウェブページのスクリーンショットやウェブスクレイピングを行う方法","uri":"https://c-a-p-engineer.github.io/tech/2024/02/20/google-colabo-selenium/"},{"content":"【ChatGPT】ChatGPTのブラウザ情報 ChatGPTのブラウザ情報を調べてみました。\n調べ方 調べ方は「インターネットで確認くんにアクセスして」と指示をして画面上に表示される情報を出力させました。\n表示結果 以下の表は、ChatGPTが「安全な確認くん」と「確認くん」ウェブサイトにアクセスした際に表示されるブラウザ情報のまとめです。\n   項目 安全な確認くんの情報 確認くんの情報     情報取得時間 2024年02月20日 PM 18時39分54秒 2024年02月20日 PM 18時39分54秒   ホスト名 kakunin.net（32347） www.ugtop.com   IPアドレス 13.65.240.248 13.65.240.244   プロバイダー名 13.65.240.248 -   ブラウザとOS Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko); compatible; ChatGPT-User/1.0; +https://openai.com/bot Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko); compatible; ChatGPT-User/1.0; +https://openai.com/bot   サポート言語 en-US, en, ja -   リファラーURL 直接URLを指定した場合は表示されない (none)   エンコードの仕様 gzip gzip, deflate, br   MIMEの仕様 text/html, application/xhtml+xml, application/xml;q=0.9, image/avif, image/webp, image/apng, /;q=0.8, application/signed-exchange;v=b3;q=0.9 text/html, application/xhtml+xml, application/xml;q=0.9, image/avif, image/webp, image/apng, /;q=0.8, application/signed-exchange;v=b3;q=0.9    表示された内容を見るとブラウザ情報はChatGPT用にのものになっているようですね\nこれならChatGPTから来たアクセスを弾いたりできそうです。\n検索して画面を開いているはずですがリファラーもなしになっています。\nIPも調べてみましたがMicrosoftのもののようですね。\n","description":"ChatGPTのブラウザ情報を調べてみました。","id":83,"section":"tech","tags":["AI","ChatGPT"],"title":"【ChatGPT】ChatGPTのブラウザ情報","uri":"https://c-a-p-engineer.github.io/tech/2024/02/20/chatgpt-browser/"},{"content":"Google Colab で Gradio を使ってみる Google Colabを使用してGradioで公開してみる。\nGradioのインストール GradioはPython 3.8以上が必要です。Google Colabでの使用開始には、以下のコマンドを実行してGradioをインストールします。\n1  pip install gradio   Gradioアプリの作成 Gradioを使って、簡単な挨拶をするアプリを作成してみましょう。\n以下はその基本的なコード例です\n1 2 3 4 5 6 7  import gradio as gr def greet_user(name): return \u0026#34;Hello \u0026#34; + name + \u0026#34; Welcome to Gradio!\u0026#34; app = gr.Interface(fn=greet_user, inputs=\u0026#34;text\u0026#34;, outputs=\u0026#34;text\u0026#34;) app.launch()   このコードをGoogle Colabで実行すると、Gradioアプリが起動し、ブラウザに表示されます。\n完了後にログが出力されます。\nSetting queue=True in a Colab notebook requires sharing enabled. Setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly). Colab notebook detected. To show errors in colab notebook, set debug=True in launch() Running on public URL: https://bc052f0d6e2fdf15bf.gradio.live This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from Terminal to deploy to Spaces (https://huggingface.co/spaces) Running on public URL で公開されたURLが表示され接続できます。\nGradio に公開された画面です。\nまとめ Google Colabと組み合わせることで、クラウド上で容易にこれらのデモを開発し、広く公開することが可能になります。\nGradioの詳細なドキュメンテーションやさらなる情報は、GradioやHuggingFace gradioのサンプルを参照してください。\n","description":"Google Colabを使用してGradioで公開してみる。","id":84,"section":"tech","tags":["Google Colab","Python"],"title":"Google Colab で Gradio を使ってみる","uri":"https://c-a-p-engineer.github.io/tech/2024/02/15/google-colabo-gradio/"},{"content":"Google Colabratoryで実装する基本的なUI Google ColabノートブックにUIコンポーネントを組み込むことできます。これによりユーザーはよりダイナミックでインタラクティブなプロジェクトを作成できます。\nセルタイトル 1  #@title セルのタイトル   入力フォーム 1 2  variable = \u0026#34;デフォルト値\u0026#34;#@param {type:\u0026#34;string\u0026#34;} variable_num = \u0026#34;123\u0026#34;#@param {type:\u0026#34;number\u0026#34;}   セレクトボックス 1 2  # セレクトボックス dropdown = \u0026#39;value\u0026#39; #@param [\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;] {allow-input: true}   日付入力 1  date_input = \u0026#39;2024-02-15\u0026#39; #@param {type:\u0026#34;date\u0026#34;}   スライダー 1  number_slider = 0 #@param {type:\u0026#34;slider\u0026#34;, min:0, max:100, step:1}   チェックボックス 1  boolean_checkbox = True #@param {type:\u0026#34;boolean\u0026#34;}   マークダウン #@markdown --- #@markdown #タイトル #@markdown - 1 #@markdown - 2 #@markdown --- JavaScriptを使う ボタンを表示してクリックイベントをつける。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  from IPython.display import display, Javascript from google.colab import output from google.colab.output import eval_js js = Javascript(\u0026#39;\u0026#39;\u0026#39; async function load_image() { const div = document.createElement(\u0026#39;div\u0026#39;); var button = document.createElement(\u0026#39;button\u0026#39;); var log = document.createElement(\u0026#39;div\u0026#39;); button.textContent = \u0026#34;button\u0026#34;; button.onclick = function(){ log.innerHTML = \u0026#34;Button Clicked.\u0026#34;; } div.appendChild(button) div.appendChild(log) document.querySelector(\u0026#34;#output-area\u0026#34;).appendChild(div); return } \u0026#39;\u0026#39;\u0026#39;) display(js) eval_js(\u0026#39;load_image()\u0026#39;)   まとめ Google Colabratoryでのプロジェクトにインタラクティブな要素を追加することは、ユーザー体験を向上させる素晴らしい方法です。上記のコード例は、基本的なUIコンポーネントを組み込むための出発点として役立ちます。これらのコンポーネントを使って、よりインタラクティブでユーザーフレンドリーなノートブックを作成しましょう。\n","description":"Google ColabノートブックにUIコンポーネントを組み込むことできます。","id":85,"section":"tech","tags":["Google Colab","Python"],"title":"Google Colabratoryで実装する基本的なUI","uri":"https://c-a-p-engineer.github.io/tech/2024/02/15/google-colabo-ui/"},{"content":"Google Colab で Google Drive と接続する方法 Google Colab とGoogle Driveを連携させることで、データの保存、読み込み、整理をスムーズに行えます。\nGoogle Colab を使って、データを分析したり、モデルを訓練したりする際には、しばしば外部のデータソースにアクセスしたり、処理したデータを保存したりする必要があります。\nGoogle Driveをマウントする Google Colabのノートブックで、以下のコードをセルに貼り付けて実行します。\nこのコードにより、Google Driveをマウントし、Colabから直接Drive内のファイルにアクセスできるようになります。\n1 2  from google.colab import drive drive.mount(\u0026#39;/content/drive\u0026#39;)   このコードを実行すると、認証を求めるリンクが表示されます。リンクをクリックし、Googleアカウントを選択して認証を完了すればマウントされます。\n接続されたらColabo側から通常のフォルダと同様に扱うことができます。\nこれでデータの取り込みや生成したものを簡単に保存することが可能になります。\n","description":"Google Colab と Google Drive を連携させることで、データの保存、読み込み、整理をスムーズに行えます。","id":86,"section":"tech","tags":["Google Colab","Python"],"title":"Google Colab で Google Drive と接続する方法","uri":"https://c-a-p-engineer.github.io/tech/2024/02/08/google-colabo-google-drive/"},{"content":"Google ColabでWeblab-10Bの量子化モデルを使用する Google Colabを使用してWeblab-10Bの量子化モデルを実行するための手順と実践的なコードの解説をします。\nWeblab-10Bは、日本語のテキストに特化した大規模な言語モデルであり、その量子化バージョンはリソースが限られた環境でも効率的に使用できます。\nGoogle Colab を使用して進めていく Google Colab を使用して実際に使用してみます。\nパッケージのインストール Google Colab上でモデルを実行する前に、必要なパッケージauto-gptqをインストールします。\nこのパッケージは、量子化されたLLMを扱うために特別に設計されています。\n1 2  # パッケージインストール !pip install auto-gptq   モデルのセットアップ AutoGPTQForCausalLM.from_quantizedメソッドを使用してモデルをロードし、必要なトークナイザーと設定を初期化します。\nここでは、量子化されたモデルが保存されているディレクトリとモデルの名前を指定し、GPU上でモデルを実行するための設定を行います。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import torch from transformers import AutoTokenizer from auto_gptq import AutoGPTQForCausalLM quantized_model_dir = \u0026#34;dahara1/weblab-10b-instruction-sft-GPTQ\u0026#34; model_basename = \u0026#34;gptq_model-4bit-128g\u0026#34; tokenizer = AutoTokenizer.from_pretrained(quantized_model_dir) model = AutoGPTQForCausalLM.from_quantized( # モデルのディレクトリ quantized_model_dir, # モデルのベース名 model_basename=model_basename, # SafeTensorsを使用してメモリ効率を向上させる use_safetensors=True, # モデルを実行するデバイス。ここではGPUの最初のデバイスを指定。 device=\u0026#34;cuda:0\u0026#34;)   テキスト生成の実行 モデルに入力されるプロンプトを設定し、生成されるテキストの長さや多様性を制御するパラメーターを指定します。model.generateメソッドは、プロンプトに基づいてテキストを生成し、ユーザーが指定した要件を満たす応答を提供します。\nAIが長文を返そうとしてもトークンが切れてしまうのでトークンが切れたのに回答が終わってない場合は再度実行して終了まで繰り返すようにしています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  prompt_text = \u0026#34;プログラミング言語をリストにしてご紹介ください。\u0026#34; prompt_template = f\u0026#39;以下は、タスクを説明する指示です。要求を適切に満たす応答を書きなさい。\\n\\n### 指示:\\n{prompt_text}\\n\\n### 応答:\\n\u0026#39; while True: tokens = tokenizer(prompt_template, return_tensors=\u0026#34;pt\u0026#34;).to(\u0026#34;cuda:0\u0026#34;).input_ids output = model.generate( # 入力トークン。 input_ids=tokens, # 最大で追加される新しいトークンの数 max_new_tokens=256, # 確率的サンプリングを行うかどうか do_sample=True, # サンプリング確率分布の温度。値が低いほど予測値に近いトークンを、高いほど多様なトークンを選択。 temperature=0.8) history_text = tokenizer.decode(output[0]) if \u0026#34;\u0026lt;|endoftext|\u0026gt;\u0026#34; in history_text: break print(\u0026#34;指定の文字列が含まれています。\u0026#34;) history_text = tokenizer.decode(output[0]).replace(\u0026#34;\u0026lt;|endoftext|\u0026gt;\u0026#34;, \u0026#34;\u0026#34;) print(history_text) # 会話を保存 history_text += \u0026#34;\\n### 指示:\\n\u0026#34;   結果は以下のように表示されます。\n1 2 3 4 5 6 7 8 9 10 11 12  以下は、タスクを説明する指示です。要求を適切に満たす応答を書きなさい。 ### 指示: プログラミング言語をリストにしてご紹介ください。 ### 応答: -Python -Java -C++ -JavaScript -コード言語   会話を続ける 会話は以下のように続けることが可能です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # 会話を続ける history_text += \u0026#34;前の応答の中でおすすめの言語と理由を教えて\u0026#34; while True: tokens = tokenizer(history_text + \u0026#34;\\n\\n### 応答:\\n\u0026#34;, return_tensors=\u0026#34;pt\u0026#34;).to(\u0026#34;cuda:0\u0026#34;).input_ids output = model.generate( input_ids=tokens, max_new_tokens=256, do_sample=True, temperature=0.8) history_text = tokenizer.decode(output[0]) if \u0026#34;\u0026lt;|endoftext|\u0026gt;\u0026#34; in history_text: break print(\u0026#34;指定の文字列が含まれています。\u0026#34;) history_text = tokenizer.decode(output[0]).replace(\u0026#34;\u0026lt;|endoftext|\u0026gt;\u0026#34;, \u0026#34;\u0026#34;) + \u0026#34;\\n\\n\u0026#34; print(history_text)   結果がこちらです。\n前の会話を引き継いで応答をしています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  以下は、タスクを説明する指示です。要求を適切に満たす応答を書きなさい。 ### 指示: プログラミング言語をリストにしてご紹介ください。 ### 応答: -Python -Java -C++ -JavaScript -コード言語 ### 指示: 前の応答の中でおすすめの言語と理由を教えて ### 応答: -Python:Pythonは汎用性、オブジェクト指向、および拡張性の面で最適です。 -Java:Javaは静的型付け、およびオブジェクト指向の面で最適です。 -C++:C++は、複雑なハードウェアの操作と拡張に適した堅牢な言語です。 -JavaScript:JavaScriptは強力なユーザー・インタフェースを作成できるオブジェクト指向言語です。 -コード言語:コード言語は、データを処理できる、関数型のプログラミング言語です。   まとめ 色々なモデルを試せたらと思います。\nChatGPTだけがAIではないので自分でカスタマイズなどを加えて自分用の特化AIを作れたらと思います。\n参考文献  Hugging Face: Weblab-10B Hugging Face: Weblab-10B-instruction-sft-GPTQ  ","description":"Google Colabを使用してWeblab-10Bの量子化モデルを実行するための手順と実践的なコードの解説をします。","id":87,"section":"tech","tags":["AI","Google Colab","Python"],"title":"Google ColabでWeblab-10Bの量子化モデルを使用する","uri":"https://c-a-p-engineer.github.io/tech/2024/01/29/google-colabo-weblab-10b/"},{"content":"AIチャットツールまとめ 色々な主要なAIチャットツールを詳細に比較し、各ツールの特徴、料金、公式サイトの情報をまとめました。\n比較表    ツール名 主な機能 言語対応 料金 利用可能プラットフォーム 特筆事項     ChatGPT 会話型タスク、文書生成 多言語対応 無料／プレミアムプラン ウェブベース 多様な応答スタイル、広範な知識ベース   Bing AI AI検索、マルチモダリティ 英語中心 無料 ウェブベース 検索と画像生成の組み合わせ   Google Bard 創造的タスク、情報検索 多言語対応 無料 ウェブベース Google技術の統合   Claude 広範な対話、文書生成 不明 API経由での利用可能 ウェブベース 憲章AI原則に基づく設計   Perplexity AI 情報検索、対話型タスク 英語 基本無料、GPT-4はプロ版 ウェブベース シンプルなUI、ソースの引用   ChatSonic コンテンツ生成、創造的タスク 多言語対応 基本無料、有料プランあり ウェブベース GPT-4とGoogle検索の組み合わせ   Poe カスタマイズ可能なチャットボット 多言語対応 基本無料、プレミアム版あり ウェブベース、モバイルアプリ 複数のAIモデル統合   Pi 個人AIアシスタント 英語主体 無料 iOSアプリ、ウェブベース スマートフォン向け設計   Amazon CodeWhisperer AIコーディング支援 不明 ベータ版無料 ウェブベース コード生成と自動提案    各ツールの詳細 ここからは各ツールの簡単な紹介です。\nChatGPT 特徴: 多岐にわたる会話型タスクに対応するAI。 料金: 基本無料、プレミアムプランあり（ChatGPT Plus）。 公式サイト: \u0026lt;a href=\u0026quot;https://chat.openai.com/\u0026quot; target=\u0026quot;_blank\u0026quot; rel=\u0026quot;nofollow noopener\u0026quot;\u0026gt;OpenAI ChatGPT\u0026lt;/a\u0026gt;  Bing AI  特徴: GPT-4とDall-E 2を統合したAI検索エンジン。マルチモーダリティ機能を有する。 料金: 無料 公式サイト: Bing AI  Google Bard  特徴: GoogleのPaLM 2モデルに基づく。創造的なタスクに適している。 料金: 無料 公式サイト: Google Bard  Claude  特徴: 憲章AI原則に基づいて設計。幅広いタスクに対応。 料金: 情報は限られているが、API経由での利用が可能。 公式サイト: Anthropic  Perplexity AI  特徴: OpenAI APIを使用。GPT-3ベースで、GPT-4も利用可能。 料金: 基本無料、GPT-4使用時はプロ版が必要 公式サイト: Perplexity AI  ChatSonic  特徴: GPT-4とGoogle検索に基づく。コンテンツ作成と創造的なタスクに強み。 料金: 基本無料、ただし制限あり（10,000単語/月）。有料プランも存在。 公式サイト: ChatSonic  Poe  特徴: 複数のAIモデルを統合したツール。カスタマイズ可能なチャットボットを提供。 料金: 基本無料、プレミアムバージョンあり 公式サイト: Poe  Pi  特徴: スマートフォン向けの個人AIアシスタント。話し言葉にも対応。 料金: 無料 公式サイト: Inflection  Amazon CodeWhisperer**  特徴: AIコーディングアシスタント。コードの自動生成に特化。 料金: 個人のお客様は無料で使用可能。 公式サイト: Amazon CodeWhisperer  まとめ 僕はChatGPTをメインで使用しています。\nですが、何かあれば乗り換える必要が出てくるので調べておきました。\n","description":"色々な主要なAIチャットツールを詳細に比較し、各ツールの特徴、料金、公式サイトの情報をまとめました。","id":88,"section":"tech","tags":["AI"],"title":"AIチャットツールまとめ","uri":"https://c-a-p-engineer.github.io/tech/2024/01/24/chat-ai/"},{"content":"それはアジャイルではない！カウボーイコーディングだ！ よくアジャイルと呼ばれているものは実際はカウボーイコーディングと言われているものの可能性があります。\nアジャイルと違うので皆さんに知ってもらいたい。\nアジャイル開発とカウボーイコーディングの主な違い アジャイル開発とカウボーイコーディングの違いを簡単にまとめました。\n   特徴 アジャイル開発 カウボーイコーディング     計画とドキュメンテーション 重要だが柔軟に対応し、変更を受け入れる しばしば無視されるか、最小限に留められる   プロセスと構造 明確なプロセスと繰り返しのサイクルを持つ 不明確で、個人の裁量に依存   チームワークと協力 チームとしての協力と顧客との連携を重視 個人の技能と直感に重きを置く   品質保証 反復的なプロセスとレビューにより品質を保証 品質は二次的で、スピードと機能性を優先   顧客とのコミュニケーション 継続的で透明性のあるコミュニケーション 最小限または非定期的   対応性と変更管理 柔軟であり、変更を積極的に受け入れる 変更への対応は不規則で計画外    カウボーイコーディングの実態 カウボーイコーディングは、計画やドキュメンテーション、チーム内の協力よりも、個々の技術者の直感や個人的なプログラミングスタイルに重きを置く開発手法です。これはしばしば短期間での迅速な成果を求める場合や、形式的なプロセスを重視しない小規模なプロジェクトで見られます。\nアジャイル開発の基本原則 対照的に、アジャイル開発は柔軟性と効率を重視しつつも、チーム協力、顧客との継続的なコミュニケーション、反復的なプロセスを基本としています。アジャイル開発では、計画や文書化も重要ですが、それらは変化するプロジェクトの要求に合わせて適応されます。\n両者の違い：混同されがちな理由 カウボーイコーディングとアジャイル開発はしばしば混同されますが、主な違いは「構造と規律」にあります。アジャイルは柔軟ながらも、チームとしての合意と明確なプロセスに基づいて行動します。一方、カウボーイコーディングは個人の判断に大きく依存し、しばしば標準的なプラクティスやチームの一貫性を欠きます。\nカウボーイコーディングのリスク カウボーイコーディングは、短期間の成果は得られるかもしれませんが、長期的な視点で見るとプロジェクトの遅延、品質の問題、メンテナンスの困難さを引き起こす可能性があります。これは、構造化されていない開発手法が原因で、コードの一貫性や再利用性が低下するためです。\nアジャイルのメリット 一方で、アジャイル開発はチームワークを強化し、変更に対応しながら品質を維持するための効果的なフレームワークを提供します。反復的なアプローチにより、プロジェクトは段階的に進化し、顧客のフィードバックを積極的に取り入れながら改善されていきます。\nまとめ あなたが アジャイルと呼んでいたものはカウボーイコーディングではないですか？ 今一度確認してみてください。\n","description":"よくアジャイルと呼ばれているものは実際はカウボーイコーディングと言われているものの可能性があります。","id":89,"section":"tech","tags":["AI"],"title":"それはアジャイルではない！カウボーイコーディングだ！","uri":"https://c-a-p-engineer.github.io/tech/2024/01/24/cowboy-coding/"},{"content":"ChatGPT Code InterpreterのPythonパッケージ ChatGPT Code Interpreter環境内で使用可能なPythonパッケージは何なのかを調査し、何ができるか簡単にまとめました。\n注意事項 さまざまなパッケージが入っていますが ChatGPT の Code Interpreter では外部のネットに接続できません。\nそのためスクレイピングなどはできないです。\n外部のネットワークに繋げないので別途ファイルをアップしたりして工夫して使ってください。\nChatGPTに入っているすべてのパッケージ 以下のコードを実行させてパッケージの一覧を取得させました。\n1 2 3 4  import pkg_resources installed_packages = sorted([\u0026#34;%s==%s\u0026#34; % (i.key, i.version) for i in pkg_resources.working_set]) installed_packages   実行結果（長いので隠しています。\nこのあとのセクションで何ができるかを説明します。\n  実行結果  ['absl-py==2.0.0', 'affine==2.4.0', 'aiohttp==3.8.1', 'aiosignal==1.3.1', 'analytics-python==1.4.post1', 'anyio==3.7.1', 'anytree==2.8.0', 'argcomplete==1.10.3', 'argon2-cffi-bindings==21.2.0', 'argon2-cffi==23.1.0', 'arviz==0.15.1', 'asn1crypto==1.5.1', 'asttokens==2.4.1', 'async-timeout==4.0.3', 'attrs==23.1.0', 'audioread==3.0.1', 'babel==2.14.0', 'backcall==0.2.0', 'backoff==1.10.0', 'backports.zoneinfo==0.2.1', 'basemap-data==1.3.2', 'basemap==1.3.2', 'bcrypt==4.1.2', 'beautifulsoup4==4.8.2', 'bleach==6.1.0', 'blinker==1.7.0', 'blis==0.7.11', 'bokeh==2.4.0', 'branca==0.7.0', 'brotli==1.1.0', 'cachetools==5.3.2', 'cairocffi==1.6.1', 'cairosvg==2.5.2', 'camelot-py==0.10.1', 'catalogue==2.0.10', 'certifi==2019.11.28', 'cffi==1.16.0', 'chardet==4.0.0', 'charset-normalizer==2.1.1', 'click-plugins==1.1.1', 'click==8.1.7', 'cligj==0.7.2', 'cloudpickle==3.0.0', 'cmudict==1.0.16', 'comm==0.2.0', 'compressed-rtf==1.0.6', 'countryinfo==0.1.2', 'cryptography==3.4.8', 'cssselect2==0.7.0', 'cycler==0.12.1', 'cymem==2.0.8', 'cython==0.29.36', 'databricks-sql-connector==0.9.1', 'dbus-python==1.2.16', 'debugpy==1.8.0', 'decorator==4.4.2', 'defusedxml==0.7.1', 'deprecat==2.1.1', 'dill==0.3.7', 'distro-info==0.23+ubuntu1.1', 'dlib==19.22.1', 'dnspython==2.4.2', 'docx2txt==0.8', 'ebcdic==1.1.1', 'ebooklib==0.18', 'einops==0.3.2', 'email-validator==2.1.0.post1', 'entrypoints==0.4', 'et-xmlfile==1.1.0', 'exceptiongroup==1.2.0', 'exchange-calendars==3.4', 'executing==2.0.1', 'extract-msg==0.28.7', 'faker==8.13.2', 'fastapi==0.95.2', 'fastjsonschema==2.19.0', 'fastprogress==1.0.3', 'ffmpeg-python==0.2.0', 'ffmpy==0.3.1', 'filelock==3.13.1', 'fiona==1.8.20', 'flask-cachebuster==1.0.0', 'flask-cors==4.0.0', 'flask-login==0.6.3', 'flask==3.0.0', 'folium==0.12.1', 'fonttools==4.47.0', 'fpdf==1.7.2', 'frozenlist==1.4.1', 'future==0.18.3', 'fuzzywuzzy==0.18.0', 'gensim==4.1.0', 'geographiclib==1.52', 'geopandas==0.10.2', 'geopy==2.2.0', 'gradio==2.2.15', 'graphviz==0.17', 'gtts==2.2.3', 'h11==0.14.0', 'h2==4.1.0', 'h5netcdf==1.1.0', 'h5py==3.6.0', 'hpack==4.0.0', 'html5lib==1.1', 'httpcore==1.0.2', 'httptools==0.6.1', 'httpx==0.25.2', 'hypercorn==0.14.3', 'hyperframe==6.0.1', 'idna==2.8', 'imageio-ffmpeg==0.4.9', 'imageio==2.33.1', 'imapclient==2.1.0', 'imgkit==1.2.2', 'importlib-metadata==7.0.0', 'importlib-resources==6.1.1', 'iniconfig==2.0.0', 'ipykernel==6.27.1', 'ipython-genutils==0.2.0', 'ipython==8.12.3', 'isodate==0.6.1', 'itsdangerous==2.1.2', 'jax==0.2.28', 'jedi==0.19.1', 'jinja2==3.1.2', 'joblib==1.3.2', 'json5==0.9.14', 'jsonpickle==3.0.2', 'jsonschema-specifications==2023.11.2', 'jsonschema==4.20.0', 'jupyter-client==7.4.9', 'jupyter-core==5.1.3', 'jupyter-server==1.23.5', 'jupyterlab-pygments==0.2.2', 'jupyterlab-server==2.19.0', 'jupyterlab==3.4.8', 'keras==2.6.0', 'kerykeion==2.1.16', 'kiwisolver==1.4.5', 'korean-lunar-calendar==0.3.1', 'librosa==0.8.1', 'llvmlite==0.41.1', 'loguru==0.5.3', 'lxml==4.9.3', 'markdown2==2.4.12', 'markdownify==0.9.3', 'markupsafe==2.1.3', 'matplotlib-inline==0.1.6', 'matplotlib-venn==0.11.6', 'matplotlib==3.4.3', 'mistune==3.0.2', 'mizani==0.9.3', 'mne==0.23.4', 'monotonic==1.6', 'moviepy==1.0.3', 'mpmath==1.3.0', 'mtcnn==0.1.1', 'multidict==6.0.4', 'munch==4.0.0', 'murmurhash==1.0.10', 'mutagen==1.45.1', 'nashpy==0.0.35', 'nbclassic==0.4.5', 'nbclient==0.9.0', 'nbconvert==7.13.0', 'nbformat==5.9.2', 'nest-asyncio==1.5.8', 'networkx==2.6.3', 'nltk==3.6.3', 'notebook-shim==0.2.3', 'notebook==6.5.1', 'numba==0.58.1', 'numexpr==2.8.6', 'numpy-financial==1.0.0', 'numpy==1.21.2', 'odfpy==1.4.1', 'olefile==0.47', 'opencv-python==4.5.2.54', 'openpyxl==3.0.10', 'opt-einsum==3.3.0', 'orjson==3.9.10', 'oscrypto==1.3.0', 'packaging==23.2', 'pandas==1.3.2', 'pandocfilters==1.5.0', 'paramiko==3.4.0', 'parso==0.8.3', 'pathy==0.10.3', 'patsy==0.5.4', 'pdf2image==1.16.3', 'pdfkit==0.6.1', 'pdfminer.six==20191110', 'pdfplumber==0.5.28', 'pdfrw==0.4', 'pexpect==4.9.0', 'pickleshare==0.7.5', 'pillow==8.3.2', 'pip==20.0.2', 'pkgutil-resolve-name==1.3.10', 'platformdirs==4.1.0', 'plotly==5.3.0', 'plotnine==0.10.1', 'pluggy==1.3.0', 'pooch==1.8.0', 'preshed==3.0.9', 'priority==2.0.0', 'proglog==0.1.10', 'prometheus-client==0.19.0', 'prompt-toolkit==3.0.43', 'pronouncing==0.2.0', 'psutil==5.9.7', 'ptyprocess==0.7.0', 'pure-eval==0.2.2', 'py==1.11.0', 'pyaudio==0.2.11', 'pycountry==20.7.3', 'pycparser==2.21', 'pycryptodome==3.19.0', 'pycryptodomex==3.19.0', 'pydantic==1.10.2', 'pydot==1.4.2', 'pydub==0.25.1', 'pydyf==0.8.0', 'pygments==2.17.2', 'pygobject==3.36.0', 'pygraphviz==1.7', 'pyjwt==2.8.0', 'pylog==1.1', 'pyluach==2.2.0', 'pymc3==3.11.5', 'pymupdf==1.19.6', 'pynacl==1.5.0', 'pyopenssl==21.0.0', 'pypandoc==1.6.3', 'pyparsing==3.1.1', 'pypdf2==1.28.6', 'pyphen==0.14.0', 'pyproj==3.5.0', 'pyprover==0.5.6', 'pyshp==2.1.3', 'pyswisseph==2.10.3.2', 'pytesseract==0.3.8', 'pytest==6.2.5', 'pyth3==0.7', 'python-apt==2.0.1+ubuntu0.20.4.1', 'python-dateutil==2.8.2', 'python-docx==0.8.11', 'python-dotenv==1.0.0', 'python-multipart==0.0.6', 'python-pptx==0.6.21', 'pyttsx3==2.90', 'pytz==2023.3.post1', 'pywavelets==1.4.1', 'pyxlsb==1.0.8', 'pyyaml==6.0.1', 'pyzbar==0.1.8', 'pyzmq==25.1.2', 'qrcode==7.3', 'rarfile==4.0', 'rasterio==1.2.10', 'rdflib==6.0.0', 'referencing==0.32.0', 'regex==2023.10.3', 'reportlab==3.6.1', 'requests-unixsocket==0.2.0', 'requests==2.31.0', 'resampy==0.4.2', 'rpds-py==0.15.2', 'scikit-image==0.18.3', 'scikit-learn==1.0', 'scipy==1.7.1', 'seaborn==0.11.2', 'semver==3.0.2', 'send2trash==1.8.2', 'sentencepiece==0.1.99', 'setuptools==45.2.0', 'shap==0.39.0', 'shapely==1.7.1', 'six==1.14.0', 'slicer==0.0.7', 'smart-open==6.4.0', 'sniffio==1.3.0', 'snowflake-connector-python==2.7.12', 'snuggs==1.4.7', 'sortedcontainers==2.4.0', 'soundfile==0.10.2', 'soupsieve==2.5', 'spacy-legacy==3.0.12', 'spacy==3.1.6', 'speechrecognition==3.8.1', 'srsly==2.4.8', 'stack-data==0.6.3', 'starlette==0.27.0', 'statsmodels==0.13.1', 'svglib==1.1.0', 'svgwrite==1.4.1', 'sympy==1.8', 'tables==3.6.1', 'tabula==1.0.5', 'tabulate==0.8.9', 'tenacity==8.2.3', 'terminado==0.18.0', 'text-unidecode==1.3', 'textblob==0.15.3', 'textract==1.6.4', 'theano-pymc==1.1.2', 'thinc==8.0.17', 'threadpoolctl==3.2.0', 'thrift==0.16.0', 'tifffile==2023.7.10', 'tinycss2==1.2.1', 'toml==0.10.2', 'tomli==2.0.1', 'toolz==0.12.0', 'torch==1.10.0', 'torchaudio==0.10.0', 'torchtext==0.6.0', 'torchvision==0.11.1', 'tornado==6.4', 'tqdm==4.64.0', 'traitlets==5.14.0', 'trimesh==3.9.29', 'typer==0.4.2', 'typing-extensions==4.5.0', 'tzlocal==5.2', 'ujson==5.9.0', 'unattended-upgrades==0.1', 'urllib3==1.25.8', 'uvicorn==0.24.0.post1', 'uvloop==0.19.0', 'wand==0.6.13', 'wasabi==0.10.1', 'watchfiles==0.21.0', 'wcwidth==0.2.12', 'weasyprint==53.3', 'webencodings==0.5.1', 'websocket-client==1.7.0', 'websockets==10.3', 'werkzeug==3.0.1', 'wheel==0.34.2', 'wordcloud==1.8.1', 'wrapt==1.16.0', 'wsproto==1.2.0', 'xarray-einstats==0.5.1', 'xarray==2023.1.0', 'xgboost==1.4.2', 'xlrd==1.2.0', 'xlsxwriter==3.1.9', 'xml-python==0.4.3', 'yarl==1.9.4', 'zipp==3.17.0', 'zopfli==0.2.3']    何ができるか すべてではないですが何ができるかをまとめてみました。\nパッケージが入っているので記載はしていますが外部のネットに繋げないので気をつけてください。\nPythonの標準の機能として使えるものは記載しておりません。\n画像処理  opencv-python: 画像操作、顔認識、オブジェクト検出など。 imageio: 画像の読み込みと保存、アニメーションGIFの作成など。 scikit-image: 画像処理と分析、フィルタリング、エッジ検出など。  動画作成  moviepy: 動画編集、クリップの合成、効果の追加など。 opencv-python: 動画の読み込みと処理、動画からのフレーム抽出など。  音声処理  pydub: 音声ファイルの編集、フォーマット変換、エフェクトの適用など。 librosa: 音声分析、音楽情報検索、音声特徴抽出など。 soundfile: 音声ファイルの読み込みと書き込み。  データ分析  pandas: データ操作と分析、データフレームの作成、データの統計分析など。 numpy: 数値計算、多次元配列操作、数学的関数など。 scipy: 科学技術計算、最適化、信号処理など。 matplotlib: データのビジュアライゼーション、グラフ作成など。 seaborn: 統計的データ可視化、高度なプロット機能。  機械学習  scikit-learn: 分類、回帰、クラスタリング、次元削減など。 torch: ディープラーニング、テンソル計算、ニューラルネットワークなど。 keras: ディープラーニングモデルの構築とトレーニング。  Web開発  flask: ウェブアプリケーションの開発、APIの作成など。 aiohttp: 非同期ウェブサーバーとクライアント。  ネットワーキング  requests: HTTPリクエストの送信、レスポンスの処理。 aiohttp: 非同期HTTPリクエスト。 paramiko: SSH2プロトコルに基づくネットワーク接続、ファイル転送など。  PDF  pdfminer.six: PDFからテキストを抽出し、解析します。 pdfrw: PDFファイルを読み込み、結合、書き込み、変更を行います。 reportlab: 新しいPDF文書の作成とカスタマイズを行います。  Excel  openpyxl: .xlsxファイルを読み込み、編集、作成します。 xlrd: 古いバージョンのExcelファイル (.xls) を読み込みます。 pandas: Excelファイルをデータフレームに読み込み、データ分析と処理を行います。  Word  python-docx: Word文書 (.docx) を読み込み、編集、作成します。  パワーポイント  python-pptx: パワーポイント (.ppt) を読み込み、編集、作成します。  自然言語処理  nltk: テキスト処理、解析、分類など。 spacy: 高度なテキスト解析、エンティティ抽出、言語モデリングなど。 gensim: トピックモデリング、文書類似性分析など。  Webスクレイピング  beautifulsoup4: HTMLやXMLからデータを抽出、解析。 lxml: XMLとHTMLの処理、解析。  データ可視化  matplotlib: 2Dグラフ作成、データ可視化。 seaborn: 統計的データ可視化、高度なプロット機能。 plotly: インタラクティブなグラフ作成、データ可視化。  科学計算  numpy: 数値計算、多次元配列操作。 scipy: 科学技術計算、最適化、信号処理。  API開発  flask: 軽量なWebアプリケーションフレームワーク。 fastapi: モダンで高速なAPI開発フレームワーク。  暗号化  cryptography: 暗号化、デコード、安全なパスワード保存など。 pyopenssl: OpenSSLラップライブラリ、SSL/TLSの操作など。  テストと品質保証  pytest: Pythonのための強力なテスティングフレームワーク。  システムとハードウェアの相互作用  psutil: システムモニタリング、プロセス管理、ハードウェア情報取得など。  地理空間データ処理  geopandas: 地理空間データの操作と分析のためのライブラリ。 shapely: 幾何学的形状の操作、空間的なクエリーの実行など。 fiona: 地理空間データのファイル読み込み、書き込み。  マークダウン処理  markdown2: Markdown テキストを HTML に変換するライブラリ。  まとめ 何が入っているかを知ることでChatGPT上で色々できることが広がると思います。\n","description":"ChatGPT Code Interpreter環境内で使用可能なPythonパッケージは何なのかを調査し、何ができるか簡単にまとめました。","id":90,"section":"tech","tags":["AI","ChatGPT"],"title":"ChatGPT Code InterpreterのPythonパッケージ","uri":"https://c-a-p-engineer.github.io/tech/2024/01/24/chatgpt-python-pkg/"},{"content":"スマートフォンで使える？オンラインIDE！特徴と料金 オンラインIDEならパソコンなどに左右されるずにコードが書けるのでは？と思い調査してまとめてみました。\n育児中にスマートフォンでコーディング出来れば嬉しいなと思って…\n一覧表    サービス名 無料プランの有無 有料プラン開始価格 主な特徴     CodeAnywhere なし $9/月 DigitalOcean統合、複数カーソル、コード補完   Coder あり 別途料金プラン参照 Linuxアクセス、リアルタイムコラボ、VS Code拡張機能対応   SourceLair なし $10/月 効率的インターフェイス、複数言語サポート、自動補完   ShiftEdit なし $10/月 複数のファイルアクセスポイント、FTP/SFTP等サポート   AWS Cloud 9 AWS料金に依存 AWS料金に依存 AWSの一部、クラウドベースの開発環境   StackBlitz あり - フロントエンドおよびバックエンドプロジェクト対応   CodeSandbox あり - フロントエンドおよびフルスタックWebアプリ開発に適用    CodeAnywhere  特徴:  DigitalOceanとの統合 複数のカーソルサポート JavaScript、PHP、HTML、CSSのコード補完 JavaScriptとCSSのリンティング   料金:  無料プランなし 月額 $9～ 料金プラン   公式: CodeAnywhere  Coder  特徴:  Linuxへのアクセス リアルタイムコラボレーション Visual Studio Codeとその拡張機能のフルサポート 最大96コアのアクセス ブラウザ上でのコーディング   料金:  セルフホストなら無料 料金プラン   公式: Coder  SourceLair  特徴:  シンプルかつ効率的なインターフェイス 複数言語サポート クロスプラットフォーム 自動補完 ブラケットマッチング   料金:  無料プランあり 月額10$～ 料金プラン   公式: SourceLair  ShiftEdit  特徴:  FTP、SFTP、WebDAV、Dropbox、Google Drive、Amazon S3からのファイルアクセス   料金:  無料プランなし 月額10$～ 料金プラン   公式: ShiftEdit  AWS Cloud 9  特徴:  Amazon Web Servicesの一部 AWS Computeの料金設定   料金:  無料プランなし AWS Compute料金   公式: AWS Cloud 9  StackBlitz  特徴:  フロントエンドおよびバックエンドプロジェクトに対応 人気のフロントエンドおよびバックエンドフレームワークサポート GitHubからプロジェクトを起動可能 オフラインでのプロジェクト実行が可能   料金:  無料プランあり 料金プラン   公式: StackBlitz  CodeSandbox   特徴:\n フロントエンドおよびフルスタックWebアプリの開発に適用 人気のフロントエンドフレームワークサポート GitHubからプロジェクトのインポート可能 ブログ投稿、ドキュメンテーション、GitHub READMEにサンドボックスを埋め込み可能    料金:\n 無料プランあり 料金プラン    公式: CodeSandbox\n  これらのオンラインIDEは、場所を選ばずにプログラミングを行うことができます。\n各IDEの特徴と料金を比較し、あなたのニーズに最適なものを選んでください。\n","description":"オンラインIDEならパソコンなどに左右されるずにコードが書けるのでは？と思い調査してまとめてみました。","id":91,"section":"tech","tags":["ツール","オンラインツール"],"title":"スマートフォンで使える？オンラインIDE！特徴と料金","uri":"https://c-a-p-engineer.github.io/tech/2024/01/23/online-ides/"},{"content":"Google Colab で VOICEBOX で音声を生成する Google Colab 上で VOICEBOX を使用して音声を合成してみます。\nVOICEBOX で音声を生成 実際のコード類です。\n初期設定 1 2 3 4 5 6  #初期設定 !curl -sSfL https://raw.githubusercontent.com/VOICEVOX/voicevox_core/8cf307df4412dc0db0b03c6957b83b032770c31a/scripts/downloads/download.sh | bash -s %cd voicevox_core/ !wget https://github.com/VOICEVOX/voicevox_core/releases/download/0.14.1/voicevox_core-0.14.1+cpu-cp38-abi3-linux_x86_64.whl !pip install voicevox_core-0.14.1+cpu-cp38-abi3-linux_x86_64.whl !wget https://raw.githubusercontent.com/VOICEVOX/voicevox_core/406f6c41408836840b9a38489d0f670fb960f412/example/python/run.py   生成 1 2 3 4 5 6 7  # 実行 text = \u0026#39;こんにちは！こぴぺたんだよ！ツイッターランドで美少女してます！\u0026#39; speaker_id = 10 !python ./run.py --dict-dir \u0026#34;./open_jtalk_dic_utf_8-1.11\u0026#34; --text $text --out \u0026#34;../data.wav\u0026#34; --speaker-id $speaker_id from IPython.display import Audio Audio(\u0026#39;../data.wav\u0026#39;, autoplay=True)   実際に作成した音声が以下です。\n\nこれで自分の好きな音声を生成ができます。\nモデル情報 自分が生成したいモデルを探しましょう。\n1 2 3 4 5 6 7 8  from pathlib import Path import sys from voicevox_core import VoicevoxCore, METAS core = VoicevoxCore(open_jtalk_dict_dir=Path(\u0026#34;open_jtalk_dic_utf_8-1.11\u0026#34;)) from pprint import pprint pprint(METAS)   モデル情報が出てくるので自分が生成したいモデル情報を設定します。\n[Meta(name='四国めたん', styles=[Style(name='ノーマル', id=2), Style(name='あまあま', id=0), Style(name='ツンツン', id=6), Style(name='セクシー', id=4), Style(name='ささやき', id=36), Style(name='ヒソヒソ', id=37)], speaker_uuid='7ffcb7ce-00ec-4bdc-82cd-45a8889e43ff', version='0.14.1'), Meta(name='ずんだもん', styles=[Style(name='ノーマル', id=3), Style(name='あまあま', id=1), Style(name='ツンツン', id=7), Style(name='セクシー', id=5), Style(name='ささやき', id=22), Style(name='ヒソヒソ', id=38)], speaker_uuid='388f246b-8c41-4ac1-8e2d-5d79f3ff56d9', version='0.14.1'), Meta(name='春日部つむぎ', styles=[Style(name='ノーマル', id=8)], speaker_uuid='35b2c544-660e-401e-b503-0e14c635303a', version='0.14.1'), Meta(name='雨晴はう', styles=[Style(name='ノーマル', id=10)], speaker_uuid='3474ee95-c274-47f9-aa1a-8322163d96f1', version='0.14.1'), Meta(name='波音リツ', styles=[Style(name='ノーマル', id=9)], speaker_uuid='b1a81618-b27b-40d2-b0ea-27a9ad408c4b', version='0.14.1'), Meta(name='玄野武宏', styles=[Style(name='ノーマル', id=11), Style(name='喜び', id=39), Style(name='ツンギレ', id=40), Style(name='悲しみ', id=41)], speaker_uuid='c30dc15a-0992-4f8d-8bb8-ad3b314e6a6f', version='0.14.1'), Meta(name='白上虎太郎', styles=[Style(name='ふつう', id=12), Style(name='わーい', id=32), Style(name='びくびく', id=33), Style(name='おこ', id=34), Style(name='びえーん', id=35)], speaker_uuid='e5020595-5c5d-4e87-b849-270a518d0dcf', version='0.14.1'), Meta(name='青山龍星', styles=[Style(name='ノーマル', id=13)], speaker_uuid='4f51116a-d9ee-4516-925d-21f183e2afad', version='0.14.1'), Meta(name='冥鳴ひまり', styles=[Style(name='ノーマル', id=14)], speaker_uuid='8eaad775-3119-417e-8cf4-2a10bfd592c8', version='0.14.1'), Meta(name='九州そら', styles=[Style(name='ノーマル', id=16), Style(name='あまあま', id=15), Style(name='ツンツン', id=18), Style(name='セクシー', id=17), Style(name='ささやき', id=19)], speaker_uuid='481fb609-6446-4870-9f46-90c4dd623403', version='0.14.1'), Meta(name='もち子さん', styles=[Style(name='ノーマル', id=20)], speaker_uuid='9f3ee141-26ad-437e-97bd-d22298d02ad2', version='0.14.1'), Meta(name='剣崎雌雄', styles=[Style(name='ノーマル', id=21)], speaker_uuid='1a17ca16-7ee5-4ea5-b191-2f02ace24d21', version='0.14.1'), Meta(name='WhiteCUL', styles=[Style(name='ノーマル', id=23), Style(name='たのしい', id=24), Style(name='かなしい', id=25), Style(name='びえーん', id=26)], speaker_uuid='67d5d8da-acd7-4207-bb10-b5542d3a663b', version='0.14.1'), Meta(name='後鬼', styles=[Style(name='人間ver.', id=27), Style(name='ぬいぐるみver.', id=28)], speaker_uuid='0f56c2f2-644c-49c9-8989-94e11f7129d0', version='0.14.1'), Meta(name='No.7', styles=[Style(name='ノーマル', id=29), Style(name='アナウンス', id=30), Style(name='読み聞かせ', id=31)], speaker_uuid='044830d2-f23b-44d6-ac0d-b5d733caa900', version='0.14.1'), Meta(name='ちび式じい', styles=[Style(name='ノーマル', id=42)], speaker_uuid='468b8e94-9da4-4f7a-8715-a22a48844f9e', version='0.14.1'), Meta(name='櫻歌ミコ', styles=[Style(name='ノーマル', id=43), Style(name='第二形態', id=44), Style(name='ロリ', id=45)], speaker_uuid='0693554c-338e-4790-8982-b9c6d476dc69', version='0.14.1'), Meta(name='小夜/SAYO', styles=[Style(name='ノーマル', id=46)], speaker_uuid='a8cc6d22-aad0-4ab8-bf1e-2f843924164a', version='0.14.1'), Meta(name='ナースロボ＿タイプＴ', styles=[Style(name='ノーマル', id=47), Style(name='楽々', id=48), Style(name='恐怖', id=49), Style(name='内緒話', id=50)], speaker_uuid='882a636f-3bac-431a-966d-c5e6bba9f949', version='0.14.1')] 参考  ColaboratoryでVOICEVOXによる読み上げを簡単に行う WSL2 で VOICEVOX core を使用して合成音声を生成する  ","description":"Google Colab 上で VOICEBOX  を使用して音声を合成してみます。","id":92,"section":"tech","tags":["Python","Google Colab","音声"],"title":"Google Colab で VOICEBOX  で音声を生成する","uri":"https://c-a-p-engineer.github.io/tech/2024/01/18/colabo-voicevox/"},{"content":"【Python】テキストから音声への変換：gTTSライブラリの活用 Pythonでテキストを音声に変換する方法を紹介します。\ngTTS（Google Text-to-Speech）というライブラリを使用します。\ngTTSライブラリの概要 gTTSは、Googleのテキスト音声変換APIを利用して、テキストを音声に変換するPythonライブラリです。\nこのライブラリは多言語に対応しており、簡単なコードで高品質の音声を生成できます。\n必要なライブラリのインストール\nまず、gTTSライブラリをインストールする必要があります。Python環境で以下のコマンドを実行してください。\n1  pip install gtts   このコマンドは、Pythonのパッケージ管理システムであるpipを用いてgTTSライブラリをインストールします。\nサンプルコード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  from gtts import gTTS from IPython.display import Audio # テキストを音声に変換 text = \u0026#34;優れたプログラマーは、金銭的な報酬や、人々から賞賛を浴びる目的で、コードを書くのではない。単純にプログラミングを楽しむために、コードを書くんだ。リーナス トーバルズ\u0026#34; # text=話す内容 # lang=言語設定 tts = gTTS(text=text, lang=\u0026#39;ja\u0026#39;) # 音声ファイルを保存 tts.save(\u0026#39;audio.mp3\u0026#39;) # 生成した音声ファイルを再生 Audio(\u0026#39;audio.mp3\u0026#39;)   実際に作成した音声が以下です。\n\n漢字もそのまま読んでくれますが、漢字によっては狙った読みをしてくれなかったりするのでそれに合わせて平仮名に変えたりなどの対応が必要になるかと思います。\n","description":"Pythonでテキストを音声に変換する方法を紹介します。","id":93,"section":"tech","tags":["Python","音声"],"title":"【Python】テキストから音声への変換：gTTSライブラリの活用","uri":"https://c-a-p-engineer.github.io/tech/2024/01/18/python-gtts/"},{"content":"【Python】Google Colab上での顔検出 Pythonを利用してGoogle Colab上で顔検出をしてみました。\nGoogle Colabを使用して画像に顔検出を行い、検出された顔に四角を描画する方法について説明します。\nGoogle Colab上での顔検出と画像加工 必要なライブラリのインストール まず、画像処理に必要なopencv-python-headlessとグラフィカルな出力にmatplotlibをインストールします。\n1  !pip install opencv-python-headless matplotlib   顔検出用のデータの取得 OpenCVには顔検出に使える事前学習済みの分類器があります。以下のコマンドで、そのうちの1つhaarcascade_frontalface_default.xmlをダウンロードします。\n1  !wget https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml   画像のアップロード 次に、処理を行う画像をGoogle Colabにアップロードします。\n1 2  from google.colab import files uploaded = files.upload()   画像に顔検出を行い、四角を追加 以下のスクリプトで、アップロードされた画像に対して顔検出を行い、検出された顔の位置に赤い四角を描画します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  import cv2 from matplotlib import pyplot as plt # 画像ファイルのパス（アップロードした画像の名前に置き換えてください） image_path = \u0026#39;your_uploaded_image.jpg\u0026#39; # OpenCVを使用して画像を読み込む image = cv2.imread(image_path) # OpenCVではデフォルトで画像がBGRで読み込まれるため、RGBに変換 image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # 顔検出用の分類器をロード face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + \u0026#39;haarcascade_frontalface_default.xml\u0026#39;) # 顔検出実行 faces = face_cascade.detectMultiScale(image_rgb, 1.1, 4) # 検出された顔の位置に四角を描画 for (x, y, w, h) in faces: cv2.rectangle(image_rgb, (x, y), (x+w, y+h), (255, 0, 0), 2) # 図を描画 plt.figure(figsize=(8, 6)) plt.imshow(image_rgb) plt.axis(\u0026#39;off\u0026#39;) # 軸を非表示にする plt.show()   実行結果 実行前の画像はこちら\n実行すると以下のように顔の判定をして四角で囲まれます。\nアニメ画像などで試してみましたが顔検出のデータが 実写以外には対応できていない ためお気をつけてください。\n","description":"Pythonを利用してGoogle Colab上で顔検出をしてみました。","id":94,"section":"tech","tags":["Python","Google Colab"],"title":"【Python】Google Colab上での顔検出","uri":"https://c-a-p-engineer.github.io/tech/2024/01/17/colab-opencv-face-rectangle-drawing/"},{"content":"wgetを使用したファイルのダウンロードと名前のカスタマイズ ウェブからファイルをダウンロードする際、wget はLinuxユーザーにとって非常に便利なツールです。\nwget を使用して特定の URL からファイルをダウンロードし、そのファイル名をカスタマイズする方法を詳しく説明します。\nwget コマンドの基本 wget は、コマンドラインからウェブサーバーからファイルをダウンロードするための非インタラクティブなツールです。\n基本的な使用方法は非常にシンプルで、次の形式に従います：\nwget [オプション] [URL] ファイル名の指定 ダウンロードするファイルに特定の名前を付けたい場合、-O オプション（大文字のオー）を使用します。以下は、その使用例です：\nwget -O [保存するファイル名] [ダウンロードするURL] 例えば、次の URL からファイルをダウンロードし、google.com という名前で保存したい場合は、以下のようになります：\nwget -O c-a-p-engineer.html https://c-a-p-engineer.github.io/ 特殊文字の取り扱い URL に \u0026amp; のような特殊文字が含まれている場合、これらがシェルによって誤って解釈されることを防ぐために、URL を引用符で囲むことが重要です。\nwget -O c-a-p-engineer.html 'https://c-a-p-engineer.github.io/?test=1' この方法で、URL が正確に wget コマンドに渡され、期待通りの動作をします。\nファイル名を現在日時にする ファイル取得時にファイル名を現在日時にしてファイルを取得することも可能です。\nwget -O \u0026quot;$(date +%Y%m%d-%H%M%S).html\u0026quot; 'https://c-a-p-engineer.github.io/' この方法で、取得時間を付けてダウンロード出来るので同名ファイルも管理しやすくなります。\n参考  GNU Wget 1.20 Manual  ","description":"ウェブからファイルをダウンロードする際、`wget` はLinuxユーザーにとって非常に便利なツールです。","id":95,"section":"tech","tags":["Linux","Linuxコマンド"],"title":"wgetを使用したファイルのダウンロードと名前のカスタマイズ","uri":"https://c-a-p-engineer.github.io/tech/2024/01/16/wget-filename/"},{"content":"StreamDiffusion を Google Colab で動かしてみる 画像生成の StreamDiffusion を Google Colab で動かして画像を生成してみます。\nStreamDiffusionとは リアルタイムで画像生成ができるまで高速されたものです。\n cumulo-autumn/StreamDiffusion  Google Colabで実践 実際にGoogle Colabで試してみます。\n前準備 前準備としてまずはランタイムをGPUにしてください。\nメニュー -\u0026gt; ランタイム -\u0026gt; ランタイムのタイプを変更 -\u0026gt; T4 GPU -\u0026gt; 保存\nインストール StreamDiffusion をインストールします。\n1 2 3 4 5 6 7 8 9 10 11 12 13  # huggingface_hub バグの対応 !pip install -U huggingface_hub # PyTorchとxformersのインストール !pip install torch==2.1.0 torchvision==0.16.0 xformers --index-url https://download.pytorch.org/whl/cu121 # パッケージのインストール !git clone https://github.com/cumulo-autumn/StreamDiffusion.git %cd StreamDiffusion # タグ指定でバージョン固定化 !git checkout tags/v0.1.1 !python setup.py develop easy_install streamdiffusion[tensorrt] !python -m streamdiffusion.tools.install-tensorrt   セッションを再起動する メニュー -\u0026gt; ランタイム -\u0026gt; セッションを再起動する\n作業ディレクトリへ移動 作業ディレクトリへ移動します。\n1 2  # セッションを再起動してから戻る %cd StreamDiffusion   ストリームの準備 画像生成ストリームを作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  from utils.wrapper import StreamDiffusionWrapper # ストリームの生成 stream = StreamDiffusionWrapper( # 使用するモデルのIDまたはパス model_id_or_path=\u0026#34;KBlueLeaf/kohaku-v2.1\u0026#34;, lora_dict=None, t_index_list=[0, 16, 32, 45], # 画像生成枚数 frame_buffer_size=3, # 生成する画像の横幅 width=512, # 生成する画像の縦幅 height=512, warmup=10, acceleration=\u0026#34;xformers\u0026#34;, mode=\u0026#34;txt2img\u0026#34;, use_denoising_batch=False, cfg_type=\u0026#34;none\u0026#34;, seed=2, )   画像生成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  from datetime import datetime from IPython.display import Image, display from google.colab import files import os # プロンプト prompt = \u0026#34;1girl with blond hair, thick glasses, smiling, red eyes, cute\u0026#34; # ネガティブプロンプト negative_prompt = \u0026#34;bad anatomy,long_neck,long_body,longbody,deformed mutated disfigured,missing arms,extra_arms,mutated hands,extra_legs,bad hands,poorly_drawn_hands,malformed_hands,missing_limb,floating_limbs,disconnected_limbs,extra_fingers,bad fingers,liquid fingers,poorly drawn fingers,missing fingers,extra digit,fewer digits,ugly face,deformed eyes,partial face,partial head,bad face,inaccurate limb,cropped\u0026#34; # ストリームの準備 stream.prepare( prompt=prompt, negative_prompt=negative_prompt, num_inference_steps=50, ) # ストリームの実行 output_images = stream() for i, output_image in enumerate(output_images): # 現在の日時を取得 now = datetime.now() # ファイル名に日時を組み込む filename = now.strftime(f\u0026#34;images/outputs/%Y%m%d%H%M%S_{i:03}.png\u0026#34;) output_image.save(filename) # 画像をプレビュー表示 display(Image(filename)) # 自動ダウンロードリンクを生成 files.download(filename)   生成結果 512x512の画像を3枚生成するのに2秒！\n10枚生成しましたがこれで6秒という速さ！\n #image_list  p{ display: inline-flex; flex-flow: wrap; } #image_list  p  img{ width: 100px; }   参考  Hugging Face StableDiffusionPipeline StreamDiffusionWrapper Google Colab で StreamDiffusion を試す  ","description":"画像生成の StreamDiffusion を Google Colab で動かして画像を生成してみます。","id":96,"section":"tech","tags":["AI","画像","Google Colab"],"title":"StreamDiffusion を Google Colab で動かしてみる","uri":"https://c-a-p-engineer.github.io/tech/2024/01/08/google-colabo-stream-diffusion/"},{"content":"Google Colab モデルのロードがされない現象の解決方法 Google Colab で Hugging Face Hub からモデルダウンロードができない現象の解決方法\n現象 Google Colab で Hugging Face Hub からモデルをダウンロードしようとすると、 fetching files でストップする。\n原因 原因は Google Colab に入っている huggingface_hub パッケージのせいです。\nローカル環境などでは問題は発生しないようです。\n対応 Google Colab に入っている huggingface_hub パッケージを削除してください。\n1  !pip install -U huggingface_hub   現在は修正済みの模様ですが、まだ同現象が発生している場合は上記の処理が必要の模様です。\nFix thread-safety when fetching user secret in Google Colab #1953\n参考  from_pretrained can\u0026rsquo;t work in Google Colab · Issue #6441 · huggingface/diffusers  ","description":"Google Colab で Hugging Face Hub からモデルダウンロードができない現象の解決方法","id":97,"section":"tech","tags":["Google Colab"],"title":"Google Colab モデルのロードがされない現象の解決方法","uri":"https://c-a-p-engineer.github.io/tech/2024/01/08/google-colabo-huggingface_hub-fetching-files-stop/"},{"content":"Stable Diffusion WebUI を Dockerで使用する 簡単にローカル環境で Stable Diffusion WebUI を使用するメモ。\nDocker が必要になります。\nGitHub から対象をダウンロード GitHub から対象を取得します。\nGitが入ってないのなら GitHub に飛んで対象のソースをダウンロードしてください。\n stable-diffusion-webui-docker  1  git clone https://github.com/AbdBarho/stable-diffusion-webui-docker.git   構築 構築手順のとおりにやっていきます。\n Wiki Setup  初回起動 まずはDockerをビルドします。\n1  docker compose --profile download up --build   結構時間がかかるので待ちましょう。\n以下のように exited with code 0 が出たら問題なくビルド完了になります。\n1  webui-docker-download-1 exited with code 0   起動 WebUI を起動します。\ndocker compose --profile auto up --build 他にも以下のオプションがあります。\ndocker compose --profile [ui] up --build  invoke: 初期のフォークの 1 つ、 InvokeAI による素晴らしい UI InvokeAI auto: 最も人気のあるフォーク、すっきりした UI を備えた多くの機能、 AUTOMATIC1111 によるリポジトリ AUTOMATIC1111 auto-cpu: GPU を持たないユーザー向け。 comfy: グラフベースのワークフロー UI comfyanonymous  これも初回はモデルのダウンロードなどで時間がかかります。\n起動が完了したら http://localhost:7860/ にアクセスするとWebUI画面が出てきます。\n停止 停止する場合は起動したターミナル上で Ctr+C で停止します。\nNansException: A tensor with all NaNs was produced in Unet. エラーの対処 僕の環境では以下のようなエラーが発生しました。\nmodules.devices.NansException: A tensor with all NaNs was produced in Unet. This could be either because there's not enough precision to represent the picture, or because your video card does not support half type. Try setting the \u0026quot;Upcast cross attention layer to float32\u0026quot; option in Settings \u0026gt; Stable Diffusion or using the --no-half commandline argument to fix this. Use --disable-nan-check commandline argument to disable this check. 調べたところ\n 画像を表現するのに十分な精度がない ビデオカードがhalf型をサポートしていない  このエラーを修正するためには以下の設定を行う必要があります。\nSettings \u0026gt; StableDiffsion \u0026gt;「Upcast cross attention layer to float32」にチェック \u0026gt; ApplySettings で設定。\nこれでエラーが解消されて生成されるかと思います。\nまとめ これでローカル環境で簡単に使用ができます。\nGPUが貧弱過ぎて辛い…(´；ω；｀)\n個人的にはローカルPCが汚れにくい、Docker版を推します。\nPythonのバージョンアップなどもDocker側で対応してくれるので良いと思っています。\n","description":"Stable Diffusion WebUI を Dockerで使用する方法メモ","id":98,"section":"tech","tags":["AI","画像"],"title":"Stable Diffusion WebUI を Dockerで使用する","uri":"https://c-a-p-engineer.github.io/tech/2023/12/22/stable-diffusion-webui-docker/"},{"content":"URLを入れるだけで該当のページをマークダウンに変換してくれる urltomarkdown URLを入れるだけで該当のページをマークダウンに変換してくれる urltomarkdown の紹介\n urltomarkdown  使い方 使い方は簡単です。\n対象URLを入れるだけで使用可能です。\nファイルをダウンロード GitHub があり使い方が記載されていました。\n urltomarkdown GitHub  対象URLを簡単にファイルダウンロードする方法があります。\nhttps://urltomarkdown.herokuapp.com/?title=true\u0026amp;links=false\u0026amp;url=https://www.mozilla.org/  title: タイトルをつける（true, false） link: リンクをつける（true, false） url: 対象のURL（URLエンコードしておく）  まとめ ChatGPT でWebページの内容を学習させて使いたいと思い探しました。\nこれでWebページをマークダウンに変換させて学習を容易にしてくれます。\n","description":"URLを入れるだけで該当のページをマークダウンに変換してくれる urltomarkdown の紹介","id":99,"section":"tech","tags":["オンラインツール"],"title":"URLを入れるだけで該当のページをマークダウンに変換してくれる urltomarkdown","uri":"https://c-a-p-engineer.github.io/tech/2023/12/22/urltomarkdown/"},{"content":"文章から曲を作ってくれる音楽AI「Suno AI」 歌詞を入れるだけで曲を作ってくれる音楽AI「Suno AI」の紹介。\n Suno AI  使ってみた 登録は Google、Discode、Microsoft の三種類が使用できます。\n登録して 「Create」タブを選択するとすぐに作成できます。\n試しに以下の歌詞を使用しました。\n 盗んだコードが走り出す 意味さえもわからぬまま\n黒いコンソールの中へ\n誰にも知られたくないと 未レビューでマージ\n爆弾を作った気がした リリースの夜\n 自動的に下記の動画を作成してくれました。\nSorry, your browser doesn't support embedded videos.  料金プラン 料金プランの概要は以下の通りです\n基本プラン（Basic Plan）  料金: 無料（Free） 利用可能クレジット: 1日50クレジット（10曲分） 商用利用: 非商用 クレジット追加: 不可 生成キュー: 共有 同時実行ジョブ数: 2  プロプラン  料金: 月額8ドル 利用可能クレジット: 月2,500クレジット（500曲分） 商用利用: 商用可 クレジット追加: オプション 生成キュー: 優先 同時実行ジョブ数: 10  プレミアプラン  料金: 月額24ドル 利用可能クレジット: 月10,000クレジット（2,000曲分） 商用利用: 商用可 クレジット追加: オプション 生成キュー: 優先 同時実行ジョブ数: 10  まとめ 遊ぶ分にはFreeで十分、もしも仕事などで使うなら商用可能になるプロプラン以上に加入した方が良いですね。\nChatGPTにイメージ渡して歌詞を作ってもらえばすべてAIで完結してサクッと音楽が作成できますね。\n","description":"歌詞を入れるだけで曲を作ってくれる音楽AI「Suno AI」の紹介","id":100,"section":"tech","tags":["AI","音楽"],"title":"歌詞を入れるだけで曲を作ってくれる音楽AI「Suno AI」","uri":"https://c-a-p-engineer.github.io/tech/2023/12/15/suno-ai/"},{"content":"難解プログラミングの Whitespace を触ってみる スペース、タブ、改行のみで書く難解プログラミングの Whitespace を触ってみる。\nこのプログラミング言語、勉強するしたりするのはだいぶ辛いものに…\n Whitespace - Wikipedia  環境構築 構築しなくてもオンラインエディタが存在します。\nWhitespace - Try It Online\nGitHub からコードをインストールすることも可能ですが僕はDockerで構築いたしました。\n whitespace - GitHub esolang/whitespace - Docker Hub  1  docker run -it --rm -it esolang/whitespace   Whitespaceの実行環境を含むDockerイメージをダウンロードしてコンテナ内に入ってくれます。\n文法 IMP (Instruction Modification Parameter)、コマンド、パラメータの3つ組で命令を表現する\n数値は二進記数法で表現する。\n[Space]が0で、[Tab]が1で、[LF]が終端記号です。\n [Space] スタック操作 [Tab][Space] 演算 [Tab][Tab] ヒープアクセス [LF] フロー制御 [Tab][LF] I/O  スタック操作  [Space] 数値：数値をスタックに積む [LF][Space]：スタックの一番上を複製する [LF][Tab]：スタックの1番目と2番目を交換する [LF][LF]：スタックの一番上の物を捨てる  演算  [Space][Space]：加算 [Space][Tab]：引き算 [Space][LF]：かけ算 [Tab][Space]：割り算 [Tab][Tab]：剰余  コメント コメントはありませんがスペース、タブ、改行以外はすべて無視するので普通に文字を書いていけば問題ないです。\nただしコメント部分にスペースなどを入れてしまうと読み取られてしまうのでご注意ください。\nサンプルコード 実際に動かしてみます。\n英語版のWikipediaにいい感じのサンプルコードがあったのでそちらを使用します。\n Sample Code  以下のコードは Hello, world! と出力してくれます。\nコンテナ内で vi を使うかDockerにマウントしてやってください。\nS S S T\tS S T\tS S S L:Push_+1001000=72='H'_onto_the_stack T\tL S S :Output_'H';_S S S T\tT\tS S T\tS T\tL:Push_+1100101=101='e'_onto_the_stack T\tL S S :Output_'e';_S S S T\tT\tS T\tT\tS S L:+1101100=108='l' T\tL S S S S S T\tT\tS T\tT\tS S L:+1101100=108='l' T\tL S S S S S T\tT\tS T\tT\tT\tT\tL:+1101111=111='o' T\tL S S S S S T\tS T\tT\tS S L:+101100=44=',' T\tL S S S S S T\tS S S S S L:+100000=32=Space T\tL S S S S S T\tT\tT\tS T\tT\tT\tL:+1110111=119='w' T\tL S S S S S T\tT\tS T\tT\tT\tT\tL:+1101111=111='o' T\tL S S S S S T\tT\tT\tS S T\tS L:+1110010=114='r' T\tL S S S S S T\tT\tS T\tT\tS S L:+1101100=108='l' T\tL S S S S S T\tT\tS S T\tS S L=+1100100=100='d' T\tL S S S S S T\tS S S S T\tL:+100001=33='!' T\tL S S :Output_'!';_L L L:End_the_program 実行する際は whitespace [ファイル名] で実行されます。\n感想 可読性最悪、コードはとても分かりづらく、それはそれでおもしろいですね。\n参考  Whitespace - Tutorial Whitespace - Wikipedia whitespace - GitHub esolang/whitespace - Docker Hub   setTimeout( async () = { console.log(document.querySelectorAll('.language-ws')) document.querySelectorAll('.language-ws').forEach(function(element) { var html = element.innerHTML .replace(/ /g, '\u0026nbsp;') .replace(/\\t/g, '\u0026Tab;'); element.innerHTML = html; }); }, 2000);   .language-ws::before { position: absolute; top: 0; left: 0; z-index: 10; padding: 2px 7px; width: 100%; height: 30px; line-height: 1.9; font-size: 13.8px; font-family: montserrat,sans-serif; font-weight: 700; display: inline-block; content: \"Whitespace\"; } .highlight-space { background-color: yellow; } .highlight-tab { background-color: lightblue; }   ","description":"スペース、タブ、改行のみで書く難解プログラミングの Whitespace を触ってみる","id":101,"section":"tech","tags":["難解プログラミング言語"],"title":"難解プログラミングの Whitespace を触ってみる","uri":"https://c-a-p-engineer.github.io/tech/2023/12/10/program-whitespace/"},{"content":"PHPコマンドラインオプション「php -r」の活用 PHPはウェブ開発で広く使われている言語ですが、コマンドラインから直接PHPコードを実行する機能も提供しています。「php -r」オプションの使い方の紹介。\n「php -r」オプションとは 「php -r」は、ファイルにスクリプトを保存することなく、コマンドラインから直接PHPコードを実行するためのオプションです。スクリプトのテストや簡単な操作に便利です。\n基本的な使用法 1  php -r \u0026#39;echo \u0026#34;Hello, World!\u0026#34;;\u0026#39;   このコマンドは \u0026ldquo;Hello, World!\u0026rdquo; を出力します。\n「php -r」の活用例 簡単な計算 簡単な計算をさせる\n1  php -r \u0026#39;echo 2 + 3;\u0026#39;   複数行で書く 複数行にしたい時は普通に改行を入れることで可能です。\n末尾にシングルクォーテーションを入れることでコードをが閉められて実行されます。\n1 2  php -r \u0026#39; $name = \u0026#34;Hoge\u0026#34;; echo \u0026#34;Welcome to \u0026#34; . $name . \u0026#34;!\\n\u0026#34;; \u0026#39;   JSONデータの処理 JSONのデータを処理してみます。\n1 2 3 4 5  php -r \u0026#39; $json = \u0026#34;{\\\u0026#34;name\\\u0026#34;: \\\u0026#34;Tech\\\u0026#34;}\u0026#34;; $obj = json_decode($json); echo $obj-\u0026gt;name; \u0026#39;   制限と注意点  コード全体をシングルクォートで囲む必要があります。 複雑なスクリプトはファイルに保存する方が適切です。 エラーハンドリングは重要です。  まとめ 「php -r」はPHPをコマンドラインで手軽に使用するためのツールです。\n参考  PHP: オプション - Manual  ","description":"PHPはウェブ開発で広く使われている言語ですが、コマンドラインから直接PHPコードを実行する機能も提供しています。「php -r」オプションの使い方の紹介。","id":102,"section":"tech","tags":["PHP"],"title":"PHPコマンドラインオプション「php -r」の活用","uri":"https://c-a-p-engineer.github.io/tech/2023/12/04/php-cli-r-option/"},{"content":"PHP でグラフィックをやってみる PHP でグラフィックをやれるか気になってやってみました！\nPHP-GLFW PHP でグラフィックをやる方法がないかと探していたら PHP-GLFW なるものを見つけました。\n PHP-GLFW  これはPHPからOpenGLなどのグラフィックを触るためのライブラリのようです。\nインストール方法 ここに記載されている方法で設定することが可能です。\n Gettings Started with PHP \u0026amp; OpenGL  Dockerで構築してみた 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88  ########## Pull ##########FROMnvidia/cuda:12.0.0-base-ubuntu22.04########## Non-interactive ##########ENV DEBIAN_FRONTEND=noninteractive # 必要なパッケージRUN apt update \\  # 基本 \u0026amp;\u0026amp; apt install -y \\  wget \\  git \\  procps \\  vim \\  # ZIP関連 libzip-dev \\  unzip \\  # 掃除 \u0026amp;\u0026amp; apt clean \\  \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*################################################## X Windows System 設定# DISPLAY=Xサーバー名:ディスプレイ番号.スクリーン番号ENV DISPLAY host.docker.internal:0.0RUN apt-get update \u0026amp;\u0026amp; apt-get install -y --no-install-recommends \\  # X11 x11-apps \\  x11-xserver-utils \\  # グラフィックライブラリ mesa-utils \\  \u0026amp;\u0026amp; apt clean \\  \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*################################################## PHPのインストールRUN apt update \u0026amp;\u0026amp; apt install -y \\  ca-certificates \\  apt-transport-https \\  software-properties-common \\  lsb-release \\  \u0026amp;\u0026amp; apt clean \\  \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*RUN add-apt-repository ppa:ondrej/php -y# Install PHP 8.2 packagesRUN apt update \u0026amp;\u0026amp; apt install -y \\  php \\  php-dev\\  \u0026amp;\u0026amp; apt clean \\  \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*# 必要なパッケージと依存関係をインストールRUN apt update \u0026amp;\u0026amp; apt install -y \\  cmake \\  git \\  # X11 libxrandr-dev \\  libxinerama-dev \\  libxcursor-dev \\  libxi-dev \\  libxxf86vm-dev \\  # OpenGL開発ツール (OpenGL使用時) libgl1-mesa-dev \\  libglu1-mesa-dev \\  # GLFW libglfw3 \\  libglfw3-dev################################################## PHP GFLW# ソースからビルドWORKDIR/usr/srcRUN git clone https://github.com/mario-deluna/php-glfwWORKDIR/usr/src/php-glfwRUN phpize \u0026amp;\u0026amp; ./configure --enable-glfw \u0026amp;\u0026amp; make \u0026amp;\u0026amp; make install# PHPにPHPGLFW拡張を読み込む設定RUN echo \u0026#34;extension=glfw.so\u0026#34; \u0026gt; /etc/php/8.2/cli/conf.d/glfw.ini# コンテナ起動時の作業ディレクトリの設定################################################## PHP ComposerRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composerWORKDIR/app  Dockerfile が用意できたらイメージのビルド。\n1  docker build -t php-opengl-image .   そしてコンテナを起動。\n1  docker run --rm --gpus all -it php-opengl-image   まずはグラフィックが動くかの確認をする必要があります。\n1  glxgears   グラフィックが動くと下記のような歯車画面が出てきて歯車が回ります。\nサンプル 実際にPHPのコードを動かしてみましょう。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  \u0026lt;?php if (!glfwInit()) { throw new Exception(\u0026#39;GLFW could not be initialized!\u0026#39;); } glfwWindowHint(GLFW_RESIZABLE, GL_TRUE); glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4); glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1); glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); if (!$window = glfwCreateWindow(800, 600, \u0026#34;PHP GLFW Demo\u0026#34;)) { throw new Exception(\u0026#39;OS Window could not be initialized!\u0026#39;); } glfwMakeContextCurrent($window); glfwSwapInterval(1); while (!glfwWindowShouldClose($window)) { glfwPollEvents(); glfwGetCursorPos($window, $mouseX, $mouseY); glClearColor(sin($mouseX / 300), sin($mouseY / 300), cos($mouseY / 300), 1); glClear(GL_COLOR_BUFFER_BIT); glfwSwapBuffers($window); } glfwDestroyWindow($window); glfwTerminate();   実際にサンプルファイルを起動してみます。\n1  php sample.php   これはマウスの位置によって背景色が変わるものです。\nその他サンプル 他にもさまざまなサンプルなどがあります。\n Examples  まとめ PHPでは普通では触らないグラフィックですが、実際に触ってみると色々と面白そうです。\n実際にこれでゲームを作っている方もいるみたいです。\n","description":"PHP でグラフィックをやれるか気になってやってみました！","id":103,"section":"tech","tags":["PHP"],"title":"PHP でグラフィックをやってみる","uri":"https://c-a-p-engineer.github.io/tech/2023/12/02/php-docker-glfw/"},{"content":"スマートフォンをキーボードとマウスに変えるアプリ – Bluetooth Keyboard \u0026amp; Mouse 概要 「Bluetooth Keyboard \u0026amp; Mouse」は、スマートフォンをPCや他のデバイスと接続してキーボードやマウスとして使用することを可能にするアプリです。このツールを使えば、スマートフォンやタブレットをリモートコントローラーとして活用ができます。\n主な機能と特徴  マウスとキーボードコントロール\nスマートフォンをマウスやキーボードとして使用できます。スクロール、クリック、タイピングなどの基本的な操作が可能です。 マルチメディアコントロール\nメディアプレーヤーの操作が可能です。音量調整や再生/一時停止などがスマートフォンから直接行えます。 カスタマイズオプション\nキーボードのレイアウトをカスタマイズしたり、異なる言語のレイアウトに切り替えることができます。 Pro版での追加機能\n高度な設定オプション、カスタムレイアウトの設定などが可能になります。  無料版とPro版の機能比較    機能 無料版 Pro版     マウスコントロール 〇 〇   キーボードコントロール × 〇   マルチメディアコントロール × 〇   ナビゲーションコントロール × 〇   数字キーパッド × 〇   カスタムレイアウト設定 × 〇   高度な設定オプション × 〇    ダウンロード   Google Play 無料版\nBluetooth Keyboard \u0026amp; Mouse - Google Play\n  Google Play 有料版\nBluetooth Keyboard \u0026amp; Mouse Pro - Google Play\n  App Store\nBluetooth Keyboard \u0026amp; Mouse Pro - App Store\n  まとめ 無料版はマウス機能のみ提供し、Pro版ではより多くのカスタマイズオプション可能です。突然マウスの代わりが欲しい時など、無料版を試してみるのが良いかもしれません。\n","description":"「Bluetooth Keyboard \u0026 Mouse」は、スマートフォンをPCや他のデバイスと接続してキーボードやマウスとして使用することを可能にするアプリです。","id":104,"section":"tech","tags":["ツール"],"title":"スマートフォンをキーボードとマウスに変えるアプリ – Bluetooth Keyboard \u0026 Mouse","uri":"https://c-a-p-engineer.github.io/tech/2023/12/02/app-bluetooth-keyboard-mouse/"},{"content":"【Docker】コンテナ内でGPUを使用する Docker 内で GPU を使用するための設定メモ\nNVIDIA Container Toolkitのインストール 公式のインストールガイドにしたがって NVIDIA Container Toolkit をインストールします。\n Installing the NVIDIA Container Toolkit  WSL上で以下のコマンドでインストールします。\n1 2 3 4 5 6 7  $ curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | \\  sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\  \u0026amp;\u0026amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\  sed \u0026#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g\u0026#39; | \\  sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list $ sudo apt update $ sudo apt install -y nvidia-container-toolkit   確認 以下の方法でインストールの確認を行います。\n1  docker run --rm --gpus all nvidia/cuda:11.6.1-devel-ubuntu20.04 nvidia-smi   実行結果にホスト側のグラフィックボードが表示されたら確認完了です。\n僕の NVIDIA GeForce GTX 1650 という貧弱なグラフィックボードが見えます…\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  ========== == CUDA == ========== CUDA Version 11.6.1 Container image Copyright (c) 2016-2023, NVIDIA CORPORATION \u0026amp; AFFILIATES. All rights reserved. This container image and its contents are governed by the NVIDIA Deep Learning Container License. By pulling and using the container, you accept the terms and conditions of this license: https://developer.nvidia.com/ngc/nvidia-deep-learning-container-license A copy of this license is made available in this container at /NGC-DL-CONTAINER-LICENSE for your convenience. ************************* ** DEPRECATION NOTICE! ** ************************* THIS IMAGE IS DEPRECATED and is scheduled for DELETION. https://gitlab.com/nvidia/container-images/cuda/blob/master/doc/support-policy.md Tue Nov 28 07:17:15 2023 +---------------------------------------------------------------------------------------+ | NVIDIA-SMI 545.29.01 Driver Version: 546.01 CUDA Version: 12.3 | |-----------------------------------------+----------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+======================+======================| | 0 NVIDIA GeForce GTX 1650 ... On | 00000000:02:00.0 Off | N/A | | N/A 63C P8 5W / 35W | 657MiB / 4096MiB | 13% Default | | | | N/A | +-----------------------------------------+----------------------+----------------------+ +---------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=======================================================================================| | No running processes found | +---------------------------------------------------------------------------------------+   参考  WSL2上にNVIDIA Container ToolkitをインストールしてDockerコンテナ内でCUDAを使用できるようにする  ","description":"Docker 内で GPU を使用するための設定メモ","id":105,"section":"tech","tags":["Docker"],"title":"【Docker】コンテナ内でGPUを使用する","uri":"https://c-a-p-engineer.github.io/tech/2023/11/28/docker-gpu/"},{"content":"【Elixir】Phoenix Liveview のファイルアップロードのテスト方法 Elixir Phoenix の Liveview のファイルアップロードのテスト方法\n環境  Elixir 1.14.2 Phoenix 1.6.3  対象のコード テストをする対象のコードはこちらになります。\nElixirファイル 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  defmodule DemoWeb.FileUploadLive.Index do use DemoWeb, :live_view @impl true def mount(_params, _session, socket) do { :ok, socket # アップロード設定 |\u0026gt; allow_upload(:image, accept: ~w(.jpg .jpeg .png)) } end @impl true def handle_event(\u0026#34;validate\u0026#34;, _params, socket) do {:noreply, socket} end @impl true def handle_event(\u0026#34;cancel-entry\u0026#34;, %{\u0026#34;ref\u0026#34; =\u0026gt; ref}, socket) do # アップロードキャンセル {:noreply, cancel_upload(socket, :image, ref)} end @impl true def handle_event(\u0026#34;save\u0026#34;, _params, socket) do uploaded_file = consume_uploaded_entries(socket, :image, fn %{path: path}, entry -\u0026gt; # ファイルアップロード処理 # path はファイルがアップロードされた場所 # entry はアップされたファイル情報 File.cp!(path, entry.client_name) entry.client_name end) {:noreply, socket |\u0026gt; put_flash(:info, \u0026#34;ファイルアップロード完了\u0026#34;) |\u0026gt; redirect(to: \u0026#34;/\u0026#34;)} end end   テンプレートファイル 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  \u0026lt;form id=\u0026#34;post-form\u0026#34; phx-change=\u0026#34;validate\u0026#34; phx-submit=\u0026#34;save\u0026#34;\u0026gt; \u0026lt;!-- アップロードされたらファイルアップ箇所は非表示 --\u0026gt; \u0026lt;div class=\u0026#34;columns is-centered\u0026#34; style={ if @uploads.image.entries != [], do: \u0026#34;display:none\u0026#34; }\u0026gt; \u0026lt;!-- ファイルをドラッグ \u0026amp; ドロップでもアップロードすることが可能 --\u0026gt; \u0026lt;div class=\u0026#34;file is-boxed\u0026#34; phx-drop-target={ @uploads.image.ref }\u0026gt; \u0026lt;label class=\u0026#34;file-label\u0026#34;\u0026gt; \u0026lt;%= live_file_input @uploads.image, class: \u0026#34;file-input\u0026#34; %\u0026gt; \u0026lt;span class=\u0026#34;file-cta\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;file-label p-6\u0026#34;\u0026gt; Choose a file… \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%= # アップロードされたら表示 for entry \u0026lt;- @uploads.image.entries do %\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;%= live_img_preview entry %\u0026gt; \u0026lt;figcaption\u0026gt;\u0026lt;%= entry.client_name %\u0026gt;\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;%= # アップロードキャンセルボタン submit gettext(\u0026#34;Cancel\u0026#34;), type: \u0026#34;button\u0026#34;, phx_click: \u0026#34;cancel-entry\u0026#34;, phx_value_ref: entry.ref %\u0026gt; \u0026lt;%= # エラー表示 for err \u0026lt;- upload_errors(@uploads.image, entry) do %\u0026gt; \u0026lt;p class=\u0026#34;alert alert-danger\u0026#34;\u0026gt;\u0026lt;%= err %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= submit gettext(\u0026#34;Save\u0026#34;), phx_disable_with: gettext(\u0026#34;Saving...\u0026#34;) %\u0026gt; \u0026lt;/form\u0026gt;   テスト 実際のテスト処理を書きます。\n前準備 テストの前にファイルアップロードに使用する画像を用意します。\nファイルアップロード用のディレクトリの作成とフェニックスのロゴをコピーします\n。\n1 2  $ mkdir test/support/upload_files $ cp priv/static/images/phoenix.png test/support/upload_files/phoenix.png   テストファイル 実際にテストを書くとこうなります\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  defmodule DemoWeb.Live.FileUploadTest do use DemoWeb.ConnCase import Phoenix.LiveViewTest test \u0026#34;FileUpload\u0026#34;, %{conn: conn} do # ファイルアップロード処理 assert index_live # ファイルアップロードのターゲット |\u0026gt; file_input(\u0026#34;#post-form\u0026#34;, :image, [ # アップロードするファイルの情報 %{ # 名前 name: \u0026#34;phoenix.png\u0026#34;, # 種別 type: \u0026#34;image/png\u0026#34;, # 実ファイル content: File.read!(\u0026#34;test/support/upload_files/phoenix.png\u0026#34;) } ]) # ファイルのアップロード処理 |\u0026gt; render_upload(\u0026#34;phoenix.png\u0026#34;) =~ \u0026#34;phoenix.png\u0026#34; end end   参考  render_upload/3 LiveViewのlive_file_inputをテストする - Qiita  まとめ 今までPHPのFWのバージョンアップなど経験をしてきましたが、Phoenix はまだまだ新機能が作られたりするので破壊的なバージョンアップが続きそうなので注意が必要です。\n","description":"Elixir Phoenix の Liveview のファイルアップロードのテスト方法","id":106,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix Liveview のファイルアップロードのテスト方法","uri":"https://c-a-p-engineer.github.io/tech/2023/11/28/elixir-phoenix-file-upload-test/"},{"content":"【Elixir】Phoenix 1.6 → 1.7 へのアップデートのメモ Elixir Phoenix 1.6 → 1.7 へのアップデートしようとした際のメモ。\nなおアップデートはしていない。\nアップデート方法は3種類 色々と試行錯誤を行った結果、以下の3種類のものをすべて試しました。それらを試した結果、僕はアップデートを諦めました。\n後方互換性を残す方法 1.6 プロジェクトで使用している Phoenix をできるだけ、そのまま残して 1.7 にアップデートする方法です。\nUpgrading from Phoenix v1.6.x to v1.7.0\n パッケージのみアップデート 1.7 に合わせるためにファイルを修正  差分ファイルを入れてのバージョンアップ これは現行のプロジェクトに対して新たに mix phx.new をして 1.7 のバージョンをファイル構成を被せます。\n闘魂Elixir ── Phoenixで作ったアプリケーションを1.6.6から1.7.7へアップグレードすることを楽しんだ思い出\n 現行プロジェクト対して 1.7 ファイル構成を被せる 同一ファイルが上書きされるので git などを見て必要なものは取り込む 1.6 のファイル構成が残る（不要なものを探して削除するか確認する必要あり  移植 新たにまっさらな Phoenix プロジェクトを生成して1つ1つの機能を移植して行く流れです。\n 旧ファイルが存在しないので一番きれいな状態になる 移植するので巨大なプロジェクトほど工数がかかる  Phoenix.View から Phoenix.Component 1.7 から Phoenix.View が Phoenix.Component になりましたので注意が必要です。\nReplaced by Phoenix.Component\nまとめ 今までPHPのFWのバージョンアップなど経験をしてきましたが、Phoenix はまだまだ新機能が作られたりするので破壊的なバージョンアップが続きそうなので注意が必要です。\n","description":"Elixir Phoenix 1.6 → 1.7 へのアップデートしようとした際のメモ。なおアップデートはしていない。","id":107,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix 1.6 → 1.7 へのアップデートのメモ","uri":"https://c-a-p-engineer.github.io/tech/2023/11/26/elixir-phoenix-update/"},{"content":"【ChatGPT】ABC記譜法を利用して音楽を作る方法 ChatGPTにABC記譜法を利用して音楽を作らせてみます。ABC記譜法は、シンプルで読みやすい音楽表記法です。主にフォークや伝統音楽に使用されていますが、どんなジャンルの音楽にも適用可能です。今回は、ChatGPTを活用してABC記譜法で音楽を作成する方法についてご紹介します。\nABC記譜法とは？ ABC記譜法は、音楽をテキスト形式で表現する方法です。各音符はアルファベットや記号で表され、リズムや拍子、キー（調）などの情報も簡潔に記述できます。この方法は、コンピュータでの作業に適しており、特別な楽譜ソフトウェアがなくても音楽の作成や共有が可能です。\nABC記譜法 - Wikipedia\n基本は以下のような構造です。細かなものに対してはWikipediaなどを見てみてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  X: 1 T: ドレミファソラシド（タイトル） C: 作曲者名 M: 4/4 L: 1/4 K: C %%MIDI program 1 1 % ピアノ %%MIDI program 2 25 % アコースティックギター %%MIDI program 3 41 % バイオリン V:1 C D E F | G A B c ] w: ド レ ミ ファ ソ ラ シ ド V:2 C D E F | G A B c ] w: ド レ ミ ファ ソ ラ シ ド V:3 %%MIDI program 41 % バイオリン C D E F | G A B c ] w: ド レ ミ ファ ソ ラ シ ド   MIDI program では指定することで再生時の楽器を指定できます。\nMelodic sounds\nabcjs: Quick Editor ABC記譜法をものを実際にすぐ聞けるようにするライブエディターです。\nabcjs: Quick Editor\nChatGPTを使ったABC記譜法の利用法 ChatGPTを使用すると、指定した条件に基づいてABC記譜法の楽譜を作成ができます。たとえば、特定のジャンルやキーでの曲作り、特定の楽器を用いた作曲など、さまざまなリクエストに応じて楽譜を生成することが可能です。\nプロンプトのテンプレート 音楽初心者の方にもわかりやすいように、以下のテンプレートを用意しました。このテンプレートを使って、ChatGPTに具体的な音楽作成のリクエストを行うことができます。\n1 2 3 4 5 6 7 8 9 10  ABC記法楽譜作成リクエスト ABC記法で以下の要件の楽譜を作成してください。 - どんな曲か - 曲の長さ - 使用楽器 複数パートがある時でも1つにまとめてください。 %%MIDI program で音源を設定してください。 プログラミングを使用しないでください。   ※ プログラミングを使用しないでください。 を入れないとPython使って書いたりしようとすることがあります。\n作成例 ここでは、具体的なリクエスト例として以下のように依頼してみます。\n1 2 3 4 5 6 7 8 9 10 11  ABC記法楽譜作成リクエスト ABC記法で以下の要件の楽譜を作成してください。 - 童謡 - 30秒 - ピアノ - 複数パート 複数パートがある時でも1つにまとめてください。 %%MIDI program で音源を設定してください。 プログラミングを使用しないでください。   という条件で楽譜を作成しました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  X:1 T:童謡のメロディ M:4/4 L:1/4 Q:1/4=120 %%MIDI program 0 K:C C2 E2 | G4 | A2 G2 | F4 | E2 G2 | C4 | D2 E2 | C4 | X:2 T:童謡の伴奏 M:4/4 L:1/4 Q:1/4=120 %%MIDI program 0 K:C [C2E2] [G,2B,2] | [G,2B,2] [G,2B,2] | [A,2C2] [G,2B,2] | [F,2A,2] [F,2A,2] | [E,2G,2] [C2E2] | [C2E2] [C2E2] | [D2F2] [E2G2] | [C2,E2,G2] [C2,E2,G2] |   このまま使用するとメロディと伴奏が別れてしまうので下記のように1つにまとめます。\n30秒と指定したのですが…これで約15秒の曲が完成。\n1 2 3 4 5 6 7 8 9 10 11 12  X:1 T:童謡のメロディ M:4/4 L:1/4 Q:1/4=120 %%MIDI program 0 K:C V:1 C2 E2 | G4 | A2 G2 | F4 | E2 G2 | C4 | D2 E2 | %%MIDI program 0 V:2 [C2E2] [G,2B,2] | [G,2B,2] [G,2B,2] | [A,2C2] [G,2B,2] | [F,2A,2] [F,2A,2] | [E,2G,2] [C2E2] | [C2E2] [C2E2] | [D2F2] [E2G2]   もう少し明るくなどChatGPTに色々編集を依頼した結果がこちらになります。\nだいぶ要望に近いものができあがりました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  X:1 T:明るい童謡風メロディ M:4/4 L:1/8 Q:1/4=140 %%MIDI program 0 V:1 GABc d2ed | c2B2 A4 | GABc d2ed | c2A2 G4 | e2e2 f2g2 | a2g2 f4 | e2e2 f2g2 | a2f2 g4 | c\u0026#39;2ba g2fe | d2c2 B4 | c\u0026#39;2ba g2fe | d2c2 B4 | c\u0026#39;2ba g2fe | d2c2 B4 | e2d2 c2B2 | A6 z2 | V:2 z4 G4 | E2C2 D4 | z4 G4 | E2C2 D4 | z4 A4 | F2D2 G4 | z4 A4 | F2D2 G4 | z4 e4 | c2A2 B4 | z4 e4 | c2A2 B4 | z4 e4 | c2A2 B4 | z4 c4 | G,6 z2 |   まとめ ChatGPTを使ってABC記譜法で音楽を作成すること自体は簡単ですが、そこから修正していく作業などは基本的な音楽知識がないと難しくなっていきます。\nお試しでテンプレートを使用して具体的なリクエストを行い、オリジナルの楽譜を作成してみましょう。\nちなみにプラグインで音楽ファイルを作ってくれたりもするのですが、ダウンロード→聞くという作業がとても手間になるので僕は出力したものをライブエディターで確認するという流れでやりました。\n","description":"ChatGPTにABC記譜法を利用して音楽を作らせてみます。","id":108,"section":"tech","tags":["AI","ChatGPT","音楽"],"title":"【ChatGPT】ABC記譜法を利用して音楽を作る方法","uri":"https://c-a-p-engineer.github.io/tech/2023/11/15/chatgpt-music-abc/"},{"content":"【GitHub】GitHub Actions MySQL データベースを利用する GitHub Actionsを使用して MySQL データベースをセットアップし、接続テストを行う手順をご紹介します。\nGitHub Actionsは、ソフトウェアワークフローを自動化するためのCI/CDツールです。MySQLのセットアップと接続テストを自動化する方法を学びましょう。\nYAMLファイルの内容と説明 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  name:MySQL Workflowon:[push]# GitHubにプッシュされた時に実行されるjobs:setup-mysql:runs-on:ubuntu-latest# Ubuntu最新版で実行services:mysql:image:mysql:8.0# MySQLのバージョン8.0のDockerイメージを使用env:MYSQL_ROOT_PASSWORD:root_password# ルートユーザーのパスワードMYSQL_DATABASE:foo# 作成するデータベース名MYSQL_USER:user# ユーザー名MYSQL_PASSWORD:user_password# ユーザーのパスワードports:- 3306:3306# ポートマッピング設定options:\u0026gt;-# コンテナのヘルスチェック設定--health-cmd=\u0026#34;mysqladmin ping\u0026#34;--health-interval=10s--health-timeout=10s--health-retries=10steps:- name:Show Docker containers# 実行中のDockerコンテナを表示run:docker ps -a- name:Show databases for user# ユーザーのデータベースを表示run:mysql --protocol=tcp -h localhost -P 3306 -u user -puser_password -e \u0026#34;SHOW DATABASES\u0026#34;  説明  トリガー: on: [push] は、このWorkflowがGitHubへのプッシュ時にトリガーされることを意味します。 ジョブ設定: setup-mysql ジョブは ubuntu-latest で実行され、MySQLサービスをセットアップします。 サービス設定: MySQLサービスは、Dockerイメージ mysql:8.0 を使用して設定されます。 環境変数: env セクションでは、データベースのユーザー、パスワード、データベース名を設定します。 ポート設定: 3306:3306 でMySQLのデフォルトポートをホストマシンに公開します。 ヘルスチェック: options でコンテナの起動と健全性を確認するためのコマンドを設定します。 ステップ:  Show Docker containers ステップで現在実行中のDockerコンテナの一覧を表示します。 Show databases for user ステップで、指定したユーザーで利用可能なデータベースの一覧を表示します。    実行と確認 このファイルをコミットし、GitHubにプッシュすると、自動的にGitHub Actionsがトリガーされます。完了後、「Actions」タブで実行結果を確認できます。成功していれば、指定されたユーザーでデータベースに接続し、利用可能なデータベースの一覧を表示することができます。\n参考リンク  GitHub Actionsの公式ドキュメント: GitHub Actions Documentation MySQLのDockerイメージ: MySQL Docker Hub  ","description":"GitHub Actionsを使用して MySQL データベースをセットアップし、接続テストを行う手順をご紹介します。","id":109,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions MySQL データベースを利用する","uri":"https://c-a-p-engineer.github.io/tech/2023/11/07/github-actions-mysql/"},{"content":"【Elixir】Elixir KoansでElixirを学ぼう Elixir Koansを使ってElixirの問題を解く方法を紹介します。\n elixirkoans/elixir-koans: Elixir learning exercises  実行環境  Elixir 1.15.6  Elixir Koansとは？ Elixir Koansは、Elixirの使用法を体験するための一連の練習問題です。\nプログラミング言語Elixirを学び始める人にとって、理論だけでなく実際にコードを書きながら学べるツールです。\nスタートガイド Elixirをインストール済みの環境で行ってください。\nセットアップ  GitHubからリポジトリをクローンします。  1 2  $ git clone https://github.com/elixirkoans/elixir-koans.git $ cd elixir-koans/   依存関係を取得します。  1  $ mix deps.get   問題を解く  プロジェクトのルートディレクトリでmix meditateを実行します。  1  $ mix meditate   最初の問題が表示されたら、指示にしたがってファイルを開き、空白を適切なコードで埋めます。\n以下のように lib/koans/01_equalities.ex:12 ファイルと行が指定されています。  1 2 3 4 5 6  Now meditate upon Equalities | | 0 of 209 ---------------------------------------- We shall contemplate truth by testing reality, via equality Assertion failed in lib/koans/01_equalities.ex:12 true == ___   ファイルを保存すると、自動実行機能がテストを再実行し、結果を表示します。  特定の問題にジャンプする 特定のレッスンに直接ジャンプしたい場合は、以下のようにコマンドを実行します。\n1  $ mix meditate --koan=PatternMatching   これにより、PatternMatchingの問題に直接アクセスできます。\nまとめ Elixir Koansは、Elixirを学ぶためのインタラクティブで実践的な方法を提供します。このツールを使えば、Elixirの基本から応用まで、自分のペースで学ぶことができます。Elixirの旅を始めるために、今すぐElixir Koansを試してみてください。\n参考リンク  elixirkoans/elixir-koans: Elixir learning exercises  ","description":"Elixir Koansを使ってElixirの問題を解く方法を紹介します。","id":110,"section":"tech","tags":["Elixir"],"title":"【Elixir】Elixir KoansでElixirを学ぼう","uri":"https://c-a-p-engineer.github.io/tech/2023/11/06/elixir-koans/"},{"content":"GitHub Actionsを使用してPHP Webサーバーを起動する方法 GitHub Actionsを使用してPHP Webサーバーを起動し、その動作を確認する方法について説明します。\nワークフローファイルの設定 GitHub の Git リポジトリに.github/workflows/php-server.yml を作成してGitHub Actionsを設定します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  name:PHP Server Workflowon:[push]jobs:build:runs-on:ubuntu-latest# リポジトリをチェックアウトsteps:- name:Checkoutuses:actions/checkout@v3# PHP組み込みのWebサーバーをバックグラウンドで起動 起動するまで少し待つ- name:Start PHP serverrun:|php -S localhost:8000 \u0026amp; sleep 5# localhostの8000ポートに対してHTTPリクエストを送信し、レスポンスを確認- name:Check serverrun:|curl http://localhost:8000  サーバーが起動していれば、デフォルトのPHPページまたはプロジェクトに設定されたルートページの内容を出力します。\nこれらの設定をGitHubリポジトリにプッシュすると、GitHub Actionsがトリガーされ、自動的にPHP Webサーバーが起動します。GitHubのActionsタブでワークフローの実行状況を確認できます。\nまとめ GitHub Actionsを使用してPHP Webサーバーを起動する基本的な設定は完了です。この設定をカスタマイズして、PHPアプリケーションの自動テストやデプロイメントなど、さまざまなCI/CDタスクに応用ができます。\n","description":"GitHub Actionsを使用してPHP Webサーバーを起動し、その動作を確認する方法について説明します。","id":111,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actionsを使用してPHP Webサーバーを起動する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/11/03/github-actions-php-server/"},{"content":"【GitHub】GitHub Actions での作業ディレクトリの指定方法 GitHub Actionsを使用する際にコマンドのなどの関係で指定のディレクトリで作業をさせたい時があります。\nそんな時、ワークフローの各ステップでコマンドを実行するディレクトリを設定することが可能です。デフォルトのディレクトリ指定とステップごとのディレクトリ指定の2種類の方法を紹介します。\nステップごとのディレクトリ指定 各ステップで異なるディレクトリを指定する方法は、ステップの独自の作業環境を設定する際に役立ちます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  name:Step Specific Directory Workflowon:[push]jobs:build:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v3# リポジトリをチェックアウトする- name:Install dependencies in backendworking-directory:./backend# バックエンドディレクトリで依存関係をインストールrun:npm install- name:Build frontendworking-directory:./frontend# フロントエンドディレクトリでビルドを実行run:npm run build  ジョブ全体でのデフォルトディレクトリ指定 ジョブ内のすべてのステップに対してデフォルトの作業ディレクトリを設定する方法です。これにより、すべてのステップが同一のディレクトリ内で実行されます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  name:Default Directory Workflowon:[push]jobs:build:runs-on:ubuntu-latestdefaults:run:working-directory:./path/to/directory# デフォルトの作業ディレクトリを設定steps:- uses:actions/checkout@v3# リポジトリをチェックアウトする- name:Run a script# デフォルトディレクトリでスクリプトを実行run:|echo \u0026#34;Running in the default directory\u0026#34; ls -l  まとめ 適切な作業ディレクトリの指定は、ワークフローの整理と効率化に不可欠です。ステップごとの指定は柔軟性が高く、デフォルトの指定は設定の簡素化に役立ちます。プロジェクトの要件に応じて適切な方法を選択しましょう。\n参考リンク  jobs.job_id.steps[*].working-directory defaults.run  ","description":"GitHub Actionsを使用する際にコマンドのなどの関係で指定のディレクトリで作業をさせたい時があります。","id":112,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions での作業ディレクトリの指定方法","uri":"https://c-a-p-engineer.github.io/tech/2023/11/03/github-actions-working-directory/"},{"content":"【Node】PDFに表紙ページを追加して画像を貼り付ける 技術同人としてPDFを作ったのですが表紙用の画像うまく貼り付けることができなかったので自作してみました。\n今回はJavaScriptとPDF-Libライブラリを使用して、画像をPDFの新しいページの中央に配置する簡単なステップを紹介します。\n必要なツール   Node.js 18\n  pdf-lib パッケージ\n  fs モジュール\n  path モジュール\n  npm install 必要なパッケージをインストールします。\n1  npm install pdf-lib   サンプルコード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  const { PDFDocument } = require(\u0026#39;pdf-lib\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); const path = require(\u0026#39;path\u0026#39;); async function addImageToPDF() { // 既存のPDFファイルを読み込む  const pdfPath = path.join(__dirname, \u0026#39;./target.pdf\u0026#39;); const pdfBytes = fs.readFileSync(pdfPath); const pdfDoc = await PDFDocument.load(pdfBytes); // 表紙用の画像ファイルを読み込む  const imagePath = path.join(__dirname, \u0026#39;./sample.png\u0026#39;); const imageBytes = fs.readFileSync(imagePath); const image = await pdfDoc.embedPng(imageBytes); // 既存のPDFのページサイズを取得  const existingPage = pdfDoc.getPages()[0]; const { width: pdfWidth, height: pdfHeight } = existingPage.getSize(); // 新しいページを先頭に追加  const newPage = pdfDoc.insertPage(0, [pdfWidth, pdfHeight]); // 画像のサイズを取得  const imgWidth = image.width; const imgHeight = image.height; // 画像とページのアスペクト比を比較して、リサイズするスケールを計算  const scaleWidth = pdfWidth / imgWidth; const scaleHeight = pdfHeight / imgHeight; const scale = Math.min(scaleWidth, scaleHeight); const newImgWidth = imgWidth * scale; const newImgHeight = imgHeight * scale; // 画像がページの中央に配置されるように座標を計算  const x = (pdfWidth - newImgWidth) / 2; const y = (pdfHeight - newImgHeight) / 2; // 画像を新しいページに挿入  newPage.drawImage(image, { x: x, y: y, width: newImgWidth, height: newImgHeight }); // PDFを保存  const pdfBytesModified = await pdfDoc.save(); fs.writeFileSync(pdfPath, pdfBytesModified); } addImageToPDF().catch(console.error);   コードのポイント  insertPage() メソッドは、新しいページをPDFに挿入するのに使います。 画像を中央に配置するには、ページサイズと画像サイズのアスペクト比を考慮し、適切なx、y座標を計算します。 drawImage() メソッドは、計算された座標に画像を配置します。  まとめ この方法を使えば、プログラミングの知識がある方なら簡単にPDFへの画像の中央配置が可能です。\nレポート作成や電子出版に役立ててください。\n","description":"技術同人としてPDFを作ったのですが表紙用の画像うまく貼り付けることができなかったので自作してみました。","id":113,"section":"tech","tags":["Node.js"],"title":"【Node】PDFに表紙ページを追加して画像を貼り付ける","uri":"https://c-a-p-engineer.github.io/tech/2023/11/03/nodejs-addpage-cover/"},{"content":"【Elixir】EctoクエリをSQLにして取得する方法 ElixirでEctoを使用している際に、EctoクエリからSQLを取得する方法メモ。\nこのテクニックはデバッグやパフォーマンスチューニングに非常に役立ちます。\nサンプルコード 簡単なサンプルコードです。\n必要であれば関数化してデバッグに役立ててください。\n1 2 3 4 5 6 7 8 9  # Ectoクエリ query = from u in \u0026#34;users\u0026#34;, where: u.id == 1 # EctoクエリからSQLとパラメータを取得 {sql, params} = Ecto.Adapters.SQL.to_sql(:all, MyApp.Repo, query) # SQL出力 IO.puts(\u0026#34;SQL: #{sql}\u0026#34;) # パラメータを出力 IO.puts(\u0026#34;Params: #{Enum.join(params, \u0026#34;, \u0026#34;)}\u0026#34;)   まとめ この方法を使用すると、ElixirとEctoで実行された最後のSQLクエリを簡単に取得できます。\nこれはデバッグやパフォーマンスの最適化に非常に役立つテクニックです。\nEcto\n","description":"ElixirでEctoを使用している際に、EctoクエリからSQLを取得する方法メモ。","id":114,"section":"tech","tags":["Elixir"],"title":"【Elixir】EctoクエリをSQLにして取得する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/09/28/elixir-ecto-to_sql/"},{"content":"【Elixir】Ectoのプライマリーキーについて 今回はEctoでプライマリーキーを扱うさまざまな方法についてのまとめです。\n デフォルトのプライマリーキー カスタムプライマリーキー プライマリーキーなし 複合プライマリーキー  デフォルトのプライマリーキー デフォルトでは、Ectoは各スキーマに：idフィールドをプライマリーキーとして作成します。これは自動インクリメントの整数です。\n1 2 3 4 5 6 7  defmodule MyApp.User do use Ecto.Schema # デフォルトでは、:idが自動的にプライマリーキーとして追加されます schema \u0026#34;users\u0026#34; do field :name, :string end end   カスタムプライマリーキー @primary_key 属性を使用してカスタムプライマリーキーを指定できます。\n1 2 3 4 5 6 7 8  defmodule MyApp.User do use Ecto.Schema # :uuidが自動生成され、プライマリーキーとして使用されます @primary_key {:uuid, :binary_id, autogenerate: true} schema \u0026#34;users\u0026#34; do field :name, :string end end   プライマリーキーなし 場合によっては、プライマリーキーがまったく不要な場合もあります。@primary_key falseを使用して無効にできます。\n1 2 3 4 5 6 7 8  defmodule MyApp.Log do use Ecto.Schema # プライマリーキーは設定されません @primary_key false schema \u0026#34;logs\u0026#34; do field :message, :string end end   複合プライマリーキー Ectoは複合プライマリーキーもサポートしています。複数のフィールドをプライマリーキーとして指定できます。\n1 2 3 4 5 6 7 8 9 10  defmodule MyApp.OrderItem do use Ecto.Schema # order_idとproduct_idが複合プライマリーキーとして設定されます @primary_key false schema \u0026#34;order_items\u0026#34; do field :order_id, :integer, primary_key: true field :product_id, :integer, primary_key: true field :quantity, :integer end end   備考  キーの自動生成: Ectoは、整数だけでなくUUIDのキーも自動生成できます。 外部キー: スキーマ間の関係を定義する際、参照先のスキーマのプライマリーキーでなくてもよい外部キーを指定できます。  公式ドキュメントによると、@primary_keyと@foreign_key_typeもスキーマ内で設定でき、これによりデフォルトのプライマリーキーと外部キーの型を変更できます。\nEcto.Schema\n","description":"今回はEctoでプライマリーキーを扱うさまざまな方法についてのまとめです。","id":115,"section":"tech","tags":["Elixir"],"title":"【Elixir】Ectoのプライマリーキーについて","uri":"https://c-a-p-engineer.github.io/tech/2023/09/28/elixir-ecto-primary-key/"},{"content":"【Elixir】Ecto で色々な関係の設定 Elixir の Ecto で色々な関連設定について詳しく解説します。\nhas_one, has_many, belongs_to, throughオプションに焦点を当てます。\nその他のオプションについても以下のページで確認できますのでご参考にどうぞ\nEcto.Schema\n基本的な has_oneの使い方 has_one/3\n1 2 3 4 5 6 7  defmodule Post do use Ecto.Schema schema \u0026#34;posts\u0026#34; do has_one :permalink, Permalink end end   カラム名  外部キーはPermalinkテーブルに作成されます。 カラム名はpost_idとなります。  カラム名のカスタマイズ foreign_key を指定することで自分のテーブルのカラム名を指定できます。\n1  has_one :permalink, Permalink, foreign_key: :custom_post_id   相手先のIDの指定 references を指定することで自分のテーブルのカラム名を指定できます。\n1  has_one :permalink, Permalink, references: :custom_id, foreign_key: :post_id   where オプションの使用 where を has_one する際に条件が付与されます。\n1  has_one :active_permalink, Permalink, where: [deleted_at: nil]   where は他の関連でも使用可能 このwhereオプションはhas_oneだけでなく、has_manyやbelongs_toなど、他の関連でも使用できます。\nthrough オプションの使用 has_many/has_one :through \n1  has_many :comments_authors, through: [:comments, :author]   この設定では、PostがCommentを経由してAuthorに関連していると定義されます。\nhas_many と belongs_to の違い has_many has_many/3\n 一対多（One-to-Many）の関連を表現。 親テーブルが子テーブルに対して複数のレコードを持つ。 親テーブル側で定義。  1 2 3 4  # Postモデル schema \u0026#34;posts\u0026#34; do has_many :comments, Comment end   belongs_to belongs_to/3\n 多対一（Many-to-One）の関連を表現。 子テーブルが親テーブルに対して1つのレコードを持つ。 子テーブル側で定義。  1 2 3 4  # Commentモデル schema \u0026#34;comments\u0026#34; do belongs_to :post, Post end   共通点と相違点  共通点: 両者は一対多の関連を形成するため、一緒に使われる。 相違点: has_manyは\u0026quot;一対多\u0026quot;の\u0026quot;一\u0026quot;側で使われ、belongs_toは\u0026quot;多\u0026quot;側で使われる。  まとめ  has_oneで基本的な一対一の関連を設定。 foreign_key:で外部キーのカラム名をカスタマイズ。 references:で相手先の特定のIDカラムを参照。 whereオプションで関連を条件付きで制御。 throughオプションで中間テーブルを経由した関連を設定。 has_manyとbelongs_toの違いと使い方。  Ectoは非常に柔軟な設定が可能で、これらのオプションを駆使することで、さまざまな要件に対応できます。\n","description":"Ecto の `preload` 機能に焦点を当て、その使い方を色々と解説します。","id":116,"section":"tech","tags":["Elixir"],"title":"【Elixir】Ecto で色々な関係の設定","uri":"https://c-a-p-engineer.github.io/tech/2023/09/23/elixir-ecto-relationship/"},{"content":"【Elixir】Ecto で Preload の色々 Ecto の preload 機能に焦点を当て、その使い方を色々と解説します。\npreload/3\n単一の関連付けを Preload もっとも基本的な使い方です。ユーザーとそのプロフィールを一緒に取得する例を見てみましょう。\n1 2 3  # 単一の関連付けを preload する query = from u in User, preload: [:profile] users = Repo.all(query)   このコードは、User テーブルからすべてのユーザーを取得し、それぞれの profile も一緒に取得します。\n複数の関連付けを Preload 複数の関連付けも一度に取得できます。たとえば、ユーザーとそのプロフィール、投稿を一緒に取得する場合：\n1 2 3  # 複数の関連付けを preload する query = from u in User, preload: [:profile, :posts] users = Repo.all(query)   ネストされた関連付けを Preload 関連付けがネストしている場合も、一度のクエリで取得できます。\n1 2 3  # ネストされた関連付けを preload する query = from u in User, preload: [posts: :comments] users = Repo.all(query)   この例では、ユーザーの投稿と、その投稿に対するコメントを一緒に取得します。\n動的な Preload 条件に応じて動的に preload を行いたい場合もあります。\n1 2 3 4  # 条件に応じて動的に preload する dynamic_preload = if some_condition, do: [:profile], else: [] query = from u in User, preload: ^dynamic_preload users = Repo.all(query)   Repo.preload/2 を使用する すでにに取得したデータに対して後から preload することも可能です。\n1 2 3  # 既に取得したデータに対して後から preload する users = Repo.all(User) users = Repo.preload(users, [:profile, :posts])   カスタムクエリで Preload 特定の条件にマッチする関連付けだけを preload したい場合は、カスタムクエリを使用できます。\n1 2 3 4  # カスタムクエリを使用して preload する custom_query = from p in Post, where: p.published == true query = from u in User, preload: [posts: ^custom_query] users = Repo.all(query)   この例では、公開されている Post のみを preload しています。\nまとめ Ecto の preload 機能は非常に強力で、多くのケースでデータベースの効率的な操作が可能です。\nこの記事で紹介したテクニックをマスターすれば、Ecto を更に効果的に使えるようになるでしょう。\n以上、Elixir の Ecto での preload の使い方についてでした。是非とも実践に活かしてください。\n","description":"Ecto の `preload` 機能に焦点を当て、その使い方を色々と解説します。","id":117,"section":"tech","tags":["Elixir"],"title":"【Elixir】Ecto で Preload の色々","uri":"https://c-a-p-engineer.github.io/tech/2023/09/23/elixir-ecto-preload/"},{"content":"【CSS】文字数を超えた際に「･･･」を表示する方法 CSSを使ってテキストが一定の文字数や行数を超えた場合に「･･･」（省略記号）を表示する方法はいくつかあります。\nこの記事では、その主な方法を解説します。\ntext-overflow プロパティ この方法は一行のテキストに対して適用されます。\nコード例 1 2 3 4 5 6 7  /* text-overflowを使用する例 */ .ellipsis { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 200px; /* 任意の幅 */ }   使い方 HTML要素に ellipsis クラスを適用します。\n1  \u0026lt;div class=\u0026#34;ellipsis\u0026#34;\u0026gt;このテキストは一定の幅を超えると省略されます。\u0026lt;/div\u0026gt;    .ellipsis { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 200px; /* 任意の幅 */ }  このテキストは一定の幅を超えると省略されます。 line-clamp プロパティ この方法は複数行のテキストに対して適用されます。ただし、WebKitベースのブラウザ（Chrome, Safari）でのみ動作します。\nコード例 1 2 3 4 5 6 7  /* line-clampを使用する例 */ .line-clamp { display: -webkit-box; -webkit-line-clamp: 2; /* 2行まで表示 */ -webkit-box-orient: vertical; overflow: hidden; }   使い方 HTML要素に line-clamp クラスを適用します。\n1  \u0026lt;div class=\u0026#34;line-clamp\u0026#34;\u0026gt;このテキストは\u0026lt;br\u0026gt;一定の幅を超えると\u0026lt;br\u0026gt;省略されます。\u0026lt;/div\u0026gt;    .line-clamp { display: -webkit-box; -webkit-line-clamp: 2; /* 2行まで表示 */ -webkit-box-orient: vertical; overflow: hidden; }  このテキストは\n一定の行を超えると\n省略されます。 注意点  text-overflow は一行のテキストにしか適用できません。 画面上では表示されませんが、HTML上に出力されてはいるので隠したい情報があるなら先にプログラミングで出力文字数を制限してください。  以上が、CSSで文字数を超えた際に「･･･」を表示する主な方法です。適切な方法を選んで、テキストの表示を制御しましょう。\n","description":"CSSを使ってテキストが一定の文字数や行数を超えた場合に「･･･」（省略記号）を表示する方法はいくつかあります。","id":118,"section":"tech","tags":["CSS"],"title":"【CSS】文字数を超えた際に「･･･」を表示する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/09/21/css-truncate-text/"},{"content":"【Elixir】 PhoenixでバックグラウンドでルーティングのURLを取得する方法 ElixirのPhoenixフレームワークでWebアプリケーションを開発する際、バックグラウンドでルーティングのURLを取得するケースがあります。\nconnを使うパターンと使わないパターンについて説明します。\n connはPhoenixのコネクション構造体で、リクエストのコンテキストを提供します。  conn を使うパターン コントローラーなどで行うパターンです。\n ルーターモジュールのエイリアス  1  alias MyAppWeb.Router.Helpers, as: Routes   URLの生成  1 2 3 4 5  # パスの取得 path = Routes.route_path(conn, :show, id) # URLの取得 url = Routes.route_url(conn, :show, id)   conn を使わないパターン こちらはバッチ処理などセッションがない際に有用なパターンです。\n ルーターモジュールのエイリアス  1  alias MyAppWeb.Router.Helpers, as: Routes   URLの生成  1 2 3 4 5  # パスの取得 path = Routes.route_path(MyAppWeb.Endpoint, :show, id) # URLの取得 url = Routes.route_url(MyAppWeb.Endpoint, :show, id)   まとめ Phoenixフレームワークでは、connを使わなくても、簡単にルーティングのURLを生成ができます。\n","description":"ElixirのPhoenixフレームワークでWebアプリケーションを開発する際、バックグラウンドでルーティングのURLを取得するケースがあります。","id":119,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】 PhoenixでバックグラウンドでルーティングのURLを取得する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/09/15/elixir-backend-routing/"},{"content":"【CSS】5段階評価の星評価で細かな表示を行う方法 星の評価システムで3.5など中途半端な値に簡単に対応する方法。\n評価する時は5段階ですが平均値などを出すと3.5など中途半端な値になるので、その際の星の表示方法です。\nコード HTML 1 2  \u0026lt;!-- % の箇所は塗りのパーセンテージを入れる --\u0026gt; \u0026lt;div class=\u0026#34;stars\u0026#34; style=\u0026#34;--percent: 10%;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;   CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  /* 変数設定 */ :root { --star-size: 60px; --star-color: #fff; --star-background: #fc0; } /* 星評価のスタイル */ .stars { display: inline-block; font-size: var(--star-size); font-family: Times; line-height: 1; } .stars::before { content: \u0026#39;★★★★★\u0026#39;; letter-spacing: 3px; background: linear-gradient(90deg, var(--star-background) var(--percent), var(--star-color) var(--percent)); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }   サンプル 実行サンプルが以下になります。\n 星0  星2.5  星3.4  星5    /* 変数設定 */ :root { --star-size: 60px; --star-color: #fff; --star-background: #fc0; } /* 星評価のスタイル */ .stars { display: inline-block; font-size: var(--star-size); font-family: Times; line-height: 1; } .stars::before { content: '★★★★★'; letter-spacing: 3px; background: linear-gradient(90deg, var(--star-background) var(--percent), var(--star-color) var(--percent)); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }   ","description":"星の評価システムで3.5など中途半端な値に簡単に対応する方法","id":120,"section":"tech","tags":["CSS"],"title":"【CSS】5段階評価の星評価で細かな表示を行う方法","uri":"https://c-a-p-engineer.github.io/tech/2023/09/15/css-star/"},{"content":"【Elixir】Ecto.Repoを拡張してSoft Deleteされていないレコードだけを取得する方法 ElixirのEcto.Repoを拡張して、Soft Delete（deleted_at is nil）されていないレコードだけを効率的に取得する方法について解説します。\nはじめに Soft Deleteはデータベースのレコードを物理的には削除せず、deleted_atフィールドにタイムスタンプを設定することで削除されたとみなします。\nこの記事では、Ecto.Repoにカスタム関数を追加することで、このようなレコードを簡単に取得する方法を紹介します。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  方法1: モジュール拡張で関数を追加 Ecto.Repoを使用するモジュールに直接カスタム関数を追加します。\n1 2 3 4 5 6 7 8 9 10 11 12  defmodule MyApp.Repo do use Ecto.Repo, otp_app: :my_app import Ecto.Query # Ecto.Queryをインポート # Soft Deleteされていないレコードを取得するカスタム関数 def get_active(queryable) do # deleted_atがnilのレコードだけをフィルタ query = from q in queryable, where: is_nil(q.deleted_at) # クエリを実行 all(query) end end   使用例 1 2  # MyApp.ItemからSoft Deleteされていないレコードを取得 active_items = MyApp.Repo.get_active(MyApp.Item)   方法2: デリゲーションで関数を追加 別のモジュールで関数を定義し、Repoモジュールでデリゲートします。\nデリゲーションとは？ デリゲーション（委譲）とは、あるモジュールの関数を別のモジュールで利用できるようにするプログラミングテクニックです。Elixirでは、defdelegateマクロを使用して簡単にデリゲーションを実装できます。\nこのテクニックは、コードの再利用性を高めるだけでなく、モジュールの責任を明確に分けるのにも役立ちます。\n defdelegate(funs, opts)  デリゲーション元の関数を作成します。\n1 2 3 4 5 6 7 8 9 10 11  defmodule MyApp.CustomRepoFunctions do import Ecto.Query # Ecto.Queryをインポート # Soft Deleteされていないレコードを取得するカスタム関数 def get_active(queryable) do # deleted_atがnilのレコードだけをフィルタ query = from q in queryable, where: is_nil(q.deleted_at) # クエリを実行 MyApp.Repo.all(query) end end   デリゲートします。\n1 2 3 4 5 6  defmodule MyApp.Repo do use Ecto.Repo, otp_app: :my_app # MyApp.CustomRepoFunctionsの関数をデリゲート defdelegate get_active(queryable), to: MyApp.CustomRepoFunctions end   使用例 1 2  # MyApp.ItemからSoft Deleteされていないレコードを取得 active_items = MyApp.Repo.get_active(MyApp.Item)   方法3 モジュールの使用 一応モジュールが用意されているようなのでモジュールを入れたら可能なようです。\necto_soft_delete\nまとめ ElixirとEctoを使用して、deleted_at is nilのレコードだけを効率的に取得する方法はいくつかあります。\nシステムの方針に合わせて拡張性やメンテナンス性を考えて実装をしてください。\n","description":"Elixirの`Ecto.Repo`を拡張して、Soft Delete（`deleted_at is nil`）されていないレコードだけを効率的に取得する方法について解説します。","id":121,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Ecto.Repoを拡張してSoft Deleteされていないレコードだけを取得する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/09/14/elixir-repo-exstend/"},{"content":"【Elixir】Phoenix 独自に定義したイベントを実行する方法 Elixir Phoenix でサーバーから特定の要素のイベントを実行する方法のメモ。\npush_event と組み合わせて特定の要素に設定されたイベントを実行します。\nPhoenix.LiveView.html#push_event/3\nたとえばダイアログを出して入力後にダイアログを閉じたいとかの時に使用できます。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  テンプレート まずは簡単にテンプレート側を書いてみます。\n1 2 3 4 5  \u0026lt;button id=\u0026#34;show\u0026#34; phx-click={JS.show(to: \u0026#34;#sample\u0026#34;)} type=\u0026#34;button\u0026#34;\u0026gt;表示\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;hidden\u0026#34; phx-click={JS.hide(to: \u0026#34;#sample\u0026#34;)} type=\u0026#34;button\u0026#34;\u0026gt;非表示\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;sample\u0026#34;\u0026gt; \u0026lt;button phx-click=\u0026#34;event\u0026#34; type=\u0026#34;button\u0026#34;\u0026gt;非表示\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;   イベントハンドラー liveview側を書きます。\nイベントハンドラーの実行部分だけになります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  @impl true def handle_event(\u0026#34;event\u0026#34;, _params, socket) do { :noreply, socket |\u0026gt; put_flash(:info, \u0026#34;閉じる！\u0026#34;) |\u0026gt; push_event(\u0026#34;js-exec\u0026#34;, %{ # イベントを実行する対象（クエリセレクタ） to: \u0026#34;#hidden\u0026#34;, # イベントを実行する要素名 attr: \u0026#34;phx-click\u0026#34; }) } end   JavaScriptにイベントを追加 app.js に以下のイベントリスナーを追加。\n1 2 3 4 5 6 7 8  // 特定のイベントを実行する window.addEventListener(\u0026#34;phx:js-exec\u0026#34;, ({detail}) =\u0026gt; { // クエリセレクター  document.querySelectorAll(detail.to).forEach(el =\u0026gt; { // 要素のイベントを実行  liveSocket.execJS(el, el.getAttribute(detail.attr)) }) })   参考  Handling server-pushed events Triggering JS from the server in LiveView: showing a spinner  ","description":"Elixir Phoenix でサーバーから特定の要素のイベントを実行する方法のメモ","id":122,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】サーバーから特定要素のイベントを実行する","uri":"https://c-a-p-engineer.github.io/tech/2023/09/11/elixir-liveview-js-exec/"},{"content":"【Elixir】Phoenix 独自に定義したJavaScriptを実行する方法 Elixir Phoenixで独自に定義したJavaScriptを実行する方法メモ。\nなぜか僕の環境ではちょっと面倒だったのでメモしました。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  JavaScriptの定義 まずは適当にJavaScriptの関数を定義します。\n1 2 3 4 5  // モーダル表示する関数 window.addEventListener(\u0026#34;custom:test\u0026#34;, (event) =\u0026gt; { console.log(\u0026#34;custom:test\u0026#34;) console.log(event.detail) })   app.js に上記のファイルを import します。\n1 2  // 以下を追加 import \u0026#34;./custom.js\u0026#34;   画面側 テンプレートファイルにテスト用ボタンを追加します。\n1 2 3 4 5  \u0026lt;button type=\u0026#34;button\u0026#34; phx-click={JS.dispatch(\u0026#34;custom:test\u0026#34;, [ detail: %{hoge: \u0026#34;fuga\u0026#34;} ] )}\u0026gt; テストボタン \u0026lt;/button\u0026gt;   JavaScriptの実行は Phoenix.LiveView.JS の dispatch を使用します。\nPhoenix.LiveView.JS\n実行 実行してボタンをクリックすると下記の用に実行されます。\nevent.detail で渡された変数が使用できます。\n1 2 3 4 5  custom:test { hoge: \u0026#39;fuga\u0026#39;, dispatcher: button }   参考  Custom JS events with JS.dispatch/1 and window.addEventListener  ","description":"Elixir Phoenixで独自に定義したJavaScriptを実行する方法メモ。","id":123,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix 独自に定義したJavaScriptを実行する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/09/08/elixir-liveview-closing_attribute/"},{"content":"Elixir PhoenixでのHTMLエラー「expected closing \u0026quot; for attribute value」の解決方法 Elixir Phoenix のテンプレートエラー「expected closing \u0026quot; for attribute value」が出てしまった時の解決方法。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  エラーコード Elixir PhoenixフレームワークでWebアプリケーションを開発している際、以下のようなHTMLテンプレートコードでエラーが発生する時があります。\n1  \u0026lt;div style=\u0026#34;\u0026lt;%= \u0026#34;color:red\u0026#34; %\u0026gt;\u0026#34;\u0026gt;TEST\u0026lt;/div\u0026gt;   以下のようなエラーコードが発生します。\nexpected closing \u0026quot; for attribute value\nエラーの原因 \u0026lt;%= hoge %\u0026gt; をダブルクォーテーションで囲うと正しく補完が働かなくてHTMLが壊れる模様です。\nUse of phx-value-ref - Phoenix Forum / Questions / Help - Elixir Programming Language Forum\n対処方法 対処方法は2つ\n{}を使う Elixir コードは \u0026lt;% %\u0026gt; 以外に {} でも使用することが可能です。\nまたブロック {} の中で変数を {#{hoge}} のようにすると変数が使用可能になります。\n1 2 3 4  \u0026lt;div style={\u0026#34;color:red\u0026#34;}\u0026gt;TEST\u0026lt;/div\u0026gt; \u0026lt;% color = \u0026#34;red\u0026#34; %\u0026gt; \u0026lt;div style={\u0026#34;color:#{color}\u0026#34;}\u0026gt;TEST\u0026lt;/div\u0026gt;   式を変数に格納する 事前にElixirの式の結果を変数に格納し、その変数を使用します。\n対応している方はキーワードリスト、またはマップです。\n1 2 3 4 5  \u0026lt;% attributes = [style: \u0026#34;color:red\u0026#34;] %\u0026gt; \u0026lt;div {attributes}\u0026gt;Kyeword List\u0026lt;/div\u0026gt; \u0026lt;% attributes = %{style: \u0026#34;color:red\u0026#34;} %\u0026gt; \u0026lt;div {attributes}\u0026gt;Map\u0026lt;/div\u0026gt;   ","description":"Elixir Phoenix のテンプレートエラー「expected closing `\"` for attribute value」が出てしまった時の解決方法。","id":124,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix のテンプレートエラー「expected closing `\"` for attribute value」の解決方法","uri":"https://c-a-p-engineer.github.io/tech/2023/09/01/elixir-liveview-closing_attribute/"},{"content":"【Elixir】LiveView の render が発火しない時の対処方法 Elixir LiveView の render が発火しないという現象が発生してちょっと泣きを見たのでメモ。\nrender で使用するテンプレートの切り替えを行っていたのですが発火してくれなくて画面が更新されなくて数時間奮闘するハメに…\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  render のイベント発火タイミング ここに記載があります。\nPhoniex LiveView#Life-cycle\n 初期ロード: mount/2 関数が呼ばれた後、最初のHTMLが生成される。 assigns 変更: assigns のデータが変更された場合。 handle_event/3: イベントハンドラが呼ばれた後。 send_update/2: 明示的に更新を要求する場合。  今回、僕がハマったのは assigns を変更したのにイベントが発火しませんでした。\n問題のコード 問題が発生したのは下記のコードです。\n下記のコードは assigns の中の :id のデータを消すためのコードです。\n1 2 3 4 5 6 7  @impl true def handle_event(\u0026#34;delete\u0026#34;, _params, socket) do { :noreply, %{socket | assigns: Map.delete(socket.assigns, :id)} } end   原因 assigns のデータの削除だけでは render が発火しない模様です。\n更新や登録では発火するのを確認しました。\n対処方法 対処方法自体は簡単です。\n適当なダミーデータを入れることより render の強制発火ができます。\nこれにより画面の更新が行われます。\n @impl true def handle_event(\u0026quot;delete\u0026quot;, _params, socket) do # 適当なダミーデータを入れて強制的に `render` を発火させる socket = socket.assign(socket, :dummy, System.system_time(:millisecond))} { :noreply, %{socket | assigns: Map.delete(socket.assigns, :id)} } end ","description":"Elixir LiveView の render が発火しないという現象が発生してちょっと泣きを見たのでメモ","id":125,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】LiveView の render が発火しない時の対処方法","uri":"https://c-a-p-engineer.github.io/tech/2023/08/31/elixir-liveview-no-render/"},{"content":"【CSS】よくある星による評価システム 今回はよくある星による評価システムを作成する方法です。\nなぜ星5段階評価システムが必要か？ UI/UXの向上: 星評価は直感的で使いやすい。\nわかりやすさ: 評価が視覚的に表示されるため、わかりやすい。\n手間を省く: 細かなレビューより星による評価だけだとユーザーからのフィードバックを得やすい。\nコード HTML 1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;div class=\u0026#34;rate-form\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;star5\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;rate\u0026#34; value=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;star5\u0026#34;\u0026gt;★\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;star4\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;rate\u0026#34; value=\u0026#34;4\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;star4\u0026#34;\u0026gt;★\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;star3\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;rate\u0026#34; value=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;star3\u0026#34;\u0026gt;★\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;star2\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;rate\u0026#34; value=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;star2\u0026#34;\u0026gt;★\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;star1\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;rate\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;star1\u0026#34;\u0026gt;★\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt;   CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  .rate-form { display: flex; flex-direction: row-reverse; justify-content: flex-end; } .rate-form input[type=radio] { display: none; } .rate-form label { position: relative; padding: 0 5px; color: #ccc; cursor: pointer; font-size: 35px; } .rate-form label:hover { color: #ffcc00; } .rate-form label:hover ~ label { color: #ffcc00; } .rate-form input[type=radio]:checked ~ label { color: #ffcc00; }   サンプル 実行サンプルが以下になります。\n★ ★ ★ ★ ★   .rate-form { display: flex; flex-direction: row-reverse; justify-content: flex-end; } .rate-form input[type=radio] { display: none; } .rate-form label { position: relative; padding: 0 5px; color: #ccc; cursor: pointer; font-size: 35px; } .rate-form label:hover { color: #ffcc00; } .rate-form label:hover ~ label { color: #ffcc00; } .rate-form input[type=radio]:checked ~ label { color: #ffcc00; }   ","description":"今回はよくある星による評価システムを作成する方法です。","id":126,"section":"tech","tags":["CSS"],"title":"【CSS】よくある星による評価システム","uri":"https://c-a-p-engineer.github.io/tech/2023/08/30/html_star_rating/"},{"content":"【Elixir】コードの効率と可読性を高める Null合体演算子 ElixirのNull合体演算子の使い方を解説します。\nNull合体演算子 ElixirのNull合体演算子（||）は、一見すると単なる論理演算子（or）に見えます。\nこの演算子は、nilやfalseといった「偽」と評価される値に対して、デフォルト値を簡単に設定できます。\n1 2 3 4 5 6 7 8 9  # nilの場合 x = nil result_for_nil = x || 0 # result_for_nil は 0 になります # falseの場合 y = false result_for_false = y || 1 # result_for_false は 1 になります   このコードスニペットでは、xがnilである場合、result_for_nilに0が代入されます。\n同様に、yがfalseである場合、result_for_falseに1が代入されます。\nなぜNull合体演算子はコードに革命をもたらすのか？ 簡潔性と効率性 この演算子を使用することで、冗長なif-elseブロックやcase文を避け、コードを短縮できます。\n高い可読性 コードが簡潔であればあるほど、他の開発者がそのコードを理解しやすくなります。\n最後に Elixirの||演算子は、単なる論理演算子以上の機能を持っています。\nnilやfalseの値を効率的に処理し、コードの可読性を高めるこの演算子を、ぜひ積極的に活用してください。\n参考 Basic operators - Elixir\n","description":"ElixirのNull合体演算子の使い方を解説します。","id":127,"section":"tech","tags":["Elixir"],"title":"【Elixir】コードの効率と可読性を高める Null合体演算子","uri":"https://c-a-p-engineer.github.io/tech/2023/08/30/elixir_null_coalescing_operator/"},{"content":"【Elixir】Phoenix PubSub を使ってリアルタイムデータ共有の方法 Phoenix PubSubは、Elixirを使用したリアルタイムデータ共有の鍵となる機能です。\nリアルタイムに他のユーザなどにデータ共有が可能です。\nPhoenix PubSubの基本的な使用方法からサブスクライブの停止までの詳細なプロセスを紹介しています。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  PubSubの設定 Phoenix PubSubを使用するための設定をします。\nElixir Phoenix を入れると一緒に入ってると思いますが入ってない場合は以下を参考にしてください。\n依存関係の追加 最初に、mix.exs ファイルにphoenix_pubsubパッケージを追加します：\n1 2 3 4 5  defp deps do [ {:phoenix_pubsub, \u0026#34;~\u0026gt; 2.0\u0026#34;} ] end   アプリケーションの設定 次に、config/config.exsにてPubSubの設定を行います。\nAdapterを設定する場合にこちらを使用してください。\n通常通りに使用するのであればこちら不要です。\n1 2 3  config :my_app, MyApp.PubSub, adapter: Phoenix.PubSub.PG2, name: MyApp.PubSub   アプリケーションの起動時の設定 MyApp.ApplicationにPubSubを監視するように設定します。\n1 2 3 4 5 6 7 8  def start(_type, _args) do children = [ {Phoenix.PubSub, name: MyApp.PubSub} ] opts = [strategy: :one_for_one, name: MyApp.Supervisor] Supervisor.start_link(children, opts) end   メッセージの受信 LiveViewでメッセージを受信するために、以下のようにサブスクライブを開始します。\n1 2 3 4 5 6 7  def mount(_params, _session, socket) do if connected?(socket) do Phoenix.PubSub.subscribe(MyApp.PubSub, \u0026#34;my_topic\u0026#34;) end {:ok, socket} end   受け取るメッセージのハンドラーは以下のようになります。\n1 2 3 4  def handle_info({:my_message, payload}, socket) do IO.inspect(\u0026#34;Received message: #{payload}\u0026#34;) {:noreply, socket} end   メッセージの送信 以下のようにメッセージをPubSubで送信できます。\n1  Phoenix.PubSub.broadcast(MyApp.PubSub, \u0026#34;my_topic\u0026#34;, {:my_message, \u0026#34;Hello, World!\u0026#34;})   サブスクライブの停止 PubSubからのサブスクライブを途中で停止する場合は、以下のコードを使用します。\n1  Phoenix.PubSub.unsubscribe(PubSub, \u0026#34;my_topic\u0026#34;)   まとめ Phoenix PubSubは、Elixirにおけるリアルタイムデータ共有に強力なツールです。\nこれでリアルタイムの通信を実現できます。\n","description":"Phoenix PubSubは、Elixirを使用したリアルタイムデータ共有の鍵となる機能です。","id":128,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix PubSub を使ってリアルタイムデータ共有の方法","uri":"https://c-a-p-engineer.github.io/tech/2023/08/22/elixir_pubsub/"},{"content":"画像のブレンド・創造できるAIツール Artbreeder Artbreederは、AIを活用して画像をブレンド・創造する画期的なツールです。\n10Mのユーザーと250Mの画像を誇り、多岐にわたる機能を提供しています。\nArtbreeder\n機能  Mixer: 画像とテキストを組み合わせて創造  Magically blend together images with Mixer\na new tool from Artbreeder! 🪄🎉\nTry it now with any image ⬇️https://t.co/oXY5rdCMEj pic.twitter.com/jmcmMiyes3\n\u0026mdash; Artbreeder (@Artbreeder) July 20, 2023  Collager: シンプルな形状、画像、テキストから画像を作成  We’re hard at work on a new way to make generative art, and are excited to share our first prototype!\nCreate any scene you can imagine with a simple collage and a prompt.\nTry it out! https://t.co/rWd5JK2ES1 pic.twitter.com/Fgw8Zk4aJ9\n\u0026mdash; Artbreeder (@Artbreeder) July 14, 2022  Splicer: 画像の遺伝子を編集してポートレートや風景などを作成   画像の年齢や性別、色などを調整します。  Choose your fighter - makeup + costume ideas by skittles_, aaguilar0971, zoey 991, and larki made with splicer by artbreeder pic.twitter.com/cetbtcfbI4\n\u0026mdash; Artbreeder (@Artbreeder) October 5, 2022  Outpainter: Artbreederの画像を拡張  5. Artbreeder outpainter: https://t.co/hyU5IuFYH0 - Generate half-body portraits based on uploaded headshots and text descriptions. pic.twitter.com/E7V9MQlWHq\n\u0026mdash; AI Bee (@beebeeye) March 6, 2023  公式Twitterでの新機能紹介 Artbreederの公式X(Twitter)アカウントでは、新しいツールの紹介がされています。\nArtbreeder - X\nまとめ Artbreederは、AIの力を借りて、誰でも画像を創造することができるプラットフォームです。画像のミックス、コラージュ作成、遺伝子編集など、多岐にわたる機能があります。\n最新のツール「Mixer」は注目で、画像を魔法のようにブレンドができます。\n","description":"Artbreederは、AIを活用して画像をブレンド・創造する画期的なツールです。","id":129,"section":"tech","tags":["AI","画像","ツール","オンラインツール"],"title":"画像をブレンド・創造するAIツール Artbreeder","uri":"https://c-a-p-engineer.github.io/tech/2023/08/18/artbreeder/"},{"content":"自動的にサイトマップを作成してくれる VisualSitemaps VisualSitemapsは、公開または非公開のウェブサイトの視覚的なサイトマップと高解像度のスクリーンショットを自動生成するサービスです。\nUI、UX、SEO、マーケティングリサーチのための詳細なサイト監査を迅速かつ容易に行うことができます。\n主な機能  100%クラウド自動化: 1000ページ以上のサイトマップを簡単に作成。 スクリーンショット注釈: ページに注釈を付け、フィードバックを共有。 サイトマップ編集: オリジナルに基づいてサイトマップを最適化。 視覚的なQAトラッキング: ウェブサイトの視覚的な変更を自動的に追跡。 パスワード保護サイトのクロール: 安全にクロール可能。 コンテンツ計画: Googleドライブとの統合でコンテンツチーム全体で計画可能。 カスタムタグ: ページを素早く整理とグループ化。  サイトマップの作り方 👀 How to generate your first sitemap\nVisualSitemapsを使用して最初のサイトマップを生成するには、以下の手順にしたがってください。\n1. サンプルテストの実行  最初に10ページのサンプルテストをクロールすることを強くオススメします。 クロール量を制限するには、「Max Pages」フィールドを使用します。  2. フルクロールの実行  ステップ1: 有効なURL（httpまたはhttps）を入力します。 ステップ2: 最大ページ数を入力します（オプション）。 ステップ3: クローラーが何レベルまで進むべきかを入力します（オプション）。 ステップ4: 重複ページを避けたい場合は、フィルターを使用します（オプション）。 ステップ5: クロールするURLを選択し、「Crawl Now」をクリックします。  3. クロールの進行状況の確認  進行中: ページがクロールされ、サイトマップが生成されています。進行状況を確認するには、「View」をクリックします。 クロール失敗: いくつかの理由で失敗することがあります。問題が発生した場合は、チャットでお知らせください。  4. プロのヒント  クロール中に、リフレッシュボタンで進行状況を確認ができます。 結果がおかしい場合は、クロールを停止し、設定を調整して再クロールができます。  価格    プラン ページ/月 最大サイトマップサイズ クロール深度 価格/月     FREE 25 25ページ 2レベル $0   MINI 1,000 500ページ 4レベル $19   FREELANCER 3,000 1,500ページ 無制限 $59   TEAM 20,000 3,000ページ 無制限 $299   AGENCY カスタム 3,000ページ 無制限 カスタム    AGENCYプランはカスタマイズ可能で、具体的な価格やページ数は個別に設定できます。\nサンプル 実際にこのブログのサイトマップを作らせてみました。\n各ページのスクリーンショットを撮影してくれています。\nまとめ VisualSitemapsは、デザイナー、開発者、マーケティング戦略家など、さまざまな専門家にとって有用なツールです。自動化されたプロセスと多岐にわたる機能により、サイトの構造を迅速に理解し、効率的に分析することが可能です。さまざまなプランが用意されており、プロジェクトの規模やニーズに合わせて選ぶことができます。\n","description":"VisualSitemapsは、公開または非公開のウェブサイトの視覚的なサイトマップと高解像度のスクリーンショットを自動生成するサービスです。","id":130,"section":"tech","tags":["AI","画像","ツール","オンラインツール"],"title":"自動的にサイトマップを作成してくれる VisualSitemaps","uri":"https://c-a-p-engineer.github.io/tech/2023/08/18/visual_sitemaps/"},{"content":"無料でAI画像生成ができる Mage Mageは、最先端のAIを使用して、誰でもが想像できるものを生成するプラットフォームです。\nベースモデルとしてSDXLを導入されています。\nSDXLはすべてのユーザーに無料で無制限に提供されています。\nMage\n使い方  アクセス: Mage にアクセスします。 モデル選択: 使用したいモデルを選択します。たとえば、最新のベースモデルSDXLなど。（無料ユーザはSDXLのみ パラメータ設定: 画像の生成に使用するパラメータやオプションを設定します。 画像生成: 「Start Creating」や「Create」ボタンをクリックして、画像の生成を開始します。 結果の確認: 生成された画像をプレビューし、必要に応じて調整を加えたり保存したりします。  料金表と機能 Mage - Membership\n無料プランはSDXLだけ使用可能です。\n無料プランとプロプランの主な特徴を比較しています。\nプロプランは、無料プランに加えて、多くの追加機能があります。\n   項目 無料プラン プロプラン     月額料金 無料 $15/月   無制限の作成 ◯ ◯   無制限のプライバシー ◯ ◯   無制限の強化 ◯ ◯   セーフティフィルターの選択 ✕ ◯   複数のアクティブセッション ✕ ◯   広告なし ✕ ◯   ステップ数の増加 ✕ ◯   90以上の微調整モデル ✕ ◯   20000以上のLoRAs ✕ ◯   2000以上のテキスト反転 ✕ ◯   Premium GPUs (A100, A10G) ✕ ◯   GIF作成 (シングルセッション) ✕ ◯    よくある質問  セーフティフィルターは有料なのか？: NSFWコンテンツの保護と適切なアクセスのため。 メンバーシップのキャンセルは簡単か？: いつでもキャンセル可能。 商用目的での画像使用は可能か？: 可能、Mageへの帰属は必須ではない。  Mageは、クリエイティブな作品を生成するための強力なプラットフォームで、無料と有料のオプションがあります。\n最新のモデルと多岐にわたる機能を提供しており、商業的な利用も奨励しています。\n","description":"Mageは、最先端のAIを使用して、誰でもが想像できるものを生成するプラットフォームです。","id":131,"section":"tech","tags":["AI","画像","ツール","オンラインツール"],"title":"無料でAI画像生成ができる Mage","uri":"https://c-a-p-engineer.github.io/tech/2023/08/14/mage/"},{"content":"簡単にウェブサイトやPDFを共有・公開ができるHostful Hostfulは、ウェブサイトやPDFを簡単に共有・公開できるプラットフォームです。\nドラッグ＆ドロップでのアップロード、無料のSSL証明書、カスタムドメインの接続など、多岐にわたる機能を提供しています。\nHostful\n使い方  アクセス: Hostful にアクセスします。 ドメインの設定: カスタムドメインを使用する場合は、プランを確認して設定します。 ファイルのアップロード: .ZIP、.HTML、または.PDFファイルをドラッグ＆ドロップします。 メールアドレスの入力: ログイン、登録してなければメールアドレスの入力をします。 デプロイ: Publish website をクリックするとアップロードされます。  特徴 Hostfulは、ウェブサイトやPDFを簡単に共有・公開できるプラットフォームです。以下の特徴があります。\n ドラッグ＆ドロップでのアップロード: .ZIP、.HTML、.PDFファイルをサポート。 無料のSSL証明書: セキュリティを重視し、すべてのウェブサイトにHTTPSを自動的に適用。 テクノロジーの広範なサポート: React、Angular、Vueなど、さまざまな技術をサポート。 カスタムドメインの接続: 自分のドメインを簡単に接続。 PDFホスティング: e-books、メニュー、フォームなどのPDF文書の共有に最適。 24/7サポート: サポートが必要な場合はいつでもメールで対応。  プランと価格 Hostful - Pricing\n   プラン名 価格(月額) アクティブウェブサイト数 アップロード容量 カスタムドメイン SSL     Free 無料 1 10 MB なし あり   Basic $6 5 150 MB あり あり   Pro $15 15 500 MB あり あり   Business $35 35 1,250 MB あり あり    よくある質問 Hostful - FAQ\n ウェブサイトの種類: 静的ウェブサイト（HTML、CSS、JavaScriptなど）をアップロード可能。CMS e-commerceはサポートしていない。 無料プランの内容: 1つのウェブサイトを無料でホスト。別のウェブサイトをアップロードする場合は、古いものを削除。 複数ウェブサイトのホスティング: プレミアムプランで複数のウェブサイトをホスト可能。 サブスクリプションのキャンセル: いつでもキャンセル可能。支払いはStripeを通じて処理。 アップグレードとダウングレード: プランの変更が容易。7日間の返金保証あり。  まとめ Hostfulは、ウェブサイトのホスティングを簡単かつ迅速に行うためのプラットフォームです。\n無料プランから始めて、必要に応じてプレミアムプランにアップグレードができます。\nセキュリティとサポートも充実しており、初心者から経験者まで幅広く利用できるサービスです。\n","description":"Hostfulは、ウェブサイトやPDFを簡単に共有・公開できるプラットフォームです。","id":132,"section":"tech","tags":["オンラインツール","ツール","ホスティング"],"title":"簡単にウェブサイトやPDFを共有・公開ができるHostful","uri":"https://c-a-p-engineer.github.io/tech/2023/08/14/hostful/"},{"content":"translate-shell を使って自動翻訳してみる translate-shellは、コマンドライン上で動作する無料の翻訳ツールです。\nGoogle Translate, Bing Translator, Yandex.Translateなど、多くのオンライン翻訳サービスと連携して、50以上の言語間での翻訳が可能です。\ntranslate-shell\nインストール 今回はDockerでの使用方法を記載します。\nUsing Docker\n以下のコマンドを実行すると翻訳Dockerのシェルが開きます。\n1  docker run -it soimort/translate-shell -shell   他のインストール方法は以下から確認してください。\nInstallation\n使用方法 translate-shellの基本的な使用方法は以下の通りです。\n上記のDockerを使用する場合は trans 不要でした。\n言語指定がない場合は基本的には以下の基準で翻訳されます。\n 翻訳エンジン: デフォルトの翻訳エンジン（通常はGoogle Translate）が使用されます。 目的言語: システムのロケールまたは英語が自動的にターゲット言語として選択されます。ターゲット言語を指定しない場合、translate-shellはユーザーのシステム設定から適切な言語を推測しようとします。  翻訳 次のコマンドを入力して翻訳します。\n1  trans \u0026#39;Hello World\u0026#39;   特定の言語への翻訳 たとえば、英語から日本語へ翻訳するには以下のようにします。\n1  trans :ja \u0026#39;Hello World\u0026#39;   特定の言語から特定の言語への翻訳 1  trans fr:ja \u0026#39;Bonjour\u0026#39;   ファイルの翻訳 input.txt の内容を日本語に翻訳する例です。\n1  trans :ja -i input.txt   ファイルへの出力: 翻訳結果を output.txt に保存する例です。\n1  trans :ja -i input.txt -o output.txt   注意点 色々調べていたらシェル化して自動翻訳を大量の自動翻訳を走らせた場合、接続制限を受ける模様です。\n1アクセスごとに5秒↑の待機時間をもった方が安全とのことです。\nまとめ このシンプルなツールによって、コマンドライン上で迅速に翻訳を行うことができます。\nさまざまなオプションを使ってカスタマイズすることも可能ですので、詳細は公式ドキュメントを参照してください。\ntranslate-shell\n","description":"translate-shellは、コマンドライン上で動作する翻訳ツールです。","id":133,"section":"tech","tags":["bash"],"title":"translate-shell を使って自動翻訳してみる","uri":"https://c-a-p-engineer.github.io/tech/2023/08/11/translate-shell/"},{"content":"【Elixir】リストの先頭と末尾のデータを取得する Elixirでリストの先頭と末尾のデータを取得する方法を解説します。\n確認環境  Elixir 1.14.2  リストの先頭データの取得 Elixirでリストの最初の要素を取得するには、List.first/1 関数や hd/1 関数を使用します。\nまず、List.first/1 関数の使用例を以下に示します。\n1 2 3  list = [1, 2, 3, 4, 5] first_element = List.first(list) IO.puts(first_element) # =\u0026gt; 1   このコードでは、List.first/1 関数を用いてリストから最初の要素を取得し、それを first_element に格納しています。その後 IO.puts/1 関数を用いて first_element の内容を出力しています。\nまた、hd/1 関数を使用することでも同様にリストの最初の要素を取得ができます。\n1 2 3  list = [1, 2, 3, 4, 5] first_element = hd(list) IO.puts(first_element) # =\u0026gt; 1   リストの末尾データの取得 次に、リストの末尾のデータを取得する方法です。Elixirでは List.last/1 関数を使用してリストの最後の要素を取得します。以下にその使用例を示します。\n1 2 3  list = [1, 2, 3, 4, 5] last_element = List.last(list) IO.puts(last_element) # =\u0026gt; 5   上記のコードでは、List.last/1 関数を用いてリストから最後の要素を取得し、それを last_element に格納しています。その後 IO.puts/1 関数を用いて last_element の内容を出力しています。\nまとめ Elixirでリストの最初と最後のデータを取得する方法は非常に簡単です。List.first/1, hd/1, および List.last/1 関数を覚えておけば、リストから必要なデータを簡単に取り出すことができます。これらの関数は、Elixirでのデータ操作の基本となるため、ぜひ覚えておきましょう。\n","description":"Elixirでリストの先頭と末尾のデータを取得する方法を解説します。","id":134,"section":"tech","tags":["Elixir"],"title":"【Elixir】リストの先頭と末尾のデータを取得する","uri":"https://c-a-p-engineer.github.io/tech/2023/08/04/elixir-list-head-tail/"},{"content":"AIを使って画像生成・編集ができる: Clipdrop.co AIを活用した画像生成や編集ができる Clipdrop.co のご紹介。\n機能は多岐にわたり、画像の生成から背景の削除、画像の拡大まで、あらゆるニーズに対応します。\nまた、Clipdrop APIを利用すれば、これらの機能を自分のアプリに統合することも可能です。\nClipdrop.coの主な機能   Stable Diffusion XL:\nAIを用いて高解像度のリアルな画像を生成します。こ自分のアイデアを具体的なビジュアルに変換ができます。\n  Uncrop:\n画像を任意のフォーマットに拡大します。自分の画像を自由にリサイズができます。\n  Reimagine XL:\nStable Diffusionを用いて画像の複数のバリエーションを作成します。1つの画像から複数の異なるビジュアルを生成ができます。\n  Stable Doodle:\n手書きをリアルな画像に変換します。\n  Cleanup:\n画像からオブジェクト、人物、テキストなどを削除します。\n  Remove Background:\n画像から主要な被写体を抽出します。\n  Relight:\n画像に美しい光を追加します。\n  Image Upscaler:\n画像を2倍または4倍に拡大します。ノイズの除去や詳細の回復も可能です。\n  Replace Background:\nAIを用いて背景を置換します。\n  Text Remover:\n画像からテキストを削除します。\n  これらの機能はすべてAIによって駆動されており、ユーザーは簡単な操作だけで高度な画像編集を行うことができます。\nまた、Clipdrop APIを利用すれば、これらの機能を自分のアプリに統合することも可能です。これにより、開発者は自分のアプリにAIを活用した画像編集機能を追加ができます。\nClipdrop.coの料金プラン Clipdrop.coは以下の3つのプランを提供しています。\n   プラン 価格 内容     Free $0/月 Stable Diffusion XL (ウォーターマーク付き、1日あたり最大400枚)\nUncrop (ウォーターマーク付き、1日あたり最大100枚)\nBackground Removal (最大1024x1024)\nCleanup Pictures (最大1024x1024)\nRelight (最大1024x1024)\nImage Upscaler x2 (最大2048x2048)\nWeb Editor (最初の10クリップ無料)\nText Remover (最大1024x1024)\nClipdrop iOS (制限あり + ウォーターマーク付き)\nClipdrop Android (制限あり + ウォーターマーク付き)   Pro $7/月 Stable Diffusion XL (1日あたり最大1500枚)\nUncrop (1日あたり最大1000枚)\nUnlimited Background Removal HD\nUnlimited Cleanup Pictures HD\nUnlimited Relight HD\nUnlimited Image Upscaler up to x16\nUnlimited Web Editor\nUnlimited Text Remover\nUnlimited Clipdrop iOS\nUnlimited Clipdrop Android\nUnlimited Replace Background   API 使用量に基づく料金 APIの詳細と料金はこちら    Clipdrop.coは、AIを活用した便利な画像生成・編集ツールと言えるでしょう。\n","description":"AIを活用した画像生成や編集ができる Clipdrop.co のご紹介。","id":135,"section":"tech","tags":["AI","画像","ツール","オンラインツール"],"title":"AIを使って画像生成・編集ができる: Clipdrop.co","uri":"https://c-a-p-engineer.github.io/tech/2023/08/02/clipdrop.co/"},{"content":"Elixir LiveView で使用するテンプレートファイルを変更する方法 Elixir の LiveView でテンプレートファイルを変更したい場合があります。\n今回は対処方法についてまとめました。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  .heexファイル用ビューを追加 Viewを呼び出す用のファイルを定義します。\n1 2 3 4  defmodule SampleWeb.PageView do use SampleWeb, :view end   テンプレートフォルダの設定 以下のファイルにテンプレートフォルダの root が定義されていますので確認してください。\n僕の環境では pattern を追加しないとサブディレクトリを読み込んでくれませんでした。\n1 2 3 4  use Phoenix.View, root: \u0026#34;lib/sample_web/templates\u0026#34;, pattern: \u0026#34;**/*\u0026#34;, # サブディレクトリ用の設定 namespace: SampleWeb   フォルダとファイルを生成\n1 2 3 4  mkdir lib/sample_web/templates/live/sample echo \u0026#34;sample 1\u0026#34; \u0026gt; lib/sample_web/templates/live/sample/sample_1.html.heex echo \u0026#34;sample 2\u0026#34; \u0026gt; lib/sample_web/templates/live/sample/sample_2.html.heex echo \u0026#34;sample default\u0026#34; \u0026gt; lib/sample_web/templates/live/sample/sample_default.html.heex   値によってテンプレートファイルを変更する 準備ができたので実際にLiveViewの処理を書きます。\nrender/1 で使用するテンプレートファイルを振り分けます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  defmodule SampleWeb.SampleLive do use SampleWeb, :live_view @impl true def mount(_param, _session, socket) do socket = assign(socket, :param, Enum.random(1..3)) {:ok, socket} end def render(assigns) do # 条件によって使用するテンプレートファイルを変更する cond do assigns.param == 1 -\u0026gt; Phoenix.View.render(SampleWeb.PageView, \u0026#34;live/sample/sample_1.html\u0026#34;, assigns) assigns.param == 2 -\u0026gt; Phoenix.View.render(SampleWeb.PageView, \u0026#34;live/sample/sample_2.html\u0026#34;, assigns) true -\u0026gt; Phoenix.View.render(SampleWeb.PageView, \u0026#34;live/sample/sample_default.html\u0026#34;, assigns) end end end   これで値によって違うテンプレートファイルを呼び出すことが可能です。\n","description":"Elixir LiveView で使用するテンプレートファイルを変更する方法","id":136,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】LiveView で使用するテンプレートファイルを変更する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/07/22/elixir-liveview-render/"},{"content":"ウォーターマークを無料で削除することができる Watermarkremover.io ウォーターマークを削除するためのオンラインツール Watermarkremover.io のご紹介。\nこのツールは、画像からウォーターマークを削除することができ、操作は非常に簡単で手間がかかりません。\nまた、このツールは無料で利用が可能です。\nWatermarkremover.io\nWatermarkremover.ioの特徴 Watermarkremover.ioは、画像からウォーターマークを削除するためのオンラインツールです。このツールは、png、jpeg、jpg、webpといった複数のフォーマットをサポートしています。画像をアップロードするか、URLを貼り付けるだけで、ウォーターマークを削除ができます。\nまた、このツールはAI技術を活用しており、ウォーターマークを高精度に削除することが可能です。ウォーターマークを削除した後も、画像の背景は自然に再現され、ウォーターマークが存在しなかったかのように見えます。\nさらに、Watermarkremover.ioでは、一度に複数のウォーターマークを削除することも可能です。\nWatermarkremover.ioの使い方  Watermarkremover.ioのウェブサイトにアクセスします。 「Upload Image」ボタンをクリックし、ウォーターマークを削除したい画像をアップロードします。または、画像のURLを貼り付けることも可能です。 画像をアップロードしたら、自動的にウォーターマークが削除されます。  以上の手順で、簡単に画像からウォーターマークを削除ができます。\n注意点 Watermarkremover.ioを利用する際には、利用規約とプライバシーポリシーに同意する必要があります。\nまた、ウォーターマークを削除することは、著作権法に触れる可能性があるため、削除する前には必ず著作権者の許可を得るようにしましょう。\n","description":"ウォーターマークを削除するためのオンラインツール Watermarkremover.io のご紹介。","id":137,"section":"tech","tags":["ツール","オンラインツール"],"title":"ウォーターマークを無料で削除することができる Watermarkremover.io","uri":"https://c-a-p-engineer.github.io/tech/2023/07/11/watermarkremover.io/"},{"content":"【Elixir】Phoenix LiveComponentの簡単なサンプル実装 LiveComponentのクリックするたびに数値が増減するというシンプルなアプリケーションの作り方について解説します。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  LiveComponentの作成 まず、新しいLiveComponentを作成します。\nたとえば、lib/your_app_web/live/counter_component.exというファイルを作り、以下のように入力します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  defmodule YourAppWeb.CounterComponent do # LiveComponentを使用することを宣言します。 use Phoenix.LiveComponent # LiveComponentのHTMLを描画します。 def render(assigns) do ~H\u0026#34;\u0026#34;\u0026#34; \u0026lt;div\u0026gt; \u0026lt;!-- 一つ目のボタンはphx-clickイベントを\u0026#34;decrement\u0026#34;にマッピングします。 --\u0026gt; \u0026lt;button phx-click=\u0026#34;decrement\u0026#34; phx-target={@myself}\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;!-- カウンターの現在の値を表示します。 --\u0026gt; \u0026lt;p\u0026gt;\u0026lt;%= @count %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- 二つ目のボタンはphx-clickイベントを\u0026#34;increment\u0026#34;にマッピングします。 --\u0026gt; \u0026lt;button phx-click=\u0026#34;increment\u0026#34; phx-target={@myself}\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026#34;\u0026#34;\u0026#34; end # コンポーネントを初期化し、初期のカウンター値を0に設定します。 def mount(socket) do {:ok, assign(socket, :count, 0)} end # コンポーネントの更新を行う。 # _assigns には呼び出し時の変数が入る def update(_assigns, socket) do {:ok, socket} end # \u0026#34;increment\u0026#34;イベントを処理し、カウンターの値を1増やします。 def handle_event(\u0026#34;increment\u0026#34;, _, socket) do {:noreply, assign(socket, :count, socket.assigns.count + 1)} end # \u0026#34;decrement\u0026#34;イベントを処理し、カウンターの値を1減らします。 def handle_event(\u0026#34;decrement\u0026#34;, _, socket) do {:noreply, assign(socket, :count, socket.assigns.count - 1)} end end   上記のコードは以下のように動作します。\n mount/2関数で、初期カウンターの値を0に設定します。 2つのボタンがあり、それぞれincrementとdecrementという名前のイベントを発行します。 handle_event/3関数でこれらのイベントを処理し、それぞれカウンターを増減させます。 phx-target={@myself} を付けることによって LiveComposenet 内のイベントを実行します。（付けないと呼び出し元のイベントを実行します。  LiveViewでのLiveComponentの使用 次に、LiveViewでこのLiveComponentを使用します。\nLiveViewのテンプレートで、以下のようにLiveComponentを呼び出します。\n1 2 3 4 5 6 7 8  \u0026lt;.live_component # LiveComponent module={YourAppWeb.CounterComponent} # 一意になるようなID id=\u0026#34;id\u0026#34; # 何か値を渡したい場合は以下のようにする。 hoge={@hoge} /\u0026gt;   参考  Phoenix.LiveComponent Event - Phoenix.LiveComponent  ","description":"LiveComponentのクリックするたびに数値が増減するというシンプルなアプリケーションの作り方について解説します。","id":138,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix LiveComponentの簡単なサンプル実装","uri":"https://c-a-p-engineer.github.io/tech/2023/07/10/elixir-phoenix-live_component/"},{"content":"【Elixir】Phoenix サーバーサイドからユーザーにリアルタイム通知する Elixir Phoenix サーバーサイドからユーザーに簡単にリアルタイム通知することが可能です。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  Elixir Phoenixでの通知システムの作成 ElixirとPhoenixを使用して、リアルタイムの通知システムを作成する方法を探求します。このシステムは、特定のユーザーに対してメッセージの通知を送ることができ、ログイン中の全画面に適用されます。さらに、サーバーから特定のユーザーに通知を送ることも可能です。\nチャネルの生成 まず、新しいチャネルを生成します。Phoenixでは、mix phx.gen.channelコマンドを使用してチャネルを生成ができます。この例では、Notificationsという名前のチャネルを生成します。\n1  mix phx.gen.channel Notifications   このコマンドを実行すると、以下のファイルが生成されます。\n lib/sample_web/channels/notifications_channel.ex test/sample_web/channels/notifications_channel_test.exs lib/sample_web/channels/user_socket.ex assets/js/user_socket.js  WebSocket追加 通知用のWebSocketを endpoint.ex に追加します。\n1 2 3  socket \u0026#34;/socket\u0026#34;, SampleWeb.UserSocket, websocket: true, longpoll: false   Javascriptの用意 app.js に生成されたJavaScriptを追加します。\n1  import \u0026#34;./user_socket.js\u0026#34;   チャネルの設定 生成されたnotifications_channel.ex です。\n今回は notifications:lobby というチャンネルで全体通知をしてみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  defmodule SampleWeb.NotificationsChannel do use SampleWeb, :channel # \u0026#34;notifications:lobby\u0026#34; が接続するための部屋 # \u0026#34;notifications:\u0026#34; \u0026lt;\u0026gt; user_id などにすることで特定のユーザのみの通知も可能になる @impl true def join(\u0026#34;notifications:lobby\u0026#34;, payload, socket) do if authorized?(payload) do # 認証OKであれば接続 {:ok, socket} else # エラー {:error, %{reason: \u0026#34;unauthorized\u0026#34;}} end end # PING @impl true def handle_in(\u0026#34;ping\u0026#34;, payload, socket) do {:reply, {:ok, payload}, socket} end # 通知 @impl true def handle_in(\u0026#34;shout\u0026#34;, payload, socket) do broadcast(socket, \u0026#34;shout\u0026#34;, payload) {:noreply, socket} end # 認証 defp authorized?(_payload) do true end end   この関数は、ユーザーがチャネルに参加時に呼び出されます。\nユーザーIDをチャネルのトピックに含めることで、特定のユーザーに対して通知を送ることができます。\nJavaScript 側の設定 JavaScript側でメッセージの通知処理を作成します。\n今回は console.log を出すだけにします。\n1 2 3 4 5 6 7 8 9 10 11  // 接続先のチャンネル let channel = socket.channel(\u0026#34;notifications:lobby\u0026#34;, {}) channel.join() .receive(\u0026#34;ok\u0026#34;, resp =\u0026gt; { console.log(\u0026#34;Joined successfully\u0026#34;, resp) }) .receive(\u0026#34;error\u0026#34;, resp =\u0026gt; { console.log(\u0026#34;Unable to join\u0026#34;, resp) }) // 処理 channel.on(\u0026#34;shout\u0026#34;, payload =\u0026gt; { console.log(\u0026#34;New message:\u0026#34;, payload.message) })   この関数は、クライアントから shout というイベントが送られてきたときに呼び出されます。\nイベントにはメッセージが含まれており、このメッセージはbroadcast_to!関数を使用して特定のユーザーに送信されます。\nサーバーサイドから通知する 以下のコードを使用することによってサーバーサイドからフロントに対して通知を行うことができます。\n今回は全通知です。\n1 2 3 4 5 6 7 8 9 10 11  Sample.Endpoint.broadcast( # 対象チャンネル \u0026#34;notifications:lobby\u0026#34;, # 対象のhandle_in \u0026#34;shout\u0026#34;, # payload %{ title: title, message: message } )   まとめ ElixirとPhoenixを使用して接続ユーザーに通知を送るシステムを作成する方法です。\nこのシステムは、リアルタイムの通知を可能にし、ログイン中の全画面に適用されます。\nさらに、サーバーから特定のユーザーに通知を送ることも可能です。\n参考  mix phx.gen.channel   ","description":"Elixir Phoenix サーバーサイドからユーザーに簡単にリアルタイム通知することが可能です。","id":139,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix サーバーサイドからリアルタイム通知する","uri":"https://c-a-p-engineer.github.io/tech/2023/07/06/elixir-phoenix-channel/"},{"content":"【CSS】ボタンみたいなチェックボックスを作る 今回はCSSを使用してボタンのようなチェックボックスを作ります。\nサンプルコード HTMLとCSSのを使用して実装します。\n1 2 3  \u0026lt;label for=\u0026#34;sample\u0026#34; class=\u0026#34;chk_label\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;sample\u0026#34; value=\u0026#34;1\u0026#34; /\u0026gt;チェック \u0026lt;/label\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  .chk_label { display: inline-block; padding: 10px; background-color: #ddd; /* 未チェック時の背景色 */ color: #333; /* 未チェック時のテキスト色 */ cursor: pointer; margin: 3px; border-radius: 25px; font-size: 1rem; transition: background-color 0.3s ease; /* 背景色の変化をスムーズにする */ } .chk_label input[type=\u0026#34;checkbox\u0026#34;] { display: none; /* チェックボックスを隠す */ } .chk_label:has(input[type=\u0026#34;checkbox\u0026#34;]:checked) { background-color: #007BFF; /* チェックされた時の背景色 */ color: #fff; /* チェックされた時のテキスト色 */ }   注意 今僕が使用している Firefox 114.0.2 では対応していない模様。\n以下のサイトで使用できるか確認してみてください。\nCan I Use :has()\n今後対応する予定の模様です。\n418039 – Implement the :has() pseudo class\nFirefox で使用したい場合 Firefox は about:config ページより layout.css.has-selector.enabled の設定を true にすることで使用できるようになります。\nサンプル 実際に実装したものは以下になります。\nチェック   .chk_label{ display: inline-block; padding: 10px; background-color: #ddd; /* 未チェック時の背景色 */ color: #333; /* 未チェック時のテキスト色 */ cursor: pointer; margin: 3px; border-radius: 25px; font-size: 1rem; transition: background-color 0.3s ease; /* 背景色の変化をスムーズにする */ } .chk_label input[type=\"checkbox\"] { display: none; /* チェックボックスを隠す */ } .chk_label:has(input[type=\"checkbox\"]:checked){ background-color: #007BFF; /* チェックされた時の背景色 */ color: #fff; /* チェックされた時のテキスト色 */ }  参考  Ecto.Schema Primitive types  ","description":"今回はCSSを使用してボタンのようなチェックボックスを作ります。","id":140,"section":"tech","tags":["CSS"],"title":"【CSS】ボタンみたいなチェックボックスを作る","uri":"https://c-a-p-engineer.github.io/tech/2023/07/02/css-check-button/"},{"content":"【Elixir】Ectoでの配列フィールドの定義とバリデーション方法 ElixirのEctoを使って、配列フィールドの定義とバリデーション方法についてやっていきます。\nPostgreSQLの場合は配列方があるので使用するらしいです。\n僕の場合は画面からのバリデーションチェックに使用する目的で使用しています。\n確認環境  Elixir 1.14.2  配列フィールドの定義 まずは配列フィールドの定義方法から見ていきましょう。\nEctoではschemaに配列フィールドを組み込むことが可能です。\n以下がその基本的な方法です。\n1 2 3 4 5 6 7 8 9  defmodule SampleApp.SampleSchema do use Ecto.Schema schema \u0026#34;sample_table\u0026#34; do field :sample_field, {:array, :string} # これは文字列の配列を表しています timestamps() end end   上記のコードでは、:sample_fieldという名前のフィールドが、文字列の配列として定義されています。\n配列の要素のタイプを変更する場合は、:stringを適切な型に変更します。たとえば、整数の配列が必要な場合は、:integerを使用します。\nまた、マイグレーションで配列フィールドを追加する場合は以下のようにします。\n1 2 3 4 5 6 7 8 9  defmodule SampleApp.Repo.Migrations.AddSampleField do use Ecto.Migration def change do alter table(:sample_table) do add :sample_field, {:array, :string} end end end   ここでも、必要に応じて:stringを適切な型に置き換えてください。\n配列フィールドのバリデーション 次に、配列フィールドに対するバリデーション方法について見ていきましょう。Ectoでは、Ecto.Changesetモジュールを使用してデータのバリデーションを行います。\n配列に対するバリデーションはカスタムバリデーション関数を作成することで実現できます。\nたとえば、配列が一定の長さ以上であること、また配列内の各要素が一定の長さ以上であることを確認するバリデーションは以下のように書くことができます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  defmodule SampleApp.SampleSchema do use Ecto.Schema import Ecto.Changeset schema \u0026#34;sample_table\u0026#34; do field :sample_field, {:array, :string} timestamps() end def changeset(struct, params \\\\ %{}) do struct |\u0026gt; cast(params, [:sample_field]) |\u0026gt; validate_length(:sample_field, min: 1) # 例：配列の長さが1以上であることを確認 |\u0026gt; validate_sample_field() end # カスタムバリデーション関数 defp validate_sample_field(changeset) do sample_field = get_field(changeset, :sample_field) # 例：配列内の各要素が一定の長さ以上であることを確認 if Enum.all?(sample_field, \u0026amp;(\u0026amp;1 |\u0026gt; String.length() \u0026gt;= 1)) do changeset else add_error(changeset, :sample_field, \u0026#34;Each element in the array must be at least 1 character long.\u0026#34;) end end end   以上で、ElixirのEctoを使った配列フィールドの定義とバリデーション方法の基本的な説明が終わりです。\n配列の利用とそのバリデーションは、さまざまなデータの表現と検証に役立ちますので、ぜひ上手く活用してみてください。\n参考  Ecto.Schema Primitive types  ","description":"ElixirのEctoを使って、配列フィールドの定義とバリデーション方法についてやっていきます。","id":141,"section":"tech","tags":["Elixir"],"title":"【Elixir】Ectoでの配列フィールドの定義とバリデーション方法","uri":"https://c-a-p-engineer.github.io/tech/2023/07/01/elixir-ecto-array-field/"},{"content":"【Elixir】Phoenix push_event を活用してJavaScriptを実行する ElixirのPhoenixフレームワークでは、サーバーからクライアントへのイベントをプッシュするためのpush_eventという機能が提供されています。\nこれを利用することで、サーバー側からクライント側のJavaScriptに対してイベントを発行し、特定の操作を行うことが可能になります。\npush_event を活用してJavaScriptを実行してみます。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  サーバーサイドのコード まず、サーバーサイドで push_event を使用してイベントを発行します。\n以下の例では、初期表示発の際に、\u0026quot;alert\u0026quot;というイベントをクライアントにプッシュしています。\n1 2 3 4 5 6 7 8 9 10 11  defmodule SampleWeb.Live.Index do use SampleWeb, :live_view @impl true def mount(_params, _session, socket) do { :ok, |\u0026gt; push_event(\u0026#34;alert\u0026#34;, %{msg: \u0026#34;テスト\u0026#34;}) } end end   クライアントサイドのコード 次に、クライアントサイドでpush_eventから発行されたイベントを受け取ります。\n以下のJavaScriptコードは、\u0026quot;alert\u0026quot;イベントを受け取ったときに、メッセージを表示します。\n1 2 3 4  let liveSocket = new LiveSocket(...); window.addEventListener(`phx:alert`, (e) =\u0026gt; { alert(e.detail.msg) })   このように、Phoenixのpush_eventを使用することで、サーバーからクライアントへの通信が可能になります。\n参考  Handling server-pushed events   ","description":"Elixir push_event を活用してJavaScriptを実行する","id":142,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix push_event を活用してJavaScriptを実行する","uri":"https://c-a-p-engineer.github.io/tech/2023/06/26/elixir-phoenix-push_event/"},{"content":"【Elixir】Phoenixでのレイアウトテンプレート設定方法 Elixir Phoenixでのレイアウトテンプレート設定方法。\n確認環境  Elixir 1.14.2 Phoenix 1.6.3  アクションの設定 put_layout を利用することでテンプレートを変更することが可能です。\n基本的な使い方は以下のようになります。\n1 2 3 4 5 6 7 8 9  defmodule MyAppWeb.PageController do use MyAppWeb, :controller def index(conn, _params) do conn |\u0026gt; put_layout(\u0026#34;special.html\u0026#34;) |\u0026gt; render(\u0026#34;index.html\u0026#34;) end end   上記のコードでは、indexアクションが呼び出されたときにspecial.html.heexという名前のレイアウトが適用されます。\nput_layout に fasle を渡すとレイアウトを使用しなくなります。\nルートテンプレートの変更には put_root_layout を使用することで可能です。\nルーターでの設定 Phoenixフレームワークにおいて、レイアウトは通常　lib/my_app_web/templates/layout/app.html.eex　というパスに配置されますが、put_root_layoutを使用してこのデフォルトを上書きすることが可能です。\n以下に例を示します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  defmodule MyAppWeb.Router do use MyAppWeb, :router # 使用するレイアウトの指定 pipeline :custom_layout do plug :put_layout, {MyAppWeb.LayoutView, \u0026#34;custom.html\u0026#34;} end scope \u0026#34;/\u0026#34;, MyAppWeb do pipe_through [:browser, :custom_layout] get \u0026#34;/\u0026#34;, PageController, :index end end   上記のコードでは、custom_layoutパイプラインを新たに作成して put_root_layoutプラグを追加し、そのレイアウトとしてcustom.html.eexを指定しています。\nこれにより、このパイプラインを通るすべてのリクエストに対してcustom.html.heexレイアウトが適用されます。\nput_layoutとput_root_layoutは、Phoenixフレームワークにおけるレイアウト管理の柔軟性を高めるための重要なツールです。\nこれらをうまく利用することで、ウェブアプリケーションの見た目をコントローラーやアクションレベルで細かく制御することが可能となります。\n参考  put_layout/2 put_root_layout/2  ","description":"Elixir Phoenixでのレイアウトテンプレート設定方法。","id":143,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenixでのレイアウトテンプレート設定方法","uri":"https://c-a-p-engineer.github.io/tech/2023/06/25/elixir-phoenix-layout/"},{"content":"【Elixir】タイムゾーンエラーの解決策 Elixirで日付と時間を扱う際には、DateTimeモジュールが一般的に使用されます。\nしかし、特定のタイムゾーンを指定して現在の日時を取得しようとすると、cannot get current datetime in \u0026quot;Japan\u0026quot; time zone, reason: :utc_only_time_zone_databaseというエラーが発生することがあります。\nこのエラーの原因と解決策について詳しく説明します。\nエラーの原因 このエラーは、ElixirがデフォルトでUTCのみをサポートしているために発生します。\nつまり、ElixirのDateTimeモジュールは、デフォルトではUTC以外のタイムゾーンを認識できません。したがって、特定のタイムゾーン（この場合は\u0026quot;Japan\u0026quot;）を指定して現在の日時を取得しようとすると、上記のエラーが発生します。\n解決策 この問題を解決するためには、タイムゾーンデータベースを提供するライブラリを導入する必要があります。\nElixirでは、この目的のためにtzdataというライブラリが提供されています。\ntzdataはIETFのTime Zone Databaseを使用して、世界中のすべてのタイムゾーンの情報を提供します。\nTzdata\n以下に、tzdataを導入してエラーを解決する手順を示します。\n まず、mix.exsファイルのdeps関数にtzdataを追加します。  1 2 3 4 5  defp deps do [ {:tzdata, \u0026#34;~\u0026gt; 1.1\u0026#34;} ] end   次に、config.exsファイルに以下の設定を追加します。  1  config :elixir, :time_zone_database, Tzdata.TimeZoneDatabase   最後に、プロジェクトの依存関係を更新します。  1  mix deps.get   これで、ElixirのDateTimeモジュールは\u0026quot;Japan\u0026quot;などのタイムゾーンを認識できるようになります。以下に、\u0026ldquo;Japan\u0026quot;タイムゾーンで現在の日時を取得する例を示します。\n1  DateTime.now(\u0026#34;Japan\u0026#34;)   このコードを実行すると、日本の現在の日時がDateTime構造体として返されます。\nタイムゾーン一覧 各地のタイムゾーンのリストは以下で出力が可能です。\n1  iex\u0026gt; Tzdata.zone_list   また以下のようにするとタイムゾーンが検索できます。\n1 2 3 4  iex\u0026gt; Tzdata.zone_list |\u0026gt; Enum.filter(\u0026amp; String.contains?(\u0026amp;1, \u0026#34;Japan\u0026#34;)) [\u0026#34;Japan\u0026#34;] iex\u0026gt; Tzdata.zone_list |\u0026gt; Enum.filter(\u0026amp; String.contains?(\u0026amp;1, \u0026#34;Asia/Tokyo\u0026#34;)) [\u0026#34;Asia/Tokyo\u0026#34;]   まとめ ElixirのDateTimeモジュールはデフォルトでUTCのみをサポートしているため、特定のタイムゾーンで現在の日時を取得しようとするとエラーが発生することがあります。しかし、tzdataというライブラリを導入することで、この問題を解決ができます。\ntzdataはIETFのTime Zone Databaseを使用して、世界中のすべてのタイムゾーンの情報を提供します。\nこれにより、ElixirのDateTimeモジュールは任意のタイムゾーンを認識できるようになります。\nElixirで日付と時間を扱う際には、このようなエラーに遭遇することがありますが、適切なライブラリを導入することで解決することが可能です。\nElixirは柔軟性と拡張性が高い言語であるため、このような問題に対してもコミュニティが多くの解決策を提供しています。\nこの記事が、Elixirで日付と時間を扱う際のエラー解決の一助となれば幸いです。\n","description":"特定のタイムゾーンを指定して現在の日時を取得しようとするとエラーが発生することがあります。","id":144,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】タイムゾーンエラーの解決策","uri":"https://c-a-p-engineer.github.io/tech/2023/06/16/elixir-utc_only_time_zone_database/"},{"content":"【Elixir】Phoenixでのエラー解決: Stateful ComponentsのHTML Root Tag ライブコンポーネント作成時に出たエラーの解決方法について調べてみました。\nerror on render/1 with id of \u0026quot;demo\u0026quot;. Stateful components must have a single static HTML tag at the root このエラーは、Stateful component (状態を保持するコンポーネント) が一つの静的なHTMLタグをルート（最上位）に持たなければならないという規則に違反している時に発生します。\nこれは、LiveViewでstatefulコンポーネントを扱う際の基本的なルールです。\nこれにより、Phoenixはコンポーネントのライフサイクルを正しく管理し、必要な更新を適切に行うことができます。\n原因 基本的にコンポーネントのrender/1関数が複数のルート要素をレンダリングしようとしている場合に発生します。\n1 2 3 4 5 6  def render(assigns) do ~L\u0026#34;\u0026#34;\u0026#34; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Send\u0026lt;/button\u0026gt; \u0026#34;\u0026#34;\u0026#34; end   この場合、\u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;name\u0026quot; /\u0026gt;と\u0026lt;button\u0026gt;Send\u0026lt;/button\u0026gt;の2つのルート要素があります。\n解決方法 エラーを解消するには、すべてのマークアップを単一のルート要素でラップします。以下にその修正版を示します：\n1 2 3 4 5 6 7 8  def render(assigns) do ~L\u0026#34;\u0026#34;\u0026#34; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; /\u0026gt; \u0026lt;button\u0026gt;Send\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026#34;\u0026#34;\u0026#34; end   このように修正することで、\u0026lt;div\u0026gt;が唯一のルート要素となり、内部に他の要素がネストされます。\nまとめ Elixir Phoenixを使った開発で上記のエラーに遭遇した場合、必ずコンポーネントのルートには単一のHTML要素が存在することを確認してください。\nこれは、PhoenixがLiveViewコンポーネントのライフサイクルを管理するための基本的な要件です。\nこれでエラーが解消し、開発がスムーズに進むことを願っています。\n","description":"ライブコンポーネント作成時に出たエラーの解決方法について調べてみました。","id":145,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenixでのエラー解決: Stateful ComponentsのHTML Root Tag","uri":"https://c-a-p-engineer.github.io/tech/2023/06/16/elixir-phoenix-components-root/"},{"content":"【PHP】共有メモリの活用: キャッシュクラスの作成 PHPでは、共有メモリというメモリの一部を複数のプロセスが共有する機能を利用ができます。\nこれを利用することで、プロセス間でデータをやり取りしたり、一時的なデータを保存したりすることが可能です。\n今回は、この共有メモリを用いてキャッシュの役割を果たすクラスを作成してみました。\n注意事項 先に言っておきますが、PHPの場合メモリをローカルメモリに入れる意味はほぼないです。\nこれは複数台構成などになった場合、各サーバーに別々にキャッシュされるためです。\n普通に Memcached や Redis などを使用しましょう。\nまたキャッシュを永続化してしまった場合、PHPが再起動するまで開放されなくなるのでメモリをずっと確保され続けることになります。\nそのためメモリ管理がうまくできないと大変なことになりますのでご注意ください。\n環境 PHP8\n環境構築 面倒なことにメモリを触る Shmop は通常を使用することができません。\nそのため環境にインストールする必要があります。\n僕はDocker環境だったので以下をDockerfileに追記するだけですみました。\n1 2  # Install shmopRUN docker-php-ext-install shmop  キャッシュクラスのサンプルコード 実際のメモリキャッシュするサンプルコードになります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107  \u0026lt;?php /** * 共有メモリを使用したキャッシュクラス */ class Cache { /** * @var Shmop 共有メモリのID */ private $shm_id; /** * @var bool 共有メモリの永続性フラグ */ private $is_persistent; /** * @var bool 共有メモリの永続性フラグ ON */ const PERSISTENT_ON = true; /** * @var bool 共有メモリの永続性フラグ OFF */ const PERSISTENT_OFF = false; /** * コンストラクタ * * @param string $key 共有メモリのキー * @param bool $is_persistent 共有メモリの永続性フラグ * @param int $max_size 共有メモリの最大サイズ */ public function __construct(string $key, bool $is_persistent = self::PERSISTENT_OFF, int $max_size = 1000) { $key = ftok(__FILE__, $key); $this-\u0026gt;shm_id = shmop_open($key, \u0026#34;c\u0026#34;, 0644, $max_size); $this-\u0026gt;is_persistent = $is_persistent; if (!$this-\u0026gt;shm_id) { throw new Exception(\u0026#39;Unable to create the shared memory segment.\u0026#39;); } } /** * 共有メモリにデータと有効期限を書き込む * * @param mixed $data 書き込むデータ * @param int|null $expiry 有効期限（秒数） nullの場合は有効期限なし * @throws Exception */ public function put($data, int $expiry = null): void { $expiryTimestamp = $expiry ? time() + $expiry : null; $dataWithExpiry = serialize([\u0026#39;data\u0026#39; =\u0026gt; $data, \u0026#39;expiry\u0026#39; =\u0026gt; $expiryTimestamp]); if (shmop_write($this-\u0026gt;shm_id, $dataWithExpiry, 0) != strlen($dataWithExpiry)) { throw new Exception(\u0026#39;Was not able to write all of the data into shared memory.\u0026#39;); } } /** * 共有メモリからデータを取得する * * @return mixed|null 有効期限内のデータと有効期限の日時秒、データがない場合はnull */ public function get() { $size = shmop_size($this-\u0026gt;shm_id); $dataWithExpiry = @unserialize(shmop_read($this-\u0026gt;shm_id, 0, $size)); if ($dataWithExpiry \u0026amp;\u0026amp; $dataWithExpiry[\u0026#39;expiry\u0026#39;] !== null \u0026amp;\u0026amp; $dataWithExpiry[\u0026#39;expiry\u0026#39;] \u0026lt; time()) { return null; } return $dataWithExpiry[\u0026#39;data\u0026#39;] ?? null; } /** * 共有メモリを削除する */ public function delete(): void { shmop_delete($this-\u0026gt;shm_id); } /** * デストラクタ */ public function __destruct() { if (!$this-\u0026gt;is_persistent) { $this-\u0026gt;delete(); } } } // キャッシュクラスの使用例 $cache = new Cache(\u0026#39;a\u0026#39;, Cache::PERSISTENT_ON); $cache-\u0026gt;put(\u0026#34;Hello, World!\u0026#34;, 60); var_dump($cache-\u0026gt;get()); // 他の場所での使用例 $cache2 = new Cache(\u0026#39;b\u0026#39;, Cache::PERSISTENT_OFF); var_dump($cache2-\u0026gt;get());   参考  ftok: この関数は、ファイルのパス名とプロジェクトIDからシステムIDを生成します。このIDは共有メモリセグメントの生成や、セマフォの作成などに使用されます。 shmop_open: この関数は、共有メモリセグメントを作成または開きます。既に存在するセグメントを開くには、ftokで生成したシステムIDと同じIDを指定します。 shmop_write: この関数は、共有メモリセグメントにデータを書き込みます。 shmop_read: この関数は、共有メモリセグメントからデータを読み込みます。 shmop_size: この関数は、共有メモリセグメントのサイズを取得します。 shmop_delete: この関数は、共有メモリセグメントを削除します。 serialize: この関数は、PHPの値を保存や送信可能な文字列の表現に変換します。 unserialize: この関数は、serializeで生成された文字列表現からPHPの値を再構築します。  ","description":"PHP で共有メモリの活用方法としてキャッシュクラスの作成を作成してみました。","id":146,"section":"tech","tags":["PHP"],"title":"【PHP】共有メモリの活用: キャッシュクラスの作成","uri":"https://c-a-p-engineer.github.io/tech/2023/06/10/php-memory-cache/"},{"content":"【Elixir】Mnesiaで分散データベースを構築し、クラスタ同期を行う ElixirとErlangの分散データベースであるMnesiaを利用することで、分散システムにおけるデータの管理が格段に簡単になります。\n今回の記事では、Mnesiaのセットアップとクラスタ同期について詳しく説明します。\n環境  Elixir 1.14.2  同期用コード まずは、Mnesiaのセットアップから始めましょう。\n以下のコードは、分散システムにおけるノードの状況を確認し、適切な操作を行います。\n同期用コードはプロジェクト起動時、実行されるところにかいてあると良いでしょう。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  :mnesia.start() if Enum.empty?(Node.list()) do # 他のノードが起動していない時 # Mnesia作成 :mnesia.create_table(:users, [ {:attributes, [:id, :name, :email]} ]) # テスト用にデータも挿入 :mnesia.transaction(fn -\u0026gt; :mnesia.write({:users, 1, \u0026#34;Alice\u0026#34;, \u0026#34;alice@example.com\u0026#34;}) end) else # 他にノードが起動しているので Mnesiaクラスタ対応 # 同期前に旧Mnesiaデータを削除 :mnesia.start() dir = :mnesia.system_info(:directory) :mnesia.stop() :mnesia.delete_schema([Node.self()]) File.rm_rf(dir) :mnesia.start() # すべてのノードをデータベースノードとして追加 :mnesia.change_config(:extra_db_nodes, [Node.self()] ++ Node.list()) # スキーマのコピー設定（自分に対してディスクコピーを行う :mnesia.change_table_copy_type(:schema, Node.self(), :disc_copies) # 全データコピー for table \u0026lt;- :mnesia.system_info(:tables) do :mnesia.add_table_copy(table, Node.self(), :disc_copies) end end # デバッグ用：Mnesiaの情報を表示 # IO.inspect(:mnesia.system_info())   このコードは、まずMnesiaを起動し、現在のノードのリストを確認します。\n他のノードが存在しない場合、新たなテーブル:usersを作成し、初期データを書き込みます。\n一方、他のノードが存在する場合、Mnesiaの既存データを一旦削除し、その後Mnesiaを再起動します。\nそして、自ノードを含むすべてのノードをクラスタに追加し、スキーマ表のコピータイプをディスクコピーに設定します。\nその後、すべてのテーブルに対してディスクコピーを追加します。\n確認 次に、データの同期がうまく行われているか確認します。\n別ノードでMnesiaのテーブルからすべてのデータを取得し、結果を表示します。\n1 2 3 4 5 6 7  # 全データ取得 result = :mnesia.transaction(fn -\u0026gt; :mnesia.match_object({:users, :_, :_, :_}) end) IO.inspect(result)   これにより、:usersテーブルの全データが正しく取得できることを確認します。このようにして、ElixirとMnesiaを使った分散データベースの構築とクラスタ同期が可能です。\nElixirとMnesiaを使用することで、分散システムにおけるデータ管理の課題を簡単に解決ができます。\nデータの一貫性と可用性を確保し、システムの耐障害性を向上させるために、この強力な組み合わせをぜひ試してみてください。\n参考  mnesiaをelixirから使ってみる - Qiita  ","description":"ElixirとErlangの分散データベースであるMnesiaを利用することで、分散システムにおけるデータの管理が格段に簡単になります。","id":147,"section":"tech","tags":["Elixir"],"title":"【Elixir】Mnesiaで分散データベースを構築し、クラスタ同期を行う","uri":"https://c-a-p-engineer.github.io/tech/2023/05/28/elixir-cluster-mnesia/"},{"content":"【Elixir】Phoenixでカスタムセッションストアを作る Elixir Phoenixで自作のセッションストアを作る方法についてやっていきます。\n今回はセッション情報を各セッションID名のJSONに保存するというセッションストアを作っていきます。\n環境  Elixir 1.14.2 Phoenix 1.6.3  必要な依存関係の解決 最初に、このチュートリアルで必要な依存関係を追加しましょう。\nこの例では、JSONのエンコードおよびデコードを行うためのライブラリとしてjasonを使用します。\n以下のようにmix.exsファイルに依存関係を追加します。\nJason\n1 2 3 4 5  defp deps do [ {:jason, \u0026#34;~\u0026gt; 1.3\u0026#34;} ] end   その後、以下のコマンドを実行して依存関係を取得します。\n1  $ mix deps.get   なぜ、セッションストアを自作するのか 通常、PhoenixではCookieやETSなど既存のセッションストアを使用しますが、場合によっては独自のストレージメカニズムを必要とすることもあります。\n今回はそのようなケースに対応するため、Plug.Session.Store の実装を使用してカスタムセッションストアを作ります。\nなお、今回はサンプルのためセッションデータはローカルのJSONファイルとして保存します。\nPlug.Session.Storeとは Plug.Session.Store は Plug.Session が使用するストレージのインターフェイスです。以下の3つの関数を実装する必要があります。\n get/2: セッションデータを取得します。（Plug.Session.Store.get/2） put/4: 新規または既存のセッションデータを保存します。（Plug.Session.Store.put/4） delete/2: セッションデータを削除します。（Plug.Session.Store.delete/2）  自作のセッションストアを作成する では、実際にMySessionStoreというモジュールを作成します。\nこれはPlug.Session.Storeのbehaviourを実装します。\nここでは、セッションデータが保存されるディレクトリのパスを定数として定義します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64  defmodule MySessionStore do @moduledoc \u0026#34;\u0026#34;\u0026#34; 自作のセッションストアモジュール 。 \u0026#34;\u0026#34;\u0026#34; @session_dir \u0026#34;./\u0026#34; @behaviour Plug.Session.Store @impl true def init(_opts) do # オプションの初期化をここで行うことができます end @doc \u0026#34;\u0026#34;\u0026#34; セッションID(sid)を使ってセッションデータを取得します。 sidはセッションを一意に識別するためのIDです。 \u0026#34;\u0026#34;\u0026#34; @impl true def get(_conn, sid, _opts) do case File.read(\u0026#34;#{@session_dir}/#{sid}.json\u0026#34;) do {:ok, json} -\u0026gt; {sid, Jason.decode!(json)} {:error, _reason} -\u0026gt; {sid, %{}} end end @doc \u0026#34;\u0026#34;\u0026#34; 新しいセッションを生成し、そのデータを保存します。 新規セッションのID(sid)はランダムなバイト列をエンコードしたものです。 \u0026#34;\u0026#34;\u0026#34; @impl true def put(_conn, nil, new_data, _opts) do sid = :crypto.strong_rand_bytes(16) |\u0026gt; Base.url_encode64() put(nil, sid, new_data, nil) sid end @doc \u0026#34;\u0026#34;\u0026#34; 既存のセッションを更新し、そのデータを保存します。 sidを元にJSONファイルを探し、新たなデータでそのファイルを更新します。 \u0026#34;\u0026#34;\u0026#34; @impl true def put(_conn, sid, new_data, _opts) do File.write!(\u0026#34;#{@session_dir}/#{sid}.json\u0026#34;, Jason.encode!(new_data)) sid end @doc \u0026#34;\u0026#34;\u0026#34; 既存のセッションを削除します。 sidに対応するJSONファイルを削除します。 \u0026#34;\u0026#34;\u0026#34; @impl true def delete(_conn, sid, _opts) do File.rm!(\u0026#34;#{@session_dir}/#{sid}.json\u0026#34;) :ok end end   自作のセッションストアを有効にする これまで作成した自作のセッションストアを有効にするためには、Phoenixのエンドポイント設定を更新する必要があります。\n具体的には、lib/your_app_web/endpoint.ex ファイル内の plug Plug.Session の行を次のように書き換えます。\n1 2 3 4  plug Plug.Session, store: MySessionStore, key: \u0026#34;_your_app_key\u0026#34;, signing_salt: \u0026#34;your_signing_salt\u0026#34;   ここで、store: には自作のセッションストアモジュール名を指定します。\nまた、key: と signing_salt: はセッションデータの署名に使用されるため、それぞれ適切な値を設定してください。\nまとめ 以上で、Phoenixで自作のセッションストアを作る方法について説明しました。この例では、シンプルなJSONファイルにデータを\n保存していますが、要件に応じてMySQLやPostgreSQLなどのデータベースに保存することも可能です。\nただし、実際の運用においては、セッションデータを平文でファイルに保存することは、パフォーマンスとセキュリティの観点から適切ではないかもしれません。\nこの記事は主に教育的な目的のためのもので、実際のプロジェクトでは適切なセキュリティ対策を講じることが重要です。\n","description":"Elixir Phoenixで自作のセッションストアを作る方法についてやっていきます。","id":148,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenixでカスタムセッションストアを作る","uri":"https://c-a-p-engineer.github.io/tech/2023/05/26/elixir-phoenix-session-store/"},{"content":"【Elixir】クラスタ内のノードの起動、停止を感知する方法 Elixir でクラスタ構成でクラスタ内のノードの起動、停止を感知する方法\n環境  Elixir 1.14.2  ノード起動・停止の感知するコード ノードの起動、停止を実際に感知するコードは以下のようになります。\nnet_kernel.monitor_nodes/1 を使用してすべてのノードの起動、停止を感知します。\n特定のノードのみを感知するなら Node.monitor/2 も使用可能です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  defmodule ClusterMonitor do use GenServer def start_link(_) do GenServer.start_link(__MODULE__, [], name: __MODULE__) end def init(state) do # 全てのノード起動・停止の感知 :net_kernel.monitor_nodes(true) {:ok, state} end def handle_info({:nodedown, node}, state) do # ノード停止 IO.puts(\u0026#34;Node #{node}has stopped.\u0026#34;) {:noreply, state} end def handle_info({:nodeup, node}, state) do # ノード起動 IO.puts(\u0026#34;Node #{node}has started.\u0026#34;) {:noreply, state} end end   感知用コードの設定を行います。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  defmodule Demo.Application do # See https://hexdocs.pm/elixir/Application.html # for more information on OTP Applications @moduledoc false use Application @impl true def start(_type, _args) do children = [ # クラスタ監視 {ClusterMonitor, name: :cluster_monitor} ] # See https://hexdocs.pm/elixir/Supervisor.html # for other strategies and supported options opts = [strategy: :one_for_one, name: Demo.Supervisor] Supervisor.start_link(children, opts) end end   参考  net_kernel.monitor_nodes/1 Node.monitor/2  ","description":"Elixir でクラスタ構成でクラスタ内のノードの起動、停止を感知する方法","id":149,"section":"tech","tags":["Elixir"],"title":"【Elixir】クラスタ内のノードの起動、停止を感知する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/05/24/elixir-nodeup-nodedown/"},{"content":"【Elixir】libclusterを使用して簡単にクラスタ化する libclusterというElixirのライブラリを使用することで、簡単にクラスタ構成を作ることができます。\nElixirとlibclusterを使用してクラスタ構成を作ってみます。\n libcluster — libcluster v3.3.2  環境  Elixir 1.14.2  libcluster のインストール まず、libcluster をプロジェクトに追加します。\nmix.exs の deps 関数に以下のコードを追加してください。\n1 2 3 4 5  defp deps do [ {:libcluster, \u0026#34;~\u0026gt; 3.3.2\u0026#34;} ] end   次に、ターミナルで mix deps.get コマンドを実行し、依存関係を取得してください。\n使い方 以下のように application.ex にサクッと組み込み事で使用できます。\nそうすると自動的にクラスタを構成してくれます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  defmodule MyApp.App do use Application def start(_type, _args) do topologies = [ example: [ strategy: Cluster.Strategy.Epmd, config: [hosts: [:\u0026#34;a@127.0.0.1\u0026#34;, :\u0026#34;b@127.0.0.1\u0026#34;]], ] ] children = [ {Cluster.Supervisor, [topologies, [name: MyApp.ClusterSupervisor]]}, # ..other children.. ] Supervisor.start_link(children, strategy: :one_for_one, name: MyApp.Supervisor) end end   起動 起動時にはいくつか注意が必要です。\nノード名（--sname）とCookie（--cookie）の指定をしなければいけません。\nノード名は各端末別にCookieはクラスタを構築したいノード内で統一してください。\nelixir --sname a@127.0.0.1 --cookie Cookie -S mix 構成方法 クラスタの構成にはいくつか方法があります。\n  Cluster.Strategy.Epmd ノード名を指定する方法\nCluster.Strategy.Epmd — libcluster v3.3.2\n  Cluster.Strategy.DNSPoll DNSを指定する方法\nCluster.Strategy.DNSPoll — libcluster v3.3.2\n  Cluster.Strategy.Gossip ネットワークを指定する方法\nCluster.Strategy.Gossip — libcluster v3.3.2\n  他にも色々あるので自分の環境にあった方法を使用してください。\n備考 私は Gossip を使用してクラスタを組んだのですが下記がサイトに載っている方法。\n1 2 3 4 5 6 7 8 9 10 11  config :libcluster, topologies: [ gossip_example: [ strategy: Elixir.Cluster.Strategy.Gossip, config: [ port: 45892, if_addr: \u0026#34;0.0.0.0\u0026#34;, multicast_if: \u0026#34;192.168.1.1\u0026#34;, multicast_addr: \u0026#34;233.252.1.32\u0026#34;, multicast_ttl: 1, secret: \u0026#34;somepassword\u0026#34;]]]   これを以下のようにするとネットワーク内で自動的にクラスタを組んでくれました。\nDocker内で構成する時、すごい簡単です。\n1 2 3 4 5 6  config :libcluster, topologies: [ gossip_example: [ strategy: Elixir.Cluster.Strategy.Gossip ] ]   デバッグ debug: true を入れることでlibclusterのデバッグモードが動きログにデバッグが出力されるようになります。\n1 2  config :libcluster, debug: true,   参考  libcluster — libcluster v3.3.2  ","description":"libclusterというElixirのライブラリを使用することで、簡単にクラスタ構成を作ることができます。","id":150,"section":"tech","tags":["Elixir"],"title":"【Elixir】libclusterを使用して簡単にクラスタ化する","uri":"https://c-a-p-engineer.github.io/tech/2023/05/20/elixir-libcluster/"},{"content":"【JavaScript】Handtrack.jsを使った手のリアルタイム検出 Handtrack.jsを使った手のリアルタイム検出して遊ぶ。\nHandtrack.js 近年の技術の進歩により、画像認識や物体検出などの機械学習タスクが簡単に実現できるようになりました。\nHandtrack.jsは、その中でも手の検出と追跡を行うためのJavaScriptライブラリです。\nHandtrack.jsを使用して手のリアルタイム検出を実装する方法をご紹介します。\n以下は今回使用する Handtrack.js の公式サイトになります。\nhandtrack.js\nサンプルコード サンプルはこちらのGitHubにあったものを使用しております。\nwebhacck / handtrackjs-sample\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;リアルタイム動画検出サンプル（handtrack.js）\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- リアルタイム検出を停止するためのボタン --\u0026gt; \u0026lt;button id=\u0026#34;start\u0026#34;\u0026gt;スタート\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;stop\u0026#34;\u0026gt;ストップ\u0026lt;/button\u0026gt;\u0026lt;br\u0026gt; \u0026lt;canvas id=\u0026#34;mycanvas\u0026#34; style=\u0026#34;width:100%; height:100%; max-height:700px; object-fit: contain;\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;video id=\u0026#34;myvideo\u0026#34; width=\u0026#34;480\u0026#34; height=\u0026#34;320\u0026#34; hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/handtrackjs@0.0.13/dist/handtrack.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const canvas = document.getElementById(\u0026#34;mycanvas\u0026#34;); const ctx = canvas.getContext(\u0026#34;2d\u0026#34;); const video = document.getElementById(\u0026#34;myvideo\u0026#34;); const options = { flipHorizontal: true, // 水平方向の反転  maxNumBoxes: 2, // 検出するボックスの最大数  scoreThreshold: 0.6 // 予測信頼度のしきい値  }; let state = true; let model; // 繰り返し利用するために読み込んだ機械学習モデルを格納しておく  document.getElementById(\u0026#34;start\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, startEvent); document.getElementById(\u0026#34;stop\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, stopEvent); // 「手」の検出と結果の出力を繰り返し実行する  function startDetection() { model.detect(video).then(predictions =\u0026gt; { model.renderPredictions(predictions, canvas, ctx, video); if (state) { requestAnimationFrame(startDetection); } }); } // 開始ボタンが押された時にリアルタイム検出の処理を開始  function startEvent() { state = true; ctx.font = \u0026#34;18pt Arial\u0026#34;; ctx.fillText(\u0026#34;モデル読込中...\u0026#34;, 50, 50); handTrack.load(options).then(function(model_data) { model = model_data; // Webカメラを起動する  handTrack.startVideo(video).then(function(status) { if (status) { startDetection(); } else { console.log(\u0026#34;ビデオエラーが検出されました...\u0026#34;, status); } }); }); } // 停止ボタンが押された時にリアルタイム検出の処理を中断する  function stopEvent() { handTrack.stopVideo(video); state = false; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   これで、手のリアルタイム検出が可能になります。\n公式サイトにもありましたが色々とできそうですね。\nサンプル スタート ストップ\n\n\n  const canvas = document.getElementById(\"mycanvas\"); const ctx = canvas.getContext(\"2d\"); const video = document.getElementById(\"myvideo\"); const options = { flipHorizontal: true, // 水平方向の反転 maxNumBoxes: 2, // 検出するボックスの最大数 scoreThreshold: 0.6 // 予測信頼度のしきい値 }; let state = true; let model; // 繰り返し利用するために読み込んだ機械学習モデルを格納しておく document.getElementById(\"start\").addEventListener(\"click\", startEvent); document.getElementById(\"stop\").addEventListener(\"click\", stopEvent); // 「手」の検出と結果の出力を繰り返し実行する function startDetection() { model.detect(video).then(predictions = { model.renderPredictions(predictions, canvas, ctx, video); if (state) { requestAnimationFrame(startDetection); } }); } // 開始ボタンが押された時にリアルタイム検出の処理を開始 function startEvent() { state = true; ctx.font = \"18pt Arial\"; ctx.fillText(\"モデル読込中...\", 50, 50); handTrack.load(options).then(function(model_data) { model = model_data; // Webカメラを起動する handTrack.startVideo(video).then(function(status) { if (status) { startDetection(); } else { console.log(\"ビデオエラーが検出されました...\", status); } }); }); } // 停止ボタンが押された時にリアルタイム検出の処理を中断する function stopEvent() { handTrack.stopVideo(video); state = false; }  参考資料  handtrack.js webhacck / handtrackjs-sample  ","description":"Handtrack.jsを使った手のリアルタイム検出して遊ぶ","id":151,"section":"tech","tags":["JavaScript"],"title":"【JavaScript】Handtrack.jsを使った手のリアルタイム検出","uri":"https://c-a-p-engineer.github.io/tech/2023/05/05/javascript-handtrack/"},{"content":"【Docker】DynamoDB 環境を作る方法 Docker でdynamodb-localとdynamo-adminを使用して DynamoDBの環境を作る。\nこの記事では、Docker Composeを使って、dynamodb-localとdynamo-adminの環境を構築する方法を解説します。\ndynamodb-localは、AWS DynamoDBのローカル開発環境です。\ndynamo-adminは、DynamoDBのデータを管理するためのWebアプリケーションです。\nDocker Composeファイルの作成 まず、docker-compose.ymlという名前のファイルを作成し、以下の内容を記述します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  version:\u0026#39;3.7\u0026#39;services:dynamodb-local:image:amazon/dynamodb-local:latestcontainer_name:dynamodb-localuser:rootcommand:-jar DynamoDBLocal.jar -sharedDb -dbPath /datavolumes:- data/dynamodb:/dataports:- \u0026#34;8000:8000\u0026#34;dynamo-admin:image:aaronshaf/dynamodb-admin:latestcontainer_name:dynamo-adminenvironment:DYNAMO_ENDPOINT:http://dynamodb-local:8000ports:- \u0026#34;8001:8001\u0026#34;depends_on:- dynamodb-local  この設定では、dynamodb-localのイメージは amazon/dynamodb-local を使用し、最新版を指定しています。\nまた、dynamo-adminのイメージは aaronshaf/dynamodb-admin を使用しています。\nコンテナを起動する 次に、ターミナルで以下のコマンドを実行して、dynamodb-localとdynamo-adminのコンテナを起動します。\n1  $ docker-compose up -d   これにより、dynamodb-localが8000番ポート、dynamo-adminが8001番ポートでアクセスできるようになります。\ndynamo-adminにアクセスする ブラウザで http://localhost:8001 にアクセスしてください。\nこれで、dynamo-adminの管理画面が表示されます。ここから、テーブルの作成やデータの操作が可能です。\nまとめ この記事では、Docker Composeを使って簡単にdynamodb-localとdynamo-adminの環境を構築する方法を紹介しました。\nこれにより、DynamoDBの開発環境を手軽に試すことができます。\n参考資料  AWS DynamoDB公式ページ Docker Hub - amazon/dynamodb-local Docker Hub - aaronshaf/dynamodb-admin  ","description":"Docker でdynamodb-localとdynamo-adminを使用して DynamoDBの環境を作る","id":152,"section":"tech","tags":["Docker"],"title":"【Docker】DynamoDB 環境を作る方法","uri":"https://c-a-p-engineer.github.io/tech/2023/04/28/docker-dynamodb/"},{"content":"【Docker】AWS S3 と互換性がある MiniO の環境を構築する方法 この記事では、Docker Composeを使ってMiniOの環境を構築する方法を解説します。\nMiniOは、オープンソースの分散オブジェクトストレージサーバーで、Amazon S3互換のAPIを提供しています。\nこれにより、簡単にオブジェクトストレージを構築ができます。\nDocker Composeファイルの作成 まず、docker-compose.ymlという名前のファイルを作成し、以下の内容を記述します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  version:\u0026#39;3.7\u0026#39;services:minio:image:minio/minio:latestcontainer_name:miniovolumes:- ./data:/dataenvironment:MINIO_ROOT_USER:minioMINIO_ROOT_PASSWORD:minio123command:server /data --address :9000 --console-address :9001ports:- \u0026#34;9000:9000\u0026#34;- \u0026#34;9001:9001\u0026#34;  この設定では、Docker Hub - MiniOイメージを使用し、最新版を指定しています。\nまた、環境変数にMINIO_ROOT_USERとMINIO_ROOT_PASSWORDを設定しています。\nこれらはMiniOの管理者アカウントとパスワードです。適切な値に変更してください。\nMiniOコンテナを起動する ターミナルで以下のコマンドを実行して、MiniOコンテナを起動します。\n1  $ docker-compose up -d   これにより、MiniOコンテナが起動し、9000, 9001番ポートでアクセスできるようになります。\n9000番のポートはAPI、9001番のポートはブラウザからアクセスするためのダッシュボード用になります。\nMiniOにアクセスする ブラウザで http://localhost:9001 にアクセスし、先ほど設定した管理者アカウントとパスワードでログインしてください。\nこれで、MiniOのダッシュボードが表示されます。\nまとめ この記事では、Docker Composeを使って簡単にMiniOの環境を構築する方法を紹介しました。\nこれにより、オブジェクトストレージを手軽に試すことができます。\n参考  MiniO公式ドキュメント Docker Hub - MiniOイメージ  ","description":"Docker でAWS S3 と互換性がある MiniO の環境を構築する方法","id":153,"section":"tech","tags":["Docker"],"title":"【Docker】AWS S3 と互換性がある MiniO の環境を構築する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/04/27/docker-minio/"},{"content":"【Elixir】Ecto V3以上でTelemetryを使ってSQLログを出力する方法 ElixirのEcto V3以上でTelemetryを使用してSQLログを出力する方法について説明します。\nTelemetryは、ErlangおよびElixirアプリケーションのメトリック、トレース、およびログを収集するためのライブラリです。\nこれにより、アプリケーションのパフォーマンスを監視し、問題の特定やデバッグが容易になります。\n環境  Elixir 1.14.2 Ecto 3.9.4  telemetry のインストール まず、telemetry と telemetry_poller をプロジェクトの依存関係に追加してください。\nこれらは、Telemetryイベントを収集し、リアルタイムでログ出力を可能にします。\nmix.exs ファイル内の deps 関数に次のように追加します。\n1 2 3 4 5 6 7  defp deps do [ {:telemetry, \u0026#34;~\u0026gt; 1.0\u0026#34;}, {:telemetry_poller, \u0026#34;~\u0026gt; 1.0\u0026#34;}, # 他の依存関係 ] end   追記が完了したら依存関係をインストール \u0026amp; コンパイルします。\n$ mix deps.get $ mix deps.compile ログモジュールを作成 Telemetryイベントハンドラを設定します。\nプロジェクト内の任意のファイル（例えば lib/my_app/telemetry.ex）にTelemetryハンドラを作成してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13  defmodule MyApp.Telemetry do require Logger def handle_event([:my_app, :repo, :query], measurements, metadata, _config) do # ログにメッセージを出力 query = metadata[:query] source = metadata[:source] result = metadata[:result] duration = measurements[:duration] Logger.info(\u0026#34;[#{source}] #{query}- #{duration}ms - result: #{result}\u0026#34;) end end   イベントの設定 lib/my_app/application.ex ファイル内の start/2 関数内で、次のようにハンドラをアタッチします。\n1 2 3 4 5 6  def start(_type, _args) do # Telemetryハンドラをアタッチ :ok = :telemetry.attach(\u0026#34;my-app-query-logger\u0026#34;, [:my_app, :repo, :query], \u0026amp;MyApp.Telemetry.handle_event/4, nil) # その他のアプリケーション設定 end   これで、アプリケーションがTelemetryを使用してSQLログを出力するように設定されました。\nアプリケーションを実行すると、SQLクエリとその実行時間がログに表示されます。\n参考  logging - Elixir / Phoenix / Ecto: How to customize SQL query log format? - Stack Overflow Ecto.Repo — Ecto v3.9.4  ","description":"ElixirのEcto V3以上でTelemetryを使用してSQLログを出力する方法について説明します。","id":154,"section":"tech","tags":["Elixir"],"title":"【Elixir】Ecto V3以上でTelemetryを使ってSQLログを出力する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/04/26/elixir-ecto-v3-log/"},{"content":"【Elixir】LiveView でファイルをアップロードする Elixir で LiveView で簡単にファイルをアップロードする方法メモ\n環境  Elixir 1.14.2 Phoenix 1.6.3  サンプルコード サンプルコードでは以下のことをできるようになっています。\n ファイルのアップロード アップロードのキャンセル ドラッグ \u0026amp; ドロップでのファイルアップ ファイルの簡単なチェック  単純に実装しようとすると結構なコストなのですが簡単に実装できてありがたいです。\nLiveview アップロードの設定などは以下のページに記載があります。\nUploads — Phoenix LiveView v0.18.18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  defmodule DemoWeb.FileUploadLive.Index do use DemoWeb, :live_view @impl true def mount(_params, _session, socket) do { :ok, socket # アップロード設定 |\u0026gt; allow_upload(:image, accept: ~w(.jpg .jpeg .png)) } end @impl true def handle_event(\u0026#34;validate\u0026#34;, _params, socket) do {:noreply, socket} end @impl true def handle_event(\u0026#34;cancel-entry\u0026#34;, %{\u0026#34;ref\u0026#34; =\u0026gt; ref}, socket) do # アップロードキャンセル {:noreply, cancel_upload(socket, :image, ref)} end @impl true def handle_event(\u0026#34;save\u0026#34;, _params, socket) do uploaded_file = consume_uploaded_entries(socket, :image, fn %{path: path}, entry -\u0026gt; # ファイルアップロード処理 # path はファイルがアップロードされた場所 # entry はアップされたファイル情報 File.cp!(path, entry.client_name) entry.client_name end) # アップロードしたファイルを表示 IO.inspect(uploaded_file) {:noreply, socket |\u0026gt; put_flash(:info, \u0026#34;ファイルアップロード完了\u0026#34;) |\u0026gt; redirect(to: \u0026#34;/\u0026#34;)} end end   テンプレートファイル 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  \u0026lt;form phx-change=\u0026#34;validate\u0026#34; phx-submit=\u0026#34;save\u0026#34;\u0026gt; \u0026lt;!-- アップロードされたらファイルアップ箇所は非表示 --\u0026gt; \u0026lt;div class=\u0026#34;columns is-centered\u0026#34; style={ if @uploads.image.entries != [], do: \u0026#34;display:none\u0026#34; }\u0026gt; \u0026lt;!-- ファイルをドラッグ \u0026amp; ドロップでもアップロードすることが可能 --\u0026gt; \u0026lt;div class=\u0026#34;file is-boxed\u0026#34; phx-drop-target={ @uploads.image.ref }\u0026gt; \u0026lt;label class=\u0026#34;file-label\u0026#34;\u0026gt; \u0026lt;%= live_file_input @uploads.image, class: \u0026#34;file-input\u0026#34; %\u0026gt; \u0026lt;span class=\u0026#34;file-cta\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;file-label p-6\u0026#34;\u0026gt; Choose a file… \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%= # アップロードされたら表示 for entry \u0026lt;- @uploads.image.entries do %\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;%= live_img_preview entry %\u0026gt; \u0026lt;figcaption\u0026gt;\u0026lt;%= entry.client_name %\u0026gt;\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;%= # アップロードキャンセルボタン submit gettext(\u0026#34;Cancel\u0026#34;), type: \u0026#34;button\u0026#34;, phx_click: \u0026#34;cancel-entry\u0026#34;, phx_value_ref: entry.ref %\u0026gt; \u0026lt;%= # エラー表示 for err \u0026lt;- upload_errors(@uploads.image, entry) do %\u0026gt; \u0026lt;p class=\u0026#34;alert alert-danger\u0026#34;\u0026gt;\u0026lt;%= err %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= submit gettext(\u0026#34;Save\u0026#34;), phx_disable_with: gettext(\u0026#34;Saving...\u0026#34;) %\u0026gt; \u0026lt;/form\u0026gt;   このだけで簡単にファイルのアップロードが可能になります。\n参考  Uploads — Phoenix LiveView v0.18.18  ","description":"Elixir で LiveView で簡単にファイルをアップロードする方法メモ","id":155,"section":"tech","tags":["Elixir"],"title":"【Elixir】LiveView でファイルをアップロードする","uri":"https://c-a-p-engineer.github.io/tech/2023/04/23/elixir-liveview-fileupload/"},{"content":"【Elixir】LiveView でボタンクリック時に確認ダイアログを簡単に出す方法 Elixir で LiveView でボタンクリック時に確認ダイアログを簡単に出す方法\n環境  Elixir 1.14.2 Phoenix 1.6.3  サンプルコード data_confirm の属性をつければ良いだけで簡単に確認ダイアログが出力されます。\n1 2 3  \u0026lt;form action=\u0026#34;/your_action\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;%= submit \u0026#34;Submit\u0026#34;, data_confirm: \u0026#34;Are you sure?\u0026#34; %\u0026gt; \u0026lt;/form\u0026gt;   今回は submit で行いましたがボタンやリンクなどのタグでも同様にできる模様です。\n参考  Phoenix.HTML.Link — Phoenix.HTML v3.3.1  ","description":"Elixir で LiveView でボタンクリック時に確認ダイアログを簡単に出す方法","id":156,"section":"tech","tags":["Elixir"],"title":"【Elixir】LiveView でボタンクリック時に確認ダイアログを簡単に出す方法","uri":"https://c-a-p-engineer.github.io/tech/2023/04/21/elixir-liveview-confirmpho/"},{"content":"【PHP】CLIで簡単にテキストに色を付ける方法 PHP で CLI 実行時に少々色を付けたいなと思って作ってみました。\nANSIエスケープコードを使用することでターミナル上で色が付きます。\nサンプルコード サンプルコードです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100  \u0026lt;?php class CliColor { public const BLACK = \u0026#39;black\u0026#39;; public const RED = \u0026#39;red\u0026#39;; public const GREEN = \u0026#39;green\u0026#39;; public const YELLOW = \u0026#39;yellow\u0026#39;; public const BLUE = \u0026#39;blue\u0026#39;; public const MAGENTA = \u0026#39;magenta\u0026#39;; public const CYAN = \u0026#39;cyan\u0026#39;; public const WHITE = \u0026#39;white\u0026#39;; public const BRIGHT_BLACK = \u0026#39;bright_black\u0026#39;; public const BRIGHT_RED = \u0026#39;bright_red\u0026#39;; public const BRIGHT_GREEN = \u0026#39;bright_green\u0026#39;; public const BRIGHT_YELLOW = \u0026#39;bright_yellow\u0026#39;; public const BRIGHT_BLUE = \u0026#39;bright_blue\u0026#39;; public const BRIGHT_MAGENTA = \u0026#39;bright_magenta\u0026#39;; public const BRIGHT_CYAN = \u0026#39;bright_cyan\u0026#39;; public const BRIGHT_WHITE = \u0026#39;bright_white\u0026#39;; public const BG_BLACK = \u0026#39;bg_black\u0026#39;; public const BG_RED = \u0026#39;bg_red\u0026#39;; public const BG_GREEN = \u0026#39;bg_green\u0026#39;; public const BG_YELLOW = \u0026#39;bg_yellow\u0026#39;; public const BG_BLUE = \u0026#39;bg_blue\u0026#39;; public const BG_MAGENTA = \u0026#39;bg_magenta\u0026#39;; public const BG_CYAN = \u0026#39;bg_cyan\u0026#39;; public const BG_WHITE = \u0026#39;bg_white\u0026#39;; public const BG_BRIGHT_BLACK = \u0026#39;bg_bright_black\u0026#39;; public const BG_BRIGHT_RED = \u0026#39;bg_bright_red\u0026#39;; public const BG_BRIGHT_GREEN = \u0026#39;bg_bright_green\u0026#39;; public const BG_BRIGHT_YELLOW = \u0026#39;bg_bright_yellow\u0026#39;; public const BG_BRIGHT_BLUE = \u0026#39;bg_bright_blue\u0026#39;; public const BG_BRIGHT_MAGENTA = \u0026#39;bg_bright_magenta\u0026#39;; public const BG_BRIGHT_CYAN = \u0026#39;bg_bright_cyan\u0026#39;; public const BG_BRIGHT_WHITE = \u0026#39;bg_bright_white\u0026#39;; public const RESET = \u0026#39;reset\u0026#39;; /** * 色定義 */ private const COLORS = [ self::BLACK =\u0026gt; \u0026#34;\\033[0;30m\u0026#34;, self::RED =\u0026gt; \u0026#34;\\033[0;31m\u0026#34;, self::GREEN =\u0026gt; \u0026#34;\\033[0;32m\u0026#34;, self::YELLOW =\u0026gt; \u0026#34;\\033[0;33m\u0026#34;, self::BLUE =\u0026gt; \u0026#34;\\033[0;34m\u0026#34;, self::MAGENTA =\u0026gt; \u0026#34;\\033[0;35m\u0026#34;, self::CYAN =\u0026gt; \u0026#34;\\033[0;36m\u0026#34;, self::WHITE =\u0026gt; \u0026#34;\\033[0;37m\u0026#34;, self::BRIGHT_BLACK =\u0026gt; \u0026#34;\\033[1;30m\u0026#34;, self::BRIGHT_RED =\u0026gt; \u0026#34;\\033[1;31m\u0026#34;, self::BRIGHT_GREEN =\u0026gt; \u0026#34;\\033[1;32m\u0026#34;, self::BRIGHT_YELLOW =\u0026gt; \u0026#34;\\033[1;33m\u0026#34;, self::BRIGHT_BLUE =\u0026gt; \u0026#34;\\033[1;34m\u0026#34;, self::BRIGHT_MAGENTA =\u0026gt; \u0026#34;\\033[1;35m\u0026#34;, self::BRIGHT_CYAN =\u0026gt; \u0026#34;\\033[1;36m\u0026#34;, self::BRIGHT_WHITE =\u0026gt; \u0026#34;\\033[1;37m\u0026#34;, self::BG_BLACK =\u0026gt; \u0026#34;\\033[40m\u0026#34;, self::BG_RED =\u0026gt; \u0026#34;\\033[41m\u0026#34;, self::BG_GREEN =\u0026gt; \u0026#34;\\033[42m\u0026#34;, self::BG_YELLOW =\u0026gt; \u0026#34;\\033[43m\u0026#34;, self::BG_BLUE =\u0026gt; \u0026#34;\\033[44m\u0026#34;, self::BG_MAGENTA =\u0026gt; \u0026#34;\\033[45m\u0026#34;, self::BG_CYAN =\u0026gt; \u0026#34;\\033[46m\u0026#34;, self::BG_WHITE =\u0026gt; \u0026#34;\\033[47m\u0026#34;, self::BG_BRIGHT_BLACK =\u0026gt; \u0026#34;\\033[100m\u0026#34;, self::BG_BRIGHT_RED =\u0026gt; \u0026#34;\\033[101m\u0026#34;, self::BG_BRIGHT_GREEN =\u0026gt; \u0026#34;\\033[102m\u0026#34;, self::BG_BRIGHT_YELLOW =\u0026gt; \u0026#34;\\033[103m\u0026#34;, self::BG_BRIGHT_BLUE =\u0026gt; \u0026#34;\\033[104m\u0026#34;, self::BG_BRIGHT_MAGENTA =\u0026gt; \u0026#34;\\033[105m\u0026#34;, self::BG_BRIGHT_CYAN =\u0026gt; \u0026#34;\\033[106m\u0026#34;, self::BG_BRIGHT_WHITE =\u0026gt; \u0026#34;\\033[107m\u0026#34;, self::RESET =\u0026gt; \u0026#34;\\033[0m\u0026#34;, ]; /** * 指定された色でテキストを装飾した文字列を返します。 * * @param string|null $text 色を付けるテキスト。 * @param string|array|null $colors テキストに適用する色。単一の色または複数の色の配列。 * @return string 色付きテキストの文字列。 */ public static function text(?string $text, string | array | null $colors = null): string { if (!is_array($colors)) { $colors = [$colors]; } $coloredText = \u0026#34;\u0026#34;; foreach ($colors as $color) { if (array_key_exists($color, self::COLORS)) { $coloredText .= self::COLORS[$color]; } } return $coloredText . $text . self::COLORS[self::RESET]; } }   実行 試しに実行してみます。\n1 2 3 4 5 6  # 通常出力 echo CliColor::text(\u0026#34;Hello, World!\u0026#34;) . PHP_EOL; # 赤い文字 echo CliColor::text(\u0026#34;Hello, World!\u0026#34;, CliColor::RED) . PHP_EOL; # 白文字、赤背景 echo CliColor::text(\u0026#34;Hello, World!\u0026#34;, [CliColor::WHITE, CliColor::BG_RED]) . PHP_EOL;   下のように出力されます。\n参考  ANSIエスケープシーケンス チートシート - Qiita  ","description":"PHP CLI で簡単にテキストに色を付ける方法","id":157,"section":"tech","tags":["PHP"],"title":"【PHP】CLIで簡単にテキストに色を付ける方法","uri":"https://c-a-p-engineer.github.io/tech/2023/04/17/php-cli-text-color/"},{"content":"【Elixir】PhoenixLiveSession 使用時にテストでエラーが出る対処方法 PhoenixLiveSession 使用時にテストする際、エラーが出てしまいます。\n今回はその対処方法をメモです。\n環境  Elixir 1.14.2 Phoenix 1.6.3 PhoenixLiveSession 0.1.3  エラー LiveViewSessionを使用した箇所で以下のエラーが発生しました。\n** (KeyError) key :__sid__ not found in: %{\u0026quot;_csrf_token\u0026quot; =\u0026gt; \u0026quot;XXXXXXXXXXXXXXX\u0026quot;} :erlang.map_get(:__sid__, %{\u0026quot;_csrf_token\u0026quot; =\u0026gt; \u0026quot;XXXXXXXXXXXXXXX\u0026quot;}) 原因 原因は PhoenixLiveSession 使用時に、セッションに :__sid__ が入るのですがテスト時に入ってないことが原因でした。\n他にも :__opts__ が入っていないことが原因でした。\n対処方法 対処方法は PhoenixLiveSession に必要なデータをセッションに入れることで可能です。\ntest/support/conn_case.ex の tags を編集します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  setup tags do pid = Ecto.Adapters.SQL.Sandbox.start_owner!(Demo.Repo, shared: not tags[:async]) on_exit(fn -\u0026gt; Ecto.Adapters.SQL.Sandbox.stop_owner(pid) end) # セッション生成 conn = Phoenix.ConnTest.build_conn() |\u0026gt; Plug.Test.init_test_session(%{}) # PhoenixLiveSession conn = put_in( conn.private[:plug_session], Map.put(conn.private[:plug_session], :__sid__, \u0026#34;XXXXXXXXX\u0026#34;) ) opts = PhoenixLiveSession.init([]) |\u0026gt; Keyword.put_new(:pub_sub, Demo.PubSub) conn = put_in( conn.private[:plug_session], Map.put(conn.private[:plug_session], :__opts__, opts) ) {:ok, conn: conn} end   これで PhoenixLiveSession を使用したLiveViewにも対応できました。\n","description":"PhoenixLiveSession 使用時にテストする際、エラーが出てしまいます。今回はその対処方法をメモです。","id":158,"section":"tech","tags":["Elixir"],"title":"【Elixir】PhoenixLiveSession 使用時にテストでエラーが出る対処方法","uri":"https://c-a-p-engineer.github.io/tech/2023/04/08/elixir-phoenix_live_session-test/"},{"content":"【Elixir】LiveView でパスワードが消えてしまう現象の解決方法 Elixir で開発されたアプリケーションからSlackにログを送信する方法を紹介します。\n環境  Elixir 1.14.2  SlackLog SlackLog を入れることにより開発チームはSlackでアプリケーションのログをリアルタイムで確認でき、問題の検出や解決がスムーズになります。\nSlackLog のインストール まず、slack_log をプロジェクトに追加します。\nmix.exs の deps 関数に以下のコードを追加してください。\n1 2 3 4 5  defp deps do [ {:slack_log, \u0026#34;~\u0026gt; 0.1.0\u0026#34;} ] end   次に、ターミナルで mix deps.get コマンドを実行し、依存関係を取得してください。\n設定ファイルの編集 次に、ログ出力の設定を行います。\nconfig/config.exs ファイルに以下の設定を追加してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  # ロガー設定 config :logger, backends: [{SlackLog, :error_log}] # Slackログ設定 config :logger, :error_log, slack_url: \u0026#34;https://url_for_slack_hook\u0026#34;,　# Slack Webhook URL level: :error, # Slack Send Log Level metadata: [:file, :line, :function] # 各ログレベルのヘッダー設定 config :slack_log, :headers, emergency: \u0026#34;💀 New Emergency!!!\u0026#34;, alert: \u0026#34;💀 New Alert!!!\u0026#34;, critical: \u0026#34;❌ New Critical Error!!!\u0026#34;, error: \u0026#34;❌ New Error\u0026#34;, warning: \u0026#34;❌ New Warning\u0026#34;, notice: \u0026#34;ℹ️ New Notice\u0026#34;, info: \u0026#34;ℹ️ New Info\u0026#34;, debug: \u0026#34;ℹ️ New Debug Message\u0026#34;   ログの通知 設定が完了したら、あとは通常通り Logger モジュールを使用してSlackへ通知されます。\n1  Logger.error(\u0026#34;エラーレベルのログです。\u0026#34;)   これで、Slackに通知されます。\n参考  SlackLog — slack_log v0.1.2  ","description":"Elixir で開発されたアプリケーションからSlackにログを送信する方法を紹介します。","id":159,"section":"tech","tags":["Elixir"],"title":"【Elixir】SlackLog を使って Slack にログを送る方法","uri":"https://c-a-p-engineer.github.io/tech/2023/04/08/elixir-slack_log/"},{"content":"【Elixir】logger_file_backend を使用してログをファイルに出力する方法 Elixir で logger_file_backend を使用してログをファイルに出力する方法を紹介します。\n環境  Elixir 1.14.2  logger_file_backend Elixir では、標準で Logger モジュールが提供されており、これを利用して簡単にログを取得できます。\nただし、デフォルトでは標準出力にログが出力されるため、ファイルに出力するには logger_file_backend というライブラリを使うことで実現できます。\nlogger_file_backend のインストール まず、logger_file_backend をプロジェクトに追加します。\nmix.exs の deps 関数に以下のコードを追加してください。\n1 2 3 4 5  defp deps do [ {:logger_file_backend, \u0026#34;~\u0026gt; 0.0.10\u0026#34;} ] end   次に、ターミナルで mix deps.get コマンドを実行し、依存関係を取得してください。\n設定ファイルの編集 次に、ログ出力の設定を行います。\nconfig/config.exs ファイルに以下の設定を追加してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # ロガーの設定 config :logger, backends: [{LoggerFileBackend, :info_log}, {LoggerFileBackend, :error_log}, :console] # infoログの設定 config :logger, :info_log, level: :info, path: \u0026#34;log/info.log\u0026#34;, format: \u0026#34;$time $metadata[$level] $message\\n\u0026#34;, metadata: [:request_id] # errorログの設定 config :logger, :error_log, level: :error, path: \u0026#34;log/error.log\u0026#34;, format: \u0026#34;$time $metadata[$level] $message\\n\u0026#34;, metadata: [:request_id]   この設定では、log/info.log に情報レベル（:info）のログが、log/error.log にエラーレベル（:error）のログがそれぞれ出力されるようになります。また、ログのフォーマットやメタデータも指定できます。\nログの出力 設定が完了したら、あとは通常通り Logger モジュールを使用してログを出力できます。\nたとえば、以下のように Logger.info/2 や Logger.error/2 を使ってログを出力できます。\n1 2  Logger.info(\u0026#34;情報レベルのログです。\u0026#34;) Logger.error(\u0026#34;エラーレベルのログです。\u0026#34;)   これで、指定したファイルにログが出力されるようになります。\n参考  Overview — logger_file_backend v0.0.13  ","description":"Elixir で logger_file_backend を使用してログをファイルに出力する方法を紹介します。","id":160,"section":"tech","tags":["Elixir"],"title":"【Elixir】logger_file_backend を使用してログをファイルに出力する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/04/08/elixir-logger_file_backend/"},{"content":"【PHP】Webクローラーを作ってみた PHP で自作のWebクローラーを作ってみた。\nWebクローラー説明 WebクローラーはWebを巡回するものですが今回作ったのは以下のようなものです。\n 対象のURLからのリンクを辿る 特定のURL配下のものだけしか辿らない（無限にリンク先を辿ってしまうため タイトルとURLを保存する  本来のWebクローラーとは少々違いますが色々使えそうなのでブログにメモしておこうとこの記事を書いてます。\n警告\nWebクローラーを扱う際には接続先に負荷がかかる可能性、短期間の大量アクセスでのアクセス禁止にされたりする可能性があります。\nなので使用する際はご注意ください。  本来もっと高速化しようかと考えていましたが色々な危険のため、やめました。\n必要があれば sleep などを入れて調整してください。\nサンプルコード サンプルコードはこちらです。\n今回はパッケージなどを入れないできるだけシンプルな形で作りました。\n一応クラス化してあります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117  \u0026lt;?php /** * Webクローラー */ class WebCrawl { /** * ベースURL * * @var string */ private string $baseUrl; /** * 取得URLリスト * * @var array */ public array $internalLinks = []; /** * コンストラクタ * * @param string $baseUrl ベースURL */ public function __construct(string $baseUrl) { $this-\u0026gt;baseUrl = $baseUrl; } /** * クロール実行 * * @param string $url クロール対象URL * @return void */ public function crawl(string $url): void { $url = $this-\u0026gt;removeFragment($url); if (isset($this-\u0026gt;internalLinks[$url])) { return; } if (strpos($url, $this-\u0026gt;baseUrl) !== 0) { return; } $html = @file_get_contents($url); if ($html === false) { return; } $this-\u0026gt;internalLinks[$url] = \u0026#39;\u0026#39;; $dom = new DOMDocument(); @$dom-\u0026gt;loadHTML($html); $xpath = new DOMXPath($dom); $title = $xpath-\u0026gt;query(\u0026#39;//title\u0026#39;); $title = $title-\u0026gt;item(0) ? $title-\u0026gt;item(0)-\u0026gt;textContent : \u0026#39;\u0026#39;; $this-\u0026gt;internalLinks[$url] = $title; $links = $xpath-\u0026gt;query(\u0026#39;//a/@href\u0026#39;); foreach ($links as $link) { $href = $link-\u0026gt;nodeValue; if ($this-\u0026gt;isRelativeUrl($href)) { $href = $this-\u0026gt;makeAbsoluteUrl($url, $href); } $this-\u0026gt;crawl($href, $this-\u0026gt;baseUrl); } } /** * URL検証 * * @param string $url URL * @return boolean */ private function isRelativeUrl(string $url): bool { return !preg_match(\u0026#39;/^https?:\\/\\//\u0026#39;, $url); } /** * 絶対パスを取得 * * @param string $currentUrl 現在のURL * @param string $relativeUrl URLパス * @return string 絶対URL */ private function makeAbsoluteUrl(string $currentUrl, string $relativeUrl): string { if (substr($relativeUrl, 0, 1) === \u0026#39;/\u0026#39;) { return $this-\u0026gt;baseUrl . $relativeUrl; } return rtrim($currentUrl, \u0026#39;/\u0026#39;) . \u0026#39;/\u0026#39; . ltrim($relativeUrl, \u0026#39;/\u0026#39;); } /** * アンカーリンクを削除 * * @param string $url 対象のURL * @return string アンカーリンク削除済みURL */ private function removeFragment($url): string { $hashPosition = strpos($url, \u0026#39;#\u0026#39;); if ($hashPosition !== false) { $url = substr($url, 0, $hashPosition); } return $url; } }   実行部分はこちら。\n色々と実行時間やメモリの計測なども行っています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  // 実行時間 無期限 set_time_limit(0); $startUrl = \u0026#39;https://c-a-p-engineer.github.io\u0026#39;; $baseUrl = \u0026#39;https://c-a-p-engineer.github.io\u0026#39;; $internalLinks = []; $startTime = microtime(true); // Webクロール実行 $crawl = new WebCrawl($baseUrl); $crawl-\u0026gt;crawl($startUrl); $internalLinks = $crawl-\u0026gt;internalLinks; $endTime = microtime(true); // 各種情報を出力 ksort($internalLinks); echo \u0026#34;Internal Links:\\n\u0026#34;; foreach ($internalLinks as $url =\u0026gt; $title) { echo $url . \u0026#34; - \u0026#34; . $title . \u0026#34;\\n\u0026#34;; } echo \u0026#34;Links Count:\u0026#34; . count($internalLinks) . \u0026#34;\\n\u0026#34;; echo \u0026#34;Execution Time: \u0026#34; . ($endTime - $startTime) . \u0026#34; seconds\\n\u0026#34;; echo \u0026#34;Memory Usage: \u0026#34; . (memory_get_peak_usage(true) / 1024 / 1024) . \u0026#34; MB\\n\u0026#34;;   自分のブログを対象にしてみましたが結果は以下のようになりました。\n1秒間に3～4ページを処理している計算になります。\nLinks Count:2783 Execution Time: 794.42966103554 seconds Memory Usage: 82 MB ","description":"PHP で自作のWebクローラーを作ってみた","id":161,"section":"tech","tags":["PHP"],"title":"【PHP】Webクローラーを作ってみた","uri":"https://c-a-p-engineer.github.io/tech/2023/04/04/php-web-crawl/"},{"content":"【Elixir】LiveView でパスワードが消えてしまう現象の解決方法 Elixir で LiveView でパスワードが消えてしまう現象がありました。\nその解決方法メモ。\n環境  Elixir 1.14.2 Phoenix 1.6.3  現象 以下のような LiveView を使用してログインフォームを作ったところ、パスワード欄に入力した値が消える現象が時折発生。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;.form let={f} for={@changeset} id=\u0026#34;login-form\u0026#34; phx-change=\u0026#34;validate\u0026#34; phx-submit=\u0026#34;save\u0026#34;\u0026gt; \u0026lt;%= label f, :email, \u0026#34;Email\u0026#34; %\u0026gt; \u0026lt;%= text_input f, :email %\u0026gt; \u0026lt;%= error_tag f, :email %\u0026gt; \u0026lt;%= label f, :password, \u0026#34;Password\u0026#34; %\u0026gt; \u0026lt;%= password_input f, :password %\u0026gt; \u0026lt;%= error_tag f, :password %\u0026gt; \u0026lt;div\u0026gt; \u0026lt;%= submit \u0026#34;Save\u0026#34;, phx_disable_with: \u0026#34;Saving...\u0026#34; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/.form\u0026gt;   原因 原因は パスワードの入力値は再利用できない とのことです。\nこれによってフォームのバリデーションチェックが走って changeset が返って来たタイミングで再利用できないため削除されてしまうようです。\n Form bindings — Phoenix LiveView v0.18.18 #Password inputs   対策 changeset の再設定時にパスワードの値を変更しない設定を入れることによって変更されなくなります。\n具体的には phx_update: \u0026quot;ignore\u0026quot; を足して上げるだけで解決できます。\n DOM patching \u0026amp; temporary assigns — Phoenix LiveView v0.18.18  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;.form let={f} for={@changeset} id=\u0026#34;login-form\u0026#34; phx-change=\u0026#34;validate\u0026#34; phx-submit=\u0026#34;save\u0026#34;\u0026gt; \u0026lt;%= label f, :email, \u0026#34;Email\u0026#34; %\u0026gt; \u0026lt;%= text_input f, :email %\u0026gt; \u0026lt;%= error_tag f, :email %\u0026gt; \u0026lt;%= label f, :password, \u0026#34;Password\u0026#34; %\u0026gt; \u0026lt;%= password_input f, :password, phx_update: \u0026#34;ignore\u0026#34; %\u0026gt;  \u0026lt;%= error_tag f, :password %\u0026gt; \u0026lt;div\u0026gt; \u0026lt;%= submit \u0026#34;Save\u0026#34;, phx_disable_with: \u0026#34;Saving...\u0026#34; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/.form\u0026gt;   参考  Form bindings — Phoenix LiveView v0.18.18 #Password inputs  DOM patching \u0026amp; temporary assigns — Phoenix LiveView v0.18.18  ","description":"Elixir で LiveView でパスワードが消えてしまう現象がありました。その解決方法メモ。","id":162,"section":"tech","tags":["Elixir"],"title":"【Elixir】LiveView でパスワードが消えてしまう現象の解決方法","uri":"https://c-a-p-engineer.github.io/tech/2023/03/31/elixir-liveview-password/"},{"content":"【Elixir】if 文からの返り値をもらう方法 Elixir で if 文からの返り値をもらう方法メモ。\nElixir は if 文内の変更を if 文外に作用させないため if文内での処理結果をもらう時に使い方です。\n環境  Elixir 1.14.2  if 文からの返り値をもらう方法 if 文から実際に返り値をもらう方法のサンプルコードです。\n1 2 3 4 5 6 7 8 9  some_condition = true value = if some_condition do \u0026#34;true_branch_value\u0026#34; else \u0026#34;false_branch_value\u0026#34; end IO.puts(\u0026#34;The result of the if expression is: #{value}\u0026#34;)   こうすることによってif文内での処理結果をもらいif文外で使用ができます。\n","description":"Elixir で if 文からの返り値をもらう方法メモ。Elixir は if 文内の変更を if 文外に作用させないため if文内での処理結果をもらう時に使い方です。","id":163,"section":"tech","tags":["Elixir"],"title":"【Elixir】if 文からの返り値をもらう方法","uri":"https://c-a-p-engineer.github.io/tech/2023/03/31/elixir-if-return/"},{"content":"【Elixir】ヒアドキュメントで制御構文を使用する方法 Elixir のヒアドキュメントで制御構文を使用する方法。\nこれにより、動的な文字列を生成する際に、より簡潔で読みやすいコードを書くことができます。\n環境  Elixir 1.14.2  ヒアドキュメント ヒアドキュメントは、複数行にわたる文字列を記述するための便利な構文です。\nElixir では、シングルクォート (''') またはダブルクォート (\u0026quot;\u0026quot;\u0026quot;) を使用してヒアドキュメントを以下のように定義できます。\n1 2 3 4 5  long_string = \u0026#34;\u0026#34;\u0026#34; This is a multiline string. \u0026#34;\u0026#34;\u0026#34;   ヒアドキュメント内で式展開を使用する 以下のようにヒアドキュメント内で式を展開することが可能です。\n1 2 3 4 5 6 7 8  number = 3 result = \u0026#34;\u0026#34;\u0026#34; The number #{number}is #{if rem(number, 2) == 0, do: \u0026#34;even\u0026#34;, else: \u0026#34;odd\u0026#34;}. \u0026#34;\u0026#34;\u0026#34; IO.puts(result) # The number 3 is odd.   こちらは複数行のヒアドキュメントないで式を展開する例です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  number = 4 result = \u0026#34;\u0026#34;\u0026#34; The number #{number}is #{if rem(number, 2) == 0 do \u0026#34;even\u0026#34; else \u0026#34;odd\u0026#34; end}. \u0026#34;\u0026#34;\u0026#34; IO.puts(result) # The number 3 is # even.   これでメールなどの文面を作る際に条件をヒアドキュメント内で書けるので使い勝手が良いです。\n","description":"Elixir のヒアドキュメントで制御構文を使用する方法。これにより、動的な文字列を生成する際に、より簡潔で読みやすいコードを書くことができます。","id":164,"section":"tech","tags":["Elixir"],"title":"【Elixir】ヒアドキュメントで制御構文を使用する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/03/29/elixir-heredoc-if/"},{"content":"【Elixir】Bambooを使って簡単にメール送信する方法 Elixir で Bamboo を使って簡単にメール送信する方法。\nメール送信を行う Bamboo のドキュメントはこちらです。\n Bamboo — bamboo v2.3.0 thoughtbot/bamboo  Bamboo はさまざまなアダプターが用意されていていますが、今回はSMTPでの送信方法のサンプルをご紹介します。\n環境  Elixir 1.14.2 Bamboo 2.2.0 Bamboo SMTP 4.2.2  Bamboo のインストール方法 Bamboo をプロジェクトに追加するには、mix.exs ファイルの deps 関数に Bamboo を追加します。\n1 2 3 4 5 6  def deps do [ {:bamboo, \u0026#34;~\u0026gt; 2.2.0\u0026#34;}, {:bamboo_smtp, \u0026#34;~\u0026gt; 4.2.2\u0026#34;} ] end   その後、ターミナルで mix deps.get コマンドを実行して、Bamboo をインストールします。\n使用方法 設定 SMTPのメール送信設定を行います。\n1 2 3 4 5 6 7 8 9 10  # Mail Setting config :demo, Demo.Mailer, adapter: Bamboo.SMTPAdapter, server: \u0026#34;smtp.example.com\u0026#34;, port: 587, username: \u0026#34;your_username\u0026#34;, password: \u0026#34;your_password\u0026#34;, tls: :if_available, ssl: false, retries: 1   僕はローカルで mailhog を使っているので dev.exs に以下のような設定を入れております。\n（mailhog のポートは 1025\n1 2 3 4 5  config :demo, Demo.Mailer, adapter: Bamboo.SMTPAdapter, server: \u0026#34;mailhog\u0026#34;, port: 1025, tls: :none   モジュールの作成 メーラーモジュールを作成します。\n1 2 3  defmodule Demo.Mailer do use Bamboo.Mailer, otp_app: :demo end   メール作成関数の作成 メール作成するための関数を定義します。\n1 2 3 4 5 6 7 8 9 10 11 12  defmodule Demo.Email do import Bamboo.Email def welcome_email(to_email) do new_email() |\u0026gt; to(to_email) |\u0026gt; from(\u0026#34;from@example.com\u0026#34;) |\u0026gt; subject(\u0026#34;Welcome to MyApp!\u0026#34;) |\u0026gt; text_body(\u0026#34;Hello! Thanks for joining MyApp.\u0026#34;) |\u0026gt; html_body(\u0026#34;\u0026lt;strong\u0026gt;Hello!\u0026lt;/strong\u0026gt; Thanks for joining MyApp.\u0026#34;) end end   メール送信実行 以下のコードでメール送信が可能です。\nalias Demo.Email alias Demo.Mailer email = Email.welcome_email(\u0026quot;to@example.com\u0026quot;) Mailer.deliver_later(email) 参考  Bamboo — bamboo v2.3.0 thoughtbot/bamboo Bamboo.SMTPAdapter — Bamboo SMTP Adapter v4.2.2  ","description":"Elixir で Bamboo を使って簡単にメール送信する方法","id":165,"section":"tech","tags":["Elixir"],"title":"【Elixir】Bambooを使って簡単にメール送信する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/03/27/elixir-mail-bamboo/"},{"content":"【PHP】ob_flushを使用して1秒毎に時刻を表示する方法 PHP で ob_flush を使用して1秒毎に時刻を表示する方法。\nこの方法は、ウェブページ上でリアルタイムな情報を表示する際に役立ちます。\nサンプルコード サンプルコードです。\n1秒毎に1分間、時刻を出力します。\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?php // 実行時間の無制限 set_time_limit(0); // 出力バッファクリア ob_start(); for ($i = 0; $i \u0026lt; 60; $i++) { //　時刻表示  echo date(\u0026#39;Y/m/d H:i:s\u0026#39;) . \u0026#39;\\n\u0026#39;; ob_flush(); flush(); sleep(1); } ob_end_flush();   関数説明 各関数の簡単な説明です。\n ob_start\nこの関数は、出力バッファリングを開始します。\n出力バッファリングを有効にすると、スクリプトから出力されるデータが一時的にバッファに保存され、特定の条件が満たされた場合や明示的にフラッシュされるまでクライアントに送信されません。\nこれにより、ページの一部を先に送信するなど、より柔軟な出力制御が可能になります。 ob_flush\nこの関数は、現在の出力バッファの内容をクライアントに送信し、バッファをクリアします。\nこの関数を使用すると、スクリプトの実行中にバッファの内容を段階的にクライアントに送信できます。 flush\nこの関数は、出力バッファをシステムにフラッシュし、実際にクライアントにデータを送信します。\nflush 関数は、ob_flush と組み合わせて使用することが一般的です。\nob_flush で出力バッファの内容を送信した後、flush を使用してシステムにフラッシュし、データをクライアントに送信します。 ob_end_flush\nこの関数は、出力バッファリングを終了し、バッファ内の残りのデータをクライアントに送信します。\nスクリプトの最後にこの関数を呼び出すことで、バッファリングを終了し、すべてのデータがクライアントに送信されることを確認できます。  参考  PHP: ob_start - Manual PHP: ob_flush - Manual PHP: flush - Manual PHP: ob_end_flush - Manual  ","description":"PHP で ob_flush を使用して1秒毎に時刻を表示する方法","id":166,"section":"tech","tags":["PHP"],"title":"【PHP】ob_flushを使用して1秒毎に時刻を表示する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/03/25/php-ob_flush/"},{"content":"【Javascript】Stream API を使って PHP から現在時刻を表示するサンプル JavaScriptのStreams APIとPHPを使って、1秒ごとに時刻を更新する方法を説明します。\nサーバー側で1秒ごとに時刻を生成し、ブラウザ側でその時刻をリアルタイムで表示する方法を紹介します。\nこれを使うことでサーバー側の処理状況などHTML側でリアルタイムに受け取って進行状況などを表示することができるかと思います。\nサンプルコード PHPとHTMLのサンプルコードです。\nPHP PHPの処理です。\n無限ループを実行し、1秒ごとに現在の時刻を送信します。\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;?php // 実行時間の無制限 set_time_limit(0); // 出力バッファクリア ob_start(); while (true) { //　時刻表示  echo date(\u0026#39;Y/m/d H:i:s\u0026#39;) . \u0026#39;\\n\u0026#39;; ob_flush(); flush(); sleep(1); }   HTML HTML側の処理です。\nJavascriptも一緒に入っております。\n1秒毎に更新されるデータを受け取って画面に表示されるようにしております。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;時刻表示\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;time\u0026#34;\u0026gt;時刻を取得中...\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; async function fetchTimeStream() { const response = await fetch(\u0026#39;time_stream.php\u0026#39;); const reader = response.body.getReader(); const decoder = new TextDecoder(\u0026#39;utf-8\u0026#39;); let buffer = \u0026#39;\u0026#39;; while (true) { const { value, done } = await reader.read(); if (done) break; // ストリームを受け取る  buffer += decoder.decode(value, { stream: true }); const lines = buffer.split(\u0026#39;\\n\u0026#39;); if (lines.length \u0026gt; 1) { const time = lines.shift(); buffer = lines.join(\u0026#39;\\n\u0026#39;); document.getElementById(\u0026#39;time\u0026#39;).innerText = `現在の時刻: ${time}`; } } } fetchTimeStream(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   参考  ストリーム API - MDN Web Docs  ","description":"JavaScriptのStreams APIとPHPを使って、1秒ごとに時刻を更新する方法を説明します。","id":167,"section":"tech","tags":["JavaScript"],"title":"【Javascript】Stream API を使って PHP から現在時刻を表示するサンプル","uri":"https://c-a-p-engineer.github.io/tech/2023/03/25/javascript-stream-api-php/"},{"content":"【Elixir】キャッシュを簡単に扱う方法: Cachex の紹介 Elixir では、Cachex という強力なキャッシュライブラリを使用することで、簡単にキャッシュを扱うことができます。\nこの記事では、Cachex のインストール方法と基本的な使い方を紹介します。\n以下のドキュメントを参考にしています。\nCachex — Cachex v3.6.0\n環境  Elixir 1.14.2 Cachex 3.6  Cachex のインストール方法 Cachex をプロジェクトに追加するには、mix.exs ファイルの deps 関数に Cachex を追加します。\n1 2 3 4 5  def deps do [ {:cachex, \u0026#34;~\u0026gt; 3.6\u0026#34;} ] end   その後、ターミナルで mix deps.get コマンドを実行して、Cachex をインストールします。\n使用方法 キャッシュ定義 アプリケーションの supervision tree に Cachex キャッシュプロセスを追加します。\n1 2 3 4 5 6 7 8 9 10 11 12  defmodule Demo.Application do use Application def start(_type, _args) do children = [ {Cachex, name: :my_cache} ] opts = [strategy: :one_for_one, name: Demo.Supervisor] Supervisor.start_link(children, opts) end end   複数のキャッシュを扱いたい時は {Cachex, name: :my_cache2} など新たに追加することで可能です。\nキャッシュ追加 キャッシュにデータを追加する。\n put/4  1 2  # キャッシュ追加（キャッシュ生存時間 5秒 Cachex.put(:my_cache, \u0026#34;key\u0026#34;, \u0026#34;value\u0026#34;, ttl: :timer.seconds(5))   キャッシュ取得 キャッシュからデータを取得する。\n get/3  1 2 3 4  case Cachex.get(:my_cache, key) do {:ok, value} -\u0026gt; value # キャッシュあり :not_found -\u0026gt; nil # キャッシュなし end   キャッシュ削除 キャッシュを削除します\n del/3  1  Cachex.del(:my_cache, \u0026#34;key\u0026#34;)   キャッシュにデータがない場合のデフォルト動作を定義 キャッシュにデータがない場合の動作を定義しておけます。\n fetch/4  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  result = Cachex.fetch(:my_cache, \u0026#34;key\u0026#34;, fn key -\u0026gt; # データが無い場合にデータを返す result = %{key =\u0026gt; \u0026#34;test\u0026#34;} #24時間有効 {:commit, result, ttl: :timer.hours(24)} end) case result do {:commit, value, opt} -\u0026gt; # キャッシュが登録 {:ok, value} -\u0026gt; # キャッシュが存在 true -\u0026gt; # その他 end   :commit でキャッシュデータを入れて返します。\n:ignore を指定すると値を入れません。\n複数のCacheを使う 複数のキャッシュストアを設定する際は以下のようにしてください。\n単純にコピペすると同じIDで子プロセスを作るためエラーが出ます。\n1 2 3 4 5 6 7 8  children = [ # キャッシュ1 Supervisor.child_spec({Cachex, name: :cache_1}, id: :cache_1), # キャッシュ2 Supervisor.child_spec({Cachex, name: :cache_1}, id: :cache_2) ]   参考  Cachex — Cachex v3.6.0 whitfin/cachex: A powerful caching library for Elixir with support for transactions, fallbacks and expirations  ","description":"Elixir では、Cachex という強力なキャッシュライブラリを使用することで、簡単にキャッシュを扱うことができます。この記事では、Cachex のインストール方法と基本的な使い方を紹介します。","id":168,"section":"tech","tags":["Elixir"],"title":"【Elixir】キャッシュを簡単に扱う Cachex の紹介","uri":"https://c-a-p-engineer.github.io/tech/2023/03/24/elixir-cachex/"},{"content":"【Elixir】Ecto.Schema.embedded_schema を複雑な使ってリクエストに対してのリクエストを処理する方法のメモ Elixir で LiveView に対する認証・認可を自作する\n以下のドキュメントを参考にしています。\nEcto.Schema — Ecto v3.9.4 - HexDocs # embedded_schema\n環境  Elixir 1.14.2 Phoenix 1.6.3  【Elixir】Ecto.Schema.embedded_schema を使ってリクエストを処理する方法 Elixir で changeset を渡して Ecto.Schema.embedded_schema を使って複雑なリクエストに対して処理する方法のメモ。\n僕は複数テーブルに対してのデータを取得して複数テーブルのデータする際に使用しました。\nEcto.Schema.embedded_schema とは Ectoスキーマをデータベーステーブルと関連付けずに定義ができます。\nこれは、構造化データを操作するためにEctoの機能を活用したいが、データベースに保存する必要はない場合に便利です。\nEcto.Schema — Ecto v3.9.4 - HexDocs # embedded_schema\n注意事項 PHPer の Elixir の初心者が Laravelのリクエストの用に別途処理を分けたいと思って作ったものです。\nElixir として正しいものかどうかはわかりません。\nまた今回のサンプルはだいぶ長くなってしまったので処理を短くしています。\nそのまま使ってもエラーになる可能性がありますのでお気をつけください。\nまたテンプレート側の記載は省いております。\n実装 まずはリクエスト処理用の Ecto スキーマを作成します。\nリクエスト用 Ecto 実装 リクエスト処理を行うためのEctoをまず実装します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  defmodule Demo.Requests.UserRegist do use Ecto.Schema import Ecto.Changeset embedded_schema do field :email, :string field :name, :string field :address, :string end @doc false def changeset(user_regist, attrs) do account # 変換 |\u0026gt; cast(attrs, [ :email, :name, :address ]) # 必須チェック |\u0026gt; validate_required([ :email, :name, :address ]) end def to_user(user_regist) do Map.take(user_regist, [:email, :name]) end def to_address(user_regist) do Map.take(user_regist, [:address]) end end   Ecto 定義 データベースへの登録を行うためEctoを定義します。\nUser用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  defmodule Demo.Models.User do use Ecto.Schema import Ecto.Changeset schema \u0026#34;users\u0026#34; do field :email, :string field :name, :string timestamps() end @doc false def changeset(user, attrs) do user |\u0026gt; cast(attrs, [:email, :name]) |\u0026gt; validate_required([:email, :name]) end end   Address用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  defmodule Demo.Models.Address do use Ecto.Schema import Ecto.Changeset schema \u0026#34;addresses\u0026#34; do field :address, :string timestamps() end @doc false def changeset(address, attrs) do address |\u0026gt; cast(attrs, [:address]) |\u0026gt; validate_required([:address]) end end   コントローラー コントローラー側の実装を行ってみます。\nUserRegist で Ecto.Schema.embedded_schema を使用しているのでそこでリクエストパラメータ用のバリデーションを行っています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  defmodule DemoWeb.UserController do use DemoWeb, :controller alias Demo.Repo alias Demo.Requests.UserRegist alias Demo.Models.User alias Demo.Models.Address # ユーザ登録画面 def new(conn, _params) do changeset = UserRegist.changeset(%UserRegist{}, %{}) render(conn, \u0026#34;new.html\u0026#34;, changeset: changeset) end # ユーザ登録処理 def create(conn, %{\u0026#34;user\u0026#34; =\u0026gt; user_params}) do changeset = UserRegist.changeset(%UserRegist{}, user_params) # バリデーションチェック if changeset.valid? do result = Repo.transaction(fn -\u0026gt; # ユーザ登録 user = User.changeset(%User{}, UserRegist.to_user(user_params)) {:ok, user} = Repo.insert(user) # アドレス登録 address = UserRegist.to_address(user_params) # ユーザIDをアドレスに付与 address = Map.put(address, :user_id, user.id) address = Address.changeset(%Address{}, address) {:ok, address} = Repo.insert(address) {:ok, user, address} end) {:ok, value} -\u0026gt; # 登録成功 conn |\u0026gt; put_flash(:info, \u0026#34;User created successfully.\u0026#34;) |\u0026gt; redirect(to: Routes.user_path(conn, :show, user)) _ -\u0026gt; # エラー発生 changeset = %{changeset | action: :create} conn |\u0026gt; put_flash(:error, \u0026#34;An error occurred.\u0026#34;) |\u0026gt; render(\u0026#34;new.html\u0026#34;, changeset: changeset) end else # エラー発生 changeset = %{changeset | action: :create} conn |\u0026gt; put_flash(:error, \u0026#34;An error occurred.\u0026#34;) |\u0026gt; render(\u0026#34;new.html\u0026#34;, changeset: changeset) end end end   これでデータベースへの登録とは別にリクエストのバリデーションのチェックが可能になります。\n参考  Ecto.Schema — Ecto v3.9.4 - HexDocs # embedded_schema  ","description":"Elixir では changeset を渡して Ecto.Schema.embedded_schema を使って複雑なリクエストに対して処理する方法のメモ","id":169,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Ecto.Schema.embedded_schema を使ってリクエストを処理する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/03/21/elixir-embedded_schema/"},{"content":"【Elixir】LiveView に対する認証・認可を自作する Elixir で LiveView に対する認証・認可を自作する\n以下のドキュメントを参考にしています。\nSecurity considerations of the LiveView model — Phoenix LiveView v0.18.18\n環境  Elixir 1.14.2 Phoenix 1.6.3  LiveView 認証・認可モジュールの作成 LiveView 用の認証・認可モジュールを作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  defmodule DemoWeb.UserLiveAuth do import Phoenix.Component import Phoenix.LiveView alias DemoWeb.Accounts # from `mix phx.gen.auth` def on_mount(:default, _params, %{\u0026#34;user_token\u0026#34; =\u0026gt; user_token} = _session, socket) do socket = assign_new(socket, :current_user, fn -\u0026gt; # セッショントークンが存在するか確認 Accounts.get_user_by_session_token(user_token) end) if socket.assigns.current_user.confirmed_at do # ログイン済み {:cont, socket} else # 未ログイン /login へリダイレクト {:halt, redirect(socket, to: \u0026#34;/login\u0026#34;)} end end end   使用方法 使用方法は3通りあります。\n必要に応じて入れ方を替えてください。\n各ページに入れる 認証・認可モジュールを個々の LiveView に入れます。\n1 2 3 4 5 6 7 8 9  defmodule DemoWeb.PageLive do use DemoWeb, :live_view # 認証・認可モジュールをフック on_mount DemoWeb.UserLiveAuth ... end   全ページに入れる デフォルトですべての LiveView で実行するようにします。\n1 2 3 4 5 6 7 8 9 10  def live_view do quote do use Phoenix.LiveView, layout: {DemoWeb.LayoutView, :live} # すべての LiveView はログイン中のみ on_mount DemoWeb.UserLiveAuth unquote(html_helpers()) end end   ルーティングで行う ルーティング時に認証・認可のモジュールをフックして実行させます。\n管理しやすいので僕としてはこれがオススメです。\n1 2 3 4 5 6 7 8 9 10 11  defmodule DemoWeb.Router do scope \u0026#34;/\u0026#34;, DemoWeb do # ログイン中のみ live_session :default, on_mount: DemoWeb.UserLiveAuth do scope \u0026#34;/\u0026#34; do live(\u0026#34;/demo\u0026#34;, DemoLive) end end end end   参考  Security considerations of the LiveView model — Phoenix LiveView v0.18.18  ","description":"Elixir で LiveView に対する認証・認可を自作する","id":170,"section":"tech","tags":["Elixir"],"title":"【Elixir】LiveView に対する認証・認可を自作する","uri":"https://c-a-p-engineer.github.io/tech/2023/03/19/elixir-liveview-auth/"},{"content":"【Elixir】URIクエリパラメータを作る Elixir でURIクエリパラメータを作るメモ\n環境  Elixir 1.14.2  Elixir の URI.encode_query ElixirにはURIモジュールがあり、URLを操作するための機能を提供しています。その中でも、URI.encode_query/1は、クエリパラメータをエンコードするために便利なメソッドです。\nURI.encode_query とは URI.encode_query/1は、キーと値のペアから構成されるマップを受け取り、URLエンコードされた文字列を返します。\nこのエンコードは、クエリストリングの形式でURLに付与するために使用されます。\n1 2 3 4 5  query = URI.encode_query(%{foo: \u0026#34;bar\u0026#34;, baz: \u0026#34;qux\u0026#34;}) IO.puts(query) # 返り値 # \u0026#34;foo=bar\u0026amp;baz=qux\u0026#34;   上記の例では、foo と baz の2つのキーとそれぞれに対応する値が含まれたマップを渡しています。\nこのマップは、foo=bar\u0026amp;baz=qux という文字列に変換されています。\n注意点 URI.encode_query/1 は、URLエンコードされた文字列を返しますが、クエリパラメータの生成には URI.encode_query/1 だけでは不十分な場合があります。\nたとえば、クエリストリングに含める値がURLエンコードされている場合は、それを再度エンコードする必要があります。\n1 2 3 4 5  query = URI.encode_query(%{foo: \u0026#34;https://example.com\u0026#34;}) IO.puts(query) # 返り値 # \u0026#34;foo=https%3A%2F%2Fexample.com\u0026#34;   上記の例では、fooの値がURLエンコードされた文字列であるため、URI.encode_query/1 によって再度エンコードされています。\nURI.encode_query/1 は、ElixirのURIモジュールで提供される機能の一つであり、クエリパラメータをエンコードするために便利なメソッドです。\nただし、注意点として、URLエンコードされた文字列を再度エンコードする必要があることがあります。\n参考  URI — Elixir v1.12.3 - HexDocs # encode_query  ","description":"Elixir でURIクエリパラメータを作るメモ","id":171,"section":"tech","tags":["Elixir"],"title":"【Elixir】URIクエリパラメータを作る","uri":"https://c-a-p-engineer.github.io/tech/2023/03/18/elixir-uri-query/"},{"content":"【Elixir】HTTPoison を使って API などの通信を行ってみる Elixir で HTTP通信ができる HTTPoison を使って API などの通信を行ってみる\n環境  Elixir 1.14.2  HTTPoisonのインストール mix.exs ファイルのdeps関数にHTTPoisonを追加し、アプリケーションの依存関係を更新します。\n1 2 3 4 5  defp deps do [ {:httpoison, \u0026#34;~\u0026gt; 1.8\u0026#34;}, ] end   mix deps.get を実行してインストールします。\n基本的な使い方 HTTPoisonを使ってGETリクエストを送信し、レスポンスを受け取ります。\nGet GETでデータを取得してみます。\n1  {:ok, response} = HTTPoison.get(\u0026#34;https://c-a-p-engineer.github.io/index.json\u0026#34;)   Post 1 2 3 4 5 6  {:ok, response} = HTTPoison.post( \u0026#34;https://c-a-p-engineer.github.io/index.json\u0026#34;, # URL \u0026#34;{\\\u0026#34;key\\\u0026#34;:\\\u0026#34;value\\\u0026#34;}\u0026#34;, # JSON [{\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;}] # Header )   レスポンスの扱い方 レスポンスは %HTTPoison.Response{} 構造体で返されます。\nステータスコード、ヘッダー、ボディを取得する方法は以下の通りです。\n1 2 3 4 5 6 7 8 9 10 11 12 13  # StatusCode status_code = response.status_code # Header headers = response.headers # Body body = response.body IO.inspect(\u0026#34;status\u0026#34;) IO.inspect(status_code) IO.inspect(\u0026#34;headers\u0026#34;) IO.inspect(headers) IO.inspect(\u0026#34;body\u0026#34;) IO.inspect(body)   エラーハンドリング HTTPoison はエラーを {:error, reason} タプルで返します。\nエラーハンドリングは以下のように行います。\n1 2 3 4 5 6  case HTTPoison.get(\u0026#34;https://c-a-p-engineer.github.io/index.json\u0026#34;) do {:ok, response} -\u0026gt; # 成功時の処理 {:error, %HTTPoison.Error{reason: reason}} -\u0026gt; # エラー時の処理 end   参考  HTTPoison v2.1.0 - HexDocs  ","description":"Elixir で HTTP通信ができる HTTPoison を使って API などの通信を行ってみる","id":172,"section":"tech","tags":["Elixir"],"title":"【Elixir】HTTPoison を使って API などの通信を行ってみる","uri":"https://c-a-p-engineer.github.io/tech/2023/03/18/elixir-httpoison/"},{"content":"【Elixir】XMLを簡単に Map にしてくれる XmlToMap を使う Elixir で標準で用意されてるXMLの読み込みのクセが強いので簡単に Map にしてくれる XmlToMap を使ってみました。\n環境  Elixir 1.14.2  XMLを普通に読み込んで見る 比較するためにいったん普通にXMLを読み込んでみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  # XML文字列 xml_str = \u0026#34;\u0026#34;\u0026#34; \u0026lt;todos\u0026gt; \u0026lt;todo id=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;body\u0026gt;This is the body of to-do item #1\u0026lt;/body\u0026gt; \u0026lt;priority\u0026gt;3\u0026lt;/priority\u0026gt; \u0026lt;/todo\u0026gt; \u0026lt;todo id=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;body\u0026gt;This is the body of to-do item #2\u0026lt;/body\u0026gt; \u0026lt;priority\u0026gt;1\u0026lt;/priority\u0026gt; \u0026lt;/todo\u0026gt; \u0026lt;todo id=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;body\u0026gt;This is the body of to-do item #3\u0026lt;/body\u0026gt; \u0026lt;priority\u0026gt;3\u0026lt;/priority\u0026gt; \u0026lt;/todo\u0026gt; \u0026lt;/todos\u0026gt; \u0026#34;\u0026#34;\u0026#34; # XML を読み込む {doc, []} = xml_str |\u0026gt; to_charlist() |\u0026gt; :xmerl_scan.string() IO.inspect(doc)   出力結果がこちらになります。\n中々に扱いづらい状態…\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  {:xmlElement, :todos, :todos, [], {:xmlNamespace, [], []}, [], 1, [], [ {:xmlText, [todos: 1], 1, [], \u0026#39;\\n\u0026#39;, :text}, {:xmlElement, :todo, :todo, [], {:xmlNamespace, [], []}, [todos: 1], 2, [{:xmlAttribute, :id, [], [], [], [todo: 2, todos: 1], 1, [], \u0026#39;1\u0026#39;, false}], [ {:xmlText, [todo: 2, todos: 1], 1, [], \u0026#39;\\n\u0026#39;, :text}, {:xmlElement, :body, :body, [], {:xmlNamespace, [], []}, [todo: 2, todos: 1], 2, [], [ {:xmlText, [body: 2, todo: 2, todos: 1], 1, [], \u0026#39;This is the body of to-do item #1\u0026#39;, :text} ], [], \u0026#39;/workspace\u0026#39;, :undeclared}, {:xmlText, [todo: 2, todos: 1], 3, [], \u0026#39;\\n\u0026#39;, :text}, {:xmlElement, :priority, :priority, [], {:xmlNamespace, [], []}, [todo: 2, todos: 1], 4, [], [{:xmlText, [priority: 4, todo: 2, todos: 1], 1, [], \u0026#39;3\u0026#39;, :text}], [], \u0026#39;/workspace\u0026#39;, :undeclared}, {:xmlText, [todo: 2, todos: 1], 5, [], \u0026#39;\\n\u0026#39;, :text} ], [], \u0026#39;/workspace\u0026#39;, :undeclared}, {:xmlText, [todos: 1], 3, [], \u0026#39;\\n\u0026#39;, :text}, {:xmlElement, :todo, :todo, [], {:xmlNamespace, [], []}, [todos: 1], 4, [{:xmlAttribute, :id, [], [], [], [todo: 4, todos: 1], 1, [], \u0026#39;2\u0026#39;, false}], [ {:xmlText, [todo: 4, todos: 1], 1, [], \u0026#39;\\n\u0026#39;, :text}, {:xmlElement, :body, :body, [], {:xmlNamespace, [], []}, [todo: 4, todos: 1], 2, [], [ {:xmlText, [body: 2, todo: 4, todos: 1], 1, [], \u0026#39;This is the body of to-do item #2\u0026#39;, :text} ], [], \u0026#39;/workspace\u0026#39;, :undeclared}, {:xmlText, [todo: 4, todos: 1], 3, [], \u0026#39;\\n\u0026#39;, :text}, {:xmlElement, :priority, :priority, [], {:xmlNamespace, [], []}, [todo: 4, todos: 1], 4, [], [{:xmlText, [priority: 4, todo: 4, todos: 1], 1, [], \u0026#39;1\u0026#39;, :text}], [], \u0026#39;/workspace\u0026#39;, :undeclared}, {:xmlText, [todo: 4, todos: 1], 5, [], \u0026#39;\\n\u0026#39;, :text} ], [], \u0026#39;/workspace\u0026#39;, :undeclared}, {:xmlText, [todos: 1], 5, [], \u0026#39;\\n\u0026#39;, :text}, {:xmlElement, :todo, :todo, [], {:xmlNamespace, [], []}, [todos: 1], 6, [{:xmlAttribute, :id, [], [], [], [todo: 6, todos: 1], 1, [], \u0026#39;3\u0026#39;, false}], [ {:xmlText, [todo: 6, todos: 1], 1, [], \u0026#39;\\n\u0026#39;, :text}, {:xmlElement, :body, :body, [], {:xmlNamespace, [], []}, [todo: 6, todos: 1], 2, [], [ {:xmlText, [body: 2, todo: 6, todos: 1], 1, [], \u0026#39;This is the body of to-do item #3\u0026#39;, :text} ], [], \u0026#39;/workspace\u0026#39;, :undeclared}, {:xmlText, [todo: 6, todos: 1], 3, [], \u0026#39;\\n\u0026#39;, :text}, {:xmlElement, :priority, :priority, [], {:xmlNamespace, [], []}, [todo: 6, todos: 1], 4, [], [{:xmlText, [priority: 4, todo: 6, todos: 1], 1, [], \u0026#39;3\u0026#39;, :text}], [], \u0026#39;/workspace\u0026#39;, :undeclared}, {:xmlText, [todo: 6, todos: 1], 5, [], \u0026#39;\\n\u0026#39;, :text} ], [], \u0026#39;/workspace\u0026#39;, :undeclared}, {:xmlText, [todos: 1], 7, [], \u0026#39;\\n\u0026#39;, :text} ], [], \u0026#39;/workspace\u0026#39;, :undeclared}   XmlToMap を使ってみる XMLを簡単にMapにしてくれるXmlToMapを使ってみます。\n導入 mix.exs に elixir_xml_to_map を追加します。\n1 2 3 4 5  defp deps do [ {:elixir_xml_to_map, \u0026#34;~\u0026gt; 2.0\u0026#34;} # Add elixir_xml_to_map ] end   mix deps.get を実行してインストールします。\n実装 実際に使ってみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  xml_str = \u0026#34;\u0026#34;\u0026#34; \u0026lt;todos\u0026gt; \u0026lt;todo id=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;body\u0026gt;This is the body of to-do item #1\u0026lt;/body\u0026gt; \u0026lt;priority\u0026gt;3\u0026lt;/priority\u0026gt; \u0026lt;/todo\u0026gt; \u0026lt;todo id=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;body\u0026gt;This is the body of to-do item #2\u0026lt;/body\u0026gt; \u0026lt;priority\u0026gt;1\u0026lt;/priority\u0026gt; \u0026lt;/todo\u0026gt; \u0026lt;todo id=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;body\u0026gt;This is the body of to-do item #3\u0026lt;/body\u0026gt; \u0026lt;priority\u0026gt;3\u0026lt;/priority\u0026gt; \u0026lt;/todo\u0026gt; \u0026lt;/todos\u0026gt; \u0026#34;\u0026#34;\u0026#34; xml_map = XmlToMap.naive_map(xml_str) IO.inspect(xml_map)   Mapになってこれで扱いやすい形になりました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  %{ \u0026#34;todos\u0026#34; =\u0026gt; %{ \u0026#34;todo\u0026#34; =\u0026gt; [ %{ \u0026#34;#content\u0026#34; =\u0026gt; %{ \u0026#34;body\u0026#34; =\u0026gt; \u0026#34;This is the body of to-do item #1\u0026#34;, \u0026#34;priority\u0026#34; =\u0026gt; \u0026#34;3\u0026#34; }, \u0026#34;-id\u0026#34; =\u0026gt; \u0026#34;1\u0026#34; }, %{ \u0026#34;#content\u0026#34; =\u0026gt; %{ \u0026#34;body\u0026#34; =\u0026gt; \u0026#34;This is the body of to-do item #2\u0026#34;, \u0026#34;priority\u0026#34; =\u0026gt; \u0026#34;1\u0026#34; }, \u0026#34;-id\u0026#34; =\u0026gt; \u0026#34;2\u0026#34; }, %{ \u0026#34;#content\u0026#34; =\u0026gt; %{ \u0026#34;body\u0026#34; =\u0026gt; \u0026#34;This is the body of to-do item #3\u0026#34;, \u0026#34;priority\u0026#34; =\u0026gt; \u0026#34;3\u0026#34; }, \u0026#34;-id\u0026#34; =\u0026gt; \u0026#34;3\u0026#34; } ] } }   参考  How to Parse XML Documents in Elixir | PSPDFKit XmlToMap — elixir_xml_to_map v3.0.0 homanchou/elixir-xml-to-map  ","description":"Elixir で標準で用意されてるXMLの読み込みのクセが強いので簡単に Map にしてくれる XmlToMap を使ってみました。","id":173,"section":"tech","tags":["Elixir"],"title":"【Elixir】XMLを簡単に Map にしてくれる XmlToMap を使う","uri":"https://c-a-p-engineer.github.io/tech/2023/03/17/elixir-xml-to-map/"},{"content":"【Elixir】Phoenix LiveView でJSを書かずにアニメーションなどを実装する方法 Elixir の Phoenix LiveView でJSを書かずにアニメーションなどを実装する方法。\n折角 LiveView を使っているのに一々画面項目の表示/非表示などの簡単なJSを一々書きたくないなって考えたら実装方法がありましたのでメモ。\n環境  Elixir 1.14.2 Phoenix 1.6.3  実装 実際に実装してみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  defmodule DemoWeb.DemoLive do use DemoWeb, :live_view alias Phoenix.LiveView.JS # 初期接続 def mount(_params, _session, socket) do {:ok, socket} end # 画面 def render(assigns) do ~L\u0026#34;\u0026#34;\u0026#34; \u0026lt;p\u0026gt;\u0026lt;%= submit \u0026#34;表示/非表示\u0026#34;, type: \u0026#34;button\u0026#34;, phx_click: JS.toggle(to: \u0026#34;#info\u0026#34;, in: \u0026#34;fade-in-scale\u0026#34;, out: \u0026#34;fade-out-scale\u0026#34;) %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;%= submit \u0026#34;文字を小さくする\u0026#34;, type: \u0026#34;button\u0026#34;, phx_click: JS.set_attribute({\u0026#34;style\u0026#34;, \u0026#34;font-size:1px\u0026#34;}, to: \u0026#34;#info\u0026#34;) %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;%= submit \u0026#34;文字を大きくする\u0026#34;, type: \u0026#34;button\u0026#34;, phx_click: JS.set_attribute({\u0026#34;style\u0026#34;, \u0026#34;font-size:100px\u0026#34;}, to: \u0026#34;#info\u0026#34;) %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;%= submit \u0026#34;初期化\u0026#34;, type: \u0026#34;button\u0026#34;, phx_click: JS.remove_attribute(\u0026#34;style\u0026#34;, to: \u0026#34;#info\u0026#34;) %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div id=\u0026#34;info\u0026#34;\u0026gt; 表示中 \u0026lt;/div\u0026gt; \u0026#34;\u0026#34;\u0026#34; end end   ルーティングにサンプルを追加\n1 2 3 4 5 6 7 8  scope \u0026#34;/\u0026#34;, DemoWeb do pipe_through(:browser) get(\u0026#34;/\u0026#34;, PageController, :index) # /demo のパスを追加 live(\u0026#34;/demo\u0026#34;, DemoLive) end   実装をした結果がこちらです。\nJSは一切書かずに色々な動きを実装ができます。\n参考  Phoenix.LiveView.JS — Phoenix LiveView v0.18.17  ","description":"Elixir の Phoenix LiveView でJSを書かずにアニメーションなどを実装する方法","id":174,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix LiveView でJSを書かずにアニメーションなどを実装する","uri":"https://c-a-p-engineer.github.io/tech/2023/03/15/elixir-phoenix-live-js/"},{"content":"【Elixir】Phoenix で PhoenixLiveSession を使用して LiveView で Session を使用する Elixir Phoenix で PhoenixLiveSession を使用して LiveView で Session を使用する方法。\n通常 LiveView 上では Session を扱えません。\nSession を扱えるように PhoenixLiveSession を導入する必要があります。\n扱えるようにすると Plug.Conn のセッション情報にデータを保存ができます。\n環境  Elixir 1.14.2 Phoenix 1.6.3 LiveViewSession 0.1.3  インストール mix.exs に phoenix_live_session を追加します。\n1 2 3 4 5  defp deps do [ {:phoenix_live_session, \u0026#34;~\u0026gt; 0.1\u0026#34;} # Add phoenix_live_session ] end   mix deps.get を実行してインストールします。\n設定 endpoint.ex を以下のように編集します。\nMyApp のところなどは自分の環境に合わせてください。\n1 2 3 4 5  @session_options [ store: PhoenixLiveSession, pub_sub: MyApp.PubSub, signing_salt: \u0026#34;your-salt\u0026#34;, ]   使用 以下はLiveViewで使用するサンプルコードです。\n注意としては mount 時に put_session しようとするとエラーになります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  # 初期接続 def mount(_params, session, socket) do # セッションの確認 IO.inspect(session) # 各初期値を取得（ atom で入れても session 上では文字列にされるので注意 light_bulb_status = Map.get(session, \u0026#34;light_bulb_status\u0026#34;, \u0026#34;off\u0026#34;) on_button_status = Map.get(session, \u0026#34;on_button_status\u0026#34;, \u0026#34;\u0026#34;) off_button_status = Map.get(session, \u0026#34;off_button_status\u0026#34;, \u0026#34;disabled\u0026#34;) # 初期値の確認 IO.inspect(light_bulb_status) IO.inspect(on_button_status) IO.inspect(off_button_status) socket = socket |\u0026gt; assign(:light_bulb_status, light_bulb_status) |\u0026gt; assign(:on_button_status, on_button_status) |\u0026gt; assign(:off_button_status, off_button_status) # セッションの共有 |\u0026gt; PhoenixLiveSession.maybe_subscribe(session) {:ok, socket} end # 画面 def render(assigns) do ~L\u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;The light is \u0026lt;%= @light_bulb_status %\u0026gt;.\u0026lt;/h1\u0026gt; \u0026lt;button phx-click=\u0026#34;on\u0026#34; \u0026lt;%= @on_button_status %\u0026gt;\u0026gt;On\u0026lt;/button\u0026gt; \u0026lt;button phx-click=\u0026#34;off\u0026#34; \u0026lt;%= @off_button_status %\u0026gt;\u0026gt;Off\u0026lt;/button\u0026gt; \u0026#34;\u0026#34;\u0026#34; end # Onボタンの処理 def handle_event(\u0026#34;on\u0026#34;, _value, socket) do socket = socket |\u0026gt; assign(:light_bulb_status, \u0026#34;on\u0026#34;) |\u0026gt; assign(:on_button_status, \u0026#34;disabled\u0026#34;) |\u0026gt; assign(:off_button_status, \u0026#34;\u0026#34;) # セッションに保存 |\u0026gt; PhoenixLiveSession.put_session(:light_bulb_status, \u0026#34;on\u0026#34;) |\u0026gt; PhoenixLiveSession.put_session(:on_button_status, \u0026#34;disabled\u0026#34;) |\u0026gt; PhoenixLiveSession.put_session(:off_button_status, \u0026#34;\u0026#34;) {:noreply, socket} end # Offボタンの処理 def handle_event(\u0026#34;off\u0026#34;, _value, socket) do socket = socket |\u0026gt; assign(:light_bulb_status, \u0026#34;off\u0026#34;) |\u0026gt; assign(:on_button_status, \u0026#34;\u0026#34;) |\u0026gt; assign(:off_button_status, \u0026#34;disabled\u0026#34;) # セッションに保存 |\u0026gt; PhoenixLiveSession.put_session(:light_bulb_status, \u0026#34;off\u0026#34;) |\u0026gt; PhoenixLiveSession.put_session(:on_button_status, \u0026#34;\u0026#34;) |\u0026gt; PhoenixLiveSession.put_session(:off_button_status, \u0026#34;disabled\u0026#34;) {:noreply, socket} end end   セッションの取得 セッションの取得方法は以下のようにすれば可能です。\n1 2 3  sid = get_in(socket.private, [:live_session, :id]) opts = get_in(socket.private, [:live_session, :opts]) {sid, session} = PhoenixLiveSession.get(nil, sid, opts)   参考  PhoenixLiveSession — phoenix_live_session v0.1.3 pentacent/phoenix_live_session  ","description":"Elixir Phoenix で PhoenixLiveSession を使用して LiveView で Session を使用する方法","id":175,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix で PhoenixLiveSession を使用して LiveView で Session を使用する","uri":"https://c-a-p-engineer.github.io/tech/2023/03/14/elixir-phoenix-live-session/"},{"content":"【Elixir】Phoenix で静的ファイルを追加する Elixir Phoenix の環境で静的ファイルを追加する方法\n環境  Elixir 1.14.2 Phoenix 1.6.3  静的ファイルを追加する  priv/static/ にフォルダを追加します。 lib/demo_web/endpoint.ex に追加したフォルダ名を追加   only の箇所に hoge 追加  1 2 3 4 5  plug Plug.Static, at: \u0026#34;/\u0026#34;, from: :sdm, gzip: false, only: ~w(assets fonts images favicon.ico robots.txt hoge)   Routes.static_path を使用してテンプレート側で使用する。  1  \u0026lt;img src={Routes.static_path(@conn, \u0026#34;/hoge/hoge.png\u0026#34;)} alt=\u0026#34;hoge\u0026#34;/\u0026gt;   これにより画像などの静的ファイルの呼び出しが可能になります。\n参考  Plug.Static — Plug v1.14.0  ","description":"Elixir Phoenix の環境で静的ファイルを追加する方法","id":176,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix で静的ファイルを追加する","uri":"https://c-a-p-engineer.github.io/tech/2023/03/08/elixir-phoenix-static-file/"},{"content":"【Elixir】データ取得時に複数のChangesetを返すようにする Elixir でRepoを使用したデータ取得時に複数のChangesetを返すようにする方法。\n環境  Elixir 1.14.2  通常通りにJOINしてデータを取得する JOINして複数のテーブルからデータを取得します。\n1 2 3 4 5 6 7 8  query = from( user in Demo.Models.User, join: post in Demo.Models.Post, on: user.id == post.user_id ) IO.inspect(Repo.all(query))   実行すると users テーブルのデータしか取得していません。\nこれでは困ります。\n1 2 3 4 5 6 7 8 9 10 11 12  [ %Demo.Models.Users{ __meta__: #Ecto.Schema.Metadata\u0026lt;:loaded, \u0026#34;users\u0026#34;\u0026gt;, id: 1, name: \u0026#34;demo1\u0026#34; }, %Demo.Models.Users{ __meta__: #Ecto.Schema.Metadata\u0026lt;:loaded, \u0026#34;users\u0026#34;\u0026gt;, id: 2, name: \u0026#34;demo2\u0026#34; }, ]   複数のchangesetを返却させる 1 2 3 4 5 6 7 8 9 10 11 12  query = from( user in Demo.Models.User, join: post in Demo.Models.Post, on: user.id == post.user_id, select: %{ user: user, post: post } ) IO.inspect(Repo.all(query))   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  [ %{ user: %Demo.Models.Users{ __meta__: #Ecto.Schema.Metadata\u0026lt;:loaded, \u0026#34;users\u0026#34;\u0026gt;, id: 1, name: \u0026#34;demo1\u0026#34; }, post: %Demo.Models.Post{ __meta__: #Ecto.Schema.Metadata\u0026lt;:loaded, \u0026#34;posts\u0026#34;\u0026gt;, id: 1, title: \u0026#34;タイトル1\u0026#34;, body: \u0026#34;本文1\u0026#34;, } }, %{ user: %Demo.Models.Users{ __meta__: #Ecto.Schema.Metadata\u0026lt;:loaded, \u0026#34;users\u0026#34;\u0026gt;, id: 1, name: \u0026#34;demo1\u0026#34; }, post: %Demo.Models.Post{ __meta__: #Ecto.Schema.Metadata\u0026lt;:loaded, \u0026#34;posts\u0026#34;\u0026gt;, id: 1, title: \u0026#34;タイトル2\u0026#34;, body: \u0026#34;本文2\u0026#34;, } }, ]   これで扱いやすい形にして受け取ることができます。\n","description":"Elixir でRepoを使用したデータ取得時に複数のChangesetを返すようにする方法","id":177,"section":"tech","tags":["Elixir"],"title":"【Elixir】データ取得時に複数のChangesetを返すようにする","uri":"https://c-a-p-engineer.github.io/tech/2023/03/04/elixir-select-structs/"},{"content":"【Elixir】ログイン制御 セッションでアクセス制限を実現する Elixir でログイン制御 セッションでアクセス制限を実現する\n環境  Elixir 1.14.2 Phoenix 1.6.3  セッション制御 特定のセッション（ログインなど）がない場合にアクセスが出来ないようにします。\nPlug module の作成 まずはセッションの制御を行うミドルウェアを作成\nPlug — Phoenix v1.6.3\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  defmodule DemoWeb.AuthPlug do import Plug.Conn, only: [get_session: 2, halt: 1] import Phoenix.Controller, only: [put_flash: 3, redirect: 2] def init(opts), do: opts def call(conn, _opts) do # :user のセッションない場合は \u0026#34;/\u0026#34; にリダイレクト case get_session(conn, :user) do nil -\u0026gt; conn |\u0026gt; put_flash(:error, \u0026#34;ログインしてください。\u0026#34;) |\u0026gt; redirect(to: \u0026#34;/\u0026#34;) |\u0026gt; halt() _ -\u0026gt; conn end end end   コントローラーに実装 コントローラーに AuthPlug を設定して特定のアクションではセッションがない場合はアクセスできないようにします。\n1 2 3 4 5 6 7 8 9 10  defmodule DemoWeb.SampleController do use DemoWeb, :controller # アクセス制御を行う action を指定 [:index] plug DemoWeb.AuthPlug when action in [:index] def index(conn, _params) do render(conn, \u0026#34;index.html\u0026#34;) end end   これで特定のセッションがないとリダイレクトされます。\n参考  Phoenix1.3のUser AccountsとSession - Qiita #6 アクセス制限  ","description":"Elixir でログイン制御 セッションでアクセス制限を実現する","id":178,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】ログイン制御 セッションでアクセス制限を実現する","uri":"https://c-a-p-engineer.github.io/tech/2023/03/02/elixir-session-auth/"},{"content":"【Elixir】gettext で日本語化をする（多言語対応 Elixir gettext で日本語化をする方法\n環境  Elixir 1.14.2 Phoenix 1.6.3  インストール まずはプロジェクト作成を行います。\nmix phx.new my_app --no-ecto パッケージ追加 ※Phoenix ではデフォルトでインストールされているようなので不要です。\nmix.exs に gettext を追加します。\n1 2 3 4 5  defp deps do [ {:gettext, \u0026#34;~\u0026gt; 0.18\u0026#34;} # Add gettext ] end   パッケージの取得 \u0026amp; コンパイル パッケージの取得とコンパイルを行います。\nmix do deps.get, deps.compile gettext のタスク mix help を行うと gettext 関連のタスクが2つあります。\nmix gettext.extract # Extracts messages from source code mix gettext.merge # Merge template files into message files  mix gettext.extract Elixirのソースコードからメッセージを抽出します。 mix gettext.extract mix gettext.merge 言語ファイルをマージします。 mix gettext.merge  言語ファイル 言語ファイルは priv/gettext の中に存在します。\n翻訳対象文字列の抽出 ソースから翻訳対象の文字列を抽出します。\nmix gettext.extract Extracted priv/gettext/default.pot Extracted priv/gettext/errors.pot 2ファイルが生成されます。\npriv/gettext/LC_MESSAGES/ ├──default.pot └──errors.pot 言語ファイルの作成 mix gettext.merge を使用して日本語用言語ファイルを作成します。\nmix gettext.merge priv/gettext --locale=ja Created directory priv/gettext/ja/LC_MESSAGES Wrote priv/gettext/ja/LC_MESSAGES/default.po (1 new message, 0 removed, 0 unchanged, 0 reworded (fuzzy), 0 marked as obsolete) Wrote priv/gettext/ja/LC_MESSAGES/errors.po (21 new messages, 0 removed, 0 unchanged, 0 reworded (fuzzy), 0 marked as obsolete) priv/gettext/ja に言語用ファイルが作成されます。\n日本語ファイルを編集する 実際に日本語を設定します。\nmsgid がメッセージのIDになり、msgstr には翻訳内容を入れます。\n#: lib/demo_web/templates/page/index.html.heex:2 #, elixir-autogen, elixir-format msgid \u0026quot;Welcome to %{name}!\u0026quot; msgstr \u0026quot;ようこそ %{name}！\u0026quot; デフォルトの言語を変更する config.exs に追記してデフォルト言語を日本語設定します。\n1  config :gettext, :default_locale, \u0026#34;ja\u0026#34;   ここの文字列が日本語化されて表示されます。\n1  \u0026lt;%= gettext \u0026#34;Welcome to %{name}!\u0026#34;, name: \u0026#34;Phoenix\u0026#34; %\u0026gt;   これでWelcomeページの日本語化ができました。\n","description":"Elixir gettext で日本語化をする方法","id":179,"section":"tech","tags":["Elixir"],"title":"【Elixir】gettext で日本語化をする（多言語対応","uri":"https://c-a-p-engineer.github.io/tech/2023/02/24/elixir-gettext-ja/"},{"content":"【PHP】AWSのlambdaを実行する PHPでAWSのlambdaを実行する方法メモ\nSDKのインストール composer を利用してAWS SDKをインストールします。\ncomposer require aws/aws-sdk-php Lambda実行クラスコード 実行する際は PHP側に実行権限を付与 することを忘れないでください。\nLambdaを実行するクラス\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  require \u0026#39;vendor/autoload.php\u0026#39;; use Aws\\Lambda\\LambdaClient; class AwsLambdaInvoker { private $lambda; /** * AWS Lambda * @param $region リージョン * @param $awsAccessKey AWSアクセスキー * @param $awsSecretKey AWSシークレットキー */ public function __construct($region, $awsAccessKey = null, $awsSecretKey = null) { $param = [ \u0026#39;region\u0026#39; =\u0026gt; $region, // リージョン  \u0026#39;version\u0026#39; =\u0026gt; \u0026#39;2015-03-31\u0026#39;, // SDKバージョン  ]; // AWSのキーが渡されたなら設定する  if (!is_null($awsAccessKey) \u0026amp;\u0026amp; !is_null($awsSecretKey)) { $param = array_merge( $param, [ \u0026#39;credentials\u0026#39; =\u0026gt; [ \u0026#39;key\u0026#39; =\u0026gt; $awsAccessKey, \u0026#39;secret\u0026#39; =\u0026gt; $awsSecretKey ] ] ); } // AWS Lambdaクライアントの作成  $this-\u0026gt;lambda = new LambdaClient($param); } /** * Lambda実行 * * @param $functionName 実行Lambda関数名 * @param $payload Lambdaに渡すjson */ public function invokeLambda(string $functionName, array $payload): array { // Lambda関数を実行します  return $this-\u0026gt;lambda-\u0026gt;invoke([ \u0026#39;FunctionName\u0026#39; =\u0026gt; $functionName, // 実行するLambda関数の名前を指定します  \u0026#39;Payload\u0026#39; =\u0026gt; json_encode($payload) // Lambda関数に渡すJSONペイロードを指定します  ]); } }   aws設定ファイルを使用する場合 AWSキーを使用しないで ~/.aws/config から設定を読みに行く場合は以下のようにしてください。\n1 2 3 4 5 6  $provider = CredentialProvider::defaultProvider(); $client = LambdaClient::factory([ \u0026#39;region\u0026#39; =\u0026gt; $region, // リージョン  \u0026#39;version\u0026#39; =\u0026gt; \u0026#39;2015-03-31\u0026#39;, // SDKバージョン  \u0026#39;credentials\u0026#39; =\u0026gt; $provider, ]);   またどちらも使用しない場合はアタッチされているロールを使用します。\nLambda実行のオプション 1 2 3 4 5 6 7 8  $result = $this-\u0026gt;lambda-\u0026gt;invoke([ \u0026#39;ClientContext\u0026#39; =\u0026gt; \u0026#39;\u0026lt;string\u0026gt;\u0026#39;, // Lambda関数のクライアントコンテキスト情報  \u0026#39;FunctionName\u0026#39; =\u0026gt; \u0026#39;\u0026lt;string\u0026gt;\u0026#39;, // REQUIRED Lambda関数名  \u0026#39;InvocationType\u0026#39; =\u0026gt; \u0026#39;Event|RequestResponse|DryRun\u0026#39;, // Lambda実行タイプ Event:非同期 RequestResponse:同期 DryRun:ドライラン  \u0026#39;LogType\u0026#39; =\u0026gt; \u0026#39;None|Tail\u0026#39;, // ログ種類 None:なし Tail:ログあり  \u0026#39;Payload\u0026#39; =\u0026gt; \u0026lt;string || resource || Psr\\Http\\Message\\StreamInterface\u0026gt;, // Lambdaに渡すJSON  \u0026#39;Qualifier\u0026#39; =\u0026gt; \u0026#39;\u0026lt;string\u0026gt;\u0026#39;, // Lambda関数のバージョンまたはエイリアス名 ]);   返ってくる値 1 2 3 4 5 6 7 8 9 10  [ \u0026#39;StatusCode\u0026#39; =\u0026gt; (int), // Lambda関数のステータスコード  \u0026#39;FunctionError\u0026#39; =\u0026gt; (string), // Lambda関数がエラーを返した場合、エラータイプを示す文字列  \u0026#39;LogResult\u0026#39; =\u0026gt; (string), // Lambda関数のログデータ（Base64エンコードされた文字列）  \u0026#39;Payload\u0026#39; =\u0026gt; (string), // Lambda関数が返したJSONペイロード  \u0026#39;ExecutedVersion\u0026#39; =\u0026gt; (string), // 実行されたLambda関数のバージョン  \u0026#39;SdkResponseMetadata\u0026#39; =\u0026gt; [ // SDKのメタデータ  ] ]   実行コード 実際に実行するコード\n1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?php try { $invoker = new AwsLambdaInvoker(\u0026#39;us-west-2\u0026#39;); $payload = [\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Hello from PHP!\u0026#39;]; // Lambda関数に渡すJSON  $result = $invoker-\u0026gt;invokeLambda(\u0026#39;myLambdaFunction\u0026#39;, $payload); var_dump($result); } catch (Exception $e) { // 例外処理  echo $e-\u0026gt;getMessage(); }   参考  インストール:AWS SDK for PHPバージョン 3 - AWS SDK for PHP AWS SDK for PHP 3.x #invoke  ","description":"PHPでAWSのlambdaを実行する方法メモ","id":180,"section":"tech","tags":["PHP","AWS","AWS Lambda"],"title":"【PHP】AWSのlambdaを実行する","uri":"https://c-a-p-engineer.github.io/tech/2023/02/21/php-lambda-invoke/"},{"content":"【PHP】ブラウザで実行できるPHP環境のご紹介 PHPブラウザで実行できるPHP環境のご紹介\nどちらかを知っていれば基本的な用途には困ることはないかと思います。\n3v4l 3v4l\n 複数バージョンからの選択 or 複数バージョンの同時実行可能 バージョンごとのパフォーマンス結果の表示 シンタックスハイライト URLをそのままにコードを共有可能  paiza.io paiza.io\n PHP以外の多種の言語も対応 複数ファイルが作れる 多人数でのリアルタイム同時編集 スケジュール実行 GitHub連携  ","description":"PHPをブラウザで実行できるPHP環境のご紹介","id":181,"section":"tech","tags":["PHP","オンラインツール"],"title":"【PHP】ブラウザで実行できるPHP環境のご紹介","uri":"https://c-a-p-engineer.github.io/tech/2023/02/19/php-online-exec/"},{"content":"【Elixir】DB検索時などの際に動的に列を指定する方法 Elixir DBの検索を行う際など汎用的に列を変数化したりして検索したい時があります。その実装方法のメモです。\n実装 Ecto.Query.API の filed/2 の関数を使用します。\nEcto.Query.API — Ecto v3.9.4 #field/2\nこの関数は指定されたテーブルの列をAtom型で渡すと、その列を使用してくれます。\n1 2 3 4 5 6 7 8 9  import Ecto.Query def search_by_column(table, column, value) do query = from(t in table, where: field(t, ^column) == ^value  ) Repo.all(query) end search_by_column(User, :name, \u0026#34;Alice\u0026#34;)   参考  Ecto.Query.API — Ecto v3.9.4 #field/2 Dynamic fields in Ecto queries - Questions / Help - Elixir Programming Language Forum  ","description":"Elixir DBの検索を行う際など汎用的に列を変数化したりして検索したい時があります。その実装方法のメモです。","id":182,"section":"tech","tags":["Elixir"],"title":"【Elixir】DB検索時などの際に動的に列を指定する方法","uri":"https://c-a-p-engineer.github.io/tech/2023/02/15/elixir-query-dynamic-colmun/"},{"content":"【Elixir】カスタムバリデーションを作ってみる Elixir 独自のバリデーション、カスタムバリデーションを作ってみる\nカスタムバリデーション バリデーション用ファイルの作成\nchangeset の :username が4文字未満もしくは15文字以上でエラーにしています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  defmodule UserValidator do def validate_username(changeset) do # チェンジセットから :username を取得する username = get_field(changeset, :username) # 4文字未満 || 15文字以上でエラー if String.length(username) \u0026lt; 4 || String.length(username) \u0026gt; 15 do # エラー add_error(changeset, :username, \u0026#34;Username must be between 4 and 15 characters\u0026#34;), else # チェンジセットをそのまま返す changeset end end end   Model側で実装します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  defmodule User do use Ecto.Schema schema \u0026#34;users\u0026#34; do field :email, :string field :username, :string field :age, :integer end @doc false def changeset(user, params) do user |\u0026gt; cast(params, [:email, :username, :age]) # カスタムバリデーションを実行する  |\u0026gt; UserValidator.validate_username |\u0026gt; validate_format(:email, ~r/@/) end end   このようにバリデーションが実装できます。\n","description":"Elixir 独自のバリデーション、カスタムバリデーションを作ってみる","id":183,"section":"tech","tags":["Elixir"],"title":"【Elixir】カスタムバリデーションを作ってみる","uri":"https://c-a-p-engineer.github.io/tech/2023/02/15/elixir-custom-validation/"},{"content":"【Elixir】ループの癖が強いかった Elixir 初心者の僕がループを使用してハマったことをメモしておきます\nハマったこと Elixer で勉強用にコードを書いていて「渡された数値の回数 1～X までループして 1～X までの合計を出す」という単純な問題をやっていたのですが、これがハマった。\nPHPでやろうとするとこんな感じのコードになるものですね\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;?php function sum_number($num) { $sum = 0; for($i = 1; $i \u0026lt;= $num; $i++){ $sum += $i; } return $sum; } # 1+2+3 = 6 echo sum_number(3);   Elixirで以下のようなコードを最初に書きました。\n1 2 3 4 5 6 7 8 9 10 11 12 13  defmodule MyModule do def sum_number(n) do sum = 0 for i \u0026lt;- 1..n do sum = sum + i end sum end end IO.puts MyModule.sum_number(3)   そしてこんなエラーが出ました。\nwarning: variable \u0026quot;sum\u0026quot; is unused (there is a variable with the same name in the context, use the pin operator (^) to match on it or prefix this variable with underscore if it is not meant to be used) Main.exs:6: MyModule.sum_number/1 sum 使ってない→使ってる！\nwarning: the result of the expression is ignored (suppress the warning by assigning the expression to the _ variable) Main.exs:6 sum 使ってないから _ 付けてね→使ってる！\nエラー原因 エラーがの原因についてですがElixirはループ内の副作用をループ外に対して行わないようにしているようです。\nそのためループ内でいくら変数を変えてもループ外に出たら反映されません。\nElixir - loop\n対応 この場合は再帰を使って対応します。\n1 2 3 4 5 6 7 8 9 10  defmodule MyModule do # 値 0 の場合 0を返す def sum_number(0), do: 0 def sum_number(x) do x + sum_number(x-1) end end # 1+2+3 = 6 IO.puts MyModule.sum_number(3)   他言語とのループの差で最初つまづきそうな気がします。\n補足 一応再帰やループを使わずにこんなふうにもできる模様です。\n1 2 3 4 5 6 7 8  defmodule MyModule do def sum_number(x) do Enum.sum(1..x) end end # 1+2+3 = 6 IO.puts MyModule.sum_number(3)   参考  Elixir - loop  ","description":"Elixir 初心者の僕がループを使用してハマったことをメモしておきます","id":184,"section":"tech","tags":["Elixir"],"title":"【Elixir】ループの癖が強かった","uri":"https://c-a-p-engineer.github.io/tech/2023/02/05/elixir-loop-trap/"},{"content":"【Elixir】Phoenix 5分でCRUDを作ってみます！ Elixir Phoenix で5分でCRUDをやってみます！\nインストール関係は省きます。\n今回 demo という名前でプロジェクトを作っています。\n環境  Elixir 1.14.2 Phoenix 1.6.3  mix phx.gen.html mix phx.gen.html コマンドを使用します。\nmix phx.gen.html — Phoenix v1.6.13\nこのコマンドはController, Model, View, HTML リソースなどCRUDに必要なものを自動的に生成してくれます。\n公式ドキュメントにあるコマンドを実行してみます。\nmix phx.gen.html Accounts User users name:string age:integer 作成されるファイル   Controller\n lib/demo_web/controllers/user_controller.ex    Model系\n lib/demo/accounts.ex lib/demo/accounts/user.ex    View系\n lib/demo_web/views/user_view.ex lib/demo_web/templates/user/edit.html.heex lib/demo_web/templates/user/form.html.heex lib/demo_web/templates/user/index.html.heex lib/demo_web/templates/user/new.html.heex lib/demo_web/templates/user/show.html.heex    マイグレーション\n priv/repo/migrations/20230128234218_create_users.exs    テスト系\n test/demo/accounts_test.exs test/demo_web/controllers/user_controller_test.exs test/support/fixtures/accounts_fixtures.ex    ルーティング追加 作成されたControllerをルーティングに追加します。\n1 2 3 4 5  scope \u0026#34;/\u0026#34;, DemoWeb do pipe_through :browser # add resources \u0026#34;/users\u0026#34;, UserController end   追加したルーティングを確認\nmix phx.routes UserController へのルーティングが追加されたことを確認。\nuser_path GET /users/:id/edit DemoWeb.UserController :edit user_path GET /users/new DemoWeb.UserController :new user_path GET /users/:id DemoWeb.UserController :show user_path POST /users DemoWeb.UserController :create user_path PATCH /users/:id DemoWeb.UserController :update PUT /users/:id DemoWeb.UserController :update user_path DELETE /users/:id DemoWeb.UserController :delete マイグレーションを実行 作成されたマイグレーションを実行します。\nmix ecto.migrate サーバー起動 \u0026amp; 動作確認 サーバー起動\nmix phx.server http://localhost:4000/users へ接続\nこれで簡単にCRUDが作成可能です。\n参考  CRUD in 5 Minutes with Phoenix and Elixir - Washington Botelho mix phx.gen.html — Phoenix v1.6.13  ","description":"Elixir Phoenix で5分でCRUDをやってみます！","id":185,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix 5分でCRUDを作ってみます！","uri":"https://c-a-p-engineer.github.io/tech/2023/01/29/elixir-phoenix-crud/"},{"content":"【PHP】DOMDocument で発生する文字化けの対策方法 PHP DOMDocument を利用した際に発生する文字化けの対策方法です。\n文字化けコード 1 2  $domDocument = new DOMDocument(); $domDocument-\u0026gt;loadHTML($html);   原因 loadHtml は渡された文字列を ISO-8859-1 で解析するため。\nPHP: DOMDocument::loadHTML - Manual\n文字化け対策 文字化け対策は2種類あります。\n1 2  # HTMLにエンコードをかける $domDocument-\u0026gt;loadHTML(mb_convert_encoding($html, \u0026#39;HTML-ENTITIES\u0026#39;, \u0026#39;UTF-8\u0026#39;));   1 2  # HTMLにエンコードの指定を付与 $domDocument-\u0026gt;loadHTML(\u0026#39;\u0026lt;?xml encoding=\u0026#34;utf-8\u0026#34; ?\u0026gt;\u0026#39; . $html);   参考  PHP: DOMDocument::loadHTML - Manual  ","description":"PHP DOMDocument を利用した際に発生する文字化けの対策方法です。","id":186,"section":"tech","tags":["PHP"],"title":"【PHP】DOMDocument で発生する文字化けの対策方法","uri":"https://c-a-p-engineer.github.io/tech/2023/01/28/php-domdocument-garbled-characters/"},{"content":"【Elixir】Ecto.dump load でデータのエクスポート、インポートを行う Ecto.dump load でデータのエクスポート、インポートを行う。\n今回使用する2つの機能は以下です。\nmix ecto.dump — Ecto SQL v3.9.2\nmix ecto.load — Ecto SQL v3.9.2\nこれを使用することでDBの移行が可能になります。\nEcto.dump でDBDumpを取得する 以下のコマンドを実行します。\nmix ecto.dump priv/repo/structure.sql にDBDumpが吐かれます。\necto.dump 使用時に PostgreSQL なら pg_dump 、MySQL なら mysqldump が入ってないとエラーが出ますのでご注意ください。\nmix ecto.dump — Ecto SQL v3.9.2\nEcto.load でDBDumpを実行する 以下のコマンドを実行すると priv/repo/structure.sql が実行されます。\nmix ecto.load 参考  mix ecto.dump — Ecto SQL v3.9.2 mix ecto.load — Ecto SQL v3.9.2  ","description":"Elixir Ecto.dump load でデータのエクスポート、インポートを行う","id":187,"section":"tech","tags":["Elixir"],"title":"【Elixir】Ecto.dump load でデータのエクスポート、インポートを行う","uri":"https://c-a-p-engineer.github.io/tech/2023/01/23/elixir-ecto-dump/"},{"content":"【PHP】DOMDocument を利用して HTMLを解析する PHP で DOMDocument を利用して HTMLを解析する\n今回はPHPの DOMDocument を利用してHTMLを解析してみます。\nPHP: DOMDocument - Manual\n先に記載しておきますが 大変使いにくくかゆいところに手が届かないもの になります。\n簡単な解析程度には使用できますがタグの属性など取れないこともありますのでHTML解析ライブラリを使用することをオススメします。\nHTMLを解析する 指定のID、タグの情報を取得してみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  \u0026lt;?php $html = \u0026lt;\u0026lt;\u0026lt;HTML\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;タイトル\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;1\u0026lt;/h1\u0026gt; \u0026lt;p id=\u0026#34;row1\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;1行目\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;row2\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;2行目\u0026#34; /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;2\u0026lt;/h2\u0026gt; \u0026lt;p id=\u0026#34;row3\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;3行目\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;row4\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;4行目\u0026#34; /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; HTML; $domDocument = new DOMDocument(); // HTML読み込み $domDocument-\u0026gt;loadHTML(mb_convert_encoding($html, \u0026#39;HTML-ENTITIES\u0026#39;, \u0026#39;UTF-8\u0026#39;)); // ID で取得 $id = $domDocument-\u0026gt;getElementById(\u0026#39;row1\u0026#39;); // タグで取得 $tag = $domDocument-\u0026gt;getElementsByTagName(\u0026#39;input\u0026#39;); var_dump($id); foreach ($tags as $tag){ var_dump($tag); }   HTMLを配列化させる 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  \u0026lt;?php $html = \u0026lt;\u0026lt;\u0026lt;HTML\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;タイトル\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;1\u0026lt;/h1\u0026gt; \u0026lt;p id=\u0026#34;row1\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;1行目\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;row2\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;2行目\u0026#34; /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h2\u0026gt;2\u0026lt;/h2\u0026gt; \u0026lt;p id=\u0026#34;row3\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;3行目\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;row4\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;4行目\u0026#34; /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; HTML; $domDocument = new DOMDocument(); // HTML読み込み $domDocument-\u0026gt;loadHTML(mb_convert_encoding($html, \u0026#39;HTML-ENTITIES\u0026#39;, \u0026#39;UTF-8\u0026#39;)); // XML オブジェクトに変換 $xmlString = $domDocument-\u0026gt;saveXML(); $xmlObject = simplexml_load_string($xmlString); // XMLオブジェクトを配列に変換 $result = json_decode(json_encode($xmlObject), true); var_dump($result);   上記のPHPを実行すると下記のような解析になります。\np タグのIDなどが消失するので使用する際は注意してください。\narray(2) { [\u0026quot;head\u0026quot;]=\u0026gt; array(2) { [\u0026quot;meta\u0026quot;]=\u0026gt; array(1) { [\u0026quot;@attributes\u0026quot;]=\u0026gt; array(1) { [\u0026quot;charset\u0026quot;]=\u0026gt; string(5) \u0026quot;utf-8\u0026quot; } } [\u0026quot;title\u0026quot;]=\u0026gt; string(12) \u0026quot;タイトル\u0026quot; } [\u0026quot;body\u0026quot;]=\u0026gt; array(3) { [\u0026quot;h1\u0026quot;]=\u0026gt; string(1) \u0026quot;1\u0026quot; [\u0026quot;p\u0026quot;]=\u0026gt; array(4) { [0]=\u0026gt; string(7) \u0026quot;1行目\u0026quot; [1]=\u0026gt; array(2) { [\u0026quot;@attributes\u0026quot;]=\u0026gt; array(2) { [\u0026quot;id\u0026quot;]=\u0026gt; string(4) \u0026quot;row2\u0026quot; [\u0026quot;class\u0026quot;]=\u0026gt; string(3) \u0026quot;row\u0026quot; } [\u0026quot;input\u0026quot;]=\u0026gt; array(1) { [\u0026quot;@attributes\u0026quot;]=\u0026gt; array(2) { [\u0026quot;type\u0026quot;]=\u0026gt; string(4) \u0026quot;text\u0026quot; [\u0026quot;value\u0026quot;]=\u0026gt; string(7) \u0026quot;2行目\u0026quot; } } } [2]=\u0026gt; string(7) \u0026quot;3行目\u0026quot; [3]=\u0026gt; array(2) { [\u0026quot;@attributes\u0026quot;]=\u0026gt; array(2) { [\u0026quot;id\u0026quot;]=\u0026gt; string(4) \u0026quot;row4\u0026quot; [\u0026quot;class\u0026quot;]=\u0026gt; string(3) \u0026quot;row\u0026quot; } [\u0026quot;input\u0026quot;]=\u0026gt; array(1) { [\u0026quot;@attributes\u0026quot;]=\u0026gt; array(2) { [\u0026quot;type\u0026quot;]=\u0026gt; string(4) \u0026quot;text\u0026quot; [\u0026quot;value\u0026quot;]=\u0026gt; string(7) \u0026quot;4行目\u0026quot; } } } } [\u0026quot;h2\u0026quot;]=\u0026gt; string(1) \u0026quot;2\u0026quot; } } 参考  PHP: DOMDocument - Manual  ","description":"PHP で DOMDocument を利用して HTMLを解析する","id":188,"section":"tech","tags":["PHP"],"title":"【PHP】DOMDocument を利用して HTMLを解析する ","uri":"https://c-a-p-engineer.github.io/tech/2023/01/23/php-html-parse/"},{"content":"【Flutter】url_launcher でブラウザを開く Flutter url_launcher でブラウザを開く\n今回 url_launcher: 6.1.7 を使用してみます。\nパッケージインストール 以下のコマンドを使用してパッケージを取得します。\nflutter pub add url_launcher サンプルコード サンプルコードはこちらを使用します。\nurl_launcher # Example\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:url_launcher/url_launcher.dart\u0026#39;; final Uri _url = Uri.parse(\u0026#39;https://flutter.dev\u0026#39;); void main() =\u0026gt; runApp( const MaterialApp( home: Material( child: Center( child: ElevatedButton( onPressed: _launchUrl, child: Text(\u0026#39;Show Flutter homepage\u0026#39;), ), ), ), ), ); Future\u0026lt;void\u0026gt; _launchUrl() async { if (!await launchUrl(_url)) { throw \u0026#39;Could not launch $_url\u0026#39;; } }   ブラウザが開くようになりました。\n参考  url_launcher | Flutter  ","description":"Flutter url_launcher でブラウザを開く","id":189,"section":"tech","tags":["Flutter"],"title":"【Flutter】url_launcher でブラウザを開く","uri":"https://c-a-p-engineer.github.io/tech/2023/01/15/flutter-url_launcher/"},{"content":"【Laravel】SeederをDBから逆生成する Seederを一々作るのも面倒なので一気に逆生成する方法。\n手順 以下のパッケージを使用してSeederを逆生成します。\norangehill/iseed\nインストール インストール方法\ncomposer require --dev \u0026quot;orangehill/iseed\u0026quot; 逆生成 以下のコマンドを使用すると database/seeders にファイルが生成されます。\nphp artisan iseed [テーブル名] 複数やる場合は , 区切りで指定できます。\nphp artisan iseed [テーブル名],[テーブル名] 各種オプション php artisan help iseed でオプションの確認可能です。\n使いそうなものを一部抜粋しております。\n --classnameprefix=Prefix クラス名のプレフィックスを指定 --classnamesuffix=Suffix クラス名のサフィックスを指定 --force 既存ファイルがあっても上書きする。 --clean app/database/seeds/DatabaseSeeder.php を削除して実行 --database=DatabaseName データベースを指定 --max=10 Seederにする件数を指定 --chunksize=100 挿入時にチャンクする件数の指定 --orderby=id Seederの順序のキーを指定（昇順 --direction=desc --orderby と組み合わせてSeederの順序指定（descで降順指定 --exclude=id Seederから除外する列を指定。 --exclude=id,created_at,updated_at と , 区切りで除外が可能。  参考  kitloong/laravel-migrations-generator  ","description":"Seederを一々作るのも面倒なので一気に逆生成する方法","id":190,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】SeederをDBから逆生成する","uri":"https://c-a-p-engineer.github.io/tech/2023/01/14/laravel-seeder-generation/"},{"content":"【Flutter】テキストを音声化する Flutter でテキストを音声化する\n今回 flutter_tts 3.6.3 を使用してみます。\nパッケージインストール 以下のコマンドを使用してパッケージを取得します。\nflutter pub add flutter_tts サンプルコード サンプルコードはこちらを使用します。\nflutter_tts # Example\nimport \u0026#39;dart:async\u0026#39;; import \u0026#39;dart:io\u0026#39; show Platform; import \u0026#39;package:flutter/foundation.dart\u0026#39; show kIsWeb; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_tts/flutter_tts.dart\u0026#39;; void main() =\u0026gt; runApp(MyApp()); class MyApp extends StatefulWidget { @override _MyAppState createState() =\u0026gt; _MyAppState(); } enum TtsState { playing, stopped, paused, continued } class _MyAppState extends State\u0026lt;MyApp\u0026gt; { late FlutterTts flutterTts; String? language; String? engine; double volume = 0.5; double pitch = 1.0; double rate = 0.5; bool isCurrentLanguageInstalled = false; String? _newVoiceText; int? _inputLength; TtsState ttsState = TtsState.stopped; get isPlaying =\u0026gt; ttsState == TtsState.playing; get isStopped =\u0026gt; ttsState == TtsState.stopped; get isPaused =\u0026gt; ttsState == TtsState.paused; get isContinued =\u0026gt; ttsState == TtsState.continued; bool get isIOS =\u0026gt; !kIsWeb \u0026amp;\u0026amp; Platform.isIOS; bool get isAndroid =\u0026gt; !kIsWeb \u0026amp;\u0026amp; Platform.isAndroid; bool get isWindows =\u0026gt; !kIsWeb \u0026amp;\u0026amp; Platform.isWindows; bool get isWeb =\u0026gt; kIsWeb; @override initState() { super.initState(); initTts(); } initTts() { flutterTts = FlutterTts(); _setAwaitOptions(); if (isAndroid) { _getDefaultEngine(); _getDefaultVoice(); } flutterTts.setStartHandler(() { setState(() { print(\u0026#34;Playing\u0026#34;); ttsState = TtsState.playing; }); }); if (isAndroid) { flutterTts.setInitHandler(() { setState(() { print(\u0026#34;TTS Initialized\u0026#34;); }); }); } flutterTts.setCompletionHandler(() { setState(() { print(\u0026#34;Complete\u0026#34;); ttsState = TtsState.stopped; }); }); flutterTts.setCancelHandler(() { setState(() { print(\u0026#34;Cancel\u0026#34;); ttsState = TtsState.stopped; }); }); flutterTts.setPauseHandler(() { setState(() { print(\u0026#34;Paused\u0026#34;); ttsState = TtsState.paused; }); }); flutterTts.setContinueHandler(() { setState(() { print(\u0026#34;Continued\u0026#34;); ttsState = TtsState.continued; }); }); flutterTts.setErrorHandler((msg) { setState(() { print(\u0026#34;error: $msg\u0026#34;); ttsState = TtsState.stopped; }); }); } Future\u0026lt;dynamic\u0026gt; _getLanguages() async =\u0026gt; await flutterTts.getLanguages; Future\u0026lt;dynamic\u0026gt; _getEngines() async =\u0026gt; await flutterTts.getEngines; Future _getDefaultEngine() async { var engine = await flutterTts.getDefaultEngine; if (engine != null) { print(engine); } } Future _getDefaultVoice() async { var voice = await flutterTts.getDefaultVoice; if (voice != null) { print(voice); } } Future _speak() async { await flutterTts.setVolume(volume); await flutterTts.setSpeechRate(rate); await flutterTts.setPitch(pitch); if (_newVoiceText != null) { if (_newVoiceText!.isNotEmpty) { await flutterTts.speak(_newVoiceText!); } } } Future _setAwaitOptions() async { await flutterTts.awaitSpeakCompletion(true); } Future _stop() async { var result = await flutterTts.stop(); if (result == 1) setState(() =\u0026gt; ttsState = TtsState.stopped); } Future _pause() async { var result = await flutterTts.pause(); if (result == 1) setState(() =\u0026gt; ttsState = TtsState.paused); } @override void dispose() { super.dispose(); flutterTts.stop(); } List\u0026lt;DropdownMenuItem\u0026lt;String\u0026gt;\u0026gt; getEnginesDropDownMenuItems(dynamic engines) { var items = \u0026lt;DropdownMenuItem\u0026lt;String\u0026gt;\u0026gt;[]; for (dynamic type in engines) { items.add(DropdownMenuItem( value: type as String?, child: Text(type as String))); } return items; } void changedEnginesDropDownItem(String? selectedEngine) async { await flutterTts.setEngine(selectedEngine!); language = null; setState(() { engine = selectedEngine; }); } List\u0026lt;DropdownMenuItem\u0026lt;String\u0026gt;\u0026gt; getLanguageDropDownMenuItems( dynamic languages) { var items = \u0026lt;DropdownMenuItem\u0026lt;String\u0026gt;\u0026gt;[]; for (dynamic type in languages) { items.add(DropdownMenuItem( value: type as String?, child: Text(type as String))); } return items; } void changedLanguageDropDownItem(String? selectedType) { setState(() { language = selectedType; flutterTts.setLanguage(language!); if (isAndroid) { flutterTts .isLanguageInstalled(language!) .then((value) =\u0026gt; isCurrentLanguageInstalled = (value as bool)); } }); } void _onChange(String text) { setState(() { _newVoiceText = text; }); } @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( appBar: AppBar( title: Text(\u0026#39;Flutter TTS\u0026#39;), ), body: SingleChildScrollView( scrollDirection: Axis.vertical, child: Column( children: [ _inputSection(), _btnSection(), _engineSection(), _futureBuilder(), _buildSliders(), if (isAndroid) _getMaxSpeechInputLengthSection(), ], ), ), ), ); } Widget _engineSection() { if (isAndroid) { return FutureBuilder\u0026lt;dynamic\u0026gt;( future: _getEngines(), builder: (BuildContext context, AsyncSnapshot\u0026lt;dynamic\u0026gt; snapshot) { if (snapshot.hasData) { return _enginesDropDownSection(snapshot.data); } else if (snapshot.hasError) { return Text(\u0026#39;Error loading engines...\u0026#39;); } else return Text(\u0026#39;Loading engines...\u0026#39;); }); } else return Container(width: 0, height: 0); } Widget _futureBuilder() =\u0026gt; FutureBuilder\u0026lt;dynamic\u0026gt;( future: _getLanguages(), builder: (BuildContext context, AsyncSnapshot\u0026lt;dynamic\u0026gt; snapshot) { if (snapshot.hasData) { return _languageDropDownSection(snapshot.data); } else if (snapshot.hasError) { return Text(\u0026#39;Error loading languages...\u0026#39;); } else return Text(\u0026#39;Loading Languages...\u0026#39;); }); Widget _inputSection() =\u0026gt; Container( alignment: Alignment.topCenter, padding: EdgeInsets.only(top: 25.0, left: 25.0, right: 25.0), child: TextField( maxLines: 11, minLines: 6, onChanged: (String value) { _onChange(value); }, )); Widget _btnSection() { return Container( padding: EdgeInsets.only(top: 50.0), child: Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [ _buildButtonColumn(Colors.green, Colors.greenAccent, Icons.play_arrow, \u0026#39;PLAY\u0026#39;, _speak), _buildButtonColumn( Colors.red, Colors.redAccent, Icons.stop, \u0026#39;STOP\u0026#39;, _stop), _buildButtonColumn( Colors.blue, Colors.blueAccent, Icons.pause, \u0026#39;PAUSE\u0026#39;, _pause), ], ), ); } Widget _enginesDropDownSection(dynamic engines) =\u0026gt; Container( padding: EdgeInsets.only(top: 50.0), child: DropdownButton( value: engine, items: getEnginesDropDownMenuItems(engines), onChanged: changedEnginesDropDownItem, ), ); Widget _languageDropDownSection(dynamic languages) =\u0026gt; Container( padding: EdgeInsets.only(top: 10.0), child: Row(mainAxisAlignment: MainAxisAlignment.center, children: [ DropdownButton( value: language, items: getLanguageDropDownMenuItems(languages), onChanged: changedLanguageDropDownItem, ), Visibility( visible: isAndroid, child: Text(\u0026#34;Is installed: $isCurrentLanguageInstalled\u0026#34;), ), ])); Column _buildButtonColumn(Color color, Color splashColor, IconData icon, String label, Function func) { return Column( mainAxisSize: MainAxisSize.min, mainAxisAlignment: MainAxisAlignment.center, children: [ IconButton( icon: Icon(icon), color: color, splashColor: splashColor, onPressed: () =\u0026gt; func()), Container( margin: const EdgeInsets.only(top: 8.0), child: Text(label, style: TextStyle( fontSize: 12.0, fontWeight: FontWeight.w400, color: color))) ]); } Widget _getMaxSpeechInputLengthSection() { return Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [ ElevatedButton( child: Text(\u0026#39;Get max speech input length\u0026#39;), onPressed: () async { _inputLength = await flutterTts.getMaxSpeechInputLength; setState(() {}); }, ), Text(\u0026#34;$_inputLengthcharacters\u0026#34;), ], ); } Widget _buildSliders() { return Column( children: [_volume(), _pitch(), _rate()], ); } Widget _volume() { return Slider( value: volume, onChanged: (newVolume) { setState(() =\u0026gt; volume = newVolume); }, min: 0.0, max: 1.0, divisions: 10, label: \u0026#34;Volume: $volume\u0026#34;); } Widget _pitch() { return Slider( value: pitch, onChanged: (newPitch) { setState(() =\u0026gt; pitch = newPitch); }, min: 0.5, max: 2.0, divisions: 15, label: \u0026#34;Pitch: $pitch\u0026#34;, activeColor: Colors.red, ); } Widget _rate() { return Slider( value: rate, onChanged: (newRate) { setState(() =\u0026gt; rate = newRate); }, min: 0.0, max: 1.0, divisions: 10, label: \u0026#34;Rate: $rate\u0026#34;, activeColor: Colors.green, ); } }   実行確認 中々に酷い…初期の Text To Speech のような音声です。\nSorry, your browser doesn\u0026rsquo;t support embedded videos.\n\n参考  flutter_tts | Flutter Package  ","description":"Flutter でテキストを音声化する","id":191,"section":"tech","tags":["Flutter"],"title":"【Flutter】テキストを音声化する","uri":"https://c-a-p-engineer.github.io/tech/2023/01/09/flutter-text_to_speech/"},{"content":"【Flutter】マイクを使って音声をテキスト化してみる Flutter でマイクを使って音声をテキスト化してみる\n今回 speech_to_text 6.1.1 を使用してみます。\nパッケージインストール 以下のコマンドを使用してパッケージを取得します。\nflutter pub add speech_to_text サンプルコード サンプルコードはこちらを使用します。\nspeech_to_text # Complete Flutter example\n音声認識をしている際に自動的にセッションが切れますのでご注意してください。\n体感としては20～30秒程度で切れました。\nspeech_to_text example にセッションの秒数を指定するやり方が載っていました。\nちなみにWebで確認致しましたがFirefoxで試したところ動きませんでした。\nChromeでは動作しました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104  import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:speech_to_text/speech_recognition_result.dart\u0026#39;; import \u0026#39;package:speech_to_text/speech_to_text.dart\u0026#39;; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Flutter Demo\u0026#39;, home: MyHomePage(), ); } } class MyHomePage extends StatefulWidget { MyHomePage({Key? key}) : super(key: key); @override _MyHomePageState createState() =\u0026gt; _MyHomePageState(); } class _MyHomePageState extends State\u0026lt;MyHomePage\u0026gt; { SpeechToText _speechToText = SpeechToText(); bool _speechEnabled = false; String _lastWords = \u0026#39;\u0026#39;; @override void initState() { super.initState(); _initSpeech(); } /// 音声認識を初期化  void _initSpeech() async { _speechEnabled = await _speechToText.initialize(); setState(() {}); } /// 音声認識を開始  void _startListening() async { await _speechToText.listen(onResult: _onSpeechResult); setState(() {}); } /// 音声認識を停止  void _stopListening() async { await _speechToText.stop(); setState(() {}); } /// 音声認識した文字を取得する  void _onSpeechResult(SpeechRecognitionResult result) { setState(() { _lastWords = result.recognizedWords; }); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\u0026#39;Speech Demo\u0026#39;), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: \u0026lt;Widget\u0026gt;[ Container( padding: EdgeInsets.all(16), child: Text( \u0026#39;Recognized words:\u0026#39;, style: TextStyle(fontSize: 20.0), ), ), Expanded( child: Container( padding: EdgeInsets.all(16), child: Text( // 音声認識された単語を表示  _speechToText.isListening ? \u0026#39;$_lastWords\u0026#39; : _speechEnabled ? \u0026#39;Tap the microphone to start listening...\u0026#39; : \u0026#39;Speech not available\u0026#39;, ), ), ), ], ), ), floatingActionButton: FloatingActionButton( onPressed: // 音声認識 ON/OFF  _speechToText.isNotListening ? _startListening : _stopListening, tooltip: \u0026#39;Listen\u0026#39;, child: Icon(_speechToText.isNotListening ? Icons.mic_off : Icons.mic), ), ); } }   サンプルを実行するとこんなふうになります。（声は載せたくないのでGifでご勘弁ください\n精度としてはまぁまぁな感じです。\n参考  speech_to_text | Flutter Package  ","description":"Flutter でマイクを使って音声をテキスト化してみる","id":192,"section":"tech","tags":["Flutter"],"title":"【Flutter】マイクを使って音声をテキスト化してみる","uri":"https://c-a-p-engineer.github.io/tech/2023/01/09/flutter-speech_to_text/"},{"content":"【Elixir】Livebook でサクッと遊ぼう！ 動かす方法 動かす方法は色々ある模様です。\n（僕はDockerで動かしています。\n公式サイト Livebook.dev\nLivebook アプリをインストール Livebook.dev #install の左側からアプリをダウンロードしてインストールする。\nFly.io で使う Livebook.dev #install から Fly.io にデプロイして使う方法があります。\nこちらは GitHub と連携してサクッとデプロイできました。\nDocker  Dockerが入っている必要があります。  docker run -p 8080:8080 -p 8081:8081 --pull always livebook/livebook 起動すると http://0.0.0.0:8080/?token=XXXXXXXXXXXXXXXXX が出てくるので 0.0.0.0 を localhost にすると Livebook に入れます。\nローカル環境にインストール  Elixirが入っている必要があります。  mix do local.rebar --force, local.hex --force mix escript.install hex livebook livebook server Livebook を使ってみる まずは初期画面の右上の New notebook で実行画面に移ります。\nとりあえず Hello world の表示確認をしてみます。\n以下のコードを Section 部分入れて実行してみます。\n1  IO.puts \u0026#34;Hello world\u0026#34;   入力したら左上の再生ボタン（▶）を押して実行してください\nそうすると実行されます。\nかっこよくリアルタイムに表示されるグラフを書いてみる こちらの記事のコードを利用させていただきました。\nLivebookを楽しむ (Elixir) - Qiita\nコードブロック下にマウスを当てると「+Code」と出てくるので別々にコードブロックを追加してください。\n グラフを表示する  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  Mix.install([ {:vega_lite, \u0026#34;~\u0026gt; 0.1.3\u0026#34;}, {:kino, \u0026#34;~\u0026gt; 0.5.0\u0026#34;} ]) alias VegaLite, as: Vl memory = [ total: :red, processes: :yellow, atom: :green, binary: :pink, code: :orange, ets: :blue ] layers = for {layer, color} \u0026lt;- memory do Vl.new() |\u0026gt; Vl.mark(:line) |\u0026gt; Vl.encode_field(:x, \u0026#34;iteration\u0026#34;, type: :quantitative) |\u0026gt; Vl.encode_field(:y, Atom.to_string(layer), type: :quantitative, title: \u0026#34;Memory usage (MB)\u0026#34;) |\u0026gt; Vl.encode(:color, value: color, datum: Atom.to_string(layer)) end widget = Vl.new(width: 500, height: 200) |\u0026gt; Vl.layers(layers) |\u0026gt; Kino.VegaLite.new()   グラフに現在の値をリアルタイム更新させる  1 2 3 4 5 6 7 8 9 10  Kino.VegaLite.periodically(widget, 200, 0, fn i -\u0026gt; point = :erlang.memory() |\u0026gt; Enum.map(fn {type, bytes} -\u0026gt; {type, bytes / 1_000_000} end) |\u0026gt; Map.new() |\u0026gt; Map.put(:iteration, i) Kino.VegaLite.push(widget, point, window: 1000) {:cont, i + 1} end)   for文で負荷を与えてみる  1 2 3  for i \u0026lt;- 1..1_000_000 do :\u0026#34;atom#{i}\u0026#34; end   これらを実行するとこうなります。\nLivebookを使ってみての感想 通常のオンラインエディタと違って図や表をリアルタイムで表示されるのがとてもいい感じ。\nリアルタイム共同編集もできるようでチーム内でサンプルコードなどを置くにはとても良いと思います。\nQiitaなどを見ててLivebookを使用しているのが図や表が多かったのは一々環境を作ったり面倒だったり、オンラインエディタ上では通常できないためものがLivebookのみで実行、確認ができるためだったのだと感じました。\n参考  Livebook.dev Livebookを楽しむ (Elixir) - Qiita  ","description":"Elixer には Livebook というブラウザ上で動作するリッチな実行環境があります。今回はそれを使ってみます。","id":193,"section":"tech","tags":["Elixir"],"title":"【Elixir】Livebook でサクッと遊ぼう！","uri":"https://c-a-p-engineer.github.io/tech/2023/01/07/elixir-livebook/"},{"content":"【Flutter】簡単にアニメーションを実現するサンプル Flutter で簡単にアニメーションを実現するサンプル。\n今回は公式ドキュメントから動画やサンプルコードがあり簡単に実装ができるものをまとめたものになります。\n環境  Flutter 3.3.10  大きさを変化させる ScaleTransition  ScaleTransition class - widgets library - Dart API     サンプルコード  DartPad\n   表示サイズを変化させる SizeTransition  SizeTransition class - widgets library - Dart API     サンプルコード  DartPad\n   透過率を変化させる FadeTransition  FadeTransition class - widgets library - Dart API     サンプルコード  DartPad\n   スクロールリストの透過率を変化させる SliverFadeTransition  SliverFadeTransition class - widgets library - Dart API    サンプルコード  DartPad\n   くるくる回る RotationTransition  RotationTransition class - widgets library - Dart API     サンプルコード  DartPad\n   スライドする SlideTransition  SlideTransition class - widgets library - Dart API     サンプルコード  DartPad\n   位置座標を変更する AnimatedPositioned  AnimatedPositioned class - widgets library - Dart API     サンプルコード  DartPad\n   余白を変化させる AnimatedPadding  AnimatedPadding class - widgets library - Dart API     サンプルコード  DartPad\n   位置を変化させる AlignTransition  AlignTransition class - widgets library - Dart API     サンプルコード  DartPad\n   特定の位置に変化させる PositionedTransition ※RelativePositionedTransition と似ています。\n PositionedTransition class - widgets library - Dart API     サンプルコード  DartPad\n   特定の位置に変化させる RelativePositionedTransition ※RelativePositionedTransition と似ています。\n RelativePositionedTransition class - widgets library - Dart API     サンプルコード  DartPad\n   テキストのスタイルを変化させる DefaultTextStyleTransition  DefaultTextStyleTransition class - widgets library - Dart API   ※動画は AnimatedDefaultTextStyle class のものを使用していますが動作は同じです。   サンプルコード  DartPad\n   DecoratedBoxを変化させる DecoratedBoxTransition  DecoratedBoxTransition class - widgets library - Dart API     サンプルコード  DartPad\n   ","description":"Flutter で簡単にアニメーションを実現するサンプル","id":194,"section":"tech","tags":["Flutter"],"title":"【Flutter】簡単にアニメーションを実現するサンプル","uri":"https://c-a-p-engineer.github.io/tech/2023/01/07/flutter-easy-animation/"},{"content":"【Git】Git Clone を高速で行う Git Clone を単純に行うと数分待つこともあります。そういう時に高速化する方法を紹介。\nサンプルとして取得するGitリポジトリはFlutterを使用しています。\n計測は以下のようにしています。\ntime git clone -b stable https://github.com/flutter/flutter 何も指定しない場合、結果は 2m13.119s かかりました。\ndepth --depth は指定したコミット数を取得します。\nGit - git-clone Documentation # depth\nそうすることでコミット履歴が大量にあるGitリポジトリを素早くクローンすることが可能です。\ntime git clone --depth=1 -b stable https://github.com/flutter/flutter 実行結果は 0m15.344s とだいぶ高速になりました。\nsingle-branch --single-branch は指定したブランチのみを取得します。\nGit - git-clone Documentation # single-branch\n他のブランチを取得しないため高速化されます。\ntime git clone --depth=1 -b stable https://github.com/flutter/flutter 実行結果は 1m37.876s と --depth にはだいぶ劣りますが何もしないよりは高速になりました。\ndepth \u0026amp; single-branch 上記2つを組み合わせたパターンです。\n1つのブランチで1つのコミットまでしか取得しない。\ntime git clone --depth=1 --single-branch -b stable https://github.com/flutter/flutter 0m9.436s と --depth のみの指定より高速化されました。\n参考  Git - git-clone Documentation # depth Git - git-clone Documentation # single-branch  ","description":"Git Clone を単純に行うと数分待つこともあります。そういう時に高速化する方法を紹介。","id":195,"section":"tech","tags":["Git"],"title":"【Git】Git Clone を高速で行う","uri":"https://c-a-p-engineer.github.io/tech/2023/01/06/git-fast-clone/"},{"content":"【Docker】XWindow を使用してDocker上のGUIアプリをホスト側で使用する Docker上の GUIアプリを XWindow を使用してDocker上のGUIアプリをホスト側で使用する\n環境  Windows 11 Docker version 20.10.21  Host側の Windowsの用意 Xサーバーを導入します。\nwinget install marha.VcXsrv cd \u0026quot;C:\\Program Files\\VcXsrv\u0026quot; XLaunch C:\\Program Files\\VcXsrv にない場合はスタートメニューなどから探してください。\n起動後、すべてデフォルト設定で起動して問題ないです。（僕の場合はこれで動きました。\nMac の場合は XQuartz を入れれば良いようです。\nDockerFile の用意 Ubuntu LTS に X11アプリケーションを入れたものを用意します。\nDISPLAY に host.docker.internal:0:0 を設定することでホスト側のXサーバーに接続させます。\n1 2 3 4 5 6 7 8 9  FROMubuntu:latest# X Windows System 設定# DISPLAY=Xサーバー名:ディスプレイ番号.スクリーン番号ENV DISPLAY host.docker.internal:0.0RUN apt-get update -y\\  \u0026amp;\u0026amp; apt-get install x11-apps -y  実行 \u0026amp; 確認 DockerFileをビルドして実際に xeyes を実行してみます。\ndocker image build . -t x11 docker run --rm -it -t x11 xeyes 以下のような目が出てくれば成功です！\n一応コマンドの説明を載せておきます。\ndocker image build . -t [コンテナ名] docker run --rm -it -t [コンテナ名] [コマンド] これは元々 Andoroid Studio をDocker内で実行させてHOST側で操作出来ないかと思いやってみました。\nAndroid Studio を実行して操作できることを確認できました。\n参考  Docker上のX11GUIをWindowsで使う  ","description":"Docker上の GUIアプリを XWindow を使用してDocker上のGUIアプリをホスト側で使用する","id":196,"section":"tech","tags":["Docker"],"title":"【Docker】XWindow を使用してDocker上のGUIアプリをホスト側で使用する","uri":"https://c-a-p-engineer.github.io/tech/2023/01/01/docker-xwindow/"},{"content":"【Elixir】Phoenix で Quantum を使用してプログラム定期実行する方法 Elixir Phoenix 環境で Quantum を使用してプログラム定期実行する方法\nQuantum のドキュメントはこちら\n quantum-elixir/quantum-core: Cron-like job scheduler for Elixir Quantum — Quantum v3.5.0  環境  Elixir 1.14.2 Phoenix 1.6.3 Quantum 3.5.0  サンプル GitHub を見つつ進めていきます。\nphoenixプロジェクト作成 DB不要のため --no-ecto を付けます。\nmix phx.new demo --no-ecto 依存関係に追加 mix.exs に quantum を追加\n1 2 3 4 5  defp deps do [ {:quantum, \u0026#34;~\u0026gt; 3.0\u0026#34;}  ] end   追加した quantum を取得させる。\nmix deps.get schedulerの作成 スケジューラーを作成します。\n1 2 3  defmodule Demo.Scheduler do use Quantum, otp_app: :demo end   Supervisorへの追加 Supervisor に scheduler を追加致します。\n7行目のように children に Demo.Scheduler を追加します。\n1 2 3 4 5 6 7 8 9 10 11 12 13  defmodule Acme.Application do use Application def start(_type, _args) do children = [ # This is the new line Demo.Scheduler  ] opts = [strategy: :one_for_one, name: Demo.Supervisor] Supervisor.start_link(children, opts) end end   ジョブ設定 config.exs にジョブを設定します。\n以下のようにすると毎分 Hello QUANTUM! と表示されます。\n1 2 3 4  config :demo, Demo.Scheduler, jobs: [ {\u0026#34;* * * * *\u0026#34;, fn -\u0026gt; IO.puts(\u0026#34;Hello QUANTUM!\u0026#34;) end} ]   確認 Phoenixサーバーを起動します。\nmix phx.server 起動後にコンソールに Hello QUANTUM! と毎分出てくれば成功です。\n参考  quantum-elixir/quantum-core: Cron-like job scheduler for Elixir Quantum — Quantum v3.5.0  ","description":"Elixir Phoenix 環境で Quantum を使用してプログラム定期実行する方法","id":197,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】Phoenix で Quantum を使用してプログラム定期実行する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/12/30/elixir-phoenix-quantum/"},{"content":"【Elixir】 Phoenix で LiveView を使ってみる 今回はLiveViewを使ってバックエンドだけでリッチなフロントエンドを作成してみます。\nPhoenix.LiveView — Phoenix LiveView v0.17.5\n環境  Elixir 1.14.2 Phoenix 1.6.3 LiveView 0.17.5  サンプル こちらの参考ページを元に進めていきます。\nPhoenix LiveView Basics :: Phoenix Beginner\u0026rsquo;s Guide\nON/OFFボタンを作成します。\nphoenixプロジェクト作成 DB不要のため --no-ecto を付けます。\nmix phx.new demo --no-ecto LiveViewの処理を実装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  defmodule DemoWeb.LightLive do use DemoWeb, :live_view # 初期接続 def mount(_params, _session, socket) do socket = socket |\u0026gt; assign(:light_bulb_status, \u0026#34;off\u0026#34;) |\u0026gt; assign(:on_button_status, \u0026#34;\u0026#34;) |\u0026gt; assign(:off_button_status, \u0026#34;disabled\u0026#34;) {:ok, socket} end # 画面 def render(assigns) do ~L\u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;The light is \u0026lt;%= @light_bulb_status %\u0026gt;.\u0026lt;/h1\u0026gt; \u0026lt;button phx-click=\u0026#34;on\u0026#34; \u0026lt;%= @on_button_status %\u0026gt;\u0026gt;On\u0026lt;/button\u0026gt; \u0026lt;button phx-click=\u0026#34;off\u0026#34; \u0026lt;%= @off_button_status %\u0026gt;\u0026gt;Off\u0026lt;/button\u0026gt; \u0026#34;\u0026#34;\u0026#34; end # Onボタンの処理 def handle_event(\u0026#34;on\u0026#34;, _value, socket) do socket = socket |\u0026gt; assign(:light_bulb_status, \u0026#34;on\u0026#34;) |\u0026gt; assign(:on_button_status, \u0026#34;disabled\u0026#34;) |\u0026gt; assign(:off_button_status, \u0026#34;\u0026#34;) {:noreply, socket} end # Offボタンの処理 def handle_event(\u0026#34;off\u0026#34;, _value, socket) do socket = socket |\u0026gt; assign(:light_bulb_status, \u0026#34;off\u0026#34;) |\u0026gt; assign(:on_button_status, \u0026#34;\u0026#34;) |\u0026gt; assign(:off_button_status, \u0026#34;disabled\u0026#34;) {:noreply, socket} end end   Routerへの追加 1 2 3 4 5 6 7 8  scope \u0026#34;/\u0026#34;, DemoWeb do pipe_through(:browser) get(\u0026#34;/\u0026#34;, PageController, :index) # /light のパスを追加 live(\u0026#34;/light\u0026#34;, LightLive) end   確認 Phoenixサーバーを起動します。\nmix phx.server 起動後に http://localhost:4000/light に接続すると画面が出てきます。\n参考  Phoenix LiveView Basics :: Phoenix Beginner\u0026rsquo;s Guide  ","description":"LiveViewを使ってバックエンドだけでリッチなフロントエンドを作成してみます。","id":198,"section":"tech","tags":["Elixir","Phoenix"],"title":"【Elixir】 Phoenix で LiveView を使ってみる","uri":"https://c-a-p-engineer.github.io/tech/2022/12/27/elixir-phoenix-liveview/"},{"content":"【Docker】Elixir Phoenix の環境を作る Docker で Elixir Phoenix の環境を作る\n作成する環境  Elixir 1.14.2 Phoenix 1.6.3  Docker Compose ファイル作成 docker-compose.yml を用意します。\n作るのは Elixir Phoenix の環境です。\nPostgresも入っています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  version:\u0026#39;3.2\u0026#39;services:elixir-phoenix:build:context:.dockerfile:./Dockerfileports:- \u0026#39;4000:4000\u0026#39;# command: mix phx.servertty:trueenvironment:- MIX_ENV=dev- PORT=4000volumes:- ../:/appworking_dir:/app/srcdb:image:postgresvolumes:- .data/postgres:/var/lib/postgresql/data/pgdataenvironment:- PGDATA=/var/lib/postgresql/data/pgdata- POSTGRES_USER=postgres- POSTGRES_PASSWORD=postgres- POSTGRES_HOST=db  DockerFileの用意 今回構築するElixirのバージョンは 1.14.2 ですが他のバージョンを使用する場合は elixir - Official Image - Docker Hub を見て指定してください。\n1 2 3 4 5 6 7  FROMelixir:1.14.2RUN mix local.hex --force \u0026amp;\u0026amp; \\  mix archive.install hex phx_new 1.6.3 --force \u0026amp;\u0026amp; \\  mix local.rebar --forceWORKDIR/app/src  Phoenix 環境を構築する  Elixir Dockerコンテナに入る  docker-compose up -d docker-compose run elixir-phoenix bash  Phoenixプロジェクトを作成  mix phx.new . --app my_app  DB設定変更  1 2 3 4 5 6 7 8  # Configure your database config :my_app, MyApp.Repo, adapter: Ecto.Adapters.Postgres, username: \u0026#34;postgres\u0026#34;, password: \u0026#34;postgres\u0026#34;, database: \u0026#34;my_app_dev\u0026#34;, hostname: \u0026#34;db\u0026#34;, pool_size: 10    ホストから繋ぐためにIP設定を変更  1  http: [ip: {0, 0, 0, 0}, port: 4000],    依存関係コンパイル \u0026amp; DB作成 \u0026amp; マイグレーション実行  mix deps.compile \u0026amp;\u0026amp; mix ecto.create \u0026amp;\u0026amp; mix ecto.migrate  サーバー起動  mix phx.server http://localhost:4000 に接続してWelcomeページが出たら成功です。\n プロジェクト作成後に docker-compose.yml のコメントアウトを外すと起動時に自動的にサーバーが起動する設定にできます。  1  command:mix phx.server  参考  Docker ComposeでElixir/Phoenixの開発環境を構築する - Qiita  ","description":"Docker で Elixir Phoenix の環境を作る","id":199,"section":"tech","tags":["Docker","Elixir","Phoenix"],"title":"【Docker】Elixir Phoenix の環境を作る","uri":"https://c-a-p-engineer.github.io/tech/2022/12/27/docker-elixir-phoenix/"},{"content":"【Flutter】AudioPlayers を使って音を出す Flutter でAudioPlayersを使って音を出す方法\naudioplayers というパッケージを使用します。\n環境  Flutter 3.3.8 audioplayers 1.1.1  インストール まずは以下のコマンドを実行して audioplayers のインストールをします。\nflutter pub add audioplayers 音ファイルを配置する audio フォルダをプロジェクト直下に作成します。\n再生したい音ファイルをその中に入れます。\n設定ファイルを編集 pubspec.yaml ファイルを編集します。\n1 2 3 4 5  flutter:assets:# 音ファイルを指定する場合- audio/sample.mp3  サンプルコード サンプルコードはこちらになります。\nカウンターアプリのボタンを押す毎に音が出るようになっています。\nファイルの指定に DeviceFileSource を使用していますが音ファイルのソース指定には以下のものが使用できます。\n AssetSource class - audioplayers library - Dart API BytesSource class - audioplayers library - Dart API DeviceFileSource class - audioplayers library - Dart API UrlSource class - audioplayers library - Dart API  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72  import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:audioplayers/audioplayers.dart\u0026#39;;  void main() { runApp(const MyApp()); } class MyApp extends StatelessWidget { const MyApp({super.key}); @override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Flutter Demo\u0026#39;, theme: ThemeData( primarySwatch: Colors.blue, ), home: const MyHomePage(title: \u0026#39;Flutter Demo Home Page\u0026#39;), ); } } class MyHomePage extends StatefulWidget { const MyHomePage({super.key, required this.title}); final String title; @override State\u0026lt;MyHomePage\u0026gt; createState() =\u0026gt; _MyHomePageState(); } class _MyHomePageState extends State\u0026lt;MyHomePage\u0026gt; { int _counter = 0; // オーディアプレイヤーを宣言  final player = AudioPlayer();  void _incrementCounter() { // 音ファイルを指定して再生  player.play(DeviceFileSource(\u0026#34;audio/sample.mp3\u0026#34;));  setState(() { _counter++; }); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(widget.title), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: \u0026lt;Widget\u0026gt;[ const Text( \u0026#39;You have pushed the button this many times:\u0026#39;, ), Text( \u0026#39;$_counter\u0026#39;, style: Theme.of(context).textTheme.headline4, ), ], ), ), floatingActionButton: FloatingActionButton( onPressed: _incrementCounter, tooltip: \u0026#39;Increment\u0026#39;, child: const Icon(Icons.add), ), ); } }   参考  audioplayers | Flutter Packages  ","description":"Flutter でAudioPlayersを使って音を出す方法","id":200,"section":"tech","tags":["Flutter"],"title":"【Flutter】AudioPlayers を使って音を出す","uri":"https://c-a-p-engineer.github.io/tech/2022/12/23/flutter-audioplayers/"},{"content":"【PHP】XMLをパースして配列にする方法 PHP でXMLをパースして配列にする方法\nサンプル 下記のサンプルはXMLをパースして配列にします。\n実行確認出来るようにサンプルのため変数 $xml に直接XMLを入れていますが、ローカルファイルであれば file_get_contents を使用してファイルを取得してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  \u0026lt;?php // $xml = file_get_contents(\u0026#39;sample.xml\u0026#39;); $xml = \u0026lt;\u0026lt;\u0026lt;XML\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;Tests\u0026gt; \u0026lt;Test TestId=\u0026#34;0001\u0026#34; TestType=\u0026#34;CMD\u0026#34;\u0026gt; \u0026lt;Name\u0026gt;Convert number to string\u0026lt;/Name\u0026gt; \u0026lt;CommandLine\u0026gt;Examp1.EXE\u0026lt;/CommandLine\u0026gt; \u0026lt;Input\u0026gt;1\u0026lt;/Input\u0026gt; \u0026lt;Output\u0026gt;One\u0026lt;/Output\u0026gt; \u0026lt;/Test\u0026gt; \u0026lt;Test TestId=\u0026#34;0002\u0026#34; TestType=\u0026#34;CMD\u0026#34;\u0026gt; \u0026lt;Name\u0026gt;Find succeeding characters\u0026lt;/Name\u0026gt; \u0026lt;CommandLine\u0026gt;Examp2.EXE\u0026lt;/CommandLine\u0026gt; \u0026lt;Input\u0026gt;abc\u0026lt;/Input\u0026gt; \u0026lt;Output\u0026gt;def\u0026lt;/Output\u0026gt; \u0026lt;/Test\u0026gt; \u0026lt;Test TestId=\u0026#34;0003\u0026#34; TestType=\u0026#34;GUI\u0026#34;\u0026gt; \u0026lt;Name\u0026gt;Convert multiple numbers to strings\u0026lt;/Name\u0026gt; \u0026lt;CommandLine\u0026gt;Examp2.EXE /Verbose\u0026lt;/CommandLine\u0026gt; \u0026lt;Input\u0026gt;123\u0026lt;/Input\u0026gt; \u0026lt;Output\u0026gt;One Two Three\u0026lt;/Output\u0026gt; \u0026lt;/Test\u0026gt; \u0026lt;/Tests\u0026gt; XML; // XML をオブジェクトに変換 $xmlObject = simplexml_load_string($xml); // XMLを配列に変換 XMLオブジェクト → JSON → 配列 $xmlArray = json_decode(json_encode($xmlObject), true); var_dump($xmlArray);   以下のような出力結果になります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59  array(1) { [\u0026#34;Test\u0026#34;]=\u0026gt; array(3) { [0]=\u0026gt; array(5) { [\u0026#34;@attributes\u0026#34;]=\u0026gt; array(2) { [\u0026#34;TestId\u0026#34;]=\u0026gt; string(4) \u0026#34;0001\u0026#34; [\u0026#34;TestType\u0026#34;]=\u0026gt; string(3) \u0026#34;CMD\u0026#34; } [\u0026#34;Name\u0026#34;]=\u0026gt; string(24) \u0026#34;Convert number to string\u0026#34; [\u0026#34;CommandLine\u0026#34;]=\u0026gt; string(10) \u0026#34;Examp1.EXE\u0026#34; [\u0026#34;Input\u0026#34;]=\u0026gt; string(1) \u0026#34;1\u0026#34; [\u0026#34;Output\u0026#34;]=\u0026gt; string(3) \u0026#34;One\u0026#34; } [1]=\u0026gt; array(5) { [\u0026#34;@attributes\u0026#34;]=\u0026gt; array(2) { [\u0026#34;TestId\u0026#34;]=\u0026gt; string(4) \u0026#34;0002\u0026#34; [\u0026#34;TestType\u0026#34;]=\u0026gt; string(3) \u0026#34;CMD\u0026#34; } [\u0026#34;Name\u0026#34;]=\u0026gt; string(26) \u0026#34;Find succeeding characters\u0026#34; [\u0026#34;CommandLine\u0026#34;]=\u0026gt; string(10) \u0026#34;Examp2.EXE\u0026#34; [\u0026#34;Input\u0026#34;]=\u0026gt; string(3) \u0026#34;abc\u0026#34; [\u0026#34;Output\u0026#34;]=\u0026gt; string(3) \u0026#34;def\u0026#34; } [2]=\u0026gt; array(5) { [\u0026#34;@attributes\u0026#34;]=\u0026gt; array(2) { [\u0026#34;TestId\u0026#34;]=\u0026gt; string(4) \u0026#34;0003\u0026#34; [\u0026#34;TestType\u0026#34;]=\u0026gt; string(3) \u0026#34;GUI\u0026#34; } [\u0026#34;Name\u0026#34;]=\u0026gt; string(35) \u0026#34;Convert multiple numbers to strings\u0026#34; [\u0026#34;CommandLine\u0026#34;]=\u0026gt; string(19) \u0026#34;Examp2.EXE /Verbose\u0026#34; [\u0026#34;Input\u0026#34;]=\u0026gt; string(3) \u0026#34;123\u0026#34; [\u0026#34;Output\u0026#34;]=\u0026gt; string(13) \u0026#34;One Two Three\u0026#34; } } }   参考  PHP: simplexml_load_string - Manual PHP: json_decode - Manual PHP: json_encode - Manual  ","description":"PHP でXMLをパースして配列にする方法","id":201,"section":"tech","tags":["PHP"],"title":"【PHP】XMLをパースして配列にする方法","uri":"https://c-a-p-engineer.github.io/tech/2022/12/23/php-xml-parse/"},{"content":"【Flutter】画像を表示する Flutter で画像を表示する方法\n画像を配置する images フォルダをプロジェクト直下に作成します。\n表示したい画像をその中に入れます。\n設定ファイルを編集 pubspec.yaml ファイルを編集します。\n1 2 3 4 5 6 7  flutter:assets:# 画像を指定する場合- images/sample.jpg# ファルダを指定する場合- images/  実行コード Image.asset('images/sample.jpg') を使用して画像を読み込みます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  import \u0026#39;package:flutter/material.dart\u0026#39;; const Color darkBlue = Color.fromARGB(255, 18, 32, 47); void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( theme: ThemeData.dark().copyWith( scaffoldBackgroundColor: darkBlue, ), debugShowCheckedModeBanner: false, home: Scaffold( body: Center( child: MyWidget(), ), ), ); } } class MyWidget extends StatelessWidget { @override Widget build(BuildContext context) { return Image.asset(\u0026#39;images/sample.jpg\u0026#39;);  } }   参考  Adding assets and images | Flutter  ","description":"Flutter で画像を表示する方法","id":202,"section":"tech","tags":["Flutter"],"title":"【Flutter】画像を表示する","uri":"https://c-a-p-engineer.github.io/tech/2022/12/21/flutter-image/"},{"content":"【Dart】遅延実行する方法 Dart で遅延実行する方法\nサンプル Future.delayed を使用します。\nDartPad を使用すればブラウザ上で下記のコードを実行して確認できます。\nサンプルは4種類の書き方を行っています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  import \u0026#39;dart:async\u0026#39;; void main() async { print(\u0026#34;Start:\u0026#34; + DateTime.now().toString()); // 3秒後に実行 引数  Future.delayed(Duration(seconds: 3), () { print(\u0026#34;delayed computation:\u0026#34; + DateTime.now().toString()); }); // 3行後に実行 then  Future.delayed(Duration(seconds: 3)).then((_) { print(\u0026#34;delayed then:\u0026#34; + DateTime.now().toString()); }); // 3秒後に実行 then メソッドチェーン  Future.delayed(Duration(seconds: 1)) .then((_) =\u0026gt; print(\u0026#39;delayed then methodchain1:\u0026#39; + DateTime.now().toString())) .then((_) =\u0026gt; print(\u0026#39;delayed then methodchain2:\u0026#39; + DateTime.now().toString())); // 3秒間待たせて後述のコードを実行させる  await Future.delayed(Duration(seconds: 3)); print(\u0026#34;delayed await:\u0026#34; + DateTime.now().toString()); }   参考  Future.delayed constructor - Future - dart:async library - Dart API  ","description":"Dart で遅延実行する方法","id":203,"section":"tech","tags":["Dart","Flutter"],"title":"【Dart】遅延実行する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/12/21/dart-delayed/"},{"content":"【Vue3 + Typescript】pinia のデータを永続化する方法 Vue3 \u0026amp; Typescript 環境で Pinia のデータを永続化する方法メモ\n環境情報  Docker Vite 3.2.38 Vue 3.0.9 TypeScript 3.0.9 Pinia 3.0.9  pinia のデータを永続化する 今回 prazdevs/pinia-plugin-persistedstate を使用します。\nインストール こちらに記載してる方法でインストールを進めていきます。\nGetting Started | pinia-plugin-persistedstate\nnpm i pinia-plugin-persistedstate main.ts にプラグインを追加します。\n1 2 3 4 5  import { createPinia } from \u0026#39;pinia\u0026#39; import piniaPluginPersistedstate from \u0026#39;pinia-plugin-persistedstate\u0026#39; const pinia = createPinia() pinia.use(piniaPluginPersistedstate)   使用方法 使用方法は簡単で永続化するストアに persist: true のオプションを追加するだけです。\n option store の書き方  1 2 3 4 5 6 7 8 9 10  import { defineStore } from \u0026#39;pinia\u0026#39; export const useStore = defineStore(\u0026#39;main\u0026#39;, { state: () =\u0026gt; { return { someState: \u0026#39;hello pinia\u0026#39;, } }, persist: true, })    setup store の書き方  1 2 3 4 5 6 7 8 9 10 11 12  import { defineStore } from \u0026#39;pinia\u0026#39; export const useStore = defineStore( \u0026#39;main\u0026#39;, () =\u0026gt; { const someState = ref(\u0026#39;hello pinia\u0026#39;) return { someState } }, { persist: true, }, )   他の永続化ライブラリ 僕は使用しませんでしたが他に以下のようなライブラリがあるようです。\n iendeavor/pinia-plugin-persistedstate-2 Seb-L/pinia-plugin-persist  参考  Getting Started | pinia-plugin-persistedstate  ","description":"Vue3 \u0026 Typescript 環境で Pinia のデータを永続化する方法メモ","id":204,"section":"tech","tags":["Vue"],"title":"【Vue3 + Typescript】Pinia のデータを永続化する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/12/20/vue3-typescript-pinia-persisted/"},{"content":"【Flutter】Icons class を使用するアイコンを探す方法 Flutter で Icons class を使用するアイコンを探す方法\nFlutterアイコンを探す Flutterのアイコンは以下のように呼び出すことができます。\n1  Icons.favorite,   ただし、なんのアイコンがあるかわかりづらい。\nGoogle Fonts の Material Icons で探すことができます。\nMaterial Symbols and Icons - Google Fonts\n使用したいアイコンをクリックすると Flutter 用のコードを表示してくれます。\n基本的にはすべて小文字、空白は _ に変換されている模様です\n参考  Icons class - material library - Dart API  ","description":"Flutter で Icons class を使用するアイコンを探す方法","id":205,"section":"tech","tags":["Flutter"],"title":"【Flutter】Icons class を使用するアイコンを探す方法","uri":"https://c-a-p-engineer.github.io/tech/2022/12/18/flutter-icons-find/"},{"content":"【TypeScript】JSONを自動的にTypeScriptの型に変換してくれる json2ts TypeScript で一々型を作るのは面倒と言う時にJSONを入れると自動的にTypeScriptの型に変換してくれる json2ts のご紹介\n json2ts  使用方法  tsの型にしたいjsonをテキストエリアに入れる 下の generate TypeScript ボタンを押すだけ。  以下のようなサンプルのjsonを入れてみてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  { \u0026#34;quotes\u0026#34;: [ { \u0026#34;high\u0026#34;: 121.64, \u0026#34;low\u0026#34;: 119.05, \u0026#34;currencyPairCode\u0026#34;: \u0026#34;EURJPY\u0026#34;, \u0026#34;comment\u0026#34;: \u0026#34;EUR JPY\u0026#34;, }, { \u0026#34;high\u0026#34;: 142.60, \u0026#34;low\u0026#34;: 140.43, \u0026#34;currencyPairCode\u0026#34;: \u0026#34;GBPJPY\u0026#34;, \u0026#34;comment\u0026#34;: null } ] }   以下のような ts の内容が出力されます。\n後は名前を変更するなどして使用が可能です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  declare module namespace { export interface Quote { high: number; low: number; currencyPairCode: string; comment: string; } export interface RootObject { quotes: Quote[]; } }   注意\n本来であれば comment: string; には null も入るので comment?: string; にならなければいけないです。\njson2ts はその辺りがきっちりなっていないので細部には気をつけて使用してください。  注意点もありますがこれで一々手打ちしなくて良いのが楽でいいです。\n","description":"TypeScript で一々型を作るのは面倒と言う時にJSONを入れると自動的にTypeScriptの型に変換してくれる json2ts のご紹介","id":206,"section":"tech","tags":["TypeScript"],"title":"【TypeScript】JSONを自動的にTypeScriptの型に変換してくれる json2ts","uri":"https://c-a-p-engineer.github.io/tech/2022/12/16/ts-json2ts/"},{"content":"【Flutter】StatefulWidgetで引数を使用する方法 Flutter の StatefulWidget で引数を使用する方法メモ\nサンプル widgetプロパティを利用して引数を取得する。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import \u0026#39;package:flutter/material.dart\u0026#39;; class SampleText extends StatefulWidget { final String text; SampleText({this.text}); @override _PageState createState() =\u0026gt; _PageState(); } class _SampleTextState extends State\u0026lt;SampleText\u0026gt; { @override Widget build(BuildContext context) { return Text(widget.text);  } }   参考  StatefulWidget class  ","description":"Flutter の StatefulWidget で引数を使用する方法メモ","id":207,"section":"tech","tags":["Flutter"],"title":"【Flutter】StatefulWidgetで引数を使用する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/12/16/flutter-stateful-widget-args/"},{"content":"【Flutter】デバッグログを仕込んで確認する Flutter でデバッグログを仕込んで確認する方法のメモ\nサンプル Flutterのログの仕込み方\n1 2 3 4 5 6 7 8 9 10  import \u0026#39;dart:io\u0026#39;; import \u0026#39;dart:developer\u0026#39;; void main() { print(\u0026#39;print\u0026#39;); stdout.writeln(\u0026#39;stdout.writeln\u0026#39;); // Webだとエラーが発生  stderr.writeln(\u0026#39;stderr.writeln\u0026#39;); // Webだとエラーが発生  debugPrint(\u0026#39;debugPrint\u0026#39;); // Web だとエラーが発生  log(\u0026#39;log\u0026#39;, name: \u0026#39;log\u0026#39;); }   注意\nコメントに記載してありますが3つはWebビルドした際にエラーが発生しました。\nマルチビルドする予定であれば stdout, stderr, debugPrint の使用を控え print, log を使うのが良いかと思います。  ログの確認方法 flutter run で起動したのちに同一ターミナルで v を押すと DevTools が起動いたします。\nWebであればコンソールに出力されます。\n参考  Using the Logging view | Flutter  ","description":"Flutter でデバッグログを仕込んで確認する方法のメモ","id":208,"section":"tech","tags":["Flutter"],"title":"【Flutter】デバッグログを仕込んで確認する","uri":"https://c-a-p-engineer.github.io/tech/2022/12/16/flutter-debug-log/"},{"content":"【TypeScript】axios の接続先のbaseurlなどの設定を行う axios を使用する際に接続先のbaseurlなどの設定を行う方法。\nサンプル 僕の場合ですが、AxiosBaseService.ts を作成してそこで axios の共通設定を行います。\n場合によっては AxiosXXXXService.ts を作成して接続先ごとに設定を変えられるような作りにしています。\n1 2 3 4 5 6 7  import axios from \u0026#34;axios\u0026#34;; axios.defaults.baseURL = \u0026#34;http:\\\\localhost:8000\u0026#34;; axios.defaults.headers.post[\u0026#39;Content-Type\u0026#39;] = \u0026#39;application/json;charset=utf-8\u0026#39;; axios.defaults.headers.post[\u0026#39;Access-Control-Allow-Origin\u0026#39;] = \u0026#39;*\u0026#39;; export default axios   使用する際は AxiosBaseService.ts を import して使用します。\n1 2  import Axios from \u0026#39;./services/AxiosBaseService.ts\u0026#39; Axios.get(`/sample`);   参考  Config Defaults | Axios Docs  ","description":"axios を使用する際に接続先のbaseurlなどの設定を行う方法","id":209,"section":"tech","tags":["TypeScript"],"title":"【TypeScript】axios の接続先のbaseurlなどの設定を行う","uri":"https://c-a-p-engineer.github.io/tech/2022/12/11/axios-settings/"},{"content":"【Mysql】コマンドラインで入力中だったものを終了させる方法 Mysql でコマンドラインでtypoしたりして入力中だったものを途中で終了させる方法\n途中終了させる方法 Mysql のコマンドラインで途中終了させるには \\c を入力すると終了します。\n1 2 3  mysql\u0026gt;select*fromsampel-\u0026gt;where-\u0026gt;\\c  間違ったら、そのままいったん実行する人も居るかと思いますがSQLのエラーが吐かれてしまうしまうのでこの方法が安全です。\n","description":"Mysql でコマンドラインでtypoしたりして入力中だったものを途中で終了させる方法","id":210,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】コマンドラインで入力中だったものを終了させる方法","uri":"https://c-a-p-engineer.github.io/tech/2022/12/08/mysql-cli-abort/"},{"content":"【Laravel】大量INSERTする際に chunk を使おう Laravel で大量INSERTする際にエラーが出たり、遅くなったりします。そういう時は chunk を使用します。\nできるだけ大量データを入れる際は chunk を使用してください。\n僕の経験では一括で入れようとするとDBがエラーを起こしたり、挿入によるテーブルロックでDBが遅くなったりします。\n確認環境情報  PHP 8.1 Laravel9  サンプル サンプルは1万件のデータを500件ずつに分割してデータ挿入を行います。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026lt;?php $inserts = []; // テスト用データの作成 for($i = 0; $i \u0026lt; 10000; $i++){ $inserts[] = [ \u0026#39;id\u0026#39; =\u0026gt; $i, \u0026#39;value\u0026#39; =\u0026gt; str()-\u0026gt;random(16), ] } $insertData = collect($inserts); // 500件ずつデータを入れる foreach ($insertData-\u0026gt;chunk(500) as $chunk) { Sample::insert($chunk-\u0026gt;toArray()); }   参考  How to insert big data on the laravel? - Stack Overflow  ","description":"Laravel で大量INSERTする際にエラーが出たり、遅くなったりします。そういう時は chunk を使用します。","id":211,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】大量INSERTする際に chunk を使おう","uri":"https://c-a-p-engineer.github.io/tech/2022/12/08/laravel-chunk-insert/"},{"content":"【Laravel】バリデーションに無名関数を使用してバリデーションを行う Laravel でバリデーションに無名関数を使用してバリデーションを行う方法メモ\n特殊なバリデーションでそこでしか使用しない、わざわざ独自ルールを作るのも手間などの時に使用する方法です。\nサンプル サンプルとして title と body の値が同一ならエラーが出るようなものを書きました。\nLaravelのドキュメントから改変したもののためControllerで記載するような形になっていますがFormRequestのruleでも同じような書き方は可能です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  /** * 新ブログポストの保存 * * @param \\Illuminate\\Http\\Request $request * @return \\Illuminate\\Http\\Response */ public function store(Request $request) { $validated = $request-\u0026gt;validate([ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;required|unique:posts|max:255\u0026#39;, \u0026#39;body\u0026#39; =\u0026gt; [ \u0026#39;required\u0026#39;, // $attribute 属性  // $value 値  // $fail 失敗処理  function($attribute, $value, $fail) use($request) { // title と body の値が同じならエラーとする  if($request-\u0026gt;input(\u0026#39;title\u0026#39;) == $value){ $fail(\u0026#39;Error!!\u0026#39; . $attribute); } }  ] ]); // ブログポストは有効 }   参考  php - how to call laravel validation rules in a closure function in laravel? - Stack Overflow  ","description":"Laravel でバリデーションに無名関数を使用してバリデーションを行う方法メモ","id":212,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】バリデーションに無名関数を使用してバリデーションを行う","uri":"https://c-a-p-engineer.github.io/tech/2022/12/08/laravel-validation-closure/"},{"content":"【Vue】Viteのホットリロードが動かない時の対応方法 Dokcerで Vite + Vue3 + TypeScript で構成したフロントエンドがホットリロードが動かない時の対処法メモ\n環境情報  Docker Vite 3.2.38 Vue 3.0.9  対処方法 vite.config.ts にホットリロードの設定を追記する。\n1 2 3 4 5 6 7 8  export default defineConfig({ plugins: [vue()], server: { watch: { usePolling: true } } })   参考  WSL2上のコンテナでの開発時にviteのホットリロードが効かない事象への対処法 - Qiita  ","description":"Dokcerで Vite + Vue3 + TypeScript で構成したフロントエンドがホットリロードが動かない時の対処法メモ","id":213,"section":"tech","tags":["Vue"],"title":"【Vue】Viteのホットリロードが動かない時の対応方法","uri":"https://c-a-p-engineer.github.io/tech/2022/12/08/vue3-vite-hotreload/"},{"content":"【Flutter】子 widget から親の Function を呼び出す Flutter で子 widget から親の Function を呼び出す方法\nサンプル こちらをサンプルにさせていただいてます。\nHow to pass functions to child widgets in Flutter - Kindacode\nDartPad を使用すればブラウザ上で下記のコードを実行して確認できます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68  import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter/foundation.dart\u0026#39;; void main() { runApp(const MyApp()); } class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( // DEBUG banner  debugShowCheckedModeBanner: true, title: \u0026#39;Parent Function Call\u0026#39;, theme: ThemeData( primarySwatch: Colors.amber, ), home: const HomePage(), ); } } class HomePage extends StatelessWidget { const HomePage({Key? key}) : super(key: key); // Parent Function  void _passedFunction(String input) { if (kDebugMode) { print(input); } }  @override Widget build(BuildContext context) { return Scaffold( body: Center( child: ChildWidget( buttonHandler: _passedFunction, ), ), ); } } class ChildWidget extends StatelessWidget { // Parent Function  final Function buttonHandler;  const ChildWidget({Key? key, required this.buttonHandler}) : super(key: key); @override Widget build(BuildContext context) { return Column( mainAxisSize: MainAxisSize.min, children: [ ElevatedButton( // Parent Function Call  onPressed: () =\u0026gt; buttonHandler(\u0026#39;Hello\u0026#39;),  child: const Text(\u0026#39;Say Hello\u0026#39;)), ElevatedButton( // Parent Function Call  onPressed: () =\u0026gt; buttonHandler(\u0026#39;Goodbye\u0026#39;),  child: const Text(\u0026#39;Say Goodbye\u0026#39;)), ], ); } }   親の Homepage の _passedFunction メソッドを ChildWidget の buttonHandler に保存。\nそして各ボタンから実行してコンソールに出力するという流れになっています。\n参考  How to pass functions to child widgets in Flutter - Kindacode  ","description":"Flutter で子 widget から親の Function を呼び出す方法","id":214,"section":"tech","tags":["Flutter"],"title":"【Flutter】子 widget から親の Function を呼び出す","uri":"https://c-a-p-engineer.github.io/tech/2022/12/04/flutter-call-parent-function/"},{"content":"【bash】コマンドを無限ループさせたい コマンドを無限ループさせたい。って事はあんまりないのですがちょっと特殊で監視的な作業などの時にオススメです。\n無限ループ 以下のように書きます。\n1  while true; do [コマンド1];[コマンド2];done   1秒ごとに日時を表示する\n1  while true; do date;sleep 1;done   終了させたいときは ctr+c で終了させてください。\n応用するといろいろなことができそうです。\n","description":"コマンドを無限ループさせたい。って事はあんまりないのですがちょっと特殊で監視的な作業などの時にオススメです。","id":215,"section":"tech","tags":["bash"],"title":"【bash】コマンドを無限ループさせたい","uri":"https://c-a-p-engineer.github.io/tech/2022/12/03/bash-infinity-loop/"},{"content":"【Docker】Swagger環境を構築する Docker で Swagger環境を構築するメモ\ndocker-compose.yml 作成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  version:\u0026#39;3.0\u0026#39;services:swagger-editor:image:swaggerapi/swagger-editorcontainer_name:\u0026#34;swagger-editor\u0026#34;ports:- \u0026#34;8001:8080\u0026#34;swagger-ui:image:swaggerapi/swagger-uicontainer_name:\u0026#34;swagger-ui\u0026#34;ports:- \u0026#34;8002:8080\u0026#34;volumes:- ./api/openapi.yaml:/openapi.yaml# Swagger Fileenvironment:SWAGGER_JSON:/openapi.yaml# Swagger Fileswagger-api:image:stoplight/prism:latestcontainer_name:\u0026#34;swagger-api\u0026#34;ports:- \u0026#34;8003:4010\u0026#34;command:mock -h 0.0.0.0 /openapi.yaml# Swagger Filevolumes:- ./api/openapi.yaml:/openapi.yaml# Swagger File  Sample yaml作成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  openapi:\u0026#34;3.0.3\u0026#34;info:title:\u0026#34;Test1-API\u0026#34;version:\u0026#34;1.0.0\u0026#34;paths:\u0026#34;/helloWorld\u0026#34;:get:responses:\u0026#34;200\u0026#34;:description:\u0026#34;test-ok\u0026#34;content:application/json:schema:type:stringexample:\u0026#34;Hello World\u0026#34;  起動 Dockerを起動します。\ndocker-compose up -d 起動したら以下のURLで確認。\n   Swagger URL     Swagger Editor http://localhost:8001/   Swagger UI http://localhost:8002/   Swagger API mock http://localhost:8003/    これでSwaggerの環境を作成できました。\n","description":"Docker で Swagger環境を構築するメモ。","id":216,"section":"tech","tags":["Docker","Mysql"],"title":"【Docker】Swagger環境を構築する","uri":"https://c-a-p-engineer.github.io/tech/2022/12/03/docker-swagger/"},{"content":"【Laravel】l5-swagger でAPI仕様書を簡単に作ろう Laravel で l5-swagger を使用して簡単にSwaggerのAPI仕様書を作る\nl5-swagger l5-swaggerを使用して簡単にAPI仕様書を作ります。\nDarkaOnLine/L5-Swagger\nインストール composer を使用してインストールします。\ncomposer require \u0026quot;darkaonline/l5-swagger\u0026quot; Swaggerを書く VSCodeであればこちらのプラグインを使用すると色がついて書きやすいです。\nSwagger-PHP Annotation\n記法としては Swagger-PHP の記法で書いていきます。\nAPI情報やサーバー情報、共通スキーマは /app/Http/Controllers/Swagger.php を作成して記載するのが良いです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  \u0026lt;?php namespace App\\Http\\Controllers; /** * API情報 * @OA\\Info( * title=\u0026#34;API Example\u0026#34;, * description=\u0026#34;Api\u0026#34;, * version=\u0026#34;1.0.0\u0026#34;, * ) * * サーバー情報 * @OA\\Server( * description=\u0026#34;OpenApi host\u0026#34;, * url=\u0026#34;http://localhost:8000/api\u0026#34; * ) * * セキュリティスキーマ * @OA\\SecurityScheme( * securityScheme=\u0026#34;BearerAuth\u0026#34;, * type=\u0026#34;apiKey\u0026#34;, * in=\u0026#34;header\u0026#34;, * name=\u0026#34;api_token\u0026#34; * ) * * 作成日 * @OA\\Schema( * schema=\u0026#34;created_at\u0026#34;, * description=\u0026#34;Created At\u0026#34;, * type=\u0026#34;string\u0026#34;, * format=\u0026#34;date-time\u0026#34;, * example=\u0026#34;2017-07-21T17:32:28Z\u0026#34; * ) * */ class Swagger { }   Getのサンプル\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  class SampleController { /** * @OA\\Get( * path=\u0026#34;/api/data.json\u0026#34;, * @OA\\Response(response=\u0026#34;200\u0026#34;,　description=\u0026#34;The data\u0026#34;) * @OA\\Response(response=401, description=\u0026#34;Unauthorized\u0026#34;), * @OA\\Response(response=403, description=\u0026#34;Forbidden\u0026#34;), * @OA\\Response(response=422, description=\u0026#34;Unprocessable Entity\u0026#34;), * ) */ public function getData() { // ...  } }   ModelをSchemaとして定義する。\nこうすることで Model のスキーマを再利用しやすい状態になります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  \u0026lt;?php namespace App\\Models; /** * @OA\\Schema( * schema=\u0026#34;User\u0026#34;, * type=\u0026#34;object\u0026#34;, * description=\u0026#34;User Model\u0026#34;, * @OA\\Property( * property=\u0026#34;id\u0026#34;, * description=\u0026#34;ID\u0026#34;, * type=\u0026#34;integer\u0026#34;, * format=\u0026#34;int64\u0026#34;, * example=\u0026#34;1\u0026#34; * ), * @OA\\Property( * property=\u0026#34;name\u0026#34;, * description=\u0026#34;Name\u0026#34;, * type=\u0026#34;integer\u0026#34;, * format=\u0026#34;int64\u0026#34;, * example=\u0026#34;1\u0026#34; * ) * ) * * @package App\\Models */ class User extends BaseModel { }   Postのサンプル。\nLoginの書き方として user/login にPOSTして Userスキーマと created_at を組み合わせて返すようになっています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  class SampleController { /** * @OA\\Post( * tags={\u0026#34;User\u0026#34;}, * path=\u0026#34;/user/login\u0026#34;, * summary=\u0026#34;User Login\u0026#34;, * description=\u0026#34;User Login\u0026#34;, * @OA\\RequestBody( * required=true, * @OA\\JsonContent( * type=\u0026#34;object\u0026#34;, * required={\u0026#34;email\u0026#34;, \u0026#34;password\u0026#34;}, * @OA\\Property( * property=\u0026#34;email\u0026#34;, * type=\u0026#34;string\u0026#34;, * example=\u0026#34;example@example.org\u0026#34;, * description=\u0026#34;Email\u0026#34; * ), * @OA\\Property( * property=\u0026#34;password\u0026#34;, * type=\u0026#34;string\u0026#34;, * example=\u0026#34;p@ssw0rd\u0026#34;, * description=\u0026#34;Password\u0026#34; * ) * ), * ), * @OA\\Response( * response=200, * description=\u0026#34;OK\u0026#34;, * @OA\\JsonContent( * @OA\\Property( * property=\u0026#34;account\u0026#34;, * allOf={ * @OA\\Schema(ref=\u0026#34;#/components/schemas/User\u0026#34;), * @OA\\Schema( * @OA\\Property( * property=\u0026#34;created_at\u0026#34;, * oneOf={@OA\\Schema(ref=\u0026#34;#/components/schemas/created_at\u0026#34;)} * ) * ), * } * ), * ) * ), * @OA\\Response(response=401, description=\u0026#34;Unauthorized\u0026#34;), * @OA\\Response(response=403, description=\u0026#34;Forbidden\u0026#34;), * @OA\\Response(response=422, description=\u0026#34;Unprocessable Entity\u0026#34;), * ) */ public function login() { // ...  } }   API Tokenを付けさせる。\n以下を参考として持ってきています。\nHow can i write this JSON swagger-php below with annotations?\n1 2 3 4 5 6 7 8  /** * @OA\\SecurityScheme( * securityScheme=\u0026#34;bearerAuth\u0026#34;, * type=\u0026#34;http\u0026#34;, * scheme=\u0026#34;bearer\u0026#34;, * description=\u0026#34;Entrer le token JST\u0026#34; * ) */   1 2 3 4 5 6 7  /** * @OA\\Get( * path=\u0026#34;/api/endpoint\u0026#34;, * ... * security={{ \u0026#34;bearerAuth\u0026#34;: {} }} * ) */   生成 以下のコマンドでドキュメントが生成されます。\n生成場所は storage/api-docs/api-docs.json に生成されます。\nphp artisan l5-swagger:generate http://localhost/api/documentation に接続するとSwaggerUIで確認ができます。（URLは自分の環境にあったものに読み替えてください。\nVSCodeをお使いでしたら Swagger Viewer でも簡単に確認できます。\n以下の設定を入れておくとURLを開くと自動的に生成してくれるようです。\n1  L5_SWAGGER_GENERATE_ALWAYS=true   設定 各種設定を行いたい場合は以下のコマンドで設定ファイルが /backend/config/l5-swagger.php 作成されます。\n作成された設定の中をいじれば生成場所などが変更可能です。\nphp artisan vendor:publish --provider \u0026quot;L5Swagger\\L5SwaggerServiceProvider\u0026quot; メモ Swaggerをいじっている時、リアルタイムにエラーが出ないので苦肉の策として以下のように生成コマンドを無限ループさせることによって時間差はありますがにエラーを検知できるようにしました。\n1  while true; do php artisan l5-swagger:generate;date;done   参考  DarkaOnLine/L5-Swagger  ","description":"Laravel で l5-swagger を使用して簡単にSwaggerのAPI仕様書を作る","id":217,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】l5-swagger でAPI仕様書を簡単に作ろう","uri":"https://c-a-p-engineer.github.io/tech/2022/12/03/laravel-l5-swagger/"},{"content":"使ってないスマホやタブレットをサブディスプレイ化する spacedesk サブディスプレイが欲しい、そんな時に使える spacedesk をご紹介。\nspacedesk\nインストール こちらから各種ソフトウェアを入れる必要があります。\nspacedesk download\nパソコン側とスマホ、タブレット側の端末に入れる必要があります。\nダウンロードするのが面倒くさいので僕は winget でコマンド一発でインストールしました。\nwinget install --id=Datronicsoft.SpacedeskDriver.Server -e 使い方 使い方は簡単。\n サブディスプレイ化する端末のアプリを起動 どのパソコンのサブディスプレイにするかを選択（同じネットワーク内でないと出てきません  これでサブディスプレイとして扱ってくれます。\n細かな解像度などはパソコン側からディスプレイ設定をするようにしてください。\nこれで今まで使用してなかった不要端末達を有効活用できます。\n","description":"サブディスプレイが欲しい、そんな時に使える spacedesk をご紹介","id":218,"section":"tech","tags":["ツール"],"title":"使ってないスマホやタブレットをサブディスプレイ化する spacedesk","uri":"https://c-a-p-engineer.github.io/tech/2022/11/28/spacedesk/"},{"content":"【Laravel】Class Redis Not Found が出た際の対処方法 LaravelでRedisを使用しようとしたら Class Redis Not Found が出た際の対処方法\n発生環境 PHP 8.1.11\nLaravel Framework 9.33.0 Redisの設定値\n1 2 3  REDIS_HOST=127.0.0.1 REDIS_PASSWORD=null REDIS_PORT=6379   対処法 対処方法は2種類あります。\npredis を使用する composer パッケージの predis を使用。\nまずは predis を入れる。\n1  composer require predis/predis   REDIS_CLIENT を predis を使用するように .env に追記します。\n1 2 3 4  REDIS_CLIENT=predis REDIS_HOST=127.0.0.1 REDIS_PASSWORD=null REDIS_PORT=6379   個人的には composer.json に記載されて記録が残るのでこっちのほうがおすすめ。\nphpredis を使用する phpredis install\nphpredis を入れます。\n1  yum install php-pecl-redis   参考  phpredis/phpredis Class \u0026lsquo;Redis\u0026rsquo; not found - Laracasts  ","description":"LaravelでRedisを使用しようとしたら Class Redis Not Found が出た際の対処方法","id":219,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】Class Redis Not Found が出た際の対処方法","uri":"https://c-a-p-engineer.github.io/tech/2022/11/25/laravel-redis-not-found/"},{"content":"【Flutter】NavigationRail を使ってサイドメニューを実装する Flutter で NavigationRail を使ってサイドメニューを実装するサンプル\n NavigationRail class - material library - Dart API  サンプル DartPad を使用すればブラウザ上で下記のコードを実行して確認できます。\nNavigationRail を使って各ページを表示するようにしています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129  import \u0026#39;package:flutter/material.dart\u0026#39;; void main() { runApp(const MyApp()); } class MyApp extends StatelessWidget { const MyApp({super.key}); @override Widget build(BuildContext context) { return const MaterialApp( home: MyWidget(), ); } } class MyWidget extends StatefulWidget { const MyWidget({super.key}); @override State\u0026lt;MyWidget\u0026gt; createState() =\u0026gt; _MyWidgetState(); } class _MyWidgetState extends State\u0026lt;MyWidget\u0026gt; { int _selectedIndex = 0; @override Widget build(BuildContext context) { return Scaffold( body: Row( children: [ // サイドバー（NavigationRail）  NavigationRail( destinations: const [ NavigationRailDestination( icon: Icon(Icons.home), label: Text(\u0026#39;Home\u0026#39;), ), NavigationRailDestination( icon: Icon(Icons.bookmark), label: Text(\u0026#39;Bookmark\u0026#39;), ), NavigationRailDestination( icon: Icon(Icons.people), label: Text(\u0026#39;Friends\u0026#39;), ), ], selectedIndex: _selectedIndex, onDestinationSelected: (index) { setState(() { _selectedIndex = index; }); }, ), SelectContent(index: _selectedIndex) ], ), ); } } /// Select Content Main Display class SelectContent extends StatelessWidget { const SelectContent({super.key, required this.index}); final int index; @override Widget build(BuildContext context) { const List\u0026lt;Widget\u0026gt; _pages = [Home(), Bookmark(), Friend()]; if (_pages.length \u0026lt;= index) { return _pages[0]; } return _pages[index]; } } /// Home Page class Home extends StatelessWidget { const Home({super.key}); @override Widget build(BuildContext context) { return Expanded( child: ColoredBox( color: Color.fromARGB(255, 146, 204, 252)!, child: const Center( child: Text(\u0026#39;Home\u0026#39;), ), ), ); } } /// Bookmark Page class Bookmark extends StatelessWidget { const Bookmark({super.key}); @override Widget build(BuildContext context) { return Expanded( child: ColoredBox( color: Color.fromARGB(255, 255, 0, 0)!, child: const Center( child: Text(\u0026#39;Bookmark\u0026#39;), ), ), ); } } /// Friend Page class Friend extends StatelessWidget { const Friend({super.key}); @override Widget build(BuildContext context) { return Expanded( child: ColoredBox( color: Color.fromARGB(255, 78, 255, 43)!, child: const Center( child: Text(\u0026#39;Friend\u0026#39;), ), ), ); } }   参考  NavigationRail class - material library - Dart API  ","description":"Flutter で NavigationRail を使ってサイドメニューを実装するサンプル","id":220,"section":"tech","tags":["Flutter"],"title":"【Flutter】NavigationRail を使ってサイドメニューを実装する","uri":"https://c-a-p-engineer.github.io/tech/2022/11/24/flutter-navigationrail-sample/"},{"content":"【PHP】静的解析ツール phpstan を使ってみる PHP の 静的解析ツール phpstan を使って静的解析をしてみる。\nPHPStan\nインストール composer でサクッとインストール\ncomposer require --dev phpstan/phpstan 動作チェック\nvendor/bin/phpstan analyse [ディレクトリ] Laravelで使用する際は larastan があるのでそちらを使ってみるのも良いようです。\nnunomaduro/larastan\n使い方 基本的な使い方\nvendor/bin/phpstan analyse [options] [\u0026lt;paths\u0026gt;...] オプション 各種オプションです。\nPHPStan コマンドラインオプション\n使用しそうな箇所だけ抜き出しています。\n --level|l  ルールレベルの指定 PHPStan ルールレベル   --generate-baseline|-b  設定ファイルの指定　PHPStan Config   --generate-baseline|-b  既存のエラーを無視する phpstan-baseline.neon が自動的に作成される。   --error-format  エラーフォマットを指定　エラー形式（指定がない場合は table   --no-progress  プログレスバーを表示しない   --memory-limit  メモリの指定 例：--memory-limit 1G   --xdebug  xdebug が有効にする場合に使用（パフォーマンスが落ちる    PHPStanとの戦い PHPStan は 0-9 までの10のレベルが存在します。\nレベルの指定がない場合はレベル0で判定をします。\nRule Levels | PHPStan\n 0 - 基本的なチェック、未知のクラス、未知の関数、$this上で呼び出された未知のメソッド、メソッドや関数に渡された引数の数が間違っている、常に未定義の変数をチェック 1 - 未定義の変数、__call と __get を持つクラス、未知のマジックメソッドとプロパティの可能性がある 2 - $this 以外のすべての式で未知のメソッドをチェック、PHPDocs を検証する 3 - 戻り値の型、プロパティに割り当てられた型の確認 4 - 基本的なデッドコードチェック、instanceof やその他の型チェックが常に false、到達しない else 文、return 後の到達不能コードなど 5 - メソッドや関数に渡される引数の型チェック 6 - タイプヒントの欠落を報告する 7 - 部分的に間違っている論理和型の報告、論理和型の一部の型にしか存在しないメソッドを呼び出した場合（その他の不正確な状況も） 8 - null 可能な型に対するメソッド呼び出しとプロパティへのアクセスを報告する 9 - 混合型に厳密であること - この型で唯一許される操作は、この型を別の混合型に渡すことである  これらのレベルを上げて安全安心の開発を行いたいところですが…\n実際、開発効率との兼ね合いでレベルを考えて指定してください。\n試してる PHPStan の Playground を利用してブラウザ上で試すこともできます。\nPlayground | PHPStan\n参考  phpstan/phpstan　GitHub PHPStan  ","description":"PHP の 静的解析ツール phpstan を使って静的解析をしてみる。","id":221,"section":"tech","tags":["PHP"],"title":"【PHP】静的解析ツール phpstan を使って静的解析をしてみる。","uri":"https://c-a-p-engineer.github.io/tech/2022/11/19/php-phpstan/"},{"content":"【Laravel】データベースに影響が出ないようにテストする Laravel には各種テスト用の trait が用意されていて、それらを使用することでデータベースに影響が出ないようにテストができます。\nトランザクションを使用する DatabaseTransactions を使用する。\nデータベースにトランザクションを張って実行します。\nそのため他のテストに影響を与えませんが代わりにマイグレーションなどは自分で実装する必要があります。\n僕はPHPUnitのフックでテスト実行時にマイグレーションを実行して各テストはこれを使用するようにしています。\n複数DBにまたがってトランザクションを張る必要がある場合は connectionsToTransact を指定してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  \u0026lt;?php namespace Tests\\Feature; use Illuminate\\Foundation\\Testing\\DatabaseTransactions; use Illuminate\\Foundation\\Testing\\WithoutMiddleware; use Tests\\TestCase; class ExampleTest extends TestCase { use DatabaseTransactions;  protected $connectionsToTransact = [\u0026#39;mysql1\u0026#39;, \u0026#39;mysql2\u0026#39;];  /** * 基本的な機能テスト例 * * @return void */ public function test_basic_example() { $response = $this-\u0026gt;get(\u0026#39;/\u0026#39;); // ...  } }   migrationを使用する DatabaseMigrations を使用する。\nマイグレーションを使用してデータベースを完全にリセットしたい場合に使用。\nただし、毎回マイグレーションを実行するためテストがすごく遅くなります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026lt;?php namespace Tests\\Feature; use Illuminate\\Foundation\\Testing\\DatabaseMigrations; use Illuminate\\Foundation\\Testing\\WithoutMiddleware; use Tests\\TestCase; class ExampleTest extends TestCase { use DatabaseMigrations;  /** * 基本的な機能テスト例 * * @return void */ public function test_basic_example() { $response = $this-\u0026gt;get(\u0026#39;/\u0026#39;); // ...  } }   migrate, トランザクションの複合 RefreshDatabase を使用する。\nスキーマが最新ならマイグレートされないようです。\nその代わりにトランザクション内でテストをするために他のテストに影響を与えません。\nただし、マイグレーションを実行すると遅くなることがあります。\nこちらの方法も複数DBにまたがってトランザクションを張る必要がある場合は connectionsToTransact を指定してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  \u0026lt;?php namespace Tests\\Feature; use Illuminate\\Foundation\\Testing\\RefreshDatabase; use Illuminate\\Foundation\\Testing\\WithoutMiddleware; use Tests\\TestCase; class ExampleTest extends TestCase { use RefreshDatabase;  protected $connectionsToTransact = [\u0026#39;mysql1\u0026#39;, \u0026#39;mysql2\u0026#39;];  /** * 基本的な機能テスト例 * * @return void */ public function test_basic_example() { $response = $this-\u0026gt;get(\u0026#39;/\u0026#39;); // ...  } }   参考  Laravel 9.x データベーステスト  ","description":"Laravel には各種テスト用の trait が用意されていて、それらを使用することでデータベースに影響が出ないようにテストができます","id":222,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】データベースに影響が出ないようにテストする","uri":"https://c-a-p-engineer.github.io/tech/2022/11/15/laravel-test-trait/"},{"content":"【Laravel】APIのエラーメッセージ「The given data was invalid.」を多言語か対応する Laravel のAPIのエラーメッセージ「The given data was invalid.」を多言語か対応する。\nこれは僕がクソ実装されていることを忘れないための記事です。\n前置き 確認環境は Laravel 9 になります。\nAPIのバリデーションエラー時に The given data was invalid. が出力されます。\nこちらコード上にハードコーティングされております。\nこんなクソ実装本当に辞めて欲しい🪓(๑╹ω╹ ๑ )\nですので多言語化対応したところでこのエラーメッセージは変わりません。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  \u0026lt;?php namespace App\\Http\\Requests\\Api; use Illuminate\\Foundation\\Http\\FormRequest; use Illuminate\\Http\\Exceptions\\HttpResponseException; use Illuminate\\Contracts\\Validation\\Validator; abstract class ApiRequest extends FormRequest { /** * Handle a failed validation attempt. * * @param Validator $validator * @return void * * @throws HttpResponseException */ protected function failedValidation(Validator $validator) { $data = [ \u0026#39;message\u0026#39; =\u0026gt; __(\u0026#39;The given data was invalid.\u0026#39;),  \u0026#39;errors\u0026#39; =\u0026gt; $validator-\u0026gt;errors()-\u0026gt;toArray(), ]; throw new HttpResponseException(response()-\u0026gt;json($data, 422)); } }   多言語化対応 ハードコーティングされている箇所を多言語かさせます。\n以下のようにして validation の言語ファイルから取得するようにします。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  \u0026lt;?php namespace App\\Http\\Requests\\Api; use Illuminate\\Foundation\\Http\\FormRequest; use Illuminate\\Http\\Exceptions\\HttpResponseException; use Illuminate\\Contracts\\Validation\\Validator; abstract class ApiRequest extends FormRequest { /** * Handle a failed validation attempt. * * @param Validator $validator * @return void * * @throws HttpResponseException */ protected function failedValidation(Validator $validator) { $data = [ \u0026#39;message\u0026#39; =\u0026gt; __(\u0026#39;validation.invalid\u0026#39;),  \u0026#39;errors\u0026#39; =\u0026gt; $validator-\u0026gt;errors()-\u0026gt;toArray(), ]; throw new HttpResponseException(response()-\u0026gt;json($data, 422)); } }   言語ファイル側には invalid のメッセージを追加しておきます。\n1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?php return [ /* |-------------------------------------------------------------------------- | バリデーションメッセージ |-------------------------------------------------------------------------- |　バリデーションエラーメッセージ */ \u0026#39;invalid\u0026#39; =\u0026gt; \u0026#39;指定されたデータは無効です。\u0026#39;, ];   こうすることにより多言語化対応されます。\n","description":"Laravel のAPIのエラーメッセージ「The given data was invalid.」を多言語か対応する。","id":223,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】APIのエラーメッセージ「The given data was invalid.」を多言語か対応する","uri":"https://c-a-p-engineer.github.io/tech/2022/11/09/laravel-api-request-validation-message/"},{"content":"【Laravel】日本語などのローカル言語ファイルを取得する Laravel は英語の言語ファイルがデフォルトで適用されていますが日本語化するのが面倒くさい。\nそういう時に日本語などのローカル言語ファイルを簡単に取得、適用する方法。\n導入方法 日本語の導入を進めていきます。\n導入は簡単です。\n1 2 3  php -r \u0026#34;copy(\u0026#39;https://readouble.com/laravel/8.x/ja/install-ja-lang-files.php\u0026#39;, \u0026#39;install-ja-lang.php\u0026#39;);\u0026#34; php -f install-ja-lang.php php -r \u0026#34;unlink(\u0026#39;install-ja-lang.php\u0026#39;);\u0026#34;   注意 Laravel9 では lang/ja に日本語ファイルを置く必要があります。\n上記の方法では resources/lang/ja に日本語ファイルが作成されるので移動させ忘れないようにご注意ください。\n参考  Laravel 8.x validation.php言語ファイル  ","description":"Laravel は英語の言語ファイルがデフォルトで適用されていますが日本語化するのが面倒くさい。そういう時に日本語などのローカル言語ファイルを簡単に取得、適用する方法","id":224,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】日本語などのローカル言語ファイルを取得する","uri":"https://c-a-p-engineer.github.io/tech/2022/11/09/laravel-lang-install/"},{"content":"【Docker】コマンドを間違うと死ぬ 自殺Linux コマンドを間違うと rm -rf / を実行して自殺するLinux\nこちらの GitHub になります。\ntiagoad/suicide-linux\n遊び方 実行するとDocker内に入ります。\n1  docker run --rm -it tiagoad/suicide-linux   存在しないコマンドを打ってみます。\n1 2  $ ll Oops, looks like you misspelt something \u0026gt;:)   これで自殺します。\nちなみにGitHub上の Running (danger mode) は絶対にしない方がいいです。\n-v /:/host でホスト側と繋ぐ設定にしているため失敗するとホスト側のファイルも削除されてしまいます。\nコマンドの打ち間違いをしないように勉強するにはとても有用そうです。\n備考 ちなみに自殺する作り込みは以下の箇所でやっています。\nなにかの参考になるかも知れません。\nbash.bashrc\n参考  tiagoad/suicide-linux  ","description":"コマンドを間違うと rm -rf / を実行して自殺するLinux","id":225,"section":"tech","tags":["Docker","Linux","ネタ"],"title":"【Docker】コマンドを間違うと死ぬ 自殺Linux","uri":"https://c-a-p-engineer.github.io/tech/2022/11/01/docker-suicide-linux/"},{"content":"【Laravel】PHPUnit 419 エラー対応 Laravel の PHPUnitで 419 エラーが出た際の対応方法メモ。\n419 エラーはCSRFエラーになります。\nそのためテスト時にはCSRFチェックをしないようにする必要があります。\nテスト時にCSRFチェックをしない 特定環境でCSRFチェックをしないようします。\napp/Http/Middleware/VerifyCsrfToken.php に handle メソッドを追加します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026lt;?php namespace App\\Http\\Middleware; use Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as BaseVerifier; class VerifyCsrfToken extends BaseVerifier { /** * The URIs that should be excluded from CSRF verification. * * @var array */ protected $except = [ //  ]; public function handle($request, \\Closure $next) { // PHPUnit用  if (env(\u0026#39;APP_ENV\u0026#39;) !== \u0026#39;test\u0026#39;) { return parent::handle($request, $next); } return $next($request); } }   参考  PHPUnit: Expected status code 200 but received 419 with Laravel - Stack Overflow  ","description":"Laravel の PHPUnitで 419 エラーが出た際の対応方法メモ","id":226,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】PHPUnit 419 エラー対応","uri":"https://c-a-p-engineer.github.io/tech/2022/11/01/laravel-phpunit-419/"},{"content":"【PHP】クラス定数の存在チェック PHPでクラス定数の存在チェックをする方法\ndefined を使う defined 関数を使用することでチェックが可能です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  \u0026lt;?php // Sample class Sample { const CONST_SAMPLE = \u0026#39;sample\u0026#39;; } // クラスを直接指定 if ( defined( \u0026#39;Sample::CONST_SAMPLE\u0026#39; ) ){ echo \u0026#39;Sample::CONST_SAMPLE defined\u0026#39;; } // クラス名の変数 $className = Sample::class; if ( defined( \u0026#34;$className::CONST_SAMPLE\u0026#34; ) ){ echo \u0026#39;$className::CONST_SAMPLE defined\u0026#39;; } // クラスオブジェクト $classObj = new $className(); if ( defined( get_class($classObj).\u0026#39;::CONST_SAMPLE\u0026#39; ) ){ echo \u0026#39;$classObj::CONST_SAMPLE defined\u0026#39;; }   参考  PHP: defined - Manual PHP: defined - Manual#ASchmidt at Anamera dot net  ","description":"PHPでクラス定数の存在チェックをする方法","id":227,"section":"tech","tags":["PHP"],"title":"【PHP】クラス定数の存在チェック","uri":"https://c-a-p-engineer.github.io/tech/2022/10/27/php-class-const-exists/"},{"content":"【Laravel】データ保存時に created_by, updated_by, delete_by を自動的に追加する方法 Laravelでデータ保存時に created_by, updated_by, delete_by の登録者、更新者、削除者を自動的に追加する方法\nサンプル boot メソッドに各イベント時の動作を設定します。\ncreating, updating, saving, deleting のイベント時に設定されています。\nただ1つ問題があり softDelete の動作です。\nsoftDelete は delete 実行時に deleted_at だけを更新するようになっています。\nそのため deleting に関しては $model-\u0026gt;update() をして明示的に更新を行う必要があります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026lt;?php namespace App\\Models; use Illuminate\\Database\\Eloquent\\Model; use Illuminate\\Support\\Facades\\Auth; class SampleModel extends Model { public static function boot(): void { parent::boot(); static::creating(function ($model) { $model-\u0026gt;created_by = Auth::user()-\u0026gt;id ?? null; }); static::updating(function ($model) { $model-\u0026gt;updated_by = Auth::user()-\u0026gt;id ?? null; }); static::saving(function ($model) { $model-\u0026gt;updated_by = Auth::user()-\u0026gt;id ?? null; }); static::deleting(function ($model) { $model-\u0026gt;deleted_by = Auth::user()-\u0026gt;id ?? null; $model-\u0026gt;update(); }); } }   メモ Observerでやる方法もあります。\nHow to automaticly update updated_by, created_by fields using Eloquent?\n参考  Where should I set a created_by to the user\u0026rsquo;s ID?  ","description":"Laravelでデータ保存時に created_by, updated_by, delete_by  の登録者、更新者、削除者を自動的に追加する方法","id":228,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】データ保存時に created_by, updated_by, delete_by を自動的に追加する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/10/27/laravel-createde_by/"},{"content":"【Laravel】DBからモデルを逆生成する DBを修正するとモデルの修正しなければいけなくて面倒なのでLaravelでDBからモデルを逆生成する方法\n手順 以下のパッケージを使用してモデルを逆生成します。\nreliese/laravel\nbelongsToMany や hasOne なども自動で生成してくれます。\nインストール インストール方法\ncomposer require reliese/laravel --dev 設定ファイルの生成 config/models.php を生成します。\nconfig:clear もして念のためキャッシュを削除します。\nphp artisan vendor:publish --tag=reliese-models php artisan config:clear 逆生成 以下のコマンドを使用すると app/Models にファイルが生成されます。\nphp artisan code:models 逆生成応用 指定テーブルのみを逆生成する\nphp artisan code:models --table=users 接続の指定\nphp artisan code:models --connection=mysql 設定ファイル config/models.php の設定について簡単にご説明\nlaravel/config/models.php\n namespace 出力モデルの namespace parent 親モデル use 使用する trait connection モデルの接続DB soft_deletes softDeletes の使用 snake_attributes 属性名 true:スネーク false:キャメル indent_with_space インデントの設定 0 だとタブ（デフォルト0なので注意 relation_name_strategy  related でリレーション先の名前を使用（1テーブルに同一のリレーション先がある場合は foreign_key を推奨 foreign_key リレーション名を使用   with_property_constants プロパティの const 定義 true:定義 false:定義なし  ざっくりこんな感じです。（少々不足はあります\n参考  reliese/laravel  ","description":"DBを修正するとモデルの修正しなければいけなくて面倒なのでLaravelでDBからモデルを逆生成する方法","id":229,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】DBからモデルを逆生成する","uri":"https://c-a-p-engineer.github.io/tech/2022/10/24/laravel-model-generation/"},{"content":"【Laravel】マイグレーションをDBから逆生成する DBとマイグレーションファイルを修正するのも面倒なのでLaravelでマイグレーションをDBから逆生成する方法。\n手順 以下のパッケージを使用してマイグレーションを逆生成します。\nkitloong/laravel-migrations-generator\nインストール インストール方法\ncomposer require --dev \u0026quot;kitloong/laravel-migrations-generator\u0026quot; 逆生成 以下のコマンドを使用すると database/migrations にファイルが生成されます。\nphp artisan migrate:generate 逆生成応用 指定テーブルのみを逆生成する\nphp artisan migrate:generate --tables=\u0026quot;table1,table2,table3,table4,table5\u0026quot; 指定したテーブルを無視して逆生成する\nphp artisan migrate:generate --ignore=\u0026quot;table3,table4,table5\u0026quot; 各種オプション  -c, --connection[=CONNECTION] 接続するデータベース -t, --tables[=TABLES] 逆生成するテーブル指定 -i, --ignore[=IGNORE] 逆生成しないテーブルの指定 -p, --path[=PATH] ファイルを生成する場所 -tp, --template-path[=TEMPLATE-PATH] ジェネレーターのテンプレート --date[=DATE] マイグレーションファイル名の日付 --table-filename[=TABLE-FILENAME] テーブル移行ファイル名の定義、デフォルト パターン: [datetime_prefix]_create_[table]_table.php --view-filename[=VIEW-FILENAME] ビュー移行ファイル名の定義、デフォルト パターン: [datetime_prefix]_create_[table]_view.php --fk-filename[=FK-FILENAME] 外部キーの移行ファイル名、デフォルト パターンを定義します。 [datetime_prefix]_add_foreign_keys_to_[table]_table.php --default-index-names インデックス名を使用しない --default-fk-names 外部キー名を使用しない --use-db-collation DB称号を利用しない --skip-views ビューを生成しない --squash 1つのファイルに生成する  参考  kitloong/laravel-migrations-generator  ","description":"DBとマイグレーションファイルを修正するのも面倒なのでLaravelでマイグレーションをDBから逆生成する方法","id":230,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】マイグレーションをDBから逆生成する","uri":"https://c-a-p-engineer.github.io/tech/2022/10/24/laravel-migration-generator/"},{"content":"【Mysql】DBが存在することを確認する方法 Mysql でDBが存在することを確認する方法\nDB一覧 すべてのDBを出力する\n1  SHOWDATABASES  DBを指定する DB名を指定して存在を確認する\n1  SHOWDATABASESLIKE\u0026#39;[DB名]\u0026#39;  ワイルドカードを使用する 普通のLIKEと同様に % を使用して前方一致検索などが可能です。\n1  SHOWDATABASESLIKE\u0026#39;[DB名]%\u0026#39;  参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: 13.7.5.15 SHOW DATABASES 構文  ","description":"Mysql でDBが存在することを確認する方法","id":231,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】DBが存在することを確認する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/10/23/mysql-show-database/"},{"content":"【GoLang】ヒアドキュメント（複数行の文字列）を使用する方法 Go でヒアドキュメント（複数行の文字列）を使用する方法メモ\nサンプルコード `  バッククォートで囲うと複数行にまたがって文字列を使用できます。\n1 2 3 4 5 6 7 8 9  package main func main() { str := `1st line 2nd line 3rd line`  println(str) }   ","description":"Go でヒアドキュメント（複数行の文字列）を使用する方法メモ","id":232,"section":"tech","tags":["GoLang"],"title":"【GoLang】ヒアドキュメント（複数行の文字列）を使用する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/10/22/go-heredoc/"},{"content":"【bash】ログが行方不明に！？実行場所を気にしないシェルスクリプトの作り方 シェルスクリプトは実行した場所がカレントディレクトリとして扱われます。\nそのため僕はログが実行場所にできてしまったりして行方不明になったりしました。\n実行場所を気にしないようなシェルスクリプトの作り方。\nシェルスクリプトが配置されているディレクトリに移動する cd `dirname $0`  をシェルの冒頭に記載することでシェルスクリプトの配置ディレクトリ場所へ移動してくれます。\n1 2 3 4 5  #!/bin/sh  # 実行場所へ移動 cd `dirname $0` pwd   こういうふうにすることで実行場所が固定されます。\n注意点 以下のようにシェル内で cd したりすると値がシェルの配置場所が取れなくなります。\n1 2 3 4 5 6 7 8 9 10 11 12 13  #!/bin/sh  # 実行場所へ移動 cd `dirname $0` pwd # ディレクトリ移動 cd /usr/local pwd # ディレクトリ移動 cd `dirname $0` pwd   応用編 先に挙げたようにシェルの配置場所が取れなくなるので変数に入れて使いまわしますのが安全です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  #!/bin/sh  # 実行場所へ移動 SCRIPT_DIR_PATH=$(cd \u0026#34;$(dirname \u0026#34;$0\u0026#34;)\u0026#34;; pwd) cd ${SCRIPT_DIR_PATH} pwd # ディレクトリ移動 cd /usr/local pwd # ディレクトリ移動 cd ${SCRIPT_DIR_PATH} pwd   ","description":"シェルスクリプトは実行した場所がカレントディレクトリとして扱われます。そのため僕はログが実行場所にできてしまったりして行方不明になったりしました。実行場所を気にしないようなシェルスクリプトの作り方。","id":233,"section":"tech","tags":["bash"],"title":"【bash】ログが行方不明に！？実行場所を気にしないシェルスクリプトの作り方","uri":"https://c-a-p-engineer.github.io/tech/2022/10/22/bash-script-dir/"},{"content":"【GitHub】GitHub Actions プルリクエスト時に実行してコメントを自動的に入れる GitHub Actions プルリクエスト時に実行して結果に合わせてコメントを自動的に入れる\nプルリクエスト時にコメントを入れる プルリクエストを出した際に実行されます。\n実行された結果によってプルリクエストにコメントを付けます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  name:Pull Request Checkon:pull_request:# プルリクエスト時の対象ブランチbranches:- main- developjobs:pr_check:name:Pull Request Checkruns-on:ubuntu-lateststeps:# テストなどを実行（exit 1 でわざとエラー扱いにする- name:Run Testrun:exit 1# 成功- name:Successif:success()run:|echo \u0026#39;\u0026gt; **Note**\u0026#39; \u0026gt; comments echo \u0026#39;\u0026gt; OK\u0026#39; \u0026gt;\u0026gt; comments# 失敗- name:PHPUnit Failedif:failure()run:|echo \u0026#39;\u0026gt; **Warning**\u0026#39; \u0026gt; comments echo \u0026#39;\u0026gt; NG\u0026#39; \u0026gt;\u0026gt; comments# プルリクエストにコメントを入れる- name:Post commentsif:always()env:GITHUB_TOKEN:${{ secrets.GITHUB_TOKEN }}URL:${{ github.event.pull_request.html_url }}run:gh pr comment -F ./comments \u0026#34;${URL}\u0026#34;  これを使用することでたとえばプルリクエスト時に自動でテストした結果をプルリクエストのコメントとして残すことが可能になります。\n","description":"GitHub Actions プルリクエスト時に実行して結果に合わせてコメントを自動的に入れる","id":234,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions プルリクエスト時に実行して結果に合わせてコメントを自動的に入れる","uri":"https://c-a-p-engineer.github.io/tech/2022/10/21/github-actions-pull_request_comment/"},{"content":"【Mysql】外部キー制約を無効化する方法 Mysql でテーブルやデータを削除する時に外部キーのせいで簡単に出来ない時がそれを解決するために外部キー制約を無効化する方法\n外部キー制約を無効化 以下のコマンドを使用すると外部キーチェックを無効化ができます。\n1 2 3 4 5 6 7 8  -- 外部キーチェックの無効化 SETFOREIGN_KEY_CHECKS=0;-- 処理 -- TODO -- 外部キーチェックを有効化 SETFOREIGN_KEY_CHECKS=1;  サンプル 実際に使用してみるためのサンプルです。\nサンプルとして使用するテーブル。\n1 2 3 4 5 6 7 8 9 10 11 12 13  CREATETABLEparent(idINTNOTNULL,PRIMARYKEY(id))ENGINE=INNODB;CREATETABLEchild(idINT,parent_idINT,INDEXpar_ind(parent_id),FOREIGNKEY(parent_id)REFERENCESparent(id)ONDELETECASCADE)ENGINE=INNODB;  エラーになるパターン child テーブルから parent テーブルへの外部キーがついているのでエラーが発生する。\nDROP TABLE parent; エラーが発生します。\nSQLSTATE[HY000]: General error: 1824 Cannot drop table 'parent' referenced by a foreign key constraint 'child_ibfk_1' on table 'child'. エラー内容は「外部キーが付いてるから削除ができない」です。\nError number: 3730; Symbol: ER_FK_CANNOT_DROP_PARENT; SQLSTATE: HY000\n外部キーチェックを無効化する 以下のように、一時的に外部キーチェックを無効化することによって削除が可能です。\n1 2 3 4 5 6 7 8  -- 外部キーチェックの無効化 SETFOREIGN_KEY_CHECKS=0;-- 処理 DROPTABLEparent;-- 外部キーチェックを有効化 SETFOREIGN_KEY_CHECKS=1;  参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: 13.1.17.2 外部キー制約の使用 Error number: 3730; Symbol: ER_FK_CANNOT_DROP_PARENT; SQLSTATE: HY000  ","description":"Mysql でテーブルやデータを削除する時に外部キーのせいで簡単に出来ない時がそれを解決するために外部キー制約を無効化する方法","id":235,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】外部キー制約を無効化する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/10/20/mysql-foreign_key_checks/"},{"content":"【Docker】hadolint で Dockerfile をチェックしよう！ hadolint で Dockerfile をチェックしよう！\nHadolint Hadolint という Docker の lint ツールです。\n hadolint/hadolint: Dockerfile linter, validate inline bash, written in Haskell  使い方 今回はDockerを使った方法を紹介します。\ndocker run --rm -i hadolint/hadolint \u0026lt; Dockerfile フォーマットの指定 --format で指定。\nフォーマットは tty と json があります。\nデフォルトは tty のため json で出したい時だけ使用する感じですね。\ndocker run --rm -i hadolint/hadolint hadolint - --format json \u0026lt; Dockerfile 実行すると以下のような指摘が出力されます。\n-:5 DL3008 warning: Pin versions in apt get install. Instead of `apt-get install \u0026lt;package\u0026gt;` use `apt-get install \u0026lt;package\u0026gt;=\u0026lt;version\u0026gt;` -:5 DL3015 info: Avoid additional packages by specifying `--no-install-recommends` -:25 SC2046 warning: Quote this to prevent word splitting. -:35 DL4006 warning: Set the SHELL option -o pipefail before RUN with a pipe in it. If you are using /bin/sh in an alpine image or if your shell is symlinked to busybox then consider explicitly setting your SHELL to /bin/ash, or disable this check 各種のルールはこちらに記載されています。\nまた修正方法も記載されています。\nRules\n特定のルールを除外 --ignore で指定。\nこの場合は DL3306 のルールを除外しております。\ndocker run --rm -i hadolint/hadolint hadolint - --ignore DL3006 \u0026lt; Dockerfile 対象のDockerfile自体に除外設定することも可能です。\n, で区切ることによって複数指定ができます。\n1 2 3 4 5 6 7 8  FROMphp:8.1.6-fpm-bullseye# hadolint ignore=DL3008,DL3015RUN apt-get update \\  # 基本 \u0026amp;\u0026amp; apt-get install -y wget git \\  \u0026amp;\u0026amp; apt-get clean \\  \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*  設定ファイルを使用する 設定ファイルを使用して設定します。\n設定値は以下のようになっています。\nhadolint/hadolint - Congigure\nhadolint.yaml を作成し、試しに除外設定を行います。\n1 2 3  ignored:- DL3000- SC1010  以下のように設定ファイルを読み込み実行します。\n（僕は Windows上では実行できなくて WSL上で実行しました。\ndocker run --rm -i -v \u0026quot;$PWD:/data:ro\u0026quot; -w /data hadolint/hadolint /bin/hadolint -c hadolint.yaml Dockerfile 参考  「hadolint」にシバかれながら美しいDockerfileを書き上げる - 憂鬱な世界にネコパンチ！ hadolint/hadolint: Dockerfile linter, validate inline bash, written in Haskell Rules  ","description":"hadolint で Dockerfile をチェックしよう！","id":236,"section":"tech","tags":["Docker"],"title":"【Docker】hadolint で Dockerfile をチェックしよう！","uri":"https://c-a-p-engineer.github.io/tech/2022/10/19/docker-hadolint/"},{"content":"【Mysql】スロークエリを簡単に解析できる mysqldumpslow Mysql のスロークエリログを簡単に解析できる mysqldumpslow を使ってみる。\nmysqldumpslow mysqldumpslow コマンドを使用することで大量のスロークエリログを簡単に解析できます。\nインストール mysqldumpslow コマンドを使用するにには mysql-server のインストールが必要なようです。\n僕は面倒なので mysql のコンテナを使用しました。\n使用方法 使用方法は以下です。\nmysqldumpslow [オプション] [ログファイル] オプション一覧\n -a すべての数字を N に、文字列を \u0026lsquo;S\u0026rsquo; に抽象化しません -n 少なくとも指定された桁数の数字を抽象化 --debug,-d デバッグ情報を書き込み -g grepオプション、パターンに一致するステートメントのみを考慮 --help ヘルプメッセージを表示して終了 -h ログファイル名内のサーバーのホスト名 -i サーバーインスタンスの名前 -l 合計時間からロック時間を減算しない -r ソート順序を逆転 -s 出力のソート方法  t,at クエリー時間または平均クエリー時間でソート l ,al ロック時間または平均ロック時間でソート r,ar 送信行数または平均送信行数でソート c カウントでソート   -t 最初から指定された数だけのクエリーのみ表示 --verbose\t冗長モード  返却値説明 mysqldumpslow を実行すると以下のような返却がされます。\nReading mysql slow query log from /usr/local/mysql/data/mysqld80-slow.log Count: 1 Time=4.32s (4s) Lock=0.00s (0s) Rows=0.0 (0), root[root]@localhost insert into t2 select * from t1 Count: 3 Time=2.53s (7s) Lock=0.00s (0s) Rows=0.0 (0), root[root]@localhost insert into t2 select * from t1 limit N Count: 3 Time=2.13s (6s) Lock=0.00s (0s) Rows=0.0 (0), root[root]@localhost insert into t1 select * from t1  Count 実行回数 Time 実行平均時間（合計時間 Lock ロック平均時間（合計時間 Rows 返却平均行（返却合計行  スロークエリログの項目説明 第154回　スロークエリログに出力される項目とlog_slow_extra | gihyo.jp から引用\n# Time: 2021-08-29T08:49:05.382813Z # User@Host: root[root] @ [172.17.0.1] Id: 10 # Query_time: 9.685363 Lock_time: 0.000210 Rows_sent: 1 Rows_examined: 2097153 SET timestamp=1630226935; SELECT * FROM test WHERE col1=10; Mysql 5.7までの項目\n Time スロークエリログに書き込んだ時間 User@Host クエリを実行したユーザアカウント Id SHOW PROCESSLISTのID Query_time ステートメントの実行時間（秒） Lock_time ロックを取得した時間（秒） Rows_sent クライアントに送信された行数 Rows_examined MySQLが内部で走査した行数  # Time: 2021-08-29T08:50:58.916765Z # User@Host: root[root] @ [172.17.0.1] Id: 10 # Query_time: 9.076753 Lock_time: 0.000243 Rows_sent: 1 Rows_examined: 2097153 Thread_id: 10 Errno: 0 Killed: 0 Bytes_received: 0 Bytes_sent: 251 Read_first: 1 Read_last: 0 Read_key: 1 Read_next: 0 Read_prev: 0 Read_rnd: 0 Read_rnd_next: 2097154 Sort_merge_passes: 0 Sort_range_count: 0 Sort_rows: 0 Sort_scan_count: 0 Created_tmp_disk_tables: 0 Created_tmp_tables: 0 Start: 2021-08-29T08:50:49.840012Z End: 2021-08-29T08:50:58.916765Z SET timestamp=1630227049; SELECT * FROM test WHERE col1=10; Mysql 8.0以降の項目\n Thread_id Idと同じくSHOW PROCESSLISTのID Errno エラー番号、エラーが発生しなかった場合は0 Killed 終了した場合、理由を示すエラー番号。ステートメントが正常に終了した場合は0 Bytes_received ステートメントのステータスBytes_receivedの値 Bytes_sent ステートメントのステータスBytes_sentの値 Read_xx ステートメントのステータス Handler_Read_xxのそれぞれの項目の値 Sort_merge_passes ステートメントのステータスSort_merge_passesの値 Sort_range_count ステートメントのステータスSort_range_countの値 Sort_rows ステートメントのステータスSort_rowsの値 Sort_scan_count ステートメントのステータスSort_scan_countの値 Created_tmp_disk_tables ステートメントのステータスCreated_tmp_disk_tablesの値 Created_tmp_tables ステートメントのステータスCreated_tmp_tablesの値 Start ステートメントの実行開始時間 End ステートメントの実行終了時間  複数ファイルを一括で解析 以下のようにすると複数のスロークエリログを一括で解析してくれます。\nmysqldumpslow slow_001.log slow_002.log サンプル 多用しそうなものをサンプルとして置いておきます。\n発生回数でソート 10件表示 発生回数でソートして10件表示\nmysqldumpslow -s c -t 10 mysql-slowquery.log 合計処理時間でソート 10件表示 合計処理時間でソートして10件表示\nmysqldumpslow -s t -t 10 mysql-slowquery.log -a を付けると抽象化されないので一番処理時間がかかっているクエリが出てきます。\n（まったく同じクエリを何度も投げていたら集計されてしまいますが…\n参考  MySQL :: MySQL 8.0 リファレンスマニュアル :: 4.6.9 mysqldumpslow — スロークエリーログファイルの要約 第154回　スロークエリログに出力される項目とlog_slow_extra | gihyo.jp  ","description":"Mysql の大量のスロークエリログを簡単に解析できる mysqldumpslow を使ってみる。","id":237,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】大量のスロークエリログを簡単に解析できる mysqldumpslow","uri":"https://c-a-p-engineer.github.io/tech/2022/10/18/mysql-mysqldumpslow/"},{"content":"【VSCode】Dev Container Features を利用して Dev Containerに簡単に機能を追加する VSCode で Dev Container Features を利用して Dev Containerに簡単に機能を追加する\nDev Container Features とは DevContainer に簡単に追加の機能を入れることが機能です。\nこれにより特にDockerの知識がなくても簡単に開発用のコンテナに言語などのセットアップが可能になります。\nfeatures の中にはGoやRustなど各種言語を入れることも簡単にでき docker-in-docker（Dockerの中でDockerを使う）や desktop-lite （デスクトップ） などの機能が存在していてとても有用です。\nDev Container Features を設定する 以下のように設定すると簡単に go の lts バージョンがインストールされます。\n1 2 3 4 5 6 7 8  { \u0026#34;image\u0026#34;: \u0026#34;ubuntu:latest\u0026#34;, \u0026#34;features\u0026#34;: { \u0026#34;go\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;lts\u0026#34;, }, }, }   今回はDocker image を使用していますが dockerfile, docker-compose の際でも Dev Container に対して自動的に入れてくれます。\n公式の features は以下にあります。\ndevcontainers/features\nDev Container Features の参照方法 Dev Container Features 自作用テンプレートは以下に用意されています。\nReferencing a feature\n公式リポジトリ使用時は該当名だけで良さそう（？\n 公式リポジトリ  go   OCIリポジトリ  ghcr.io/user/repo/go:latest   URL  https://github.com/user/repo/releases/devcontainer-feature-go.tgz   ローカルリポジトリ  ./myGoFeature    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  { \u0026#34;image\u0026#34;: \u0026#34;ubuntu:latest\u0026#34;, \u0026#34;features\u0026#34;: { \u0026#34;go\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;lts\u0026#34;, }, \u0026#34;ghcr.io/user/repo/go\u0026#34;: {}, \u0026#34;ghcr.io/user/repo1/go:1\u0026#34;: {}, \u0026#34;ghcr.io/user/repo2/go:latest\u0026#34;: {}, \u0026#34;https://github.com/user/repo/releases/devcontainer-feature-go.tgz\u0026#34;: { \u0026#34;optionA\u0026#34;: \u0026#34;value\u0026#34; }, \u0026#34;./myGoFeature\u0026#34;: { \u0026#34;optionA\u0026#34;: true, \u0026#34;optionB\u0026#34;: \u0026#34;hello\u0026#34;, \u0026#34;version\u0026#34; : \u0026#34;1.0.0\u0026#34; } } }   Dev Container Features を自作 Dev Container Features 自作用テンプレートは以下に用意されています。\ndevcontainers/feature-template\n注意点 features を使用することで簡単に機能の導入が可能になります。\nですが、いくつか問題があります。\n僕は以下の問題から積極的に features を使用していません。\n実行順序 実行順序は以下のようでした。\n Image, Dockerfile, docker-compose からのコンテナの作成 コンテナ作成後に features をインストール。  こうするとたとえばコンテナ作成時に細かな言語の設定をしたい場合などDev Containerに入ったあとに実行せざるおえません。\nインストールするのが遅い 僕自身の利用感ですがインストールするのが遅いです。\nおそらく様々な環境にインストール出来るようにしているためだと思います。\nできるなら自分で Dockerfile をいじって環境に適した書き方をした方が早いかと思われます。\nDev Container じゃないといけない 当たり前ですが features を使用するに当たって Dev Container を起動しなければいけません。\nそのため Dockerfile, docker-compose でコンテナを立ち上げても features がインストールされません。\n参考  Dev Container Features Developing inside a Container#Dev Container Features (preview) devcontainers/features devcontainers/feature-template  ","description":"VSCode で Dev Container Features を利用して Dev Containerに簡単に機能を追加する","id":238,"section":"tech","tags":["Visual Studio Code"],"title":"【VSCode】Dev Container Features を利用して Dev Containerに簡単に機能を追加する","uri":"https://c-a-p-engineer.github.io/tech/2022/10/16/devcontainer-feature/"},{"content":"【Laravel】複数のSQLを一括実行する DB::unprepared Laravel で複数のSQLを一括実行する DB::unprepared を使用する\nDB::unprepared を使用する DB::Insert などを使用する場合、1つのSQL文ずつしか流せません。\n複数のSQL文を実行するとエラーになります。\nそこで DB::unprepared を使用します。\n1 2  $sql = file_get_contents(database_path(\u0026#39;dump.sql\u0026#39;)); DB::unprepared($sql);   これによりDBのdumpファイルから一括でDBの生成などが可能です。\n注意点 エラーを発するのは1つ目のSQLだけのようです。\n以下のような2つ目以降のSQLがエラーになってもエラーが出ないので注意してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  $sql = \u0026lt;\u0026lt;\u0026lt;SQL-- 1つ目のSQL SELECT * FROM information_schema.COLUMNS; -- 2つ目のSQL（存在しないテーブル SELECT * FROM temp; SQL; DB::unprepared($sql);   2つ目のSQLは存在しないテーブルを指定していますがこれではエラーが出ません。\n","description":"Laravel で複数のSQLを一括実行する DB::unprepared を使用する","id":239,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】複数のSQLを一括実行する DB::unprepared","uri":"https://c-a-p-engineer.github.io/tech/2022/10/15/laravel-multiple-sql/"},{"content":"【Mysql】ERROR 1248 (42000): Every derived table must have its own alias エラーの解決 Mysql ERROR 1248 (42000): Every derived table must have its own alias エラーの解決メモ\nエラー 以下のようなSQLを実行すると ERROR 1248 (42000): Every derived table must have its own alias が出てしまいます。\n1 2 3 4  SELECT*FROM(SELECT*FROMinformation_schema.COLUMNS)  原因 テーブルにエイリアスがついてないことが原因です。\n解決方法 テーブル名にエイリアス付けます。\nここでは temp を指定してみます。\n1 2 3 4 5 6 7 8 9 10  SELECT*FROM(SELECT*FROMinformation_schema.COLUMNS)temp  参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: B.3 サーバーのエラーコードおよびメッセージ #エラー: 1248 SQLSTATE: 42000 (ER_DERIVED_MUST_HAVE_ALIAS)  ","description":"Mysql ERROR 1248 (42000): Every derived table must have its own alias エラーの解決メモ","id":240,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】ERROR 1248 (42000): Every derived table must have its own alias エラーの解決","uri":"https://c-a-p-engineer.github.io/tech/2022/10/15/mysql-own-ailias/"},{"content":"【bash】シェル内でヒアドキュメントを使用する シェル内でヒアドキュメント使用する方法\nヒアドキュメント 最初に ヒアドキュメントは標準出力として扱われる ということです。\n試しに以下のように echo してみます。\n1 2 3 4 5 6  echo \u0026lt;\u0026lt; EOS 1 ab 456 cdef EOS   こうすると標準出力扱いのため改行のみ出力されます。\n以下のようにすると文字列を出力します。\n1 2 3 4 5 6  cat\u0026lt;\u0026lt;EOS 1 ab 456 cdef EOS   変数に使用する 変数にヒアドキュメントを使用する場合 $() , ``\\（アクセント）, '（シングルクォーテーション）, \u0026quot;（ダブルクォーテーション）で囲うと使用できます。 どれも1 ab 456 cdef` と改行がスペースに変えられた状態で出力されます。\nカッコ 1 2 3 4 5 6 7 8 9  STR=$(cat \u0026lt;\u0026lt; EOS 1 ab 456 cdef EOS ) echo ${STR}   バッククォート 1 2 3 4 5 6 7 8 9  STR=`cat \u0026lt;\u0026lt; EOS 1 ab 456 cdef EOS ` echo ${STR}   シングルクォート 1 2 3 4 5 6 7 8  STR=\u0026#39; 1 ab 456 cdef \u0026#39; echo ${STR}   ダブルクォーテーション 1 2 3 4 5 6 7 8  STR=\u0026#34; 1 ab 456 cdef \u0026#34; echo ${STR}   変数内の改行を有効にする \u0026quot; を使用して変数を展開すると改行が有効になります。\n1 2 3 4 5 6 7 8  STR=\u0026#34; 1 ab 456 cdef \u0026#34; echo \u0026#34;${STR}\u0026#34;   こうすると変数が改行されて展開されます。\n1 ab 456 cdef ","description":"シェル内でヒアドキュメント使用する方法","id":241,"section":"tech","tags":["bash"],"title":"【bash】シェル内でヒアドキュメントを使用する","uri":"https://c-a-p-engineer.github.io/tech/2022/10/15/bash-heredoc/"},{"content":"【Mysql】連続した日付の表を作る Mysql で 連続した日付の表を作る方法\nSQLを実行する 以下のSQLを使用すると 2022-10-14 と 2022-10-13 の仮想表が作られます。\n1 2 3 4 5 6 7 8  SELECT\u0026#39;2022-10-14\u0026#39;-INTERVAL@seq_noDAYASdate-- 開始日 ,@seq_no:=@seq_no+1ASSEQ-- シーケンスNo FROMinformation_schema.COLUMNS,(SELECT@seq_no:=0)asx-- 変数の初期化 WHERE@seq_no\u0026lt;=DATEDIFF(\u0026#39;2022-10-14\u0026#39;,\u0026#39;2022-10-13\u0026#39;)-- 開始日 - 終了日 の差+1日数分を表示   結果は以下のようになります。\n   date seq     2022/10/14 1   2022/10/13 2    ","description":"Mysql で 連続した日付の表を作る方法","id":242,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】連続した日付の表を作る","uri":"https://c-a-p-engineer.github.io/tech/2022/10/14/mysql-date-sequence/"},{"content":"【Docker】Docker Compose で profiles を使って普段使わないサービスの起動をさせないようにする Docker Compose で profiles を使って普段使わないサービスの起動をさせないようにする方法\nprofiles を使用する。 Docker Compose の profiles というものを使用します。\nサンプル Docker Compose サンプルとして以下の docker-compose.yml を使用します。\n通常起動したくない phpmyadmin に profiles を指定します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  version:\u0026#39;3\u0026#39;services:php:image:php:8.1.11-apachevolumes:- ./src:/var/www/working_dir:/var/wwwmysql:container_name:mysqlimage:mysql:8.0command:- --sql-mode=NO_ENGINE_SUBSTITUTIONvolumes:- ./.data/mysql:/var/lib/mysqlports:- \u0026#34;3306:3306\u0026#34;environment:MYSQL_ROOT_PASSWORD:rootMYSQL_DATABASE:testMYSQL_USER:developMYSQL_PASSWORD:p@ssw0rdTZ:\u0026#39;Asia/Tokyo\u0026#39;phpmyadmin:container_name:phpmyadminimage:phpmyadmin/phpmyadmin:latestenvironment:PMA_HOST:\u0026#39;mysql\u0026#39;ports:- 18888:80profiles:[\u0026#34;debug\u0026#34;]  profiles: [\u0026quot;debug\u0026quot;, \u0026quot;test\u0026quot;] などのように profiles を複数指定することも可能です。\n起動 これで通常起動してみると phpmyadmin のコンテナが立ち上がらなくなります。\ndocker-compose up 以下のように --profile [プロファイル名] を指定して立ち上げると phpmyadmin のコンテナが立ち上がります。\ndocker-compose --profile debug up 補足 たとえば特定のサービスのみを起動したい場合は以下のようにサービスを指定することで特定のみを起動することも可能です。\nphp のみ起動\ndocker-compose up php php と mysql が起動\ndocker-compose up php mysql 参考  Compose で プロフィール(profile) を使う - Docker-docs-ja 20.10 ドキュメント  ","description":"Docker Compose で profiles を使って普段使わないサービスの起動をさせないようにする方法","id":243,"section":"tech","tags":["Docker"],"title":"【Docker】Docker Compose で profiles を使って普段使わないサービスの起動をさせないようにする","uri":"https://c-a-p-engineer.github.io/tech/2022/10/11/docker-compose-profile/"},{"content":"【Docker】SchemaSpy（スキームスパイ） を使って自動的にER図を生成する（改良版 Docker で SchemaSpy（スキームスパイ） を使って自動的にER図を生成する。（改良版\n以前書いた記事（【Docker】SchemaSpy を使って自動的にER図を生成する）がSchemaSpyのアップデートのためか動作がおかしくなったため改良版を書きました。\nSchemaSpy を使ってみる SchemaSpyを使ってみます。\nファイル構成 以下のようにファイルを構成してください。\n├─.docker │ └schemaspy │ └schemaspy.properties └─docker-compose.yml schemaspy.properties # DB type schemaspy.t=mysql schemaspy.dp=/drivers schemaspy.host=mysql schemaspy.port=3306 schemaspy.db=test schemaspy.s=test schemaspy.u=develop schemaspy.p=p@ssw0rd プロパティ説明\n schemaspy.t : データベース種別 schemaspy.dp : ドライバーパス schemaspy.host : DBホスト schemaspy.port : ポート番号 schemaspy.db : DB名 schemaspy.s : スキーマ名 schemaspy.u : ユーザ名 schemaspy.p : パスワード  docker-compose 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  version:\u0026#39;3\u0026#39;services:mysql:container_name:mysqlimage:mysql:8.0command:- --sql-mode=NO_ENGINE_SUBSTITUTIONvolumes:- ./.data/mysql:/var/lib/mysql- ./.docker/mysql/init:/docker-entrypoint-initdb.dports:- \u0026#34;3306:3306\u0026#34;environment:MYSQL_ROOT_PASSWORD:rootMYSQL_DATABASE:testMYSQL_USER:developMYSQL_PASSWORD:p@ssw0rdTZ:\u0026#39;Asia/Tokyo\u0026#39;schemaspy:container_name:schemaspyimage:schemaspy/schemaspy:snapshotvolumes:- ./.docker/schemaspy/schemaspy.properties:/schemaspy.properties# SchemaSpy Properties File- ./schemaspy/output:/output# SchemaSpy Output dirdepends_on:- mysqlenvironment:SCHEMASPY_OUTPUT:/output# SchemaSpy Output dir  実行  まずはMysqlを起動します。  docker-compose up -d --build mysql テーブルを作成（SQLはMysql公式サンプル world_x_database を使用MySQL :: Other MySQL Documentation  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  DROPTABLEIFEXISTS`city`;CREATETABLE`city`(`ID`intNOTNULLAUTO_INCREMENT,`Name`char(35)NOTNULLDEFAULT\u0026#39;\u0026#39;,`CountryCode`char(3)NOTNULLDEFAULT\u0026#39;\u0026#39;,`District`char(20)NOTNULLDEFAULT\u0026#39;\u0026#39;,`Info`jsonDEFAULTNULL,PRIMARYKEY(`ID`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4;DROPTABLEIFEXISTS`country`;CREATETABLE`country`(`Code`char(3)NOTNULLDEFAULT\u0026#39;\u0026#39;,`Name`char(52)NOTNULLDEFAULT\u0026#39;\u0026#39;,`Capital`intDEFAULTNULL,`Code2`char(2)NOTNULLDEFAULT\u0026#39;\u0026#39;,PRIMARYKEY(`Code`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4;DROPTABLEIFEXISTS`countryinfo`;CREATETABLE`countryinfo`(`doc`jsonDEFAULTNULL,`_id`varbinary(32)GENERATEDALWAYSAS(json_unquote(json_extract(`doc`,_utf8mb4\u0026#39;$._id\u0026#39;)))STOREDNOTNULL,`_json_schema`jsonGENERATEDALWAYSAS(_utf8mb4\u0026#39;{\u0026#34;type\u0026#34;:\u0026#34;object\u0026#34;}\u0026#39;)VIRTUAL,PRIMARYKEY(`_id`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4;DROPTABLEIFEXISTS`countrylanguage`;CREATETABLE`countrylanguage`(`CountryCode`char(3)NOTNULLDEFAULT\u0026#39;\u0026#39;,`Language`char(30)NOTNULLDEFAULT\u0026#39;\u0026#39;,`IsOfficial`enum(\u0026#39;T\u0026#39;,\u0026#39;F\u0026#39;)NOTNULLDEFAULT\u0026#39;F\u0026#39;,`Percentage`decimal(4,1)NOTNULLDEFAULT\u0026#39;0.0\u0026#39;,PRIMARYKEY(`CountryCode`,`Language`),KEY`CountryCode`(`CountryCode`),CONSTRAINT`countrylanguage_ibfk_1`FOREIGNKEY(`CountryCode`)REFERENCES`country`(`Code`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4;  SchemaSpyを実行  docker-compose up -d --build schemaspy schemaspy/output のディレクトリにファイルが出力されたら成功です。\n出力されたHTMLを見るとテーブル情報を確認ができます。\nまたER図を出力してくれるのでリレーションの確認もできます。\n参考  schemaspy/schemaspy - Docker Image | Docker Hub  ","description":"Docker で SchemaSpy（スキームスパイ） を使って自動的にER図を生成する（2022/10/10 改良版","id":244,"section":"tech","tags":["Docker","DB"],"title":"【Docker】SchemaSpy（スキームスパイ） を使って自動的にER図を生成する（2022/10/10 改良版","uri":"https://c-a-p-engineer.github.io/tech/2022/10/10/docker-schemaspy/"},{"content":"【Ubuntu】apt-get update をしたら Google Chorme のGPGエラーが発生した。 apt-get update をしたら Google Chorme のGPGエラーが発生したので対処方法をメモ。\nエラー Ubuntu に対して apt-get update をしたら以下のようなエラーが発生。\nThe repository 'http://dl.google.com/linux/chrome/deb stable InRelea se' is not signed. 原因 Google が Linux リポジトリで配布しているパッケージの署名と認証のために発行している公開署名鍵が変更されたのが原因になります。\nGoogle はパッケージの更新を確認するために GPG キーで署名しています。\nGPG の有効期限が切れたり、変更されたり、なかった場合、エラーを表示します。\n解決方法 以下のコマンドを実行してGPGキーを取得、追加すれば解決されます。\n1  wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -   参考  [How To] Fix The Google GPG Error on Ubuntu - OMG! Ubuntu!  ","description":"apt-get update をしたら Google Chorme のGPGエラーが発生したので対処方法をメモ","id":245,"section":"tech","tags":["Linux","Ubuntu"],"title":"【Ubuntu】apt-get update をしたら Google Chorme のGPGエラーが発生した。","uri":"https://c-a-p-engineer.github.io/tech/2022/10/06/ubuntu-update-google-chrome/"},{"content":"【Mysql】UNIXタイムスタンプ \u0026lt;=\u0026gt; 日時 変換方法 UNIXタイムスタンプ \u0026lt;=\u0026gt; 日時 変換方法メモ\n日時 =\u0026gt; UNIXタイムスタンプ UNIX_TIMESTAMP に日時を入れるとUNIXタイムスタンプに変換されます。\n1  SELECTUNIX_TIMESTAMP(\u0026#39;2022/10/04 01:20:00\u0026#39;);  UNIXタイムスタンプ =\u0026gt; 日時 FROM_UNIXTIME にUNIXタイムスタンプを入れると日時に変換されます。\n1  SELECTFROM_UNIXTIME(1664814000);  参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: 12.7 日付および時間関数 #FROM_UNIXTIME MySQL :: MySQL 5.6 リファレンスマニュアル :: 12.7 日付および時間関数 #UNIX_TIMESTAMP  ","description":"UNIXタイムスタンプ \u003c=\u003e 日時 変換方法メモ","id":246,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】UNIXタイムスタンプ \u003c=\u003e 日時 変換方法","uri":"https://c-a-p-engineer.github.io/tech/2022/10/04/mysql-unixtime-convert/"},{"content":"【PHP】CLI で入力がなかったらタイムアウトさせる方法 PHP で CLI で入力を求めた際、一定時間に入力されなかったらタイムアウトさせる方法\nstream_selectを使用する stream_select を使用して実現させます。\n1 2 3 4 5 6 7  stream_select( ?array \u0026amp;$read, ?array \u0026amp;$write, ?array \u0026amp;$except, ?int $seconds, ?int $microseconds = null ): int|false   第4引数にタイムアウト秒を設定することができるのでそれを利用します。\n入力がなかったらタイムアウトさせる 実装は以下のようになります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  \u0026lt;?php $stdin = fopen(\u0026#39;php://stdin\u0026#39;, \u0026#39;r\u0026#39;); $read = [$stdin]; $write = $except = []; $timeout = 5; echo \u0026#34;Please Input Yes/No ... (Input Time limit {$timeout}sec)\u0026#34; . PHP_EOL; if (stream_select($read, $write, $except, $timeout)) { // 入力値受け取り  $line = trim(fgets($stdin)); // 入力値確認  switch (strtolower($line)) { case \u0026#39;y\u0026#39;: case \u0026#39;yes\u0026#39;: echo \u0026#39;Input Yes\u0026#39; . PHP_EOL; break; case \u0026#39;n\u0026#39;: case \u0026#39;no\u0026#39;: echo \u0026#39;Input No\u0026#39; . PHP_EOL; break; default: echo \u0026#39;Input Other than Yes/No\u0026#39; . PHP_EOL; break; } } else { // 入力なし タイムアウト  echo \u0026#34;timeout\u0026#34; . PHP_EOL; }   これで一定時間入力がなかった場合、タイムアウトを発生させて処理を終わらせることができます。\n参考  stdin - PHP: How to track the timeout of the absence of input data? - Stack Overflow  ","description":"PHP で CLI で入力を求めた際、一定時間に入力されなかったらタイムアウトさせる方法","id":247,"section":"tech","tags":["PHP"],"title":"【PHP】CLI で入力がなかったらタイムアウトさせる方法","uri":"https://c-a-p-engineer.github.io/tech/2022/10/02/php-cli-input-timeout/"},{"content":"【Laravel】phpunit 実行時に migration を1回だけ実行する Laravel で phpunit 実行時にテスト側にマイグレーションを一々実行させると時間がかかるのでマイグレーションを1回だけ実行する\n実装 実装方法。\nphpunit.xml の設定 phpunit.xml に PHPUnit のフックファイルのパスを追記します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;phpunit backupGlobals=\u0026#34;false\u0026#34; backupStaticAttributes=\u0026#34;false\u0026#34; bootstrap=\u0026#34;bootstrap/autoload.php\u0026#34; colors=\u0026#34;true\u0026#34; convertErrorsToExceptions=\u0026#34;true\u0026#34; convertNoticesToExceptions=\u0026#34;true\u0026#34; convertWarningsToExceptions=\u0026#34;true\u0026#34; processIsolation=\u0026#34;false\u0026#34; stopOnFailure=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;extensions\u0026gt; \u0026lt;!-- フック用ファイルのパス --\u0026gt; \u0026lt;extension class=\u0026#34;Tests\\Extension\\Migration\u0026#34;/\u0026gt;  \u0026lt;/extensions\u0026gt; \u0026lt;php\u0026gt; \u0026lt;server name=\u0026#34;APP_ENV\u0026#34; value=\u0026#34;test\u0026#34;/\u0026gt; \u0026lt;server name=\u0026#34;DB_CONNECTION\u0026#34; value=\u0026#34;test_db\u0026#34;/\u0026gt; \u0026lt;server name=\u0026#34;BCRYPT_ROUNDS\u0026#34; value=\u0026#34;4\u0026#34;/\u0026gt; \u0026lt;server name=\u0026#34;CACHE_DRIVER\u0026#34; value=\u0026#34;array\u0026#34;/\u0026gt; \u0026lt;server name=\u0026#34;MAIL_DRIVER\u0026#34; value=\u0026#34;array\u0026#34;/\u0026gt; \u0026lt;server name=\u0026#34;QUEUE_CONNECTION\u0026#34; value=\u0026#34;sync\u0026#34;/\u0026gt; \u0026lt;server name=\u0026#34;SESSION_DRIVER\u0026#34; value=\u0026#34;array\u0026#34;/\u0026gt; \u0026lt;/php\u0026gt; \u0026lt;/phpunit\u0026gt;   PHPUnit 実行前にマイグレーションを行う PHPUnit の BeforeFirstTestHook を利用して最初のテスト実行前にマイグレーションを行うようにします。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  \u0026lt;?php namespace Tests\\Extension; use Illuminate\\Contracts\\Console\\Kernel; use Illuminate\\Support\\Facades\\Artisan; use PHPUnit\\Runner\\BeforeFirstTestHook; class Migration implements BeforeFirstTestHook { /** * 最初のテスト実行前に起動 * * @return void */ public function executeBeforeFirstTest(): void { // そのままLaravelの機能を使用できないため app を読み込み  $app = require __DIR__ . \u0026#39;/../../bootstrap/app.php\u0026#39;; // envファイル読み込み  $envFile = \u0026#39;.env.\u0026#39; $_SERVER[\u0026#39;APP_ENV\u0026#39;]); $app-\u0026gt;loadEnvironmentFrom($envFile); $app-\u0026gt;make(Kernel::class)-\u0026gt;bootstrap(); // マイグレーション実行  Artisan::call(\u0026#39;migrate:fresh\u0026#39;, [\u0026#39;--env\u0026#39; =\u0026gt; $_SERVER[\u0026#39;APP_ENV\u0026#39;]]); } }   これで起動時の最初のテスト前にマイグレーションを実行してくれて各テストの実行速度が早くなります。\n","description":"Laravel で phpunit 実行時にテスト側にマイグレーションを一々実行させると時間がかかるのでマイグレーションを1回だけ実行する","id":248,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】phpunit 実行時にマイグレーションを1回だけ実行する","uri":"https://c-a-p-engineer.github.io/tech/2022/09/30/laravel-phpunit-migration-once/"},{"content":"【Docker】Rustをインストール DockerにRustをインストールするメモ。\nTauriを使用しようとしてRustのインストールに罠があったためメモを残しておきます。\nDockerFile 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  FROMubuntu:20.04RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\  vim \\  curl \\  \u0026amp;\u0026amp; apt-get clean \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*# Rust installENV RUST_HOME /usr/local/lib/rustENV RUSTUP_HOME ${RUST_HOME}/rustupENV CARGO_HOME ${RUST_HOME}/cargoRUN mkdir /usr/local/lib/rust \u0026amp;\u0026amp; \\  chmod 0755 $RUST_HOMERUN curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs \u0026gt; ${RUST_HOME}/rustup.sh \\  \u0026amp;\u0026amp; chmod +x ${RUST_HOME}/rustup.sh \\  \u0026amp;\u0026amp; ${RUST_HOME}/rustup.sh -y --default-toolchain nightly --no-modify-pathENV PATH $PATH:$CARGO_HOME/bin  Rustのインストール注意点 僕がRustをDockerに入れた際、発生した注意点。\n RUST_HOME を作成しないと $HOME にインストールされてしまった別ユーザが cargo コマンドを使えない。 PATH に $CARGO_HOME/bin を通さないと cargo コマンドが使えない。  という罠たちがあり cargo: command not found がいっぱい出て困りました…\n","description":"DockerにRustをインストールするメモ。Tauriを使用しようとしてRustのインストールに罠があったためメモを残しておきます。","id":249,"section":"tech","tags":["Docker","Rust"],"title":"【Docker】Rustをインストール","uri":"https://c-a-p-engineer.github.io/tech/2022/09/29/docker-rust-install/"},{"content":"【Laravel】コマンドの実行制限をさせる方法 Laravel側で用意されているコマンドをたとえば本番環境で実行させたくない時などに使えるコマンドの実行制限をさせる方法です。\n特定のコマンドの実行制限をする 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  \u0026lt;?php namespace App\\Console; use Illuminate\\Support\\Str; use Illuminate\\Console\\Scheduling\\Schedule; use Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel; use Illuminate\\Support\\Facades\\DB; class Kernel extends ConsoleKernel { // 実行させたくないコマンド  const EXCLUDE_COMMAND = [ \u0026#39;migrate:fresh\u0026#39;, \u0026#39;migrate:reset\u0026#39;, ]; public function handle($input, $output = null) { // Laravel Load  $this-\u0026gt;bootstrap(); if ( // 実行させたくない環境  env(\u0026#39;APP_ENV\u0026#39;) == \u0026#39;production\u0026#39; \u0026amp;\u0026amp; // 入力されたコマンドの除外コマンド判定  Str::contains($input-\u0026gt;getFirstArgument(), self::EXCLUDE_COMMAND) ) { // 除外コマンドであれば処理を停止  echo \u0026#39;################# Warning #################\u0026#39; . PHP_EOL; echo $input-\u0026gt;getFirstArgument() . \u0026#39; is this \u0026#39; . env(\u0026#39;APP_ENV\u0026#39;) . \u0026#39; can\\\u0026#39;t run \u0026#39; . PHP_EOL; echo \u0026#39;###########################################\u0026#39; . PHP_EOL; return 1; } // 処理を実行  return parent::handle($input, $output); } }   コマンドを実行すると以下のようなエラーが出ます。\n$ php artisan migrate:fresh ################# Warning ################# migrate:fresh is this production can't run ########################################### 参考  【Laravel】artisan コマンド実行による操作ミスを防ぐ処理の作り方 – 株式会社シーポイントラボ ｜ 浜松のシステム・RTK-GNSS開発  ","description":"Laravel側で用意されているコマンドをたとえば本番環境で実行させたくない時などに使えるコマンドの実行制限をさせる方法です。","id":250,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】コマンドの実行制限をさせる方法","uri":"https://c-a-p-engineer.github.io/tech/2022/09/27/laravel-command-dont-execute/"},{"content":"【Docker】Dockerのパッケージ取得を高速化をする Dockerのビルドの際に一番辛いのが各種パッケージの取得が遅い。そんなパッケージ取得を高速化をするメモ。\n通常のDockerFile 1 2 3 4 5 6 7 8 9  FROMubuntu:latestRUN apt update \u0026amp;\u0026amp; apt install -y \\  git \\  less \\  vim \\  curl \\  unzip \\  \u0026amp;\u0026amp; apt-get clean \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*  上記のファイルでビルドに 166.4s かかりました。\napt のパッケージ取得先を日本のサーバーに変更 apt のパッケージ先を archive.ubuntu.com → ftp.jaist.ac.jp/pub/Linux に変換します。\n1 2 3 4 5 6 7 8 9 10 11  FROMubuntu:latestRUN sed -i \u0026#39;s@archive.ubuntu.com@ftp.jaist.ac.jp/pub/Linux@g\u0026#39; /etc/apt/sources.listRUN apt update \u0026amp;\u0026amp; apt install -y \\  git \\  less \\  vim \\  curl \\  unzip \\  \u0026amp;\u0026amp; apt-get clean \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*  56.3s でビルド完了。\napt-fastを導入 apt の高速版、apt-fast を導入します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  FROMubuntu:latestRUN sed -i \u0026#39;s@archive.ubuntu.com@ftp.jaist.ac.jp/pub/Linux@g\u0026#39; /etc/apt/sources.list# apt-fastRUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\  software-properties-common \u0026amp;\u0026amp; \\  rm -rf /var/lib/apt/lists/*RUN add-apt-repository ppa:apt-fast/stableRUN apt-get update \u0026amp;\u0026amp; apt install -y \\  apt-fast \\  \u0026amp;\u0026amp; apt-fast clean \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*RUN apt-fast update \u0026amp;\u0026amp; apt-fast install -y \\  git \\  less \\  vim \\  curl \\  unzip \\  \u0026amp;\u0026amp; apt-fast clean \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*  161.9s でビルド完了。\napt-fast の導入に 105.4s かかっています。\nそれ以外のビルド時間 56.5s なので実質そんな変化はありませんでした。\n今回はサンプルが悪かったようでより多くの、複雑なパッケージを入れて試したら apt-fast を使用した場合 780.0s → 246.3s と劇的に変化をしました。\nなので構成次第の面があるかと思います。\n","description":"Dockerのビルドの際に一番辛いのが各種パッケージの取得が遅い。そんなパッケージ取得を高速化をするメモ。","id":251,"section":"tech","tags":["Docker"],"title":"【Docker】Dockerのパッケージ取得を高速化をする","uri":"https://c-a-p-engineer.github.io/tech/2022/09/25/docker-speedup/"},{"content":"【Linux】apt-get のパッケージ取得先を一括変更する 日本に居るのにわざわざ海外の遅いサーバーからパッケージを取得されると遅くなるので apt-get のパッケージ取得先を一括変更するメモ。\nsource.list を一括変換 apt のパッケージ先を archive.ubuntu.com → ftp.jaist.ac.jp/pub/Linux に変換します。\nsed -i 's@archive.ubuntu.com@ftp.jaist.ac.jp/pub/Linux@g' /etc/apt/sources.list 備考：apt-list 別の方法で apt-list なるものがありました。\nこちらを使用する際に導入するのが手間などを考えると上記の一括変換の方が簡単で、手間がなかったためこちらを使用しませんでした。\njblakeman/apt-select: Ubuntu Archive Mirror reporting tool for apt sources configuration.\n参考  Dockerのイメージビルド中でapt-getを高速化するたった1つの方法 | ゲンゾウ用ポストイット  ","description":"日本に居るのにわざわざ海外の遅いサーバーからパッケージを取得されると遅くなるので apt-get のパッケージ取得先を一括変更するメモ。","id":252,"section":"tech","tags":["Linux"],"title":"【Linux】apt-get のパッケージ取得先を一括変更する","uri":"https://c-a-p-engineer.github.io/tech/2022/09/25/linux-package-server/"},{"content":"【Linux】apt-get の高速コマンド apt-fast 導入する apt-get の高速コマンド apt-fast を導入するメモ\napt-fast 導入 apt-fastを含むリポジトリを追加 add-apt-repository ppa:apt-fast/stable ここで以下のようなエラーが出る場合。\nbash: add-apt-repository: command not found 以下をインストールすることで解決できます。\napt-get install software-properties-common apt-fast インストール apt-fast インストール\napt install apt-fast apt-fast の設定ファイルは /etc/apt-fast.conf　に保存されます。\n設定値の中には同時接続数などがあります。\napt-fast を使用する apt-get で使用していた箇所を apt-fast にして使用ができます。\n","description":"apt-get の高速コマンド apt-fast を導入するメモ","id":253,"section":"tech","tags":["Linux"],"title":"【Linux】apt-get の高速コマンド apt-fast 導入する","uri":"https://c-a-p-engineer.github.io/tech/2022/09/25/linux-apt-fast/"},{"content":"【Mysql】mysqlコマンドから直接SQLを実行する Mysql で mysqlコマンドから直接SQLを実行するメモ\nSQLを実行する 以下の [SQL] の部分に実行したいSQLを入れてください。\nmysql -u[UserName] -p[Password] [DatabaseNmae] -e\u0026quot;[SQL]\u0026quot; 実行サンプル 以下のようにするとテーブル一覧を出力してくれます。\nmysql -u[UserName] -p[Password] [DatabaseNmae] -e\u0026quot;show tables;\u0026quot; エスケープする 実行SQL内でダブルクォーテーションを使用する際には \\\u0026quot; のようにエスケープを行ってください。\nテーブル名に sample が付くテーブルを出力します。\nmysql -u[UserName] -p[Password] [DatabaseNmae] -e\u0026quot;show tables like \\\u0026quot;%sample%\\\u0026quot;;\u0026quot; 複数のSQLを実行する セミコロン ; で区切る事によって複数のSQLを実行することも可能です。\n5秒スリープ後に次にテーブル一覧を出力します。\nmysql -u[UserName] -p[Password] [DatabaseNmae] -e\u0026quot;select sleep(5);show tables;\u0026quot; 参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: 4.5.1.1 mysql のオプション #\u0026ndash;execute  ","description":"Mysql で mysqlコマンドから直接SQLを実行するメモ","id":254,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】mysqlコマンドから直接SQLを実行する","uri":"https://c-a-p-engineer.github.io/tech/2022/09/22/mysql-command-execute/"},{"content":"【Mysql】mysqlコマンドを実行する際にパスワードに記号が入っている際の対応方法 Mysql で mysqlコマンドを実行する際、パスワードに記号が入っている際の対応方法メモ。\nパスワードに記号が入っている mysqlコマンドを実行する際、パスワードに記号が入ってると以下のようにエラーが発生します。\nパスワードには p@ssword としています。\n$ mysql -u[UserName] -pp@assword Warning: Using a password on the command line interface can be insecure. ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES) シングルクォーテーションで囲む シングルクォーテーション ' で囲む事によって記号でも問題なく接続が可能になります。\n$ mysql -u[UserName] -p'p@assword' ","description":"Mysql で mysqlコマンドを実行する際、パスワードに記号が入っている際の対応方法メモ","id":255,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】mysqlコマンドを実行する際、パスワードに記号が入っている際の対応方法","uri":"https://c-a-p-engineer.github.io/tech/2022/09/22/mysql-command-password-escape/"},{"content":"【Mysql】長時間実行しているプロセスを確認する processlist を使用し実行中のプロセスを見ることができますが、プロセス数が多いと対象のプロセスを探すのが困難になりますがそんなプロセスを確認する方法。\nプロセスを検索する方法 information_schema.PROCESSLIST に対して select する事でプロセスの検索が可能です。\n※ SHOW FULL PROCESSLIST と SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST は同等の結果になります。\nたとえば下記は実行時間が60秒を超えたものの検索ができます。\n1  SELECT*FROMINFORMATION_SCHEMA.PROCESSLISTWHERETIME\u0026gt;59;  参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: 21.15 INFORMATION_SCHEMA PROCESSLIST テーブル  ","description":"processlist を使用し実行中のプロセスを見ることができますが、プロセス数が多いと対象のプロセスを探すのが困難になりますがそんなプロセスを確認する方法","id":256,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】実行中のプロセスを検索する","uri":"https://c-a-p-engineer.github.io/tech/2022/09/21/mysql-processlist-search/"},{"content":"【Git】 git log をキレイに整えて見やすくする方法 git log をキレイに整えて見やすくする方法メモ\ngit log git log を普通に実行すると以下のようになります。\nフォーマットを指定する --pretty を使用することで出力する日付やハッシュなどに色を付けることが可能になります。\nまた --graph を使用するとコミットグラフを見ることができます。\ngit log --graph --pretty=format:' %Cgreen[%ai]%C(#ff0ab3)(%cr) %Cred%h - %Creset %s %C(bold blue)\u0026lt;%an\u0026gt;%Creset' \nフォーマット詳細 --pretty の詳細各種はこちらに記載されています。\nGit - pretty-formats Documentation\n使用しそうなものを抜き出して記載致します。\n %h  コミットハッシュ   %ai  日付ISO8601フォーマット（2022-09-19 09:00:00 + 0900）   %cr  相対コミット日付   %an  Git Author の名前   %ae  Git Author のメールアドレス   %cn  Git Commiter の名前   %ce  Git Commiter のメールアドレス    色を付ける\n %Cred  以降の文字色を赤   %Cgreen  以降の文字色を緑   %Cblue  以降の文字色を青   %Creset  色をリセット   %C([color])  Git - git-config Documentation で指定できる色、もしくは #ff0ab3 のような色指定    参考  Git - pretty-formats Documentation  ","description":"git log をキレイに整えて見やすくする方法メモ","id":257,"section":"tech","tags":["Git"],"title":"【Git】 git log をキレイに整えて見やすくする方法","uri":"https://c-a-p-engineer.github.io/tech/2022/09/19/git-log-pretty-format/"},{"content":"【Mysql】ERROR 1136 (21S01): Column count doesn\u0026rsquo;t match value count at row エラーの解決 Mysql ERROR 1136 (21S01): Column count doesn't match value count at row エラーの解決メモ\n原因 INSERTに指定された列と値の数と一致しないのが原因です。\n解決方法 列数と値の数を一致させる。\nそのためINSERT文の指定した列と値に過不足があるか見直しをすれば解決します。\n参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: B.3 サーバーのエラーコードおよびメッセージ #エラー: 1136 SQLSTATE: 21S01 (ER_WRONG_VALUE_COUNT_ON_ROW)  ","description":"Mysql ERROR 1136 (21S01): Column count doesn't match value count at row のエラーの解決メモ","id":258,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】ERROR 1136 (21S01): Column count doesn't match value count at row のエラー解決方法","uri":"https://c-a-p-engineer.github.io/tech/2022/09/16/mysql-column-dosent-match/"},{"content":"【Mysql】指定したパーティションのみを検索する Mysqlで指定したパーティションのみを検索する方法メモ。\nパーティションを指定して検索する 以下の方法で指定したパーティションのみの検索が可能です。\n1 2 3 4  SELECT*FROM[TABLE_NAME]PARTITION([PARTITION_NAME]);  サンプルテーブルの作成 1 2 3 4 5 6 7 8 9 10 11  CREATETABLE`sample`(`id`bigint(20)unsignedNOTNULLAUTO_INCREMENT,`num`decimal(6,4)DEFAULT0NOTNULL,PRIMARYKEY(`id`,`num`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4PARTITIONBYRANGE(FLOOR(`num`))(PARTITIONp0VALUESLESSTHAN(10),PARTITIONp1VALUESLESSTHAN(20),PARTITIONp2VALUESLESSTHAN(30),PARTITIONp3VALUESLESSTHANMAXVALUE);  データを入れる 作成したテーブルにデータを入れてみます。\n1 2 3 4 5 6 7 8 9  INSERTINTO`sample`(`num`)values(5),(10),(15),(20),(25),(30),(35),(40);  実行 パーティションを指定してSQLを実行してみます。\n1 2 3 4  SELECT*FROMsamplePARTITION(p0);  実行結果\n   id num     1 5.0000    条件がない状態ですが全件出ずに指定のパーティションのデータのみ出てきます。\n応用編 複数のパーティションを同時に検索する場合は以下のようにカンマ区切りで指定することが可能です。\n1 2 3 4  SELECT*FROMsamplePARTITION(p0,p3)  実行結果\n   id num     1 5.0000   6 30.0000   7 35.0000   8 40.0000    参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: 19.5 パーティション選択  ","description":"Mysqlで指定したパーティションのみを検索する方法メモ","id":259,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】指定したパーティションのみを検索する","uri":"https://c-a-p-engineer.github.io/tech/2022/09/15/mysql-partition-select/"},{"content":"【Laravel】使用していないModel, DBのテーブルを特定するコマンドを自作 Laravelで使用していないModel, DBのテーブルを特定するコマンドを自作しました。\nリファクタの時に役立ちます！\n確認環境 Laravel 5-9 の環境で確認をしております。\nコマンド作成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130  \u0026lt;?php namespace App\\Console\\Commands; use Illuminate\\Console\\Command; use Illuminate\\Support\\Facades\\DB; use RecursiveDirectoryIterator; use RecursiveIteratorIterator; class UnuseTable extends Command { /** * The name and signature of the console command. * * @var string */ protected $signature = \u0026#39;command:UnuseTable\u0026#39;; /** * The console command description. * * @var string */ protected $description = \u0026#39;Laravel Model Not Exists Table\u0026#39;; /** * Create a new command instance. * * @return void */ public function __construct() { parent::__construct(); } /** * Execute the console command. * * @return mixed */ public function handle() { $files = $this-\u0026gt;getFileList(app_path(\u0026#39;Model\u0026#39;)); $modelFiles = array_map( function ($value) { // ファイルパスから base_path を削除  $value = str_replace(base_path() . \u0026#39;/\u0026#39;, \u0026#39;\u0026#39;, $value); // 拡張子を削除  $filepath = pathinfo($value); $value = $filepath[\u0026#39;dirname\u0026#39;] . \u0026#39;/\u0026#39; . $filepath[\u0026#39;filename\u0026#39;]; // ファイルパスを namespace に修正  $value = str_replace(\u0026#39;app/\u0026#39;, \u0026#39;App/\u0026#39;, $value); $value = str_replace(\u0026#39;/\u0026#39;, \u0026#39;\\\\\u0026#39;, $value); return $value; }, $files ); // ModelからTable名を取得  $modelTables = []; foreach ($modelFiles as $value) { $model = app()-\u0026gt;make($value); $modelTables[] = $model-\u0026gt;getTable(); } // DBからテーブルを取得  $dbTables = DB::select(\u0026#39;show tables;\u0026#39;); $dbTables = array_reduce( array_map(function ($table) { return array_values((array) $table); }, $dbTables), \u0026#39;array_merge\u0026#39;, [] ); // DBとModelの差分を取得  $modelOnlys = array_diff($modelTables, $dbTables); $dbOnlys = array_diff($dbTables, $modelTables); $this-\u0026gt;info(\u0026#39;##################################################\u0026#39;); $this-\u0026gt;info(\u0026#39;Laravel Model Use Table\u0026#39;); if (count($modelTables) == 0) { $this-\u0026gt;info(\u0026#39;Nothing!!\u0026#39;); } else { $this-\u0026gt;info(\u0026#39;Count:\u0026#39; . count($modelTables)); } foreach ($modelTables as $model) { $this-\u0026gt;comment($model); } $this-\u0026gt;info(\u0026#39;\u0026#39;); $this-\u0026gt;info(\u0026#39;##################################################\u0026#39;); $this-\u0026gt;info(\u0026#39;Laravel Model Only\u0026#39;); if (count($modelOnlys) == 0) { $this-\u0026gt;info(\u0026#39;Nothing!!\u0026#39;); } else { $this-\u0026gt;info(\u0026#39;Count:\u0026#39; . count($modelOnlys)); } foreach ($modelOnlys as $model) { $this-\u0026gt;comment($model); } $this-\u0026gt;info(\u0026#39;\u0026#39;); $this-\u0026gt;info(\u0026#39;##################################################\u0026#39;); $this-\u0026gt;info(\u0026#39;Laravel Model Not Exists Tables\u0026#39;); if (count($dbOnlys) == 0) { $this-\u0026gt;info(\u0026#39;Nothing!!\u0026#39;); } else { $this-\u0026gt;info(\u0026#39;Count:\u0026#39; . count($dbOnlys)); } foreach ($dbOnlys as $table) { $this-\u0026gt;comment($table); } $this-\u0026gt;info(\u0026#39;##################################################\u0026#39;); } private function getFileList($dir) { $iterator = new RecursiveDirectoryIterator($dir); $iterator = new RecursiveIteratorIterator($iterator); $list = array(); foreach ($iterator as $fileinfo) { if ($fileinfo-\u0026gt;isFile()) { $list[] = $fileinfo-\u0026gt;getPathname(); } } return $list; } }   実行 実際に実行してみます。\nphp artisan command:UnuseRoute 実行すると下記のようにLaravelのModelにしかないものとLaravelのModelにないTableが出力されます。\n################################################## Laravel Model Use Table Count:1 sample ################################################## Laravel Model Only Nothing!! ################################################## Laravel Model Not Exists Tables Count:1 sample_bk ################################################## これでLaravelでは使用していないテーブルを特定することが可能です。\n","description":"Laravelで使用していないModel, DBのテーブルを特定するコマンドを自作しました。リファクタの時に役立ちます！","id":260,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】使用していないModel, DBのテーブルを特定するコマンドを自作","uri":"https://c-a-p-engineer.github.io/tech/2022/09/14/laravel-unuse-table/"},{"content":"【GitHub】Markdown でブロックをハイライトにする方法 GitHub 上の Markdown でブロックをハイライトにする方法メモ\nブロックハイライト 現在は Note, Warning にのみ対応している模様です。\n試しに　Error とやってみましたが色は変わりませんでした。\n1 2 3 4 5 6 7 8  \u0026gt; **Note** \u0026gt; This is a note \u0026gt; **Warning** \u0026gt; This is a warning \u0026gt; **Error** \u0026gt; This is a Error   以下のようになります。\n参考  [Markdown] An option to highlight a \u0026quot;Note\u0026quot; and \u0026quot;Warning\u0026quot; using blockquote (Beta) · Discussion #16925 · community/community  ","description":"GitHub 上の Markdown でブロックをハイライトにする方法メモ","id":261,"section":"tech","tags":["GitHub","GitHub Markdown"],"title":"【GitHub】Markdown でブロックをハイライトにする方法","uri":"https://c-a-p-engineer.github.io/tech/2022/09/14/github-markdown-note-warning/"},{"content":"【GitHub】GitHub 上の Markdown で表示、非表示を切り替える開閉ボタンを使用する GitHub 上の Markdown で表示、非表示を切り替える開閉ボタンを使用する\n開閉ボタン details に囲まれた部分が非表示になります。\nsummary がボタンになります。\n1 2 3 4  \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;Click!!\u0026lt;/summary\u0026gt; Open!! \u0026lt;/details\u0026gt;   以下のようになります。\n ","description":"GitHub 上の Markdown で表示、非表示を切り替える開閉ボタンを使用する。","id":262,"section":"tech","tags":["GitHub","GitHub Markdown"],"title":"【GitHub】Markdown で表示、非表示を切り替える開閉ボタンを使用する","uri":"https://c-a-p-engineer.github.io/tech/2022/09/14/github-markdown-expand/"},{"content":"【Linux】ShellでログインしたらSlack通知を行うようにする LinuxのShellでログインしたらSlack通知を行うようにする。\nこれをすることによって誰がログインしたかをSlack上で記録できます。\nSlack の用意 以下の Slack アプリの Incoming Webhook を利用します。\n Incoming Webhook  Webhook URL を取得します。\nSlack通知用のシェルを作る Slack通知用のシェルを作ってみます。\nログインユーザを取得してSlackに通知するという内容です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash set -eu # Slack Post Json slackPostJson() { USERNAME=$(whoami) cat \u0026lt;\u0026lt;EOF { \u0026#34;blocks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;section\u0026#34;, \u0026#34;text\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;mrkdwn\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;*Login!!* UserName:${USERNAME}\u0026#34; } } ] } EOF } curl -i -H \u0026#34;Content-type: application/json\u0026#34; -s -S -X POST -d \u0026#34;$(slackPostJson)\u0026#34; \u0026#34;https://hooks.slack.com/services/XXXXXXXXXXXXXXXXXXXXXXXXXX\u0026#34;   実行すると通知が届きます。\nsh slack.sh Dockerで試してみる  作ったシェルをDockerにコピー  docker cp slack.sh [コンテナ名]:/etc/profile.d/slack.sh ログイン\nログインします。  docker exec -it [コンテナ名] /bin/bash --login --login を指定してログインシェルを起動します。\n参考  Slackに通知する用シェルスクリプト - Qiita bash - Dockerコンテナにログインしても.bash_profileで設定している環境変数が反映されない - スタック・オーバーフロー  ","description":"LinuxのShellでログインしたらSlack通知を行うようにする。これをすることによって誰がログインしたかをSlack上で記録できます。","id":263,"section":"tech","tags":["Linux"],"title":"【Linux】ShellでログインしたらSlack通知を行うようにする","uri":"https://c-a-p-engineer.github.io/tech/2022/09/13/linux_login_shell_slack/"},{"content":"【Laravel】バージョンを指定してインストールする Laravelでバージョンを指定してインストールするためのメモ\nLaravelをインストールする方法 以下の方法だとLaravelの最新バージョンをダウンロードします。\nInstallation - Laravel - The PHP Framework For Web Artisans\ncomposer create-project laravel/laravel example-app Laravel バージョン指定インストール方法 以下のコマンドだとLaravelの9.2でパッチバージョンが最新バージョンのものがインストールされます。\ncomposer create-project \u0026quot;laravel/laravel=9.0.*\u0026quot; laravel.9.0 以下の方法だとLaravel9のマイナーバージョンが最新のバージョンをインストールしてくれます。\ncomposer create-project \u0026quot;laravel/laravel=9.2.*\u0026quot; laravel.9.2 以下のような指定の方法も可能です。\n違うものが入るようにLaravel8を指定しています。\ncomposer create-project \u0026quot;laravel/laravel=8.*\u0026quot; laravel.8 * を使用することによって該当の部分の最新のものをダウンロードします。\ncomposer create-project \u0026quot;laravel/laravel=[メジャーバージョン.マイナーバージョン.パッチバージョン]\u0026quot; [フォルダ名] Laravel バージョン確認 インストールしたらバージョンを確認してみましょう。\nphp artisan --version 以下のように出力されます。\nLaravel Framework 9.29.0 ※Laravel Framework のバージョンが出てくるので指定したバージョンと微妙に異なります。\n","description":"Laravelでバージョンを指定してインストールするためのメモ","id":264,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】バージョンを指定してインストールする","uri":"https://c-a-p-engineer.github.io/tech/2022/09/12/laravel-install-version/"},{"content":"【Linux】コマンドを繰り返してくれる「watch」 Linux上でコマンドを繰り返して欲しい時に使用する watchコマンド。\nたとえば dateコマンドを実行してリアルタイムにLinux上の時刻を表示ができます。\nwatch の使い方 使い方は簡単で watch の後に繰り返したいコマンドを指定するだけです。\nwatch [コマンド] 1秒ごとに date コマンドを実行する場合はいかのようになります。\n-n の間隔指定がない場合は2秒間隔で実行します。\nwatch -n 1 date オプション  -t watch コマンドの実行間隔などのヘッダー情報を表示しない -e エラー時（実行したコマンドがエラーコード0以外で終了したとき）は watchコマンドも終了する -b エラー時にビープ音をならす -d 直前の実行結果と変化した箇所をハイライトにする  -d=permanent のオプションで実行すると初回から変化した箇所をハイライトにする   -c 色表示に対応してくれる -g 実行結果が変化したら watch コマンドを終了する -n 秒数 実行間隔を秒数で指定する（設定できる最小値と最小間隔は0.1秒） -p 厳密な秒数でコマンドを実行 -x 指定したコマンドを exec コマンドで実行する（指定がない場合は sh -c で実行）  応用 コマンド中にワイルドカードやパイプを使用する場合 コマンド中にワイルドカードやパイプを使用する場合はダブルクォーテーションでコマンドを囲う必要があります。\nwatch -n1 \u0026quot;ls -al *.txt\u0026quot; エスケープする ダブルクォーテーションでコマンドを囲った際にコマンド内でダブルクォーテーションを使用したい際はエスケープをする必要があります。\nwatch -n1 \u0026quot;ls -al \\\u0026quot;hoge.txt\\\u0026quot;\u0026quot; コマンドに色をつける ls コマンド を色つけする際に -c のオプションが必要になります。\nwatch -n1 -c ls -al --color 参考  watch コマンド | コマンドの使い方(Linux) | hydroculのメモ  ","description":"Linux上でコマンドを繰り返して欲しい時に使用する watch コマンド。たとえば date コマンドを実行してリアルタイムにLinux上の時刻を表示ができます。","id":265,"section":"tech","tags":["Linux","Linuxコマンド"],"title":"【Linux】一定間隔でコマンドを繰り返し実行する「watch」","uri":"https://c-a-p-engineer.github.io/tech/2022/09/07/linux-watch/"},{"content":"【GoLang】クロスコンパイルさせる方法 Go でクロスコンパイルさせる方法\nサンプルコード 1 2 3 4 5 6 7  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World\u0026#34;) }   通常のビルドコマンド 実行環境用のビルドを行うコマンドです。\ngo build [ビルドするファイル名] go build hello.go このビルドを行うと実行環境用のコンパイルが走ります。\n名前を付けてビルド go build -o [出力したいファイル名] [ビルドするファイル名] go build -o sample hello.go クロスコンパイルをしてみる 対応OS確認 Goのクロスコンパイルが可能な一覧です。\ngo tool dist list Windows 64bit Windows用にコンパイルします。\nGOOS=windows GOARCH=amd64 go build -o hello.exe hello.go ファイル名を .exe を付け忘れないようにしてください。\nLinux x86_64 Linux x86_64用にコンパイルします。\nGOOS=linux GOARCH=arm64 go build -o hello-linux,arm hello.go 現在の環境を確認 現在の GOOS,GOARCH を確認するには以下のコマンドで環境変数を確認できます。\ngo env 参考  go command - cmd/go - Go Packages  ","description":"Go でクロスコンパイルさせる方法","id":266,"section":"tech","tags":["GoLang"],"title":"【GoLang】クロスコンパイルさせる方法","uri":"https://c-a-p-engineer.github.io/tech/2022/09/05/go-build/"},{"content":"電源プラグに直差し可能な Wi-Fi 中継機 WEX-1166DHPS 電源プラグに直差し可能な Wi-Fi 中継機 WEX-1166DHPS\n製品ページ WEX-1166DHPS : Wi-Fi中継機 : AirStation | バッファロー\nマニュアル 各種マニュアルが用意されているので説明書が紛失しても安心。\nWEX-1166DHPS : 各種マニュアル\n僕はこのあたりの動画に大分救われました。\n アプリ 設定用のスマートフォン用アプリがあるので設定が簡単にできます。\nAndroid\niPhone\nレビュー LANポート LANポートが1つだけですがあるため有線機器も接続が可能になっています。\nそのためWi-Fi機能がない機器でも有線接続して使用が可能です。\n電源プラグに直挿し 電源プラグに直挿しが可能！\nケーブル不要でだいぶスッキリします。\nコンセントが横並びの場合は干渉する可能性があるためお気をつけてください。\n速度 2.4Ghz, 5Ghz どちらにも対応していて今のところ不満ない速度で動いていますが親機に繋ぐ方が早かったです。\n設定 こういった機器に慣れていないと少々手間かとは思います。\n動画が出ているので動画を見つつやるのが良いかと思います。\n","description":"電源プラグに直差し可能な Wi-Fi 中継機 WEX-1166DHPS","id":267,"section":"tech","tags":["ガジェット"],"title":"電源プラグに直差し可能な Wi-Fi 中継機 WEX-1166DHPS","uri":"https://c-a-p-engineer.github.io/tech/2022/08/31/wex-1166dhps/"},{"content":"【Laravel】使用していないController, Methodを特定するコマンドを自作 Laravelで使用していないController, Methodを特定するコマンドを自作しました。\nリファクタの時に役立ちます！\n確認環境 Laravel 5-8 の環境で確認をしております。\nLaravel9 からは route:list の出力形式が変わったため対応できておりません。\n前準備 テスト用にControllerを作成します。\n1 2  php artisan make:controller TestController --api php artisan make:controller Test2Controller --api   ルートに追加\n1  Route::get(\u0026#39;test\u0026#39;, \u0026#39;App\\Http\\Controllers\\TestController@index\u0026#39;);   コマンド作成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162  \u0026lt;?php namespace App\\Console\\Commands; use Illuminate\\Console\\Command; use RecursiveDirectoryIterator; use RecursiveIteratorIterator; class UnuseRoute extends Command { /** * The name and signature of the console command. * * @var string */ protected $signature = \u0026#39;command:UnuseRoute\u0026#39;; /** * The console command description. * * @var string */ protected $description = \u0026#39;Unuse Route List\u0026#39;; const DOMAIN = \u0026#39;Domain\u0026#39;; const METHOD = \u0026#39;Method\u0026#39;; const URI = \u0026#39;URI\u0026#39;; const NAME = \u0026#39;Name\u0026#39;; const ACTION = \u0026#39;Action\u0026#39;; const MIDDLEWARE = \u0026#39;Middleware\u0026#39;; const CONTROLLER_EXCLUDE_METHOD = [ \u0026#39;__construct\u0026#39;, \u0026#39;__call\u0026#39;, \u0026#39;middleware\u0026#39;, \u0026#39;getMiddleware\u0026#39;, \u0026#39;callAction\u0026#39;, \u0026#39;authorize\u0026#39;, \u0026#39;authorizeForUser\u0026#39;, \u0026#39;authorizeResource\u0026#39;, \u0026#39;dispatchNow\u0026#39;, \u0026#39;dispatchSync\u0026#39;, \u0026#39;validateWith\u0026#39;, \u0026#39;validate\u0026#39;, \u0026#39;validateWithBag\u0026#39;, ]; /** * Create a new command instance. * * @return void */ public function __construct() { parent::__construct(); } /** * Execute the console command. * * @return mixed */ public function handle() { exec(\u0026#39;php artisan route:list\u0026#39;, $result); $result = array_slice($result, 3, count($result) - 4); // Domain, Method, URI, Name, Action, Middleware  $routes = []; foreach ($result as $value) { $route = explode(\u0026#39;| \u0026#39;, $value); $route = array_map(\u0026#39;trim\u0026#39;, $route); $routes[] = [ self::DOMAIN =\u0026gt; $route[1], self::METHOD =\u0026gt; $route[2], self::URI =\u0026gt; $route[3], self::NAME =\u0026gt; $route[4], self::ACTION =\u0026gt; $route[5], self::MIDDLEWARE =\u0026gt; trim(str_replace(\u0026#39;|\u0026#39;, \u0026#39;\u0026#39;, $route[6])), ]; } // Closure を除外  $routes = array_filter($routes, function ($value) { if (($value[self::ACTION] ?? null) == \u0026#39;Closure\u0026#39;) { return false; } return true; }); // Controllerファイル群取得  $files = $this-\u0026gt;getFileList(app_path(\u0026#39;Http/Controllers\u0026#39;)); $actions = array_column($routes, self::ACTION); $controllers = []; foreach ($actions as $action) { $controller = explode(\u0026#39;@\u0026#39;, $action); if (is_null($controller[1] ?? null)) { continue; } $controllers[$controller[0]][] = $controller[1]; } $controllerFiles = array_map( function ($value) { // ファイルパスから base_path を削除  $value = str_replace(base_path() . \u0026#39;/\u0026#39;, \u0026#39;\u0026#39;, $value); // 拡張子を削除  $filepath = pathinfo($value); $value = $filepath[\u0026#39;dirname\u0026#39;] . \u0026#39;/\u0026#39; . $filepath[\u0026#39;filename\u0026#39;]; // ファイルパスを namespace に修正  $value = str_replace(\u0026#39;app/\u0026#39;, \u0026#39;App/\u0026#39;, $value); $value = str_replace(\u0026#39;/\u0026#39;, \u0026#39;\\\\\u0026#39;, $value); return $value; }, $files ); // Controllerに無いが定義されている（vendor系など  $this-\u0026gt;info(\u0026#39;App Controller not defined\u0026#39;); foreach (array_diff(array_keys($controllers), $controllerFiles) as $value) { $this-\u0026gt;comment($value); } // 使用されていないControllerファイル  $this-\u0026gt;info(PHP_EOL.\u0026#39;Unuse Route Contorller Files\u0026#39;); foreach (array_diff($controllerFiles, array_keys($controllers)) as $value) { $this-\u0026gt;comment($value); } $this-\u0026gt;info(PHP_EOL.\u0026#39;Unuse Route Controller Methods\u0026#39;); $usedControllers = array_intersect($controllerFiles, array_keys($controllers)); foreach ($usedControllers as $value) { $controller = app()-\u0026gt;make($value); // 該当のControllerのメソッドを取得  $methods = get_class_methods($controller); // Controllerの特定のメソッドを除外  $methods = array_diff($methods, self::CONTROLLER_EXCLUDE_METHOD); // route で定義されているメソッドを除外  $methods = array_diff($methods, $controllers[$value]); if (count($methods) \u0026gt; 0) { $this-\u0026gt;info($value); $this-\u0026gt;comment(implode(\u0026#39;,\u0026#39;, $methods)); } } return 0; } private function getFileList($dir) { $iterator = new RecursiveDirectoryIterator($dir); $iterator = new RecursiveIteratorIterator($iterator); $list = array(); foreach ($iterator as $fileinfo) { if ($fileinfo-\u0026gt;isFile()) { $list[] = $fileinfo-\u0026gt;getPathname(); } } return $list; } }   実行 実際に実行してみます。\nphp artisan command:UnuseRoute 実行すると下記のように使用していないController, Methodが出力されます。\nApp Controller not defined Laravel\\Sanctum\\Http\\Controllers\\CsrfCookieController Unuse Route Contorller Files App\\Http\\Controllers\\Test2Controller Unuse Route Controller Methods App\\Http\\Controllers\\TestController store,show,update,destroy ","description":"Laravelで使用していないController, Methodを特定するコマンドを自作しました。リファクタの時に役立ちます！","id":268,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】使用していないController, Methodを特定するコマンドを自作","uri":"https://c-a-p-engineer.github.io/tech/2022/08/29/laravel-unuse-route/"},{"content":"【AWS】EC2 インスタンスの情報を取得する方法 EC2のインスタンスに入っている時に簡単にインスタンス情報を取得する方法。\nインスタンスにログインしていてインスタンス情報を確認する時に有用です。\n今まで一々AWSの画面を確認していました…\n インスタンスメタデータの取得 - Amazon Elastic Compute Cloud  インスタンスIDを取得 サンプルとしてインスタンスIDの取得方法。\n$ curl 169.254.169.254/latest/meta-data/instance-id/ i-XXXXXXXX 各種データの取得 他に確認できる一覧項目です。\n各種値の説明はこちら\n インスタンスメタデータのカテゴリ - Amazon Elastic Compute Cloud  $ curl http://169.254.169.254/latest/meta-data/ ami-id ami-launch-index ami-manifest-path block-device-mapping/ events/ hostname iam/ instance-action instance-id instance-type local-hostname local-ipv4 mac metrics/ network/ placement/ profile public-hostname public-ipv4 public-keys/ reservation-id security-groups services/ 参考  インスタンスメタデータの取得 - Amazon Elastic Compute Cloud インスタンスメタデータのカテゴリ - Amazon Elastic Compute Cloud  ","description":"EC2 のインスタンスに入っている時に簡単にインスタンス情報を取得する方法","id":269,"section":"tech","tags":["AWS","AWS EC2"],"title":"【AWS】EC2 インスタンスの情報を取得する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/08/19/aws-ec2-metadata/"},{"content":"【キーボード】Keyball61 を使ってみた 自作キーボードの Keyball61 を購入してみて使ってみた感想。\nkeyball61 構成 自作キーボードなのですがフリマサイト見つけて今回組み立て済みのものを購入させていただきました。\n（本当は自分で作ってみたいのですが小さな子供が家に居るので\n  Keyball61 LED Keyball61 - Shirogane Lab\n  Kailh Box サイレントメカニカルキーボードスイッチ\n  キーキャップ（MXスイッチ対応）\n  34mm トラックボール\n  TRSS ケーブル（キーボード間をつなげるケーブル）※付属のものを使用\n  Type-Cケーブル（キーボードとPCをつなげる）※家にあったものを使用\n  使ってみての感想  今まで人指大玉トラックボールを使用していたので結構違和感があり親指操作にはそれなりに慣れが必要。 キーボードとマウスが一体になっているためマウス用のレイヤーに切り替えてのクリック操作など独特の癖がある\n→REMAPを使用してのキーマップ変更で色々出来るので沼に浸かるのが楽しくなる。 キー数も少なく省スペースでとても良い。（元々HHKBを使っているのでフルキーボード派だと慣れるのに時間が掛かると思われる。  KyeMap REMAP を使って簡単にキーボードのマッピングを変更することが可能。\nREMAPの使い方についてはこちらを参照してください。\n（初心者編）Remapを使ってキーマップを書き換えよう - 自作キーボード温泉街の歩き方\nKeyball61のREMAPのサンプルです。\nKeyball61 - REMAP\n特殊キーコード keyball61 にはトラックボールがついているのでトラックボールの設定など特殊なキーコードがあります。\nkeyball61 - Special keycodes\n   HEX キーコード 説明     0x5DA5 KBC_RST キーボール構成をリセット   0x5DA6 KBC_SAVE キーボール構成をEEPROMに永続化する   0x5DA7 CPI_I100 トラックボールの感度を100上げる(CPI)(max 12000)   0x5DA8 CPI_D100 トラックボールの感度を1,000上げる(CPI) (min 100)   0x5DA9 CPI_I1K トラックボールの感度を100下げる(CPI)(max 12000)   0x5DAA CPI_D1K トラックボールの感度を1,000下げる(CPI) (min 100)   0x5DAB SCRL_TO スクロールモードにトグルで切り替える   0x5DAC SCRL_MO 押下している間スクロールモードを有効にする   0x5DAD SCRL_DVI スクロール感度を上げる (max 7 = 1/128)   0x5DAE SCRL_DVD スクロール感度を下げる (min 0 = 1/1)    参考  Git - git-cherry-pick Documentation Keyball61 - REMAP  ","description":"自作キーボードの Keyball61 を購入してみて使ってみた感想","id":270,"section":"tech","tags":["キーボード"],"title":"【キーボード】Keyball61 を使ってみた","uri":"https://c-a-p-engineer.github.io/tech/2022/08/14/keyboard-keyball61/"},{"content":"【Mysql】テーブル更新時間を確認する Mysql でテーブル更新時間を確認する方法メモ。\nMysql で該当のテーブルが使われているか確認したいと思い、更新されている値を取得する方法を探しました。\nパーティションの変更時間を利用する パーティションには作成時間、変更時間、チェック時間が保存されています。\nそれを利用することで最終更新時間を取得できます。\n※エンジンによってできないようなのでご注意ください。\n1 2 3 4 5 6 7 8 9 10  SELECTTABLE_NAME-- テーブル名 ,PARTITION_NAME-- パーティション名 ,CREATE_TIME-- パーティション 作成時間 ,UPDATE_TIME-- パーティション 更新時間 ,CHECK_TIME-- パーティション チェック時間 FROMINFORMATION_SCHEMA.PARTITIONSWHERETABLE_SCHEMA=\u0026#39;database_name\u0026#39;;  参考  MySQL :: MySQL 8.0 リファレンスマニュアル :: 26.21 INFORMATION_SCHEMA PARTITIONS テーブル  ","description":"Mysql でテーブル更新時間を確認する方法メモ","id":271,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】テーブル更新時間を確認する","uri":"https://c-a-p-engineer.github.io/tech/2022/08/12/mysql-update-log/"},{"content":"【Git】複数のコミットをcherry-pickする方法 Gitで複数のコミットをcherry-pickする方法メモ\n通常のcherry-pick 通常のcherry-pick\ngit cherry-pick {コミットハッシュ} 複数のコミットのcherry-pick 複数のコミットのcherry-pick\ngit cherry-pick {始点コミットハッシュ}..{終点コミットハッシュ} .. で繋ぐとその間のcommitがcherry-pickされます。\n注意\n始点から終点の変更を取り込むため、始点の変更は取り込まれません。\n以下のようなコミットがある時\n commit-A commit-B commit-C  以下のようにやった場合は commit-B, commit-C しか cherry-pick されません。\ngit cherry-pick {commit-A}..{commit-C}   参考  Git - git-cherry-pick Documentation  ","description":"Gitで複数のコミットをcherry-pickする方法メモ","id":272,"section":"tech","tags":["Git"],"title":"【Git】複数のコミットをcherry-pickする方法","uri":"https://c-a-p-engineer.github.io/tech/2022/08/11/git-cherry-pick-multi/"},{"content":"【Laravel】Command を Contoroller や Command から実行する方法 Laravel で Command を Contoroller や Command から実行する方法メモ。\n諸事情で Controller や 別Command から実行するためのメモです。\nCommand 呼び出し方法 以下の3つの方法があります。\n exec() $this-\u0026gt;call() Artisan::call()  Artisan::call() Laravelの公式に記載されています。\nLaravel 8.x Artisanコンソール#プログラムからのコマンド実行\nControllerやCommandから実行することが可能で返り値を受け取ることもできます。\nこの方法を利用すると呼び出された側のコメントなどの出力がされません。\n1 2 3 4 5 6  use \\Artisan; $result = Artisan::call(\u0026#39;command:sample\u0026#39;, [ \u0026#39;--argument\u0026#39; =\u0026gt; \u0026#39;hoge\u0026#39;, ]); dd($result);   $this-\u0026gt;call() Laravelの公式に記載されています。\nLaravel 8.x Artisanコンソール#他コマンドからのコマンド呼び出し\nCommandからのみしか利用ができません。\nこの方法を利用すると呼び出された側のコメントなどの出力がされます。\n1 2 3 4  $result = $this-\u0026gt;call(\u0026#39;command:sample\u0026#39;, [ \u0026#39;--argument\u0026#39; =\u0026gt; \u0026#39;hoge\u0026#39;, ]); dd($result);   exec exec はコマンドを実行する関数です。\nPHP: exec - Manual\nただし、そのため引数を適当に渡したりするとOSコマンドインジェクションなどの危険性があるのでオススメしません。\nまた exec の場合はLaravelを1から実行するため他の方法と比べて遅くなります。\n1  exec(\u0026#39;php artisan command:sample --argument=hoge\u0026#39;)   ","description":"Laravel で Command を Contoroller や Command から実行する方法メモ","id":273,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】Command を Contoroller や Command から実行する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/08/08/laravel-command-exec/"},{"content":"【Laravel】Controller を Controller や Command から実行する方法 Laravel で Controller を Controller や Command から実行する方法メモ。\n諸事情で別 Controller や Command から実行するためのメモです。\n実行対象のController 実際に実行するControllerを作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; class UserController extends Controller { public function store(Request $request) { $name = $request-\u0026gt;name; // TODO 処理  } }   実際に実行してみる 試しに Controller から Controller を実行してみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; class SampleController extends Controller { public function store(Request $request) { // UserContorlller を実行  $userController = app()-\u0026gt;make(\u0026#39;App\\Http\\Controllers\\UserController\u0026#39;); $userController-\u0026gt;store(new Request([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;test\u0026#39; ]));  } }   ","description":"Laravel で Controller を Controller や Command から実行する方法メモ","id":274,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】Controller を Controller や Command から実行する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/08/07/laravel-controler-exec/"},{"content":"【VSCode】Typo 防止のための 「Code Spell Checker」 VSCodeにTypo防止のための Code Spell Checker を使う\n導入理由 typoチェックに関してCIに入れようかと考えましたが、それを行なうと開発中にTypoチェックすることなくプルリクなどのタイミングでチェックが走ってから修正。\nこの流れが大変面倒だなと感じたため、エディタに入れた方が効率的だという考えに至りました。\nCode Spell Checker Code Spell Checker は英語のスペルチェックを行ってくれます。\n他にもドイツ語などのバージョンがあります。\nCode Spell Checker\n導入したらスペルミスに青い波線が付くようになります。\n候補なども出してくれます。\n単語登録 プロジェクト内としては正しい単語でも青い波線がでるので、解決するには単語登録をする必要があります。\n 波線をクリック クイックフィックス Add:\u0026quot;XXXXX\u0026quot; to workspace settings or Add:\u0026quot;XXXXX\u0026quot; to user settings  参考  Code Spell Checker  ","description":"Typo 防止のための 「Code Spell Checker」を使う","id":275,"section":"tech","tags":["Visual Studio Code"],"title":"【VSCode】Typo 防止のための 「Code Spell Checker」","uri":"https://c-a-p-engineer.github.io/tech/2022/07/30/vscode-spell-checker/"},{"content":"【Docker】ブラウザ上で Docker を実行できる 「Play with Docker」を使ってみる ブラウザ上で Docker を実行できる 「Play with Docker」を使ってみる\nPlay with Docker\nローカルで一々試すのが面倒な時やパワーがないマシン、タブレットやスマホでも使えそうな感じです。\nPlay with Docker で出来ること  Docker git ssh 動作しているコンテナへのWebアクセス  セッションに4時間という制限はありますが、Dockerの動作確認だけではなく簡単な開発など出来そうです。\nログイン ログインには Docker Hub のアカウントが必要です。\nログイン後、左上に制限時間が出てきます4時間でセッションが自動的に切れます。\nインスタンスを作成 左サイドバーの「+ ADD NEW INSTANCE」をクリックするとインスタンスが作成されます。\nHello Docker Docker の Hello,World を試してみます。\n右、下部のコンソール部分に docker run hello-world と入力してください。\nhello-worldコンテナを実行されます。\n実行後に docker ps -a と入力すると hello-world コンテナをダウンロードして来て実行したのがわかります。\nDocker Compose してみる 試しに Docker Compose で Wordpress 環境を作ってみます。\n コンソール部分に touch docker-compose.yml でファイルを作ります。 右画面中央の EDITOR をクリック 作成した docker-compose.yml を選択 以下の内容を編集して保存（クィックスタート: Compose と WordPress  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  version:\u0026#39;3\u0026#39;services:db:image:mysql:5.7volumes:- db_data:/var/lib/mysqlrestart:alwaysenvironment:MYSQL_ROOT_PASSWORD:somewordpressMYSQL_DATABASE:wordpressMYSQL_USER:wordpressMYSQL_PASSWORD:wordpresswordpress:depends_on:- dbimage:wordpress:latestports:- \u0026#34;8000:80\u0026#34;restart:alwaysenvironment:WORDPRESS_DB_HOST:db:3306WORDPRESS_DB_USER:wordpressWORDPRESS_DB_PASSWORD:wordpressvolumes:db_data:   コンソール部分に docker-compose up で環境が構築されます。 環境が出来ると右上部の IP の部分に 8000 と表示されポートが開かれ、クリックすると作ったWordPressの環境へ接続できます。  SSH接続 右上部の「SSH」の欄からSSHコマンドが表示されています。\nそちらを使えばSSH出来る模様です。\nエラーが出た際は ssh-keygen を行えば入れるとのこと。\n Unable to SSH into PWD Instance #285  なお私は何故か入れたり、入れなかったりしました…\nショートカット Play With Docker で普通にコピー \u0026amp; ペーストが出来ないのでお気をつけください。\nコピー  Windows  Ctrl + Insert   Mac  command + c    ペースト  Windows  Shift + Insert   Mac  command + v    コンソール画面最大化  Windows  alt + enter   Mac  option + enter    ソース Play With Docker のソースコードは以下で公開されています。\nPlay with Docker\n参考  Play with Docker Play with Docker  ","description":"ブラウザ上で Docker を実行できる 「Play with Docker」を使ってみる","id":276,"section":"tech","tags":["ツール","Docker"],"title":"【Docker】ブラウザ上で Docker を実行できる 「Play with Docker」を使ってみる","uri":"https://c-a-p-engineer.github.io/tech/2022/07/26/play-with-docker/"},{"content":"【GitHub】GitHub Actions で Dockle で Docker Image をチェックする GitHub Actions で Dockle で Docker Image をチェックする\nDockle Dockle は Docker のコンテナイメージのセキュリティチェックツールです。\n goodwithtech/dockle: Container Image Linter for Security, Helping build the Best-Practice Docker Image, Easy to start  Dockle CIS ベンチマーク Dockleでチェックできるセキュリティ項目は以下のとおりです。\ndocker / docker-bench-security\n Create a user for the container（コンテナのユーザーを作成します） ✅ Use trusted base images for containers（コンテナに信頼できるベースイメージを使用する） - Do not install unnecessary packages in the container（不要なパッケージをコンテナにインストールしないでください） - Scan and rebuild the images to include security patches（イメージをスキャンして再構築し、セキュリティパッチを含めます） - Enable Content trust for Docker （Dockerのコンテンツ信頼を有効にする） ✅ Add HEALTHCHECK instruction to the container image（コンテナ画像にHEALTHCHECK命令を追加します） ✅ Do not use update instructions alone in the Dockerfile（Dockerfileで更新手順を単独で使用しないでください） ✅ Remove setuid and setgid permissions in the images（画像のsetuidおよびsetgid権限を削除します） ✅ Use COPY instead of ADD in Dockerfile（DockerfileでADDの代わりにCOPYを使用する） ✅ Do not store secrets in Dockerfiles（Dockerfilesにシークレットを保存しないでください） ✅ Install verified packages only （検証済みパッケージのみをインストールします）-  GitHub Actions Dokle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  name:Docker Checkon:pushjobs:dockle:name:Dockle Container Analysisruns-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v3- name:Run Dockleuses:erzz/dockle-action@v1with:image:php:8.1.6-fpm-bullseye# チェックするイメージ名  結果は以下のように出力されます。\n内容がわからない時は以下を参照してみてください。\nCheckpoint Summary\n1 2 3 4  Error: .//Dockerfile:5 DL3008 warning:Pin versions in apt get install. Instead of `apt-get install \u0026lt;package\u0026gt;` use `apt-get install \u0026lt;package\u0026gt;=\u0026lt;version\u0026gt;`Error: .//Dockerfile:5 DL3015 info:Avoid additional packages by specifying `--no-install-recommends`Error: .//Dockerfile:18 SC2046 warning:Quote this to prevent word splitting.Error: .//Dockerfile:28 DL4006 warning:Set the SHELL option -o pipefail before RUN with a pipe in it. If you are using /bin/sh in an alpine image or if your shell is symlinked to busybox then consider explicitly setting your SHELL to /bin/ash, or disable this check  参考  goodwithtech/dockle: Container Image Linter for Security, Helping build the Best-Practice Docker Image, Easy to start docker / docker-bench-security dockle-action · Actions · GitHub Marketplace Checkpoint Summary  ","description":"GitHub Actions で Dockle で Docker Image をチェックする","id":277,"section":"tech","tags":["GitHub","Docker"],"title":"【GitHub】GitHub Actions で Dockle で Docker Image をチェックする","uri":"https://c-a-p-engineer.github.io/tech/2022/07/18/github-actions-dockle/"},{"content":"【GitHub】GitHub Actions で Hadolint で Dockerfile をチェックする GitHub Actions で Hadolint で Dockerfile をチェックする\nHadolint Hadolint という Docker の lint ツールです。\n hadolint/hadolint: Dockerfile linter, validate inline bash, written in Haskell  Hadolint CIS ベンチマーク Hadolintでチェックできるセキュリティ項目は以下のとおりです。\ndocker / docker-bench-security\n Create a user for the container（コンテナのユーザーを作成します） ✅ Use trusted base images for containers（コンテナに信頼できるベースイメージを使用する） - Do not install unnecessary packages in the container（不要なパッケージをコンテナにインストールしないでください） - Scan and rebuild the images to include security patches（イメージをスキャンして再構築し、セキュリティパッチを含めます） - Enable Content trust for Docker （Dockerのコンテンツ信頼を有効にする） - Add HEALTHCHECK instruction to the container image（コンテナ画像にHEALTHCHECK命令を追加します） - Do not use update instructions alone in the Dockerfile（Dockerfileで更新手順を単独で使用しないでください） ✅ Remove setuid and setgid permissions in the images（画像のsetuidおよびsetgid権限を削除します） - Use COPY instead of ADD in Dockerfile（DockerfileでADDの代わりにCOPYを使用する） ✅ Do not store secrets in Dockerfiles（Dockerfilesにシークレットを保存しないでください） - Install verified packages only （検証済みパッケージのみをインストールします）-  GitHub Actions Dokle 1 2 3 4 5 6 7 8 9 10 11 12 13 14  name:Docker Checkon:pushjobs:hadolint:name:hadolint DockerFileruns-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v3- uses:hadolint/hadolint-action@v2.0.0with:dockerfile:./Dockerfile# チェックするDockerファイル  結果は以下のように出力されます。\n内容がわからない時は以下を参照してみてください。\nRules\n1 2 3 4  Error: .//Dockerfile:5 DL3008 warning:Pin versions in apt get install. Instead of `apt-get install \u0026lt;package\u0026gt;` use `apt-get install \u0026lt;package\u0026gt;=\u0026lt;version\u0026gt;`Error: .//Dockerfile:5 DL3015 info:Avoid additional packages by specifying `--no-install-recommends`Error: .//Dockerfile:18 SC2046 warning:Quote this to prevent word splitting.Error: .//Dockerfile:28 DL4006 warning:Set the SHELL option -o pipefail before RUN with a pipe in it. If you are using /bin/sh in an alpine image or if your shell is symlinked to busybox then consider explicitly setting your SHELL to /bin/ash, or disable this check  参考  hadolint/hadolint: Dockerfile linter, validate inline bash, written in Haskell docker / docker-bench-security Rules  ","description":"GitHub Actions で Hadolint で Dockerfile をチェックする","id":278,"section":"tech","tags":["GitHub","Docker"],"title":"【GitHub】GitHub Actions で Hadolint で Dockerfile をチェックする","uri":"https://c-a-p-engineer.github.io/tech/2022/07/18/github-actions-hadolint/"},{"content":"【Docker】Dockerfile で環境変数は RUN export では設定できない Dockerfileで環境変数は RUN export では設定できない\n現象 Docker構築時に環境変数を設定する際、RUN export で環境変数を行っても反映されない\n失敗例 以下の方法では GO111MODULE を環境変数に設定しても反映されませんでした。\nFROM golang:latest RUN export GO111MODULE=on 成功例 RUN export → ENV に変更することで環境変数の設定ができました。\n1 2 3  FROMgolang:latestENV GO111MODULE on  ENV {key} {value} で設定されます。\n補足 補足としては $PATH を値に入れて既存の環境変数を入れることができます。\n1 2 3 4  FROMgolang:latestENV GOPATH $HOME/goENV PATH $PATH:$GOPATH/bin  参考  Dockerfile リファレンス#ENV  ","description":"Dockerfileで環境変数は RUN export では設定できない","id":279,"section":"tech","tags":["Docker"],"title":"【Docker】Dockerfile で環境変数は RUN export では設定できない","uri":"https://c-a-p-engineer.github.io/tech/2022/07/15/docker-run-export/"},{"content":"【Laravel】Laravel + PHPUnit で RuntimeException: A facade root has not been set. が出た時の対処方法 Laravel + PHPUnit で RuntimeException: A facade root has not been set. が出た時の対処方法メモ。\n失敗 setUp メソッドを追加してログを出すようにしました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  \u0026lt;?php namespace Tests\\Unit; use Tests\\TestCase; use Illuminate\\Support\\Facades\\Log; class ExampleTest extends TestCase { protected function setUp(): void { Log::debug(\u0026#39;Start \u0026#39; . __CLASS__);  } /** * A basic test example. * * @return void */ public function testBasicTest() { $this-\u0026gt;assertTrue(true); } }   下記のようなエラーが出ました。\nRuntimeException: A facade root has not been set. 原因 setUp 時点ではファザードの読み込みがされていないのが原因でした。\n解決方法 parent::setUp(); を setUp() に追加するだけで解決できます。\nLaravel によると setUp() には parent::setUp() , tearDown() には parent::tearDown() が必須のようです。\n Note: テストクラスに独自のsetUpメソッドを定義する場合は、親のクラスのparent::setUp()／parent::tearDown()を確実に呼び出してください。\n テスト: テストの準備 8.x Laravel\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  \u0026lt;?php namespace Tests\\Unit; use Tests\\TestCase; use Illuminate\\Support\\Facades\\Log; class ExampleTest extends TestCase { protected function setUp(): void { parent::setUp(); Log::debug(\u0026#39;Start \u0026#39; . __CLASS__);  } /** * A basic test example. * * @return void */ public function testBasicTest() { $this-\u0026gt;assertTrue(true); } }   参考  テスト: テストの準備 8.x Laravel  ","description":"Laravel + PHPUnit で RuntimeException: A facade root has not been set. が出た時の対処方法メモ","id":280,"section":"tech","tags":["GitHub"],"title":"【Laravel】Laravel + PHPUnit で RuntimeException: A facade root has not been set. が出た時の対処方法","uri":"https://c-a-p-engineer.github.io/tech/2022/07/08/laravel-phpunit-setup-facade/"},{"content":"【GitHub】Pull Request テンプレートを使用する GitHub Pull Request テンプレートを作成して使用する方法。\nこれを使用することによってPull Request作成時、項目などの記載ブレが減ります。\nテンプレートを作成する 以下のいずれかに作成すれば適用されます。\n /.github/pull_request_template.md /docs/pull_request_template.md /pull_request_template.md  僕が作成したテンプレートは下記になります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  # Pull Request \u0026lt;!-- Pull Requestのタイトル --\u0026gt; ## チケット \u0026lt;!-- チケットがあればリンク貼る --\u0026gt; ## PRタイプ \u0026lt;!-- Pull Requestの種類を選択 --\u0026gt; \u0026lt;!-- 必要なものだけ残す --\u0026gt; * 🆕新機能 * 🐛バグ対応 * 🧹リファクタリング * 📖ドキュメント整備 * 💻開発環境 * 🚄インフラ * ✅テスト ## 概要 \u0026lt;!-- Pull Request 概要・背景など --\u0026gt; ## 変更内容 \u0026lt;!-- 変更点 --\u0026gt; ## 影響範囲 \u0026lt;!-- 影響範囲 --\u0026gt; ## テスト \u0026lt;!-- テスト手順 --\u0026gt; \u0026lt;!-- テスト結果 --\u0026gt; ## その他 \u0026lt;!-- レビュワーへの注意点・相談内容・懸念点 --\u0026gt;   複数のテンプレートを使用する  複数のテンプレートを格納するディレクトリを作成。   /.github/PULL_REQUEST_TEMPLATE/  複数のテンプレートを作成します。   /.github/PULL_REQUEST_TEMPLATE/template1.md /.github/PULL_REQUEST_TEMPLATE/template2.md  Pull Requestを作成する。 Pull Request作成時にURLの末尾に ?template=template1.md を追加。 指定されたテンプレートを使用できる。  参考  リポジトリ用のプルリクエストテンプレートの作成 - GitHub Docs  ","description":"GitHub Pull Request テンプレートを作成して使用する方法。","id":281,"section":"tech","tags":["GitHub"],"title":"【GitHub】Pull Request テンプレートを使用する","uri":"https://c-a-p-engineer.github.io/tech/2022/07/07/github-pull-request-template/"},{"content":"【GitHub Actions】Flutter 各種 Build を自動化 GitHub Actions で Flutter の各種 Build を自動化してみました。\n作成したビルド対象は以下の5種類です。\n Android iOS Linux Desktop Windows Desktop Web  サンプル 以下を使用して Flutter を GitHub Actions で実行できるようにします。\nFlutter action · Actions · GitHub Marketplace\nAndoroid, Linux, Web の Build は ubuntu 上で可能なので1つにまとめることも可能です。\nわかりやすいように分割して今回はサンプル化しています。\n5行目の cache を true にしておくとキャッシュしてくれて次回以降からキャッシュがヒットすれば早くなります。\n1 2 3 4 5  - uses:subosito/flutter-action@v2with:flutter-version:\u0026#39;3.0.4\u0026#39;channel:\u0026#39;stable\u0026#39;cache:true  Android Andoroid だと Android App Bundle（aab） と Android application Package（apk） の2種類のビルドが可能です。\nflutter build appbundle → Android App Bundle（aab）\nflutter build apk → Android application Package（apk）\nAndoroidエンジニアではないので詳しくはないですが aab の形式の方が新しいようです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  name:Flutter Andoroid Buildon:[push]jobs:build-android:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v3- uses:actions/setup-java@v2with:distribution:\u0026#39;zulu\u0026#39;java-version:\u0026#39;11\u0026#39;- uses:subosito/flutter-action@v2with:flutter-version:\u0026#39;3.0.4\u0026#39;channel:\u0026#39;stable\u0026#39;cache:true- run:flutter pub get- run:flutter test- run:flutter build apk- run:flutter build appbundle# 成果物アップロード- name:artifact uploaduses:actions/upload-artifact@v2.2.0with:# 保存ファイル名（name.zip）name:andoroid# 保存するファイルpath:./build/app/outputs/# 保存期間（日）retention-days:1  iOS flutter build ipa で iOS用の実行ファイルを作れるようですが、証明書などが必要なので省きます。\nflutter build ios の場合は Xcode 用のソースを吐きます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  name:Flutter iOS Buildon:[push]jobs:build-ios:needs:testruns-on:macos-lateststeps:- uses:actions/checkout@v3- uses:subosito/flutter-action@v2with:flutter-version:\u0026#39;3.0.4\u0026#39;channel:\u0026#39;stable\u0026#39;cache:true- run:flutter pub get- run:flutter test# iOS Build- run:flutter build ios --release --no-codesign# 成果物アップロード- name:artifact uploaduses:actions/upload-artifact@v2.2.0with:# 保存ファイル名（name.zip）name:ios# 保存するファイルpath:./build/ios/# 保存期間（日）retention-days:1  Linux Desktop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  name:Flutter Linux Buildon:[push]jobs:build-linux:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v3- uses:subosito/flutter-action@v2with:flutter-version:\u0026#39;3.0.4\u0026#39;channel:\u0026#39;stable\u0026#39;cache:true- run:flutter pub get- run:flutter test- name:Flutter Linux Buildrun:|sudo apt-get update -y sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev flutter config --enable-linux-desktop flutter build linux# 成果物アップロード- name:artifact uploaduses:actions/upload-artifact@v2.2.0with:# 保存ファイル名（name.zip）name:linux# 保存するファイルpath:./build/linux/# 保存期間（日）retention-days:1  Windows Desktop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  name:Flutter Windows Buildon:[push]jobs:build-windows:runs-on:windows-lateststeps:- uses:actions/checkout@v3- uses:subosito/flutter-action@v2with:flutter-version:\u0026#39;3.0.4\u0026#39;channel:\u0026#39;stable\u0026#39;cache:true- run:flutter pub get- run:flutter test- name:Flutter Build Windowsrun:|flutter config --enable-windows-desktop flutter build windows# 成果物アップロード- name:artifact uploaduses:actions/upload-artifact@v2.2.0with:# 保存ファイル名（name.zip）name:windows# 保存するファイルpath:./build/windows/runner/Release/# 保存期間（日）retention-days:1  Web 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  name:Flutter Web Buildon:[push]jobs:build-web:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v3- uses:subosito/flutter-action@v2with:flutter-version:\u0026#39;3.0.4\u0026#39;channel:\u0026#39;stable\u0026#39;cache:true- run:flutter pub get- run:flutter test- run:flutter build web# 成果物アップロード- name:artifact uploaduses:actions/upload-artifact@v2.2.0with:# 保存ファイル名（name.zip）name:web# 保存するファイルpath:./build/web/# 保存期間（日）retention-days:1  参考  Flutter action · Actions · GitHub Marketplace  ","description":"GitHub Actions で Flutter 各種 Build を自動化してみました。","id":282,"section":"tech","tags":["GitHub","Flutter"],"title":"【GitHub Actions】Flutter 各種 Build を自動化","uri":"https://c-a-p-engineer.github.io/tech/2022/07/06/github-actions-flutter-multi-build/"},{"content":"【GitHub】GitHub Actions ファイルの存在チェック GitHub Actions でファイルの存在チェックする方法。\nファイル存在チェック オプション    変数 必須 説明 デフォルト     files ○ 存在確認するためのファイルとディレクトリ（カンマ区切り）\nglob paterns.    ignore_case x ファイル名の大文字小文字の見分け true   follow_symbolic_links x シンボリックリンクを対象にする true   allow_failure x 存在しなければエラーを出す false    サンプル package.json, LICENSE, README.md の存在をチェックする。\n存在する場合は files_exists に true、存在しない場合は false が入る。\n下記サンプルは steps.check_files.outputs.files_exists に変数が入る。\nDefining outputs for jobs - GitHub Docs\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  name:\u0026#34;File existence check\u0026#34;on:[push, pull_request]jobs:file_existence:runs-on:ubuntu-lateststeps:- name:Checkout codeuses:actions/checkout@v1- name:Check file existenceid:check_filesuses:andstor/file-existence-action@v1with:files:\u0026#34;package.json, LICENSE, README.md\u0026#34;- name:File existsif:steps.check_files.outputs.files_exists == \u0026#39;true\u0026#39;# Only runs if all of the files existsrun:echo All files exists!  参考  File Existence · Actions · GitHub Marketplace Defining outputs for jobs - GitHub Docs  ","description":"GitHub Actions でファイルの存在チェックする方法","id":283,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions ファイルの存在チェック","uri":"https://c-a-p-engineer.github.io/tech/2022/07/05/github-actions-file_exists/"},{"content":"【GitHub】GitHub Actions Debug 設定をする GitHub Actions Debug 設定を方法。\nGitHub Actions 導入時にはデバッグしやすいように入れておくのが良いでしょう。\n設定値  ACTIONS_RUNNER_DEBUG  Runnerの実行ログ   ACTIONS_STEP_DEBUG  Step毎の実行ログ    設定  導入したい Repository の Settingsを選択。 左のメニューの Secrets を指定 右上の New repository secret を選択。 ランナーの診断ロギングの有効化 Name に ACTIONS_RUNNER_DEBUG を設定。 Value に取得した true を設定。 ステップのデバッグロギングの有効化 Name に ACTIONS_STEP_DEBUG を設定。 Value に取得した true を設定。  これで GitHub Actions 上で詳細なログが出力がされます。\n参考  デバッグロギングの有効化 - GitHub Docs  ","description":"GitHub Actions Debug 設定を方法。","id":284,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions Debug 設定をする","uri":"https://c-a-p-engineer.github.io/tech/2022/07/04/github-actions-debug/"},{"content":"【GitHub】GitHub Actions Debug 設定をする  Create Release · Actions · GitHub Marketplace  tag を設定したら自動的にリリースページを作る Git に v が頭についたタグをプッシュした際に作られる公式サンプルです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  on:push:tags:- \u0026#39;v*\u0026#39;name:Create Releasejobs:build:name:Create Releaseruns-on:ubuntu-lateststeps:- name:Checkout codeuses:actions/checkout@v2- name:Create Releaseid:create_releaseuses:actions/create-release@v1env:GITHUB_TOKEN:${{ secrets.GITHUB_TOKEN }}with:tag_name:${{ github.ref }}release_name:Release ${{ github.ref }}body:|Changes in this Release - First Change - Second Changedraft:falseprerelease:false  【応用編】 master への Pull Request を merge した際に自動的にリリースページを作る たとえば develop ブランチからリリースするために master ブランチへマージを行います。\nこの際に Pull Request を作成して Pull Request の内容を利用してリリースページを作ることができます。\nタグの名前、リリース名は Pull Requestのタイトル名（${{ github.event.pull_request.title }}）を利用しているので注意してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  name:Releaseon:pull_request:types:[closed]branches:- masterjobs:create_release:if:github.event.pull_request.merged == truename:create_releaseruns-on:ubuntu-lateststeps:- name:Checkout codeuses:actions/checkout@master- name:Create Releaseid:create_releaseuses:actions/create-release@v1env:GITHUB_TOKEN:${{ secrets.GITHUB_TOKEN }}with:tag_name:${{ github.event.pull_request.title }}release_name:${{ github.event.pull_request.title }}body:${{ github.event.pull_request.body }}  参考  Create Release · Actions · GitHub Marketplace GitHub Actions を使ってリリース時のあれこれを自動化する  ","description":"GitHub Actions リリースページを自動的に作る方法をメモ","id":285,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions リリースページを自動的に作る","uri":"https://c-a-p-engineer.github.io/tech/2022/07/11/github-actions-release/"},{"content":"【Git】別ブランチで作業したファイルを持ってくる 別ブランチで作業したファイルを現在のブランチに持ってくる方法。\n別ブランチから取得 git checkout [取得元ブランチ or コミットハッシュ] [取得ファイル or 取得ディレクトリ] 以下のようにすると hoge ブランチから sample.txt を取得してきます。\ngit checkout hoge sample.txt 別名ファイルとして取得 git show [取得元ブランチ　or コミットハッシュ]:[取得ファイル] \u0026gt; [保存先名] 以下のようにすると hoge ブランチから sample.txt を sample2.txt と名前をつけて取得してきます。\ngit checkout hoge:sample.txt \u0026gt; sample2.txt コミット全体を取得 git cherry-pick -n [取得元ブランチ or コミットハッシュ] -n は -no-commit オプションの短縮で、ないとコミットをそのまま取り込みますので注意してください。\n","description":"別ブランチで作業したファイルを現在のブランチに持ってくる方法","id":286,"section":"tech","tags":["Git"],"title":"【Git】別ブランチで作業したファイルを持ってくる","uri":"https://c-a-p-engineer.github.io/tech/2022/06/28/git-another-branch-file-get/"},{"content":"【PHP】composer dump-autoload 「A non-empty PSR-4 prefix must end with a namespace separator」エラー解決 composer dump-autoload 実行時に A non-empty PSR-4 prefix must end with a namespace separator エラーが発生した際の解決メモ\n現象 composer dump-autoload を実行した際に下記のエラーが出てくる。\n1 2 3 4 5 6  $ composer dump-autoload Generating autoload files [InvalidArgumentException] A non-empty PSR-4 prefix must end with a namespace separator.   原因 A non-empty PSR-4 prefix must end with a namespace separator.\nこのエラー文のまま、「PSR-4 の末尾に名前空間用の区切り文字（\\）がない」というのが原因でした。\n解決 composer.json の autoload -\u0026gt; psr-4 の末尾に区切り文字を入れることで解決できます。\n1 2 3 4 5 6 7  { \u0026#34;autoload\u0026#34;: { \u0026#34;psr-4\u0026#34;: { \u0026#34;App\\\\\u0026#34;: \u0026#34;app\u0026#34;  } }, }   composer.json を修正したら composer dump-autoload を実行。\n1  composer dump-autoload   ","description":"composer dump-autoload 実行時に「A non-empty PSR-4 prefix must end with a namespace separator」エラーが発生した際の解決メモ","id":287,"section":"tech","tags":["php","composer"],"title":"【PHP】composer dump-autoload 「A non-empty PSR-4 prefix must end with a namespace separator」エラー解決","uri":"https://c-a-p-engineer.github.io/tech/2022/06/23/composer-psr4-end-with-namespace-separator/"},{"content":"【GoLang】go: cannot use path@version syntax in GOPATH mode 解決 go: cannot use path@version syntax in GOPATH mode 解決メモ\n現象 発生バージョン\n Go 1.15  Go の場合はパッケージを入れる際に @ の後ろにバージョンを指定すると指定のバージョンを入れることができます。\n1  go get golang.org/x/tools/gopls@v0.8.4   ですが、以下のようなエラーが発生しました。\ngo: cannot use path@version syntax in GOPATH mode 原因 モジュール対応モード の設定がされていなかった。\n解決 モジュール対応モードを有効化すれば可能になります。\n1  export GO111MODULE=on   Go 1.11 から入ったので GO111MODULE という名前のようです。\nこれによりバージョン指定をすることが可能になります。\n参考情報  Getting GOPATH error \u0026quot;go: cannot use path@version syntax in GOPATH mode\u0026quot; in Ubuntu 16.04 - Stack Overflow  ","description":"go: cannot use path@version syntax in GOPATH mode 解決メモ","id":288,"section":"tech","tags":["GoLang","コーディング規約"],"title":"【GoLang】go: cannot use path@version syntax in GOPATH mode 解決","uri":"https://c-a-p-engineer.github.io/tech/2022/06/22/golang-go-get-version/"},{"content":"ERROR 1526 (HY000): Table has no partition for value エラーの解決 Mysql ERROR 1526 (HY000): Table has no partition for value エラーの解決メモ\n原因 パーティションの範囲外の値が指定されている。\n解決方法 パーティションの範囲の範囲を増やすことで対応できます。\nサンプル テーブル作成 num \u0026lt; 30 の値を指定のパーティションに入れてくれます\n1 2 3 4 5 6 7 8 9 10  CREATETABLE`sample`(`id`bigint(20)unsignedNOTNULLAUTO_INCREMENT,`num`decimal(6,4)DEFAULT0NOTNULL,PRIMARYKEY(`id`,`num`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4PARTITIONBYRANGE(FLOOR(`num`))(PARTITIONp0VALUESLESSTHAN(10),PARTITIONp1VALUESLESSTHAN(20),PARTITIONp2VALUESLESSTHAN(30));  データを入れる（エラー 作成したテーブルにデータを入れてみます。\nこうすると 35, 40 とパーティションの範囲外の30以上の値はエラーになります。\n1 2 3 4 5 6 7 8 9  INSERTINTO`sample`(`num`)values(5),(10),(15),(20),(25),(30),(35),(40);  パーティションを追加（解決 30 以上の値が入るパーティションを追加します。\n1  ALTERTABLE`sample`ADDPARTITION(PARTITIONpmaxVALUESLESSTHAN(MAXVALUE));  ※ MAXVALUE を指定すると列の最大値以下の値を指定ができます。\n参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: B.3 サーバーのエラーコードおよびメッセージ #エラー: 1526 SQLSTATE: HY000 (ER_NO_PARTITION_FOR_GIVEN_VALUE)  ","description":"Mysql ERROR 1526 (HY000):Table has no partition for value エラーの解決メモ","id":289,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】ERROR 1526 (HY000): Table has no partition for value エラーの解決","uri":"https://c-a-p-engineer.github.io/tech/2022/06/15/mysql-has-no-partition/"},{"content":"【Linux】実行中のジョブを終了させない「disown」 実行中のジョブを終了させない disown の使い方。\n実行したプログラムが思ったより時間がかかり終わらないけど帰りたいターミナルを閉じたい時に使えます。\ndisown の使い方  コマンドを実行 Ctrl + z でコマンドを中断 jobs で該当のジョブを確認 bg で該当のジョブをバックグランド化（該当のジョブ番号を指定 disown でターミナル接続を切っても実行（該当のジョブ番号を指定  1 2 3 4 5 6 7 8 9  # 1. コマンドを実行 sh -c \u0026#39;echo \u0026#34;start `date`\u0026#34; \u0026amp;\u0026amp; sleep 100 \u0026amp;\u0026amp; echo \u0026#34;end `date`\u0026#34;\u0026#39; \u0026gt; disown.log # 2. Ctrl + z で中断 # 3. jobs で該当のジョブを確認 [1]+ Stopped sh -c \u0026#39;echo \u0026#34;start `date`\u0026#34; \u0026amp;\u0026amp; sleep 100 \u0026amp;\u0026amp; echo \u0026#34;end `date`\u0026#34;\u0026#39; \u0026gt; disown.log # 4. bg でバックグランド処理（該当のジョブ番号を指定 bg %1 # 5. disown でターミナル接続を切っても実行（該当のジョブ番号を指定 disown %1    disown, bg ジョブ番号なしだとカレントジョブに対して行います  ちょっと応用 末尾に \u0026amp; を付けて最初からバックグランド実行させてからも出来ます。\n1 2 3 4 5 6 7 8  # 1. コマンドを実行 sh -c \u0026#39;echo \u0026#34;start `date`\u0026#34; \u0026amp;\u0026amp; sleep 100 \u0026amp;\u0026amp; echo \u0026#34;end `date`\u0026#34;\u0026#39; \u0026gt; disown.log \u0026amp; # 2. jobs で該当のジョブを確認 [1]+ Stopped sh -c \u0026#39;echo \u0026#34;start `date`\u0026#34; \u0026amp;\u0026amp; sleep 100 \u0026amp;\u0026amp; echo \u0026#34;end `date`\u0026#34;\u0026#39; \u0026gt; disown.log \u0026amp; # 3. bg でバックグランド処理（該当のジョブ番号を指定 bg %1 # 4. disown でターミナル接続を切っても実行（該当のジョブ番号を指定 disown %1   ","description":"実行中のジョブをターミナルの接続が切れても終了させないように出来る disown の使い方","id":290,"section":"tech","tags":["Linux","Linuxコマンド"],"title":"【Linux】実行中のジョブをターミナルの接続が切れても終了させないように出来る「disown」","uri":"https://c-a-p-engineer.github.io/tech/2022/06/12/linux-disown/"},{"content":"【Linux】接続を切っても処理を継続させる方法 Linuxに接続している状態でコマンド実行した際にネットワークなど何らかの理由で切られる危険性があり、対策として nohup を使用して接続が切られても処理を継続させる方法を取りました。\nターミナルと閉じたり接続が切れると実行していた処理が中断されます。\nなので帰りたいけど帰れない\nそのためLinux上で数時間以上掛かる処理ならこれを使用するのが得策です。\nnohup の使い方 nohup [command] \u0026amp;  nohup  接続が切られても実行 出力がある場合はカレンドディレクトリに nohup.out が作られる   \u0026amp;  バックグランド処理    nohupを使ってみる 以下のコマンドを使用すると100秒間 sleep されます。\n一度ターミナルの接続を切ってからも生きている事を確認できます。\nnohup sleep 100 \u0026amp; 複数のコマンドを実行する 複数コマンドを実行して nohup.out に開始と終了の時刻を追加してみます。\nこれでわざわざ実行中に接続しなくてもプロセスが実行終了したことを確認出来ます。\nnohup sh -c 'echo \u0026quot;start nohup `date`\u0026quot; \u0026amp;\u0026amp; sleep 100 \u0026amp;\u0026amp; echo \u0026quot;end nohup `date`\u0026quot;' \u0026amp; nohup のログ nohup のログは nohup.out に吐かれて困るのでログを指定します。\n標準出力は nohup.log、エラー出力は error.log に出力するようにします。\nnohup sh -c 'echo \u0026quot;start nohup `date`\u0026quot; \u0026amp;\u0026amp; sleep 100 \u0026amp;\u0026amp; echo \u0026quot;end nohup `date`\u0026quot;' \u0026gt; nohup.log 2\u0026gt; error.log \u0026amp; `` ","description":"Linuxに接続している状態でコマンド実行した際にネットワークなど何らかの理由で切られる危険性があり、対策として nohup を使用して接続が切られても処理を継続させる方法を取りました。","id":291,"section":"tech","tags":["Linux","Linuxコマンド"],"title":"【Linux】接続を切っても処理を継続させる「nohup」","uri":"https://c-a-p-engineer.github.io/tech/2022/06/11/linux-nohup/"},{"content":"【Mysql】ERROR 1503 (HY000): A PRIMARY KEY must include all columns in the table\u0026rsquo;s partitioning function エラーの解決 Mysql ERROR 1503 (HY000): A PRIMARY KEY must include all columns in the table's partitioning function エラーの解決メモ\n原因 パーティショニングを行う列はプライマリキーに含めていないため。\n解決方法 パーティショニングを行う列をプライマリキーのものに変更する。\nもしくはパーティショニングを行う列をプライマリキーに含めることで対応可能です。\n参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: B.3 サーバーのエラーコードおよびメッセージ #エラー: 1503 SQLSTATE: HY000 (ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF)  ","description":"Mysql ERROR 1503 (HY000): A PRIMARY KEY must include all columns in the table's partitioning function エラーの解決メモ","id":292,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】ERROR 1503 (HY000): A PRIMARY KEY must include all columns in the table's partitioning function エラーの解決","uri":"https://c-a-p-engineer.github.io/tech/2022/06/10/mysql-primary-partitioning/"},{"content":"【Mysql】ERROR 1564 (HY000): This partition function is not allowed エラーの解決 Mysql ERROR 1564 (HY000): This partition function is not allowed エラーの解決メモ\n原因 パーティション設定時に使用できる関数以外が指定されている。\n解決方法 パーティショニングを行う際には以下のリンクの関数を使用する。\n MySQL :: MySQL 8.0 リファレンスマニュアル :: 24.6.3 関数に関連するパーティショニング制限  参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: B.3 サーバーのエラーコードおよびメッセージ #エラー: 1564 SQLSTATE: HY000 (ER_PARTITION_FUNCTION_IS_NOT_ALLOWED)  ","description":"Mysql ERROR 1564 (HY000): This partition function is not allowed エラーの解決メモ","id":293,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】ERROR 1564 (HY000): This partition function is not allowed エラーの解決","uri":"https://c-a-p-engineer.github.io/tech/2022/06/10/mysql-partition-function-not-allowed/"},{"content":"【Mysql】ERROR 1659 (HY000): Field \u0026lsquo;num\u0026rsquo; is of a not allowed type for this type of partitioning エラーの解決 Mysql ERROR 1659 (HY000): Field 'num' is of a not allowed type for this type of partitioning エラーの解決メモ\n原因 列がパーティションに指定できる型ではない。\n解決方法 解決方法は2つ。\n パーティショニング可能な型にする。 関数を使用してパーティショニング可能な型に変換する。  パーティショニング可能な型 以下がパーティショニング可能な型になります。\nこれ以外は 基本的には使用できません。\n 整数型  TINYINT SMALLINT MEDIUMINT INT (INTEGER) BIGINT   日付  DATE DATETIME   文字列  CHAR VARCHAR BINARY VARBINARY    パーティショニングを行う際に特定の関数を使用する パーティショニングを行う際に特定の関数を使用できます。\n MySQL :: MySQL 8.0 リファレンスマニュアル :: 24.6.3 関数に関連するパーティショニング制限  パーティショニングする際に関数を使用してパーティショニング可能な型に変換することで指定することが可能です。\n参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: B.3 サーバーのエラーコードおよびメッセージ #エラー: 1659 SQLSTATE: HY000 (ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD)  ","description":"Mysql ERROR 1659 (HY000): Field 'num' is of a not allowed type for this type of partitioning エラーの解決メモ","id":294,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】ERROR 1659 (HY000): Field 'num' is of a not allowed type for this type of partitioning エラーの解決","uri":"https://c-a-p-engineer.github.io/tech/2022/06/10/mysql-not-allowed-type-partitioning/"},{"content":"【Mysql】ERROR 1564 (HY000): The PARTITION function returns the wrong type エラーの解決 Mysql ERROR 1564 (HY000): The PARTITION function returns the wrong type エラーの解決メモ\n原因 パーティション設定時に使用した関数の返却値の型がパーティションに設定できる型ではない。\n解決方法 以下がパーティショニング可能な型になります。\n関数を使用時に以下の型にする必要があります。\nただし、関数と元の型の組み合わせによって以下のいずれかの型にならないことがあります。\nこれ以外は 基本的には使用できません。\n 整数型  TINYINT SMALLINT MEDIUMINT INT (INTEGER) BIGINT   日付  DATE DATETIME   文字列  CHAR VARCHAR BINARY VARBINARY    参考  MySQL :: MySQL 5.6 リファレンスマニュアル :: B.3 サーバーのエラーコードおよびメッセージ #エラー: 1659 SQLSTATE: HY000 (ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD)  ","description":"Mysql ERROR 1659 (HY000): The PARTITION function returns the wrong type エラーの解決メモ","id":295,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】ERROR 1659 (HY000): The PARTITION function returns the wrong type エラーの解決","uri":"https://c-a-p-engineer.github.io/tech/2022/06/10/mysql-partition-returns-wrong-type/"},{"content":"【Mysql】float, double型でテーブルのパーティションが切れない Mysql で float, double型でテーブルのパーティションが切れなかったため解決した方法のメモ\n MySQL :: MySQL 8.0 リファレンスマニュアル :: 24.2.3 COLUMNS パーティショニング  パーティショニング可能な型 以下がパーティショニング可能な型になります。\nこれ以外は 基本的には使用できません。\n 整数型  TINYINT SMALLINT MEDIUMINT INT (INTEGER) BIGINT   日付  DATE DATETIME   文字列  CHAR VARCHAR BINARY VARBINARY    パーティショニングの型の例外 パーティショニングを行う際に特定の関数を使用できます。\n MySQL :: MySQL 8.0 リファレンスマニュアル :: 24.6.3 関数に関連するパーティショニング制限  一部の列のこれらを使用することで整数値を返却することでパーティショニングが可能になります。\nテーブルを作ってみる double の型でパーティションを切る（失敗 下記のSQLを実行すると失敗します。\n1 2 3 4 5 6 7 8 9 10 11  CREATETABLE`sample`(`id`bigint(20)unsignedNOTNULLAUTO_INCREMENT,`num`double(6,4)DEFAULT0NOTNULL,PRIMARYKEY(`id`,`num`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4PARTITIONBYRANGE(num)(PARTITIONp0VALUESLESSTHAN(10),PARTITIONp1VALUESLESSTHAN(20),PARTITIONp2VALUESLESSTHAN(30),PARTITIONp3VALUESLESSTHANMAXVALUE);  実行すると以下のエラーが出てきます。\n#HY000Field 'num' is of a not allowed type for this type of partitioning num のcolumnをパーティションのレンジの基準に出来ないというエラーです。\n小数点を含む値を使用するなら decimal 小数点を含む値を使用するなら float, double を使用しないで decimal を使用しましょう。\nまたパーティションを指定する際は整数型しか指定出来ないため TRUNCATE をして小数部を落としましょう。\n1 2 3 4 5 6 7 8 9 10 11  CREATETABLE`sample`(`id`bigint(20)unsignedNOTNULLAUTO_INCREMENT,`num`decimal(6,4)DEFAULT0NOTNULL,PRIMARYKEY(`id`,`num`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4PARTITIONBYRANGE(FLOOR(`num`))(PARTITIONp0VALUESLESSTHAN(10),PARTITIONp1VALUESLESSTHAN(20),PARTITIONp2VALUESLESSTHAN(30),PARTITIONp3VALUESLESSTHANMAXVALUE);  データを入れる 作成したテーブルにデータを入れてみます。\n1 2 3 4 5 6 7 8 9  INSERTINTO`sample`(`num`)values(5),(10),(15),(20),(25),(30),(35),(40);  パーティションの確認 パーティション通りにデータが入っているか確認します。\n1 2 3 4 5 6 7 8 9  SELECTTABLE_SCHEMA,PARTITION_NAME,PARTITION_ORDINAL_POSITION,TABLE_ROWSFROMINFORMATION_SCHEMA.PARTITIONSWHERETABLE_NAME=\u0026#39;sample\u0026#39;;  結果を見る限り想定通りにデータが入れられています。\n   TABLE_SCHEMA PARTITION_NAME PARTITION_ORDINAL_POSITION TABLE_ROWS     sample p0 1 1   sample p1 2 2   sample p2 3 2   sample p3 4 3    問題点 実行計画を確認 実行計画を確認してみましょう。\n1  EXPLAINPARTITIONSSELECT*FROM`sample`WHEREnum\u0026gt;20;     id select_type table partitions type possible_keys key key_len ref rows Extra     1 SIMPLE sample p0,p1,p2,p3 index  PRIMARY 11  8 Using where; Using index    本来なら num \u0026gt; 20 で指定しているので partitions が p3,p4 になるはずなのですが、実行計画上想定の動きはしません。\n条件を num = 20 に変更してみます。\n1  EXPLAINPARTITIONSSELECT*FROM`sample`WHEREnum=20;     id select_type table partitions type possible_keys key key_len ref rows Extra     1 SIMPLE sample p2 index  PRIMARY 11  2 Using where; Using index    等号で指定すると想定通りパーティションが指定されます。\nこの事から decimal の型でパーティションは指定すること自体可能だが 不等号での条件ではパーティションをフルスキャンする可能性 があります。\nそのため、速度を要求されるテーブルで行う場合は要検証が必要になりますのでご注意ください。\n参考  MySQL :: MySQL 8.0 リファレンスマニュアル :: 24.2.3 COLUMNS パーティショニング MySQL :: MySQL 8.0 リファレンスマニュアル :: 24.6.3 関数に関連するパーティショニング制限  ","description":"Mysql で float, double型でテーブルのパーティションが切れなかったため解決した方法のメモ","id":296,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】float, double型でテーブルのパーティションが切れない","uri":"https://c-a-p-engineer.github.io/tech/2022/06/10/mysql-partition-float-double/"},{"content":"【PHP】CLIで進捗表示を行うプログレスバーを出力する方法 PHP の CLI で進捗表示を行うプログレスバーを出力する方法メモ\nキャリッジリターンを使用する キャリッジリターンは行末から行頭に戻すコードです。\n 行末から行頭に戻す復帰コード\n  キャリッジ・リターン - Wikipedia  これをすると以下のようにすると今までの出力の行頭に移動して出力済みの文字を上書きを行う訳です。\n1 2 3 4 5  \u0026lt;?php echo \u0026#34;12345\u0026#34;; echo \u0026#34;\\r\u0026#34;; echo \u0026#34;6789\u0026#34;; echo PHP_EOL;   これを実行すると結果は 67895 と表示され 1234 までは上書きを行ってくれるようです。\nそういう際はスペースを利用して前出力の値をスペースで上書きを行ってしまいましょう。\n1 2 3 4 5  \u0026lt;?php echo \u0026#34;12345\u0026#34;; echo \u0026#34;\\r\u0026#34;; echo \u0026#34;6789 \u0026#34;; echo PHP_EOL;   バックスペースを利用する バックスペースを利用することでカーソルを1つ戻すことが出来ます。\nこれをすると以下のようにすると今までの出力の行頭に移動して出力済みの文字を上書きを行う訳です。\n1 2 3 4  echo \u0026#39;987654321\u0026#39;; echo \u0026#34;\\r\u0026#34;; echo \u0026#34;1234 \\x08\\x08\\x08\\x08\\x08\u0026#34;; echo PHP_EOL;   5つのスペースで文字を上書きしてからバックスペース5つでカーソルは 1234 の末尾に来ます。\nサンプル 上記でバックスペースを説明させていただきましたが、今回は使用しない方法で良いサンプルがありましたのでそちらの方法を使用します。\nコマンドラインでの進捗状況（プログレスバー）を表示する（PHP）\n以下を実行すると Processing... | [####################]100% というプログレスバーが出力されます。\nこれでCLI上でのPHPの実行の進捗具合がわかりやすくなります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  \u0026lt;?php /** * ProgressBar Display Class */ class ProgressBar { // Progress Symbols  private const PROGRESS_SYMBOL = [\u0026#39;|\u0026#39;, \u0026#39;/\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;\\\\\u0026#39;]; /** * Progress Output * * @param integer $progress * @return void */ public static function progress(int $progress): void { echo \u0026#34;\\r\u0026#34;; $block = str_repeat(\u0026#39;#\u0026#39;, floor($progress / 5)); printf(\u0026#39;Processing... %s [%-20s]%3d%%\u0026#39;, self::PROGRESS_SYMBOL[$progress % count(self::PROGRESS_SYMBOL)], $block, $progress); flush(); if ($progress \u0026gt;= 100) { echo PHP_EOL; } } } // 実行する $total = 100; $count = 0; for ($i = 0; $i \u0026lt; $total; $i++) { $count = $i + 1; // 進捗パーセンテージ計算  $progress = ($count / $total * 100); ProgressBar::progress(round($progress, 0)); // 表示用に適当なスリープ  usleep(100000); }   参考  PHP CLIでプログレスバーを実現する - Qiita コマンドラインでの進捗状況（プログレスバー）を表示する（PHP）  ","description":"PHP の CLI で進捗表示を行うプログレスバーを出力する方法メモ","id":297,"section":"tech","tags":["PHP"],"title":"【PHP】CLIで進捗表示を行うプログレスバーを出力する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/06/04/php-cli-progressbar/"},{"content":"【Laravel】mysql struct の注意点 Laravel では mysql への接続オプションとして strict（厳密）モードがあり気をつける必要があります。\nstrict 設定 config/database.php の mysql =\u0026gt; strict の値が true だと有効になっています。\nデフォルトの設定では true です。\nLaravel 9.x config/database.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026lt;?php return [ // 途中省略～～～  \u0026#39;mysql\u0026#39; =\u0026gt; [ \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;mysql\u0026#39;, \u0026#39;url\u0026#39; =\u0026gt; env(\u0026#39;DATABASE_URL\u0026#39;), \u0026#39;host\u0026#39; =\u0026gt; env(\u0026#39;DB_HOST\u0026#39;, \u0026#39;127.0.0.1\u0026#39;), \u0026#39;port\u0026#39; =\u0026gt; env(\u0026#39;DB_PORT\u0026#39;, \u0026#39;3306\u0026#39;), \u0026#39;database\u0026#39; =\u0026gt; env(\u0026#39;DB_DATABASE\u0026#39;, \u0026#39;forge\u0026#39;), \u0026#39;username\u0026#39; =\u0026gt; env(\u0026#39;DB_USERNAME\u0026#39;, \u0026#39;forge\u0026#39;), \u0026#39;password\u0026#39; =\u0026gt; env(\u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;unix_socket\u0026#39; =\u0026gt; env(\u0026#39;DB_SOCKET\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;charset\u0026#39; =\u0026gt; \u0026#39;utf8mb4\u0026#39;, \u0026#39;collation\u0026#39; =\u0026gt; \u0026#39;utf8mb4_unicode_ci\u0026#39;, \u0026#39;prefix\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, \u0026#39;prefix_indexes\u0026#39; =\u0026gt; true, \u0026#39;strict\u0026#39; =\u0026gt; true,  \u0026#39;engine\u0026#39; =\u0026gt; null, \u0026#39;options\u0026#39; =\u0026gt; extension_loaded(\u0026#39;pdo_mysql\u0026#39;) ? array_filter([ PDO::MYSQL_ATTR_SSL_CA =\u0026gt; env(\u0026#39;MYSQL_ATTR_SSL_CA\u0026#39;), ]) : [], ], // 途中省略～～～ ];   strict の内容 以下のソースに strict の内容が記載されています。\nLaravel 9.x src/Illuminate/Database/Connectors/MySqlConnector.php\nMysql 8.0.11 以降の設定\nset session sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'\nMysql 8.0.11 未満の設定\nset session sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;?php // 途中省略～～～  /** * Get the query to enable strict mode. * * @param \\PDO $connection * @param array $config * @return string */ protected function strictMode(PDO $connection, $config) { $version = $config[\u0026#39;version\u0026#39;] ?? $connection-\u0026gt;getAttribute(PDO::ATTR_SERVER_VERSION); if (version_compare($version, \u0026#39;8.0.11\u0026#39;) \u0026gt;= 0) { return \u0026#34;set session sql_mode=\u0026#39;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\u0026#39;\u0026#34;;  } return \u0026#34;set session sql_mode=\u0026#39;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\u0026#39;\u0026#34;;  }   strict 解説  ONLY_FULL_GROUP_BY  GROUP BY句 で指定されてない非集計カラムを許可 MySQL :: MySQL 8.0 リファレンスマニュアル :: 12.20.3 MySQL での GROUP BY の処理   STRICT_TRANS_TABLES  無効な値に対して近似値などを入れることなくエラーとする MySQL :: MySQL 5.6 リファレンスマニュアル :: 1.7.3.3 無効データの制約   NO_ZERO_IN_DATE  無効な日時の挿入を禁止 \u0026lt;a href=\u0026ldquo;https://dev.mysql.com/doc/refman/5.6/ja/sql-mode.html#name=\u0026quot;sqlmode_no_zero_in_date\u0026quot;\u0026quot; target=\u0026quot;_blank\u0026rdquo; rel=\u0026ldquo;nofollow noopener\u0026rdquo;\u0026gt;MySQL :: MySQL 5.6 リファレンスマニュアル :: 5.1.7 サーバー SQL モード   NO_ZERO_DATE  0000-00-00 の日付を禁止 MySQL :: MySQL 5.6 リファレンスマニュアル :: 5.1.7 サーバー SQL モード   ERROR_FOR_DIVISION_BY_ZERO  0 の禁止。無効だと NULL が入る。 MySQL :: MySQL 5.6 リファレンスマニュアル :: 5.1.7 サーバー SQL モード   NO_AUTO_CREATE_USER  自動的に新規ユーザを作成しない MySQL :: MySQL 5.6 リファレンスマニュアル :: 5.1.7 サーバー SQL モード   NO_ENGINE_SUBSTITUTION  目的のストレージエンジンが利用できない場合にエラーが発生し、テーブルは作成または変更されません。 MySQL :: MySQL 5.6 リファレンスマニュアル :: 5.1.7 サーバー SQL モード    個別に各種オプションを設定する strict で一括で諸々の設定を有効にするのではなく個別にちゃんと設定したい場合は modes を追加することで可能です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  \u0026lt;?php return [ // 途中省略～～～  \u0026#39;mysql\u0026#39; =\u0026gt; [ \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;mysql\u0026#39;, \u0026#39;url\u0026#39; =\u0026gt; env(\u0026#39;DATABASE_URL\u0026#39;), \u0026#39;host\u0026#39; =\u0026gt; env(\u0026#39;DB_HOST\u0026#39;, \u0026#39;127.0.0.1\u0026#39;), \u0026#39;port\u0026#39; =\u0026gt; env(\u0026#39;DB_PORT\u0026#39;, \u0026#39;3306\u0026#39;), \u0026#39;database\u0026#39; =\u0026gt; env(\u0026#39;DB_DATABASE\u0026#39;, \u0026#39;forge\u0026#39;), \u0026#39;username\u0026#39; =\u0026gt; env(\u0026#39;DB_USERNAME\u0026#39;, \u0026#39;forge\u0026#39;), \u0026#39;password\u0026#39; =\u0026gt; env(\u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;unix_socket\u0026#39; =\u0026gt; env(\u0026#39;DB_SOCKET\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;charset\u0026#39; =\u0026gt; \u0026#39;utf8mb4\u0026#39;, \u0026#39;collation\u0026#39; =\u0026gt; \u0026#39;utf8mb4_unicode_ci\u0026#39;, \u0026#39;prefix\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, \u0026#39;prefix_indexes\u0026#39; =\u0026gt; true, // \u0026#39;strict\u0026#39; =\u0026gt; true, // 厳密モードOFF  // 個別に設定  \u0026#39;modes\u0026#39; =\u0026gt; [ \u0026#39;STRICT_TRANS_TABLES\u0026#39;, \u0026#39;NO_ZERO_IN_DATE\u0026#39;, \u0026#39;NO_ZERO_DATE\u0026#39;, \u0026#39;ERROR_FOR_DIVISION_BY_ZERO\u0026#39;, \u0026#39;NO_ENGINE_SUBSTITUTION\u0026#39; ],  \u0026#39;engine\u0026#39; =\u0026gt; null, \u0026#39;options\u0026#39; =\u0026gt; extension_loaded(\u0026#39;pdo_mysql\u0026#39;) ? array_filter([ PDO::MYSQL_ATTR_SSL_CA =\u0026gt; env(\u0026#39;MYSQL_ATTR_SSL_CA\u0026#39;), ]) : [], ], // 途中省略～～～ ];   ","description":"Laravel では mysql への接続オプションとしてstrict（厳密）モードがあり気をつける必要があります。","id":298,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】mysql strict の注意点","uri":"https://c-a-p-engineer.github.io/tech/2022/06/01/laravel-mysql-strict/"},{"content":"【PHP】半角、全角を判断して文字幅を計算する　mb_strwidth PHPで半角、全角を判断して文字幅を計算する mb_strwidth の使用方法。\nPHP: mb_strwidth - Manual\nmb_strwidth を使用する mb_strwidth を使用すると文字幅の計算ができます。\n1  mb_strwidth(string $string, ?string $encoding = null): int   サンプル 英数字、半角カナ、全角文字、絵文字にも対応しています。\n1 2 3 4 5 6 7 8 9 10  \u0026lt;?php var_dump( mb_strwidth(\u0026#39;a\u0026#39;), // int(1)  mb_strwidth(\u0026#39;1\u0026#39;), // int(1)  mb_strwidth(\u0026#34;１\u0026#34;), // int(2)  mb_strwidth(\u0026#34;あ\u0026#34;), // int(2)  mb_strwidth(\u0026#34;ｱ\u0026#34;), // int(1)  mb_strwidth(\u0026#34;🥞\u0026#34;), // int(2)  mb_strwidth(\u0026#34;パンケーキ🥞が3つ\u0026#34;), // int(17) );   mb_strwidth の第二引数は省略すると内部の文字エンコーディングを使用します。\nそのためエンコーディングがずれていると正確に取得できない事があります。\nmb_strwidth('SJISの文字列', 'SJIS-WIN') などのよう第二引数を指定して対応が可能です。\n注意点 以下の範囲外の文字列に関しては半角文字になるようなので記号など一部半角文字列として判定される可能性があります。\n 全角文字は次のとおりです。 U+1100-U+115F、 U+11A3-U+11A7、 U+11FA-U+11FF、 U+2329-U+232A、 U+2E80-U+2E99、 U+2E9B-U+2EF3、 U+2F00-U+2FD5、 U+2FF0-U+2FFB、 U+3000-U+303E、 U+3041-U+3096、 U+3099-U+30FF、 U+3105-U+312D、 U+3131-U+318E、 U+3190-U+31BA、 U+31C0-U+31E3、 U+31F0-U+321E、 U+3220-U+3247、 U+3250-U+32FE、 U+3300-U+4DBF、 U+4E00-U+A48C、 U+A490-U+A4C6、 U+A960-U+A97C、 U+AC00-U+D7A3、 U+D7B0-U+D7C6、 U+D7CB-U+D7FB、 U+F900-U+FAFF、 U+FE10-U+FE19、 U+FE30-U+FE52、 U+FE54-U+FE66、 U+FE68-U+FE6B、 U+FF01-U+FF60、 U+FFE0-U+FFE6、 U+1B000-U+1B001、 U+1F200-U+1F202、 U+1F210-U+1F23A、 U+1F240-U+1F248、 U+1F250-U+1F251、 U+20000-U+2FFFD、 U+30000-U+3FFFD。 他のすべての文字は半角の文字です。\n ","description":"PHPで半角、全角を判断して文字幅を計算する mb_strwidth の使用方法。","id":299,"section":"tech","tags":["PHP"],"title":"【PHP】半角、全角を判断して文字幅を計算する　mb_strwidth","uri":"https://c-a-p-engineer.github.io/tech/2022/05/28/php-mb_strwidth/"},{"content":"【PHP】画像に文字を追加する PHPで画像に文字を追加します。\n環境  PHP8.1  前準備  画像処理（GD）ライブラリの導入  PHP: GD - Manual   フォントの用意  ookamiinc/kinto: 均等 — Kinto is a Japanese font family adapted to match size \u0026amp; balance with Latin characters in user interfaces. A project based off Google Noto fonts.   文字列を追加するテンプレート画像の用意  GDライブラリは標準で入っていないので環境によっては面倒かとは思います。\nコード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59  \u0026lt;?php class Image { // フォント  const FONT = __DIR__ . \u0026#39;/KintoSans-Medium.ttf\u0026#39;; /** * 画像に文字列を追加する * * @param string $templatePath 文字を追加する画像のファイルパス * @param string $outputPath 画像の出力先 * @param string $text 画像に追加文字列 * @return void */ static function create(string $templatePath, string $outputPath, string $text): void { // 画像を読み込んで生成  // imagecreatefromXXXは取り扱う画像毎に違うので注意  $image = imagecreatefrompng($templatePath); // 文字の色を生成  $color = imagecolorallocate($image, 0, 0, 0); // 文字のサイズ（px  $size = 36; // 文字の角度  $angle = 0; // 文字位置設定  // 左からの座標（px  $x = 20; // 上からの座標(px  $y = 220 + $size; // 文字列挿入  imagettftext( $image, // 挿入先の画像  $size, // フォントサイズ  $angle, // 文字の角度  $x, // 位置 x 座標  $y, // 位置 y 座標  $color, // 文字の色  self::FONT, // フォントファイル  implode(PHP_EOL, mb_str_split($text, 25)) ); $dirName = dirname($output); if(!file_exists($dirName)){ // 指定されたディレクトリがなければを生成  mkdir(dirname($output), \u0026#39;0777\u0026#39;, true); } // ファイル名を指定して画像出力  imagepng($image, $output); } } Image::create(\u0026#39;template.png\u0026#39;, \u0026#39;sample.png\u0026#39;, \u0026#39;Sampleだよ！\u0026#39;);   これで画像が生成されます。\n","description":"PHPで画像に文字を追加します。","id":300,"section":"tech","tags":["PHP"],"title":"【PHP】画像に文字を追加する","uri":"https://c-a-p-engineer.github.io/tech/2022/05/28/php-image-text/"},{"content":"【PHP】PHP Fatal error: Constant expression contains invalid operations 解決方法 PHP Fatal error: Constant expression contains invalid operations 解決方法メモ\n現象 以下のようなコードの場合に PHP Fatal error: Constant expression contains invalid operations というエラーが発生します。\n1 2 3 4 5 6 7  \u0026lt;?php class Now { public $now = time(); } $class = new Now(); var_dump($class-\u0026gt;now);   原因 原因はプロパティ宣言時に time() を実行していることです。\n 宣言時に初期値を設定することもできますが、 初期値は 定数 値でなければなりません。\nPHP: プロパティ - Manual\n なので プロパティ宣言時に関数やクラス、メソッドの実行が出来ません。\n対処 対処としてはコンストラクタ内で初期値を代入することです。\nこれによってプロパティに関数やクラスの関数やクラス、メソッドの実行値が入ります。\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;?php class Now { public $now; public function __construct(){ // 初期値を代入  $this-\u0026gt;now = time(); } } $class = new Now(); var_dump($class-\u0026gt;now);   ","description":"PHP Fatal error: Constant expression contains invalid operations が出たので解決方法メモ","id":301,"section":"tech","tags":["PHP"],"title":"【PHP】PHP Fatal error: Constant expression contains invalid operations 解決方法","uri":"https://c-a-p-engineer.github.io/tech/2022/05/21/php-contains-invalid-operations/"},{"content":"【PHP】Fatal error: Uncaught TypeError: Unsupported operand types 解決方法 PHP Fatal error: Constant expression contains invalid operations 解決方法メモ\n現象 以下のようなコードの場合に PHP Fatal error: Uncaught TypeError: Unsupported operand types というエラーが発生します。\n1 2 3  \u0026lt;?php $i = \u0026#39;\u0026#39;; echo $i + 1;   原因 型が合わないというエラーです。\n今回の原因は int と string を足し算しようとしてるためです。\nちなみに今回のエラーは 7.2 系から出るようになったようです。\n7.1 なら以下のエラーが出ていた模様。\nNotice: A non well formed numeric value encountered in %s on line %d Warning: A non-numeric value encountered in %s on line %d PHP: プロパティ - Manual\n5 系から 7.0 系の場合はエラーが出ずに暗黙的に 0 に変換されて 1 と表示されていた模様。\n対処 対処としては int 型に変換すればいいだけです。\n本来、業務などなら数値チェックを行う必要があると思いますので単純に型を変換すれば良いだけではない気はきます。\n1 2 3  \u0026lt;?php $i = \u0026#39;\u0026#39;; echo (int)$i + 1;   ","description":"PHP Fatal error: Uncaught TypeError: Unsupported operand types が出たので解決方法メモ","id":302,"section":"tech","tags":["PHP"],"title":"【PHP】PHP Fatal error: Uncaught TypeError: Unsupported operand types 解決方法","uri":"https://c-a-p-engineer.github.io/tech/2022/05/22/php-unsupported-operand-types/"},{"content":"【Mysql】テーブルの件数を取得する際に TABLE_ROWS と COUNT の違いの注意点 テーブルのデータ量が多く、COUNT だと時間が掛かるため、INFORMATION_SCHEMATABLES.TABLE_ROWS から件数を確認してみたのですが、これが実際の件数と違うので注意が必要です。\n現象 information_schema.table_rows の値と count した件数が違う。\ninformation_schema.table_rows から行数を取得。\n1 2 3 4 5 6 7 8  SELECTtable_name,table_rowsFROMinformation_schema.tablesWHEREtable_schema=\u0026#39;db_name\u0026#39;ANDtable_name=\u0026#39;tbl_name\u0026#39;;     table_name table_rows     tbl_name 12345    select count(*) から行数を取得。\n1  SELECTCOUNT(*)FROMtbl_name;     table_name COUNT(*)     tbl_name 12999    上記のように table_rows と count で違いが生じます。\n原因 table_rows と count の差異の原因は以下のためです。\n TABLE_ROWS\n行数。 MyISAM などの一部のストレージエンジンは、正確な数を格納します。 InnoDB などのほかのストレージエンジンの場合、この値は概算であり、実際の値と 40% から 50% まで異なる可能性があります。 このような場合、正確な数を取得するには SELECT COUNT(*) を使用します。\nMySQL :: MySQL 8.0 リファレンスマニュアル :: 26.38 INFORMATION_SCHEMA TABLES テーブル\n 対処 対処方法としては最適化です。\n以下いずれかの対処で table_rows が正確なものになることを確認しました。\nINDEXの最適化 読み取りロックが発生します。\n1  ANALYZETABLEtbl_name;  テーブルの最適化 どちらかを実行するだけでテーブルの最適化が行われます。\nテーブルロックが発生するので注意してください。\n1  OPTIMIZETABLEtbl_name;  1  ALTERTABLEtbl_nameENGINEINNODB;  自動的に最適化されるタイミング 漢(オトコ)のコンピュータ道: 大人のためのInnoDBテーブルとの正しい付き合い方。\n  前回インデックス統計情報を更新してから、テーブルの行数全体の1/16が更新された。 前回インデックス統計情報を更新してから、20億行以上更新された。   auto_increment を利用する方法 別の手として該当のテーブルに auto_increment が設定されている場合且つ物理削除を行われていないのであれば、auto_increment を取得すれば現在の行数として扱えるかと思います。\n1 2 3 4 5 6 7 8  SELECTtable_name,auto_increment-1FROMinformation_schema.tablesWHEREtable_schema=\u0026#39;db_name\u0026#39;ANDtable_name=\u0026#39;tbl_name\u0026#39;;  ※ auto_increment は 1 から始まるので -1 する。\n   table_name auto_increment-1     tbl_name 13210    参考  MySQL :: MySQL 8.0 リファレンスマニュアル :: 26.3.38INFORMATION_SCHEMATABLESテーブル 漢(オトコ)のコンピュータ道: 大人のためのInnoDBテーブルとの正しい付き合い方。  ","description":"テーブルのデータ量が多く、COUNT だと時間が掛かるため、INFORMATION_SCHEMATABLES.TABLE_ROWS から件数を確認してみたのですが、これが実際の件数と違うので注意が必要です。","id":303,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】テーブルの件数を取得する際に TABLE_ROWS と COUNT の違いの注意点","uri":"https://c-a-p-engineer.github.io/tech/2022/05/21/mysql-table-row/"},{"content":"【GoLang】文字列を簡単に切り出す GoLang で文字列を簡単に切り出すコロン記法メモ\n文字列を簡単に切り出す GoLang では簡単に文字列を切り出す方法があります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  package main import ( \u0026#34;fmt\u0026#34; ) func main() { // わかりやすく数字 \tnumbers := \u0026#34;123456789\u0026#34; // 5文字目以降（56789 \tfmt.Printf(\u0026#34;%s\\n\u0026#34;, numbers[4:]) // 3文字目以前（123 \tfmt.Printf(\u0026#34;%s\\n\u0026#34;, numbers[:3]) // 6文字目 - 7文字目（67 \tfmt.Printf(\u0026#34;%s\\n\u0026#34;, numbers[5:7]) }   1文字目は 0 から始まります。\n : の左の数値が始点（文字列の最後まで切り出す : の右の数値が終点（文字列の最初から切り出す : のどちらにも数値が指定されていた場合は指定された部分のみ切り出します。  参考  Slices - A Tour of Go  ","description":"文字列を簡単に切り出すメモ","id":304,"section":"tech","tags":["GoLang"],"title":"【GoLang】文字列を簡単に切り出す","uri":"https://c-a-p-engineer.github.io/tech/2022/05/18/golang-string-split/"},{"content":"【React + TypeScript】state が反映されないときは useEffect を使用する React で state が反映されないときは useEffect を使用する。\nuseEffect を使用する React の useEffect を使用する。\n副作用フックの利用法 - React\n失敗例 まずはうまく更新されない時の失敗例です。\n単純に左と右に入れられた数字を足し合わせるものになっています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  import React, { useState } from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { // 左  const [left, setLeft] = useState\u0026lt;int\u0026gt;(); const changeLeft = (event: React.ChangeEvent\u0026lt;HTMLInputElement\u0026gt;) =\u0026gt; { setLeft(event.target.value); setAns(parseInt(left) + parseInt(right)); }; // 右  const [right, setRight] = useState\u0026lt;int\u0026gt;(); const changeRight = (event: React.ChangeEvent\u0026lt;HTMLInputElement\u0026gt;) =\u0026gt; { setRight(event.target.value); setAns(parseInt(left) + parseInt(right)); }; // 答え  const [ans, setAns] = useState\u0026lt;int\u0026gt;(); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Input\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#34;number\u0026#34; value={left} onChange={changeLeft} /\u0026gt; + \u0026lt;input type=\u0026#34;number\u0026#34; value={right} onChange={changeRight} /\u0026gt; \u0026lt;p\u0026gt;Anser\u0026lt;/p\u0026gt; \u0026lt;span\u0026gt;{left} + {right} = {ans}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App;   こうするとなぜか {ans} が遅れて更新されてしまいます。\n原因 原因としては state の値が更新されるのは関数の実行後のためになります。\n値を更新したつもりでも実際は値が更新されていないため即時に反映が行われません。\nuseEffectを使用する useEffect を使用することで簡単に解決ができます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  import React, { useState, useEffect } from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { // 左  const [left, setLeft] = useState\u0026lt;int\u0026gt;(); const changeLeft = (event: React.ChangeEvent\u0026lt;HTMLInputElement\u0026gt;) =\u0026gt; { setLeft(event.target.value); }; // 右  const [right, setRight] = useState\u0026lt;int\u0026gt;(); const changeRight = (event: React.ChangeEvent\u0026lt;HTMLInputElement\u0026gt;) =\u0026gt; { setRight(event.target.value); }; // 答え  const [ans, setAns] = useState\u0026lt;int\u0026gt;(); useEffect(() =\u0026gt; { // 答えを設定  setAns(parseInt(left) + parseInt(right)); }, [left, right]);  return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Input\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#34;number\u0026#34; value={left} onChange={changeLeft} /\u0026gt; + \u0026lt;input type=\u0026#34;number\u0026#34; value={right} onChange={changeRight} /\u0026gt; \u0026lt;p\u0026gt;Anser\u0026lt;/p\u0026gt; \u0026lt;span\u0026gt; {left} + {right} = {ans} \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App;   useEffect の第二引数に値を指定すれば該当の値をフックしてくれます。\nこれで即時に反映を行ってくれます。\n参考 副作用フックの利用法 - React\n","description":"state が反映されないときは useEffect を使用する","id":305,"section":"tech","tags":["React","TypeScript"],"title":"【React + TypeScript】state が反映されないときは useEffect を使用する","uri":"https://c-a-p-engineer.github.io/tech/2022/05/13/react-typescript-useeffect/"},{"content":"【GitHub】GitHub Pages で React 公開時の404対策 GitHub Pages で React 公開時の404対策メモ。\nReactで作ったものを公開しても404になる React で作ったものを GitHub Pages で公開したところ、公開ページのURLに接続すると index.html が開かれるのでアプリが開かれます。\nただルーティングをしていた場合に /sample/ のようなURLがアプリ上だと表示されるのですが、直接URLを開かれた場合 GitHub Pages は直接 /sample/ というディレクトリを探しますが存在しないため404が表示されます。\n対策 本来Webサーバーなら .htaccess なりで設定をして index.html を開くように設定するのですが GitHub Pages では .htaccess が効きません。\n対策は index.html を 404.html という名前でコピーすることです。\ncp index.html 404.html GitHub Pages は404時に 404.html を表示してくれます。\nこうすることによって404時も index.html と同一の内容が表示されます。\n参考  GitHub Pages サイトのカスタム 404 ページを作成する - GitHub Docs  ","description":"GitHub Pages で React 公開時の404対策メモ","id":306,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Pages で React 公開時の404対策","uri":"https://c-a-p-engineer.github.io/tech/2022/05/09/github-pages-react-404/"},{"content":"【React】サブディレクトリでReactを公開する Reactをサブディレクトリ上で公開したい場合はビルドしたものを配置するだけではできません。\nReactをサブディレクトリで公開する方法。\n原因 原因は通常通りにビルドすると /static/ でファイルを読み込んでしまうため、ルートディレクトリ上に配置する必要があります。\n解決 package.json package.json に homepage を追加する。\n1 2 3 4 5 6 7  { \u0026#34;name\u0026#34;: \u0026#34;app\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;homepage\u0026#34;: \u0026#34;./\u0026#34;,  // 省略 }   react-router-dom を使用している場合 react-router-dom を使用している場合だと上記対応だけでは不十分になります。\nhttps://c-a-p-engineer.github.io/dev-tool/ の dev-tool に配置する例です。\npackage.json に homepage を追加する。\n1 2 3 4 5 6 7  { \u0026#34;name\u0026#34;: \u0026#34;app\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;homepage\u0026#34;: \u0026#34;/dev-tool\u0026#34;,  // 省略 }   BrowserRouter に basename を追加します。\nこれでURLのベースの設定を行えます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import React from \u0026#34;react\u0026#34;; import { BrowserRouter, Route, Routes } from \u0026#34;react-router-dom\u0026#34;; import HomePage from \u0026#34;./components/pages/HomePage\u0026#34;; import JsonFormatPage from \u0026#34;./components/pages/JsonFormatPage\u0026#34;; import SqlFormatPage from \u0026#34;./components/pages/SqlFormatPage\u0026#34;; const App = () =\u0026gt; { return ( \u0026lt;React.StrictMode\u0026gt; \u0026lt;BrowserRouter basename=\u0026#34;/dev-tool/\u0026#34;\u0026gt;  \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;HomePage /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/json-format\u0026#34; element={\u0026lt;JsonFormatPage /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/sql-format\u0026#34; element={\u0026lt;SqlFormatPage /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; \u0026lt;/React.StrictMode\u0026gt; ); }; export default App;   ","description":"Reactをサブディレクトリ上で公開したい場合はビルドしたものを配置するだけではできません。Reactをサブディレクトリで公開する方法。","id":307,"section":"tech","tags":["React"],"title":"【React】サブディレクトリでReactを公開する","uri":"https://c-a-p-engineer.github.io/tech/2022/05/08/react-subdirectory/"},{"content":"【React + TypeScript】イベントから型を指定して渡す方法 Material UI を使用している際 onChange イベント時にせっかく TypeScript を使用しているのに unknown の型指定しか出来なかったため、対策時のメモ\n環境  React 5.0.0 TypeScript 4.5.5 Material UI 4.12.4  onChangeイベントから受け取る（失敗例 Material UIのページの通りにすると value: unknown と型指定ができません。\nReact Select component - Material UI\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  import { FormControl, InputLabel, MenuItem, Select } from \u0026#34;@material-ui/core\u0026#34;; import React from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { const [age, setAge] = React.useState(\u0026#34;\u0026#34;); const handleChange = (event: React.ChangeEvent\u0026lt;{ value: unknown }\u0026gt;) =\u0026gt; { setAge(event.target.value as string); }; return ( \u0026lt;FormControl fullWidth\u0026gt; \u0026lt;InputLabel id=\u0026#34;demo-simple-select-label\u0026#34;\u0026gt;Age\u0026lt;/InputLabel\u0026gt; \u0026lt;Select labelId=\u0026#34;demo-simple-select-label\u0026#34; id=\u0026#34;demo-simple-select\u0026#34; value={age} label=\u0026#34;Age\u0026#34; onChange={handleChange} \u0026gt; \u0026lt;MenuItem value={10}\u0026gt;Ten\u0026lt;/MenuItem\u0026gt; \u0026lt;MenuItem value={20}\u0026gt;Twenty\u0026lt;/MenuItem\u0026gt; \u0026lt;MenuItem value={30}\u0026gt;Thirty\u0026lt;/MenuItem\u0026gt; \u0026lt;/Select\u0026gt; \u0026lt;/FormControl\u0026gt; ); }; export default App;   型を指定して渡す（成功例 onChange={(e) =\u0026gt; handleChange(e.target.value as string)} と変更して handleChange 実行前に string型とすることで unknown を避けることができます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  import { FormControl, InputLabel, MenuItem, Select } from \u0026#34;@material-ui/core\u0026#34;; import React from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { const [age, setAge] = React.useState(\u0026#34;\u0026#34;); const handleChange = (value: string) =\u0026gt; { setAge(value); }; return ( \u0026lt;FormControl fullWidth\u0026gt; \u0026lt;InputLabel id=\u0026#34;demo-simple-select-label\u0026#34;\u0026gt;Age\u0026lt;/InputLabel\u0026gt; \u0026lt;Select labelId=\u0026#34;demo-simple-select-label\u0026#34; id=\u0026#34;demo-simple-select\u0026#34; value={age} label=\u0026#34;Age\u0026#34; onChange={(e) =\u0026gt; handleChange(e.target.value as string)} \u0026gt; \u0026lt;MenuItem value={10}\u0026gt;Ten\u0026lt;/MenuItem\u0026gt; \u0026lt;MenuItem value={20}\u0026gt;Twenty\u0026lt;/MenuItem\u0026gt; \u0026lt;MenuItem value={30}\u0026gt;Thirty\u0026lt;/MenuItem\u0026gt; \u0026lt;/Select\u0026gt; \u0026lt;/FormControl\u0026gt; ); }; export default App;   参考  React Select component - Material UI [Select] onChange parameter has unknown type in Select component · Issue #16065 · mui/material-ui  ","description":"Material UI を使用している際 onChange イベント時にせっかく TypeScript を使用しているのに unknown の型指定しか出来なかったため、対策時のメモ","id":308,"section":"tech","tags":["React","TypeScript"],"title":"【React + TypeScript】イベントから型を指定して渡す方法","uri":"https://c-a-p-engineer.github.io/tech/2022/05/07/react-typescript-onchange/"},{"content":"【Mysql】CREATE TABLE はトランザクションが効かないで暗黙的にコミットされる Mysqlでは CREATE TABLE はトランザクションが効かないで暗黙的にコミットされる。\n一部のステートメントでは暗黙的にコミットされトランザクションが効かなくなるとのことです。\nMySQL :: MySQL 8.0 リファレンスマニュアル :: 13.3.3 暗黙的なコミットを発生させるステートメント\nCREATE TABLE はトランザクションが効かない InnoDB では CREATE TABLE を使用すると1つのトランザクションとして処理され、その時点で COMMIT され ROLLBACK されません。\nそのため、CREATE TABLE を実行するとトランザクションが終了されます。\n例外 例外として一時テーブル作成 CREATE TEMPORARY TABLE 、テーブル削除 DROP TEMPORARY TABLE に対してコミットは発生しないとのことです。\n参考  MySQL :: MySQL 8.0 リファレンスマニュアル :: 13.3.3 暗黙的なコミットを発生させるステートメント  ","description":"Mysql でCREATE TABLE はトランザクションが効かないで暗黙的にコミットされる","id":309,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】CREATE TABLE はトランザクションが効かないで暗黙的にコミットされる","uri":"https://c-a-p-engineer.github.io/tech/2022/05/07/mysql-create-table-transaction/"},{"content":"【React + TypeScript】useState を利用してリアルタイムに入力値を反映させる useState を利用してリアルタイムに入力値を反映させるメモ\nuseState を使用する React の useState を使用する。\nステートフックの利用法 - React\nonChangeイベントを使用して値を設定する Onchange のイベントを使用して変更時に値を設定します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  import React, { useState } from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { // useState  const [input, setInput] = useState\u0026lt;string\u0026gt;(); // onChange Event  const changeInput = (event: React.ChangeEvent\u0026lt;HTMLInputElement\u0026gt;) =\u0026gt; { setInput(event.target.value); }; return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Input\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;input\u0026#34; type=\u0026#34;text\u0026#34; value={input} onChange={changeInput} /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;p\u0026gt;{input}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App;   直接値を設定する onChangeイベントから直接 setInputを呼び値を設定します。\n関数化しないのでこちらの方が簡略化はできます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  import React, { useState } from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { // useState  const [input, setInput] = useState\u0026lt;string\u0026gt;(); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Input\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;input\u0026#34; type=\u0026#34;text\u0026#34; value={input} onChange={(event) =\u0026gt; setInput(event.currentTarget.value)} /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;p\u0026gt;{input}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); }; export default App;   参考 ステートフックの利用法 - React\n","description":"useState を利用してリアルタイムに入力値を反映させるメモ","id":310,"section":"tech","tags":["React","TypeScript"],"title":"【React + TypeScript】useState を利用してリアルタイムに入力値を反映させる","uri":"https://c-a-p-engineer.github.io/tech/2022/05/02/react-typescript-usestate/"},{"content":"【Docker】docker-compose でプロジェクト名を設定する 【Docker】docker-compose でプロジェクト名を設定する方法\nCOMPOSE_PROJECT_NAME を設定する COMPOSE_PROJECT_NAME を設定することで [COMPOSE_PROJECT_NAME]_[container_name] で作成されます。\nターミナルで設定する $ export COMPOSE_PROJECT_NAME=test \u0026amp;\u0026amp; \\ docker-compose up -d Compose CLI environment variables | Docker Documentation#COMPOSE_PROJECT_NAME\n.env で設定する docker-compose.yml と同じ階層に .envファイルで作成します。\n1  COMPOSE_PROJECT_NAME=test   docker を起動。\n$ docker-compose up -d Compose CLI environment variables | Docker Documentation#Compose file and CLI variables\n","description":"【Docker】docker-compose でプロジェクト名を設定する方法","id":311,"section":"tech","tags":["Docker"],"title":"【Docker】docker-compose でプロジェクト名を設定する","uri":"https://c-a-p-engineer.github.io/tech/2022/04/30/docker-compose-project-name/"},{"content":"【React + TypeScript】axios を使って API に接続する axiosを使ってAPIに接続するメモ。\naxios\naxios インストール axios をインストールします。\nnpm install axios Get サンプルは当ブログの記事を取得するようにしています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  import axios from \u0026#34;axios\u0026#34;; import { useEffect, useState } from \u0026#34;react\u0026#34;; type Artical = { id: number; title: string; uri: string; description: string; section: string; tags: string[]; } async function getArticals(): Promise\u0026lt;Artical[]\u0026gt; { try { // URL  const url = \u0026#34;https://c-a-p-engineer.github.io/index.json\u0026#34;; const response = await axios.get\u0026lt;Artical[]\u0026gt;(url); console.log(response); return response.data; } catch (error) { console.error(error); return [] } } export default function App() { const [articals, setArticals] = useState\u0026lt;[] |Artical[]\u0026gt;([]); useEffect(() =\u0026gt; { (async () =\u0026gt; { const articals = await getArticals(); setArticals(articals); })(); }, []); return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Blog Articals\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; {articals.map((artical: Artical) =\u0026gt; ( \u0026lt;li key={artical.id.toString()}\u0026gt;{artical.title}\u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ); }   1 2 3 4 5  import { render } from \u0026#34;react-dom\u0026#34;; import App from \u0026#34;./App\u0026#34;; const rootElement = document.getElementById(\u0026#34;root\u0026#34;); render(\u0026lt;App /\u0026gt;, rootElement);   Post ちなみにpost時は以下のようになります。\n※サンプルなので実際にコピペしても登録などはされません。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  async function getArticals(): Promise\u0026lt;Artical\u0026gt; { try { // URL  const url = \u0026#34;https://c-a-p-engineer.github.io/index.json\u0026#34;; const response = await axios.post\u0026lt;Artical\u0026gt;(url, { // POSTデータ  title: \u0026#34;タイトル\u0026#34;; description: \u0026#34;説明\u0026#34;; }); console.log(response); return response.data; } catch (error) { console.error(error); return [] } }   参考 React Typescript Axios\n","description":"【React + TypeScript】axiosを使ってAPIに接続するメモ","id":312,"section":"tech","tags":["React","TypeScript"],"title":"【React + TypeScript】axiosを使ってAPIに接続する","uri":"https://c-a-p-engineer.github.io/tech/2022/04/21/react-typescript-axios/"},{"content":"【PHP】引数にint型を指定しているとint型を超えた値を渡すとエラーになる PHPで関数やメソッドにint型を指定しているとint型を超えた値を渡すとエラーになります。\nArgument #1 ($x) must be of type int, float given, の原因と解決方法。\nエラーが発生しない PHPは動的型付けなので引数がint型を指定されていてもstringやfloatをint型にして対応してくれます。\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;?php function addition (int $x, int $y) { echo $x + $y . PHP_EOL; } // int addition(1, 2); // string addition(\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;); // float addition(1.1, 2.2);   エラーが発生するパターン int 型を超える値を渡します。\n1 2 3 4 5 6 7 8  \u0026lt;?php function addition (int $x, int $y) { echo $x + $y . PHP_EOL; } // error addition(PHP_INT_MAX + 1, 2);   そうすると以下のエラーが出ます。\nPHP Fatal error: Uncaught TypeError: addition(): Argument #1 ($x) must be of type int, float given, これはint型を超えていてint型に変換できず、floatで渡されたと解釈された結果エラーが出ます。\n解決方法 解決方法としては関数の引数の方をfloat型にすれば解決できます。\nただしどうしてもint型でなければいけない場合でint型を超える値が入ってしまう場合は引数を渡す前にチェックしてください。\n1 2 3 4 5 6 7  \u0026lt;?php function addition(float $x, float $y) { echo $x + $y . PHP_EOL; } addition(PHP_INT_MAX + 1, 2);   参考  PHP7調査(5)整数型の引数のオーバーフローがエラーになった - Qiita  ","description":"PHPで関数やメソッドにint型を指定しているとint型を超えた値を渡すとエラーになります。","id":313,"section":"tech","tags":["PHP"],"title":"【PHP】引数にint型を指定しているとint型を超えた値を渡すとエラーになる","uri":"https://c-a-p-engineer.github.io/tech/2022/04/14/php-typehinting-int-overflow/"},{"content":"【Laravel】Mysql とのコネクションをプーリングさせる方法 Laravel で Mysql とのコネクションプーリングを行う方法メモ。\nプーリングさせる意味 PHPではデフォルトでDBへの接続をプーリングさせません。\nですが、DBへのコネクション数を減らして負荷を下げる意味では行う方がベターです。\nまた多数のSQLを発行する場面で一々コネクションの発生が抑えられるなどの効果があります。\n修正 PDO::ATTR_PERSISTENT の設定を追加。\nPDO::ATTR_PERSISTENT はコネクションプーリングの設定です。\nPHP: 接続、および接続の管理 - Manual #例4 持続的な接続\n\u0026lt;?php // ～省略～～～～～～～～～ 'mysql' =\u0026gt; [ 'driver' =\u0026gt; 'mysql', 'url' =\u0026gt; env('DATABASE_URL'), 'host' =\u0026gt; env('DB_HOST', '127.0.0.1'), 'port' =\u0026gt; env('DB_PORT', '3306'), 'database' =\u0026gt; env('DB_DATABASE', 'forge'), 'username' =\u0026gt; env('DB_USERNAME', 'forge'), 'password' =\u0026gt; env('DB_PASSWORD', ''), 'unix_socket' =\u0026gt; env('DB_SOCKET', ''), 'charset' =\u0026gt; 'utf8mb4', 'collation' =\u0026gt; 'utf8mb4_unicode_ci', 'prefix' =\u0026gt; '', 'prefix_indexes' =\u0026gt; true, 'strict' =\u0026gt; true, 'engine' =\u0026gt; null, 'options' =\u0026gt; extension_loaded('pdo_mysql') ? array_filter([ PDO::MYSQL_ATTR_SSL_CA =\u0026gt; env('MYSQL_ATTR_SSL_CA'), PDO::ATTR_PERSISTENT =\u0026gt; true, // 追加 ]) : [], ], 参考  LaravelのログをJsonで吐き出せる様にする方法、AWSのCloudWatchを使おう。 - Qiita  ","description":"Laravel で Mysql とのコネクションプーリングを行う方法メモ","id":314,"section":"tech","tags":["PHP","Laravel","Mysql"],"title":"【Laravel】Mysql とのコネクションをプーリングさせる方法","uri":"https://c-a-p-engineer.github.io/tech/2022/04/13/laravel-mysql-connection-pooling/"},{"content":"【Mysql】#hy000you can\u0026rsquo;t specify target table \u0026lsquo;hoge\u0026rsquo; for update in from clause の解決方法 MysqlでSQLを実行したら#hy000you can't specify target table 'hoge' for update in from clause というエラーが出たので解決方法メモ。\nエラー 以下のようなSQLを実行すると #hy000you can't specify target table 'hoge' for update in from clause というエラーが出てきます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  UPDATESETname=\u0026#39;hoge\u0026#39;FROMhogeWHEREcolumn1IN(SELECTcolumn1FROMhogeORDERBYcreated_atDESCLIMIT1)  原因 Mysqlのサブクエリで更新対象と同じテーブルを使用することが出できいとのこと。\n テーブルを更新し、さらにサブクエリーで同じテーブルから選択することはできません。\nMySQL :: MySQL 5.6 リファレンスマニュアル :: 13.2.11 UPDATE 構文\n おそらく、更新対象のサブクエリ内のテーブルの条件によっては無限ループのような事が発生し得るので制御してると思われます。\n解決方法 サブクエリの中でさらにサブクエリを使用して select 文をラップします。\nこうすることによって更新が可能になります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  UPDATESETname=\u0026#39;hoge\u0026#39;FROMhogeWHEREcolumn1IN(selectcolumn1from(SELECTcolumn1FROMhogeORDERBYcreated_atDESCLIMIT1)tmp)  参考 MySQL :: MySQL 5.6 リファレンスマニュアル :: 13.2.11 UPDATE 構文\n","description":"Mysql の #hy000you can't specify target table 'hoge' for update in from clause の解決方法","id":315,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】#hy000you can't specify target table 'hoge' for update in from clause の解決方法","uri":"https://c-a-p-engineer.github.io/tech/2022/04/10/mysq-cant-specify-target-table/"},{"content":"【Git】 fatal: Unable to create \u0026lsquo;.git/index.lock\u0026rsquo;: File exists. の解決 Git操作を行おうとしたら fatal: Unable to create '.git/index.lock': File exists. が出たきたので解決方法メモ\nエラー pull などのGitの操作を行った際に発生。\nfatal: Unable to create '.git/index.lock': File exists. 原因 排他制御用のファイルが .git/index.lock が存在する。\nそのため別にGitの操作が行われている。\n解決方法  Git操作の終了を待つ\n思い当たるGitの操作があれば終了を待ってください。 .git/index.lock を削除\n該当プロジェクトの .git/index.lock を削除すれば解決します。  参考 Git - fatal: Unable to create '/path/my_project/.git/index.lock': File exists - Stack Overflow\n","description":"Git 操作を行おうとしたら fatal: Unable to create '.git/index.lock': File exists. が出たきたので解決方法メモ","id":316,"section":"tech","tags":["Git"],"title":"【Git】 fatal: Unable to create '.git/index.lock': File exists. の解決","uri":"https://c-a-p-engineer.github.io/tech/2022/04/08/git-fatal-index.lock/"},{"content":"【Docker】tty:true にしても落ちてしまう時の対処 Docker で tty: true にしても落ちてしまう時の対処メモ\n現象 下記のような docker-compose.yml で tty: true にして command を設定していると起動後に exit してしまいます。\n1 2 3 4 5 6 7 8 9 10  version:\u0026#39;3\u0026#39;services:ubuntu:image:ubuntu:latesttty:truecommand:\u0026gt;/bin/bash -c \u0026#34; pwd \u0026#34;  対処方法 command の最後に /bin/bash を追加して bash を対話モードで動かし続けるようにします。\nこうすることによって裏で bash が動いているのでコンテナが落ちないようになります。\n1 2 3 4 5 6 7 8 9 10 11  version:\u0026#39;3\u0026#39;services:ubuntu:image:ubuntu:latesttty:truecommand:\u0026gt;/bin/bash -c \u0026#34; pwd /bin/bash \u0026#34;  参考 docker-compose up で tty: trueを付けているのに、commandを実行するとコンテナが終わってしまう - スタック・オーバーフロー\n","description":"Docker で tty:true にしても落ちてしまう時の対処メモ","id":317,"section":"tech","tags":["Docker"],"title":"【Docker】tty:true にしても落ちてしまう時の対処","uri":"https://c-a-p-engineer.github.io/tech/2022/04/06/doccker-tty-exit/"},{"content":"【Docker】volume をマウントする時に一部ディレクトリを除外する Docker+PHP 環境が遅かったので vendor フォルダを同期しないように volume をマウントする時に一部ディレクトリを除外して対応したメモ。\nこの対応で速度が2倍ほどになりました。\nvendor 内のファイル数が多いほど効果は高そうです。\nDokcer PHP の環境が遅い原因 Dockerはホストとコンテナ間でファイル同期の処理が行われるため、同期対象のファイルが多ければ多いほど遅くなる。\n対処方法 対象方法は大量にファイルが置かれている vendor を同期しないように致しました。\nボリュームを使用する ホストのからマウントをしないで volume を使う。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  version:\u0026#39;3\u0026#39;services:php:image:php:8.1-apachevolumes:- ./src:/var/www/html# volume mount- vendor-valume:/var/www/html/vendor# vendorをvolumeにマウントports:- 80:80# volumesvolumes:vendor-valume:# vendor用のvolume  特定ディレクトリをマウントしない 共有するソースのうち一部を共有しないように設定する。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  version:\u0026#39;3\u0026#39;services:php:image:php:8.1-apachevolumes:- ./src:/var/www/html# exclude directory- /var/www/html/vendor# 除外するディレクトリports:- 80:80# volumesvolumes:vendor-valume:# vendor用のvolume  参考 【検証】React.FC と React.VFC はべつに使わなくていい説 – KRAY Inc\n","description":"Docker+PHP 環境が遅かったので vendor フォルダを同期しないように volume をマウントする時に特定の一部ディレクトリを除外して対応したメモ","id":318,"section":"tech","tags":["Docker"],"title":"【Docker】volume をマウントする時に特定の一部ディレクトリを除外する","uri":"https://c-a-p-engineer.github.io/tech/2022/04/06/docker-volume-mount-exclude/"},{"content":"【React】React.FC、React.VFCを使わない方が良い？ React.FC(FunctionComponent)、React.VFC(VoidFunctionComponent) 色々調べてみたらどちらも使わないほうが良いのではないかと考えになりました。\nReact FC と VFC の違い React FC React.FC の props の型定義に暗黙的に children が含まれる。\nそのため children が必要ない場合でも children が渡せるためchildren が必要化わからない。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  type Props = { text:string } const Component:React.FC\u0026lt;Props\u0026gt; = ({text}) =\u0026gt; { return ( \u0026lt;div\u0026gt;{text}\u0026lt;/div\u0026gt; ) } const ParentComponent = () =\u0026gt; { return ( \u0026lt;Component text={\u0026#34;test\u0026#34;}\u0026gt; // 型定義してなくても使える  \u0026lt;div\u0026gt;children\u0026lt;/div\u0026gt; \u0026lt;/Component\u0026gt; ); }   React VFC React.VFC では children が必要な場合は明示する必要があり、不要な場合に渡したらエラーとなる。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  type Props = { text:string } const Component:React.VFC\u0026lt;Props\u0026gt; = ({text}) =\u0026gt; { return ( \u0026lt;div\u0026gt;{text}\u0026lt;/div\u0026gt; ) } const ParentComponent = () =\u0026gt; { return ( \u0026lt;Component text={\u0026#34;test\u0026#34;}\u0026gt; // childrenが渡されのでエラー  \u0026lt;div\u0026gt;children\u0026lt;/div\u0026gt; \u0026lt;/Component\u0026gt; ); }   children 使用時は明示すれば良い。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  type Props = { text:string, children:ReactNode } const Component:React.VFC\u0026lt;Props\u0026gt; = ({text}) =\u0026gt; { return ( \u0026lt;div\u0026gt;{text}\u0026lt;/div\u0026gt; ) } const ParentComponent = () =\u0026gt; { return ( \u0026lt;Component text={\u0026#34;test\u0026#34;}\u0026gt; // childrenが渡されのでエラー  \u0026lt;div\u0026gt;children\u0026lt;/div\u0026gt; \u0026lt;/Component\u0026gt; ); }   React FC VFC使わなくても大丈夫 無理に React.FC、React.VFC 使わなくても大丈夫です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  type Props = { text:string } const Component = (props:Props) =\u0026gt; { return ( \u0026lt;div\u0026gt;{props.text}\u0026lt;/div\u0026gt; ) } const ParentComponent = () =\u0026gt; { return ( \u0026lt;Component text={\u0026#34;test\u0026#34;}\u0026gt; \u0026lt;/Component\u0026gt; ); }   React VFC FC の使用の注意 React 18 からは FC の props から children される予定です。\nですのでバージョンアップする際に FC で暗黙的に children を使用しているプロジェクトには多大な影響が出ます。\n同様の React.SFC(StatelessFunctionalComponent) が以前にも React 16.7で非推奨になったりしています。\nReact VFC FC を使わない理由 Reactの変更で保守コストが上がる可能性などを考えると使う必要がない。\n使わざる得ない理由がないは限りとくに使う理由がない。\n参考 【検証】React.FC と React.VFC はべつに使わなくていい説 – KRAY Inc\n","description":"React.FC、React.VFC 色々調べてみたらどちらも使わないほうが良いのではないかと考えになりました","id":319,"section":"tech","tags":["React","TypeScript"],"title":"【React】React.FC、React.VFCを使わない方が良い？","uri":"https://c-a-p-engineer.github.io/tech/2022/04/04/react-fc-vfc/"},{"content":"【React + Webpack】You may need an appropriate loader to handle this file type 解決方法 React + Webpack の環境で You may need an appropriate loader to handle this file type の解決方法メモ。\nエラー ビルドすると以下のエラーが発生。\nERROR in ./src/index.css 1:5 Module parse failed: Unexpected token (1:5) You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders \u0026gt; body { | margin: 0; | font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', @ ./src/index.tsx 15:0-21 webpack 5.70.0 compiled with 1 error in 7589 ms 原因 Webpack がCSSを読み込めなくてエラーが発生。\n対処方法 npm install --save-dev css-loader style-loader  css-loader：Webpack がCSSをJavascriptに変換するloder style-loader：CSSをページに反映させるためのloder  1 2 3 4 5 6 7 8  module.exports = { mode: \u0026#39;production\u0026#39;, module: { rules: [ { test: /\\.css$/, use: [\u0026#39;style-loader\u0026#39;, \u0026#39;css-loader\u0026#39;] }, ], }, };   これでCSSの読み込みと反映が出来るようになってエラーが解決します。\n参考 The issue for \u0026lsquo;You may need an appropriate loader to handle this file type.\u0026rsquo; · Issue #8 · shama/letswritecode\n","description":"React + Webpack の環境で You may need an appropriate loader to handle this file type の解決方法メモ","id":320,"section":"tech","tags":["React"],"title":"【React + Webpack】You may need an appropriate loader to handle this file type 解決方法","uri":"https://c-a-p-engineer.github.io/tech/2022/03/31/react-loader-handle-file-type/"},{"content":"【Docker】SchemaSpy を使って自動的にER図を生成する Docker で SchemaSpy を使って自動的にER図を生成する。\n注意\n※2022/10/10追記\nこの記事の内容が動作しなくなっています。\n【Docker】SchemaSpy を使って自動的にER図を生成する（2022/10/10 改良版 を見てください。  docker-compose 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  version:\u0026#39;3\u0026#39;services:mysql:container_name:mysqlimage:mysql:5.7command:- --sql-mode=NO_ENGINE_SUBSTITUTIONvolumes:- ./.data/mysql:/var/lib/mysql- ./.docker/mysql/init:/docker-entrypoint-initdb.dports:- \u0026#34;3306:3306\u0026#34;environment:MYSQL_ROOT_PASSWORD:rootMYSQL_DATABASE:databaseMYSQL_USER:developMYSQL_PASSWORD:p@ssw0rdTZ:\u0026#39;Asia/Tokyo\u0026#39;schemaspy:container_name:schemaspyimage:schemaspy/schemaspy:6.1.0volumes:- ./schemaspy/output:/output- ./schemaspy/meta:/metadepends_on:- mysqlcommand:\u0026gt;java -jar schemaspy.jar -t mysql -dp /drivers -host mysql -port 3306 -db database -u develop -p p@ssw0rd -s database -meta /meta/schemameta.xml -connprops useSSL\\\\=false  SchemaSpy の起動オプション  -t : データベース種別 -dp : ドライバーパス -host : DBホスト -port : ポート番号 -db : DB名 -u : ユーザ名 -p : パスワード -s : スキーマ名 -meta : 手動でリレーションなどを連携するためのメタファイル（なければ不要  実行 Dockerを起動。\ndocker-compose up -d --build 起動後にSchemaSpyがDBに接続してDBの解析結果を schemaspy/output にアウトプット結果をHTMLで出力してくれます。\nSchemaSpy のコンテナは解析が終わると終了するようになっています。\nそのため、必要に応じて個別に起動する場合は以下のコマンドを実行すると再出力してくれます。\ndocker-compose up -d --build schemaspy 参考  SchemaSpy schemaspy/schemaspy: SchemaSpy code home  ","description":"Docker で SchemaSpy を使って自動的にER図を生成する","id":321,"section":"tech","tags":["Docker","DB"],"title":"【Docker】SchemaSpy を使って自動的にER図を生成する","uri":"https://c-a-p-engineer.github.io/tech/2022/03/31/docker-schemaspy/"},{"content":"【TypeScript + Webpack】TypeScript emitted no output エラー解決 TypeScript \u0026amp; Webpack 環境で TypeScript emitted no output のエラーが出たので解決方法メモ。\nエラー TypeScript \u0026amp; Webpack の環境でビルドをした際に以下のエラーが発生。\nERROR in ./src/index.tsx Module build failed (from ./node_modules/ts-loader/index.js): Error: TypeScript emitted no output for /src/app/frontend/src/index.tsx. at makeSourceMapAndFinish (/src/app/frontend/node_modules/ts-loader/dist/index.js:52:18) at successLoader (/src/app/frontend/node_modules/ts-loader/dist/index.js:39:5) at Object.loader (/src/app/frontend/node_modules/ts-loader/dist/index.js:22:5) 原因 tsconfig.json の noEmit が true となっていたことが原因です。\nTypeScript からファイルが出力されず、Webpackでまとめることが出来なかったようです。\n解決方法 tsconfig.json から noEmit を削除すればビルドに成功します。\n参考  Webpack with typescript getting TypeScript emitted no output error - Stack Overflow Typescript emitted no output · Issue #767 · TypeStrong/ts-loader  ","description":"TypeScript \u0026 Webpack 環境で TypeScript emitted no output のエラーが出たので解決方法メモ","id":322,"section":"tech","tags":["TypeScript"],"title":"【TypeScript + Webpack】TypeScript emitted no output エラー解決","uri":"https://c-a-p-engineer.github.io/tech/2022/03/30/typescript-webpack-emitted-no-output/"},{"content":"create-react-app で hotreload させる docker環境で create-react-app で作った環境上で hotreload が効かなかったのでその対処方法。\ncreate-react-app のバージョンは 5.0.0 です。\n原因 原因はホットリロードに必要なソースの変更の監視と適用が出来なかったためです。\n変更の監視設定 仮想環境では明示的に CHOKIDAR_USEPOLLING=true と環境変数を設定しなければ行けないようです。\nTroubleshooting | Create React App\n.env に追加すれば解決。\n原因はコンテナ上の変更を監視していなかったためのようで設定することによって監視をしてくれるようになるようです。\n変更の適用 CHOKIDAR_USEPOLLING=true によってソースファイルのができるようになりましたが、ソースを変更するとブラウザ上のコンソールで以下のようなエラーが発生しました。\nWebSocket connection to 'ws://localhost:3000/ws' failed: これはソースの変更をWebsocketを使用して再コンパイルを受け取っているのが原因のようです。\n環境変数に WDS_SOCKET_PORT=0 を設定することWebSocketの無効化ができます。\n.env に追加すれば解決。\nこれによって修正されたコードを適用してリアルタイムに画面が変更されるようになります。\n参考 Troubleshooting | Create React App\n","description":"docker環境で create-react-app で作った環境で hotreload が効かなかったのでその対処方法","id":323,"section":"tech","tags":["React"],"title":"create-react-app で hotreload させる","uri":"https://c-a-p-engineer.github.io/tech/2022/03/28/create-react-app-hotreload/"},{"content":"【Laravel】ログを Slack に通知する LaravelでログをSlackに通知する。\nLaravelはバージョン5.6から標準でSlackにログを出力する機能があり、簡単に設定が可能です。\n1.Slack の用意 Slackへの通知用Webhook URLを取得する必要があります。\n以下のリンクを参考に取得してください。\nSlack での Incoming Webhook の利用 | Slack\n2.設定変更 .env の修正を行います。\nLOG_CHANNEL を slack に修正してSlackログの設定を追加します。\n1 2 3 4 5  # ログチャンネルを変更 LOG_CHANNEL=slack # Slackログ設定 LOG_SLACK_WEBHOOK_URL=https://hooks.slack.com/services/xxxx # Webhook URL   Laravelでは以下の順でログレベルが設定されているので、たとえば LOG_LEVEL に emergency が設定されていた場合は emergency 未満の alert のログが出ないようになっています。\n必要に応じて LOG_LEVEL の値を調整してください。\n emergency alert critical error warning notice info debug  実際に設定が使用される箇所は以下になります。\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;?php return [ // 途中省略～～～  \u0026#39;slack\u0026#39; =\u0026gt; [ \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;slack\u0026#39;, \u0026#39;url\u0026#39; =\u0026gt; env(\u0026#39;LOG_SLACK_WEBHOOK_URL\u0026#39;), \u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Laravel Log\u0026#39;, \u0026#39;emoji\u0026#39; =\u0026gt; \u0026#39;\\:boom\\:\u0026#39;, \u0026#39;level\u0026#39; =\u0026gt; env(\u0026#39;LOG_LEVEL\u0026#39;, \u0026#39;critical\u0026#39;), ], // 途中省略～～～ ];   3. 使用方法 実際にコードで行った際にSlackへログレベルに合わせて通知が飛びます。\n1 2 3 4 5 6 7 8 9 10  use Illuminate\\Support\\Facades\\Log; Log::emergency(\u0026#39;emergency\u0026#39;); Log::alert(\u0026#39;alert\u0026#39;); Log::critical(\u0026#39;critical\u0026#39;); Log::error(\u0026#39;error\u0026#39;); Log::warning(\u0026#39;warning\u0026#39;); Log::notice(\u0026#39;notice\u0026#39;); Log::info(\u0026#39;info\u0026#39;); Log::debug(\u0026#39;debug\u0026#39;);   4. 通常のログも出力させたい Slackへの通知が大量にあったりするとSlackのAPI側に拒否されたりする事がありSlackへの通知が行えないなど問題が発生します。\nそういう場合に通常のログも残しておかないとログを確認することができません。\nなので通常ログとSlackログの2つのログを stack で複数のログをまとめることができます。\n1 2 3 4 5 6 7 8 9  \u0026lt;?php return [ // 途中省略～～～  \u0026#39;stack\u0026#39; =\u0026gt; [ \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;stack\u0026#39;, \u0026#39;channels\u0026#39; =\u0026gt; [\u0026#39;single\u0026#39;, \u0026#39;slack\u0026#39;], ], // 途中省略～～～ ];   .env の LOG_CHANNEL を stack に修正すると複数のログが出るようになります。\n1 2  # ログチャンネルを変更 LOG_CHANNEL=stack   5. ログを短くする Slackへ通知するログが大きいと視認性が減るので短くしたい場合があります。\nその場合は short と context の設定を追加します。\n'short' =\u0026gt; true で短いフォーマット。\n''context' =\u0026gt; false  でログのcontext部分を表示しないようになります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;?php return [ // 途中省略～～～  \u0026#39;slack\u0026#39; =\u0026gt; [ \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;slack\u0026#39;, \u0026#39;url\u0026#39; =\u0026gt; env(\u0026#39;LOG_SLACK_WEBHOOK_URL\u0026#39;), \u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Laravel Log\u0026#39;, \u0026#39;emoji\u0026#39; =\u0026gt; \u0026#39;\\:boom\\:\u0026#39;, \u0026#39;level\u0026#39; =\u0026gt; env(\u0026#39;LOG_LEVEL\u0026#39;, \u0026#39;critical\u0026#39;), \u0026#39;short\u0026#39; =\u0026gt; true, // 短いフォーマット  \u0026#39;context\u0026#39; =\u0026gt; false // context部分を表示しない  ], // 途中省略～～～ ];   参考  ログ 9.x Laravel #設定 ログ 9.x Laravel #Slackチャンネルの設定 logging - Message Customization of Laravel Log using Slack Chanel - Stack Overflow framework/LogManager.php at v5.6.3 · laravel/framework  ","description":"Laravel でログを Slack に通知する","id":324,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】ログを Slack に通知する","uri":"https://c-a-p-engineer.github.io/tech/2022/03/23/laravel-log-slack/"},{"content":"【PHP】URLを解析する parse_url URLを解析することができる parse_url\n PHP: parse_url - Manual  URL を解析してみる 実際にPHPManualに記載されている例にならって解析をさせてみます。\nPHP: parse_url - Manual 例1\n1 2 3 4  \u0026lt;?php $url = \u0026#39;http://username:password@hostname:9090/path?arg=value#anchor\u0026#39;; var_dump(parse_url($url));   結果\narray(8) { [\u0026quot;scheme\u0026quot;]=\u0026gt; string(4) \u0026quot;http\u0026quot; [\u0026quot;host\u0026quot;]=\u0026gt; string(8) \u0026quot;hostname\u0026quot; [\u0026quot;port\u0026quot;]=\u0026gt; int(9090) [\u0026quot;user\u0026quot;]=\u0026gt; string(8) \u0026quot;username\u0026quot; [\u0026quot;pass\u0026quot;]=\u0026gt; string(8) \u0026quot;password\u0026quot; [\u0026quot;path\u0026quot;]=\u0026gt; string(5) \u0026quot;/path\u0026quot; [\u0026quot;query\u0026quot;]=\u0026gt; string(9) \u0026quot;arg=value\u0026quot; [\u0026quot;fragment\u0026quot;]=\u0026gt; string(6) \u0026quot;anchor\u0026quot; } これによって接続されたURLを解析して host からベーシック認証時のユーザ、パスまで解析することが可能です。\n解析したURLを再構成する こちらを参考に再構成する方法を作成。\nPHP: parse_url - Manual thomas at gielfeldt dot com\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  \u0026lt;?php $url = \u0026#39;http://username:password@hostname:9090/path?arg=value#anchor\u0026#39;; // 再構成したURLが一致していることを確認 if ($url === unparseUrl(parse_url($url))) { print \u0026#34;YES, they match!\\n\u0026#34;; } /** * parseURL unparseURL * * @param $parsed_url parse_url で解析した内容 * @return string　再構成したURL */ function unparseUrl(array $parsed_url) :string { $scheme = isset($parsed_url[\u0026#39;scheme\u0026#39;]) ? $parsed_url[\u0026#39;scheme\u0026#39;] . \u0026#39;://\u0026#39; : \u0026#39;\u0026#39;; $host = isset($parsed_url[\u0026#39;host\u0026#39;]) ? $parsed_url[\u0026#39;host\u0026#39;] : \u0026#39;\u0026#39;; $port = isset($parsed_url[\u0026#39;port\u0026#39;]) ? \u0026#39;:\u0026#39; . $parsed_url[\u0026#39;port\u0026#39;] : \u0026#39;\u0026#39;; $user = isset($parsed_url[\u0026#39;user\u0026#39;]) ? $parsed_url[\u0026#39;user\u0026#39;] : \u0026#39;\u0026#39;; $pass = isset($parsed_url[\u0026#39;pass\u0026#39;]) ? \u0026#39;:\u0026#39; . $parsed_url[\u0026#39;pass\u0026#39;] : \u0026#39;\u0026#39;; $pass = ($user || $pass) ? \u0026#34;$pass@\u0026#34; : \u0026#39;\u0026#39;; $path = isset($parsed_url[\u0026#39;path\u0026#39;]) ? $parsed_url[\u0026#39;path\u0026#39;] : \u0026#39;\u0026#39;; $query = isset($parsed_url[\u0026#39;query\u0026#39;]) ? \u0026#39;?\u0026#39; . $parsed_url[\u0026#39;query\u0026#39;] : \u0026#39;\u0026#39;; $fragment = isset($parsed_url[\u0026#39;fragment\u0026#39;]) ? \u0026#39;#\u0026#39; . $parsed_url[\u0026#39;fragment\u0026#39;] : \u0026#39;\u0026#39;; return $scheme . $user . $pass . $host . $port . $path . $query . $fragment; }   再構成の応用 たとえば host が変わったが同一のURLに遷移したい場合などがあります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  \u0026lt;?php $url = \u0026#39;http://username:password@hostname:9090/path?arg=value#anchor\u0026#39;; var_dump(unparse_url(parse_url($url))); /** * parseURL unparseURL * * @param $parsed_url parse_url で解析した内容 * @return string　再構成したURL */ function unparseUrl(array $parsed_url) :string { $scheme = isset($parsed_url[\u0026#39;scheme\u0026#39;]) ? $parsed_url[\u0026#39;scheme\u0026#39;] . \u0026#39;://\u0026#39; : \u0026#39;\u0026#39;; // hostをexampleに変更  $host = isset($parsed_url[\u0026#39;host\u0026#39;]) ? \u0026#39;example\u0026#39; : \u0026#39;\u0026#39;; $port = isset($parsed_url[\u0026#39;port\u0026#39;]) ? \u0026#39;:\u0026#39; . $parsed_url[\u0026#39;port\u0026#39;] : \u0026#39;\u0026#39;; $user = isset($parsed_url[\u0026#39;user\u0026#39;]) ? $parsed_url[\u0026#39;user\u0026#39;] : \u0026#39;\u0026#39;; $pass = isset($parsed_url[\u0026#39;pass\u0026#39;]) ? \u0026#39;:\u0026#39; . $parsed_url[\u0026#39;pass\u0026#39;] : \u0026#39;\u0026#39;; $pass = ($user || $pass) ? \u0026#34;$pass@\u0026#34; : \u0026#39;\u0026#39;; $path = isset($parsed_url[\u0026#39;path\u0026#39;]) ? $parsed_url[\u0026#39;path\u0026#39;] : \u0026#39;\u0026#39;; $query = isset($parsed_url[\u0026#39;query\u0026#39;]) ? \u0026#39;?\u0026#39; . $parsed_url[\u0026#39;query\u0026#39;] : \u0026#39;\u0026#39;; $fragment = isset($parsed_url[\u0026#39;fragment\u0026#39;]) ? \u0026#39;#\u0026#39; . $parsed_url[\u0026#39;fragment\u0026#39;] : \u0026#39;\u0026#39;; return $scheme . $user . $pass . $host . $port . $path . $query . $fragment; }   今回は host ですがクエリパラメータに何かを付与したい場合などさまざまな応用が可能です。\nstring(59) \u0026quot;http://username:password@example:9090/path?arg=value#anchor\u0026quot; 参考  PHP: parse_url - Manual  ","description":"URL を解析することが出来る parse_url","id":325,"section":"tech","tags":["PHP"],"title":"【PHP】URLを解析する parse_url","uri":"https://c-a-p-engineer.github.io/tech/2022/03/19/php-parse_url/"},{"content":"LINE で URL を外部ブラウザで開かせる方法 LINE で URL を外部ブラウザで開かせる方法。\nLINE のブラウザでは通常のブラウザと異なり一部の処理が出来ないことがあります。\nそのためURLを共有する際などLINEブラウザから強制的に通常ブラウザに変更する必要があります。\nクエリパラメータの付与 URLのクエリパラメーターに openExternalBrowser=1 と付与するだけでLINEブラウザではなく外部ブラウザが起動するようになります。\n   LINE URLスキーム 説明     https://example.com/?openExternalBrowser=1 対象のURLを外部ブラウザで開きます。   https://example.com/?openInAppBrowser=0 対象のURLをChromeカスタムタブで開きます。（Android版LINEのみ対応）    たとえばLINEでこの当ブログを共有する際に下記のようにすると外部ブラウザで開かれるはずです。\nhttps://c-a-p-engineer.github.io/?openExternalBrowser=1\n参考  URLを外部ブラウザで開く | LINE Developers  ","description":"LINE で URL を外部ブラウザで開かせる方法","id":326,"section":"tech","tags":["ブラウザ"],"title":"LINE で URL を外部ブラウザで開かせる方法","uri":"https://c-a-p-engineer.github.io/tech/2022/03/17/line-browser/"},{"content":"【Git】 複数のコミットを rebase を使って1つにまとめる 【React + TypeScript】 react-router-dom を使ってルーティングを実装する\n前提  node 14.17.5 react-router-dom 6.2.2  公式のチュートリアルを参考に進めます。\n（公式のチュートリアルは React のため少々記載とは異なります。\n React Router | Tutorial  1.プロジェクト作成 npx create-react-app [プロジェクト名] --template typescript 2.react-router-dom インストール cd [プロジェクト名] npm install react-router-dom@6 3.ファイルの作成 各ページ用のファイルを作成します。\nmkdir routes touch routes/Expenses.tsx touch routes/Invoices.tsx 4.ファイル修正 ルーティングページ 1 2 3 4 5 6 7  export default function Expenses() { return ( \u0026lt;main style={{ padding: \u0026#34;1rem 0\u0026#34; }}\u0026gt; \u0026lt;h2\u0026gt;Expenses\u0026lt;/h2\u0026gt; \u0026lt;/main\u0026gt; ); }   1 2 3 4 5 6 7  export default function Invoices() { return ( \u0026lt;main style={{ padding: \u0026#34;1rem 0\u0026#34; }}\u0026gt; \u0026lt;h2\u0026gt;Invoices\u0026lt;/h2\u0026gt; \u0026lt;/main\u0026gt; ); }   TOP画面 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import { Link } from \u0026#34;react-router-dom\u0026#34;; export default function App() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Bookkeeper\u0026lt;/h1\u0026gt; \u0026lt;nav style={{ borderBottom: \u0026#34;solid 1px\u0026#34;, paddingBottom: \u0026#34;1rem\u0026#34;, }} \u0026gt; \u0026lt;Link to=\u0026#34;/invoices\u0026#34;\u0026gt;Invoices\u0026lt;/Link\u0026gt; |{\u0026#34; \u0026#34;} \u0026lt;Link to=\u0026#34;/expenses\u0026#34;\u0026gt;Expenses\u0026lt;/Link\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/div\u0026gt; ); }   ルーティング設定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  import React from \u0026#39;react\u0026#39;; import ReactDOM from \u0026#39;react-dom\u0026#39;; import \u0026#39;./index.css\u0026#39;; import reportWebVitals from \u0026#39;./reportWebVitals\u0026#39;; import { BrowserRouter, Routes, Route, } from \u0026#34;react-router-dom\u0026#34;; import App from \u0026#34;./App\u0026#34;; import Expenses from \u0026#34;./routes/Expenses\u0026#34;; import Invoices from \u0026#34;./routes/Invoices\u0026#34;; ReactDOM.render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;BrowserRouter\u0026gt; \u0026lt;Routes\u0026gt; // path URL  // element 画面  \u0026lt;Route path=\u0026#34;/\u0026#34; element={\u0026lt;App /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;expenses\u0026#34; element={\u0026lt;Expenses /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;invoices\u0026#34; element={\u0026lt;Invoices /\u0026gt;} /\u0026gt; // 上記のパスに当てはまらない場合  \u0026lt;Route path=\u0026#34;*\u0026#34; element={ \u0026lt;main style={{ padding: \u0026#34;1rem\u0026#34; }}\u0026gt; \u0026lt;p\u0026gt;There\u0026#39;s nothing here!\u0026lt;/p\u0026gt; \u0026lt;/main\u0026gt; } /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/BrowserRouter\u0026gt; \u0026lt;/React.StrictMode\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals();   5.実行 # probably this npm start # or this npm run dev これで起動して画面が出ればOK。\nあとは画面を増やしたり404ページを外出ししてあげたりなど工夫していけば良いでしょう。\n参考  React Router | Tutorial  ","description":"【React + TypeScript】 react-router-dom を使ってルーティングを実装するためのメモ","id":327,"section":"tech","tags":["React","TypeScript"],"title":"【React + TypeScript】 react-router-dom を使ってルーティングを実装する","uri":"https://c-a-p-engineer.github.io/tech/2022/03/14/react-router-dom-typescript/"},{"content":"【【Git】 作業ブランチにリベースを使って指定のブランチと最新の状態にマージする 作業ブランチで作業していると元ブランチとずっと枝分かれ状態で履歴が追いにくくなるので作業ブランチと指定のブランチをリベースを使ってマージする方法。\n例えば現状、古いところから枝分かれしたブランチを最新の状態に付け替えたい時にすることです。\ngitGraph: options { \u0026quot;nodeSpacing\u0026quot;: 150, \u0026quot;nodeRadius\u0026quot;: 10 } end commit branch newbranch checkout newbranch commit checkout master commit こうしたい。\ngitGraph: options { \u0026quot;nodeSpacing\u0026quot;: 150, \u0026quot;nodeRadius\u0026quot;: 10 } end commit commit branch newbranch checkout newbranch commit リベースを使ってマージをする 1. 前準備 リベース元になる指定ブランチをまずは最新化します。\ngit checkout [指定ブランチ] git pull 2. 作業ブランチに切り替える git checkout [作業ブランチ] 3. 対象のブランチから派生させる git rebase [指定のブランチ] 4. 競合が発生した場合 競合を解決してインデックスに追加後。\ngit rebase --continue 5. 確認 完了したら修正されているか確認しましょう。\ngit log --graph --all --format=\u0026quot;%x09%an%x09%h %d %s\u0026quot; コミット履歴がこういう風になっていれば成功です。\ngitGraph: options { \u0026quot;nodeSpacing\u0026quot;: 150, \u0026quot;nodeRadius\u0026quot;: 10 } end commit commit branch newbranch checkout newbranch commit 5. プッシュ 修正したら強制プッシュしてコミット履歴を修正。\n※この時に今までの履歴を修正するので強制プッシュする必要がありますが強制プッシュは他にメンバーが居る際にブランチを上書きするので注意してください。\ngit push -f rebase オプション リベースをやめる リベースをやめる際に以下のコマンドを実行することでリベース前の状態に戻されます。\ngit rebase --abort コンクリフトの対処 リベースを行った際に以前の他のブランチからマージしたものなども統合するのでコンクリフトが発生することがあります。\nその際はコンクリフトを解決してから該当ファイルをインデックスに追加後して以下のコマンドを行ってください。\nそうするとリベースが再開されます。\ngit rebase --continue コンクリフトのスキップ コンクリフトをスキップしてリベースを続けます。\n競合未解決のままでもリベースが続行されます。\nまたgit rebase --continue をして No changes - did you forget to use 'git add とエラーメッセージが出る時に使います。\nこれは1つ前のコミットと同様になった変更がない扱いになるのでその際に使います。\ngit rebase --skip 参考  git rebase | Atlassian Git Tutorial 【Git】git rebaseで作業ブランチに最新のmasterを持ってくる方法 - Qiita  ","description":"作業ブランチで作業していると元ブランチとずっと枝分かれ状態で履歴が追いにくくなるので作業ブランチと指定のブランチをリベースを使ってマージする方法","id":328,"section":"tech","tags":["Git"],"title":"【Git】 作業ブランチにリベースを使って指定のブランチと最新の状態にマージする","uri":"https://c-a-p-engineer.github.io/tech/2022/03/06/git-rebase-brunch/"},{"content":"【Git】 複数のコミットを rebase を使って1つにまとめる 複数のコミットログを rebase を使って1つのコミットとしてきれいにする方法\nrebase を使って複数コミットをまとめる 1. リベースを実行  ~ を使って指定\n~ の数に応じてコミットをまとめます。\n~ 4つなら4つのコミットを1つにします。  git rebase -i HEAD~~~~ \n* 数値を指定 数値を指定してまとめるコミット数を指定します。 ``` git rebase -i HEAD~4 ``` * ハッシュ値を指定 どこまでもコミットをまとめるかをハッシュ値を指定します。 ``` git rebase [ハッシュ値] ``` 2. コミットメッセージ修正 リベースを実行するとエディタが起動します。\n指定された箇所までのコミットが表示されます。\n※特に設定してなければ Vim が起動すると思うので使い慣れてない方は注意してください。\npick d39e256 コミット1 pick a5264f4 コミット2 pick 1acc768 コミット3 pick a5264f4 コミット4  (p)pick コミットをそのまま残す。 (r)reword コミットメッセージを変更。 (e)edit コミット自体の内容を編集。 (s)squash 直前のpickを指定したコミットに統合。メッセージも統合。 (f)fixup 直前のpickを指定したコミットに統合。メッセージは破棄。  エディタで編集して以下のようにするとすべてのコミットは コミット1とコミット2はコミット1 に コミット3とコミット4はコミット3 に統合されます。\npick d39e256 コミット1 f a5264f4 コミット2 pick 1acc768 コミット3 f a5264f4 コミット4 コミットメッセージを統合するためにエディタが開かれるので以下のようにメッセージを修正します。\n# This is a combination of 2 commits. # The first commit's message is: コミット1とコミット2統合 # This is the 2nd commit message: コミット3とコミット統合 完了したら修正されているか確認しましょう。\ngit log --graph --all --format=\u0026quot;%x09%an%x09%h %d %s\u0026quot; 3. プッシュ 最後に修正したコミットをプッシュします。\n※この時に今までの履歴を修正するので強制プッシュする必要がありますが強制プッシュは他にメンバーが居る際にブランチを上書きするので注意してください。\ngit push -f rebase オプション リベースをやめる リベースをやめる際に以下のコマンドを実行することでリベース前の状態に戻されます。\ngit rebase --abort コンクリフトの対処 リベースを行った際に以前の他のブランチからマージしたものなども統合するのでコンクリフトが発生することがあります。\nその際はコンクリフトを解決してから該当ファイルをインデックスに追加後して以下のコマンドを行ってください。\nそうするとリベースが再開されます。\ngit rebase --continue コンクリフトのスキップ コンクリフトをスキップしてリベースを続けます。\n競合未解決のままでもリベースが続行されます。\nまたgit rebase --continue をして No changes - did you forget to use 'git add とエラーメッセージが出る時に使います。\nこれは1つ前のコミットと同様になった変更がない扱いになるのでその際に使います。\ngit rebase --skip 参考  git rebase -i | Atlassian Git Tutorial  ","description":"複数のコミットログを rebase を使って1つのコミットとしてきれいにする方法","id":329,"section":"tech","tags":["Git"],"title":"【Git】 複数のコミットを rebase を使って1つにまとめる","uri":"https://c-a-p-engineer.github.io/tech/2022/03/06/git-rebase-i/"},{"content":"【Git】 直前のコミットのコミットを修正する amend Git でコミットメッセージに誤字やコミット忘れのファイルが有る際の対応メモ\n直前のコミットメッセージを修正 エディタを開いてコミットメッセージを編集 エディタ上で修正します。\ngit commit --amend コミットメッセージを指定 -m オプションで文言をターミナル上で指定します。\ngit commit --amend -m \u0026quot;誤字修正\u0026quot; コミットファイルを追加  まずはコミット漏れのファイルを追加  git add hoge.php --no-edit を使用して反映\nコミットメッセージはそのままで、追加の変更が最新のコミットに反映されます。  git commit --amend --no-edit 参考  git amend | Atlassian Git Tutorial  ","description":"Git でコミットメッセージに誤字やコミット忘れのファイルが有る際の対応メモ","id":330,"section":"tech","tags":["Git"],"title":"【Git】 直前のコミットのコミットを修正する amend","uri":"https://c-a-p-engineer.github.io/tech/2022/03/02/git-commit-change/"},{"content":"【Git】 would clobber existing tag を解決する git pull を行ったら以下のようなエラーが発生\n! [rejected] tag -\u0026gt; tag (would clobber existing tag) 原因 ローカルリポジトリとリモートリポジトリのタグの名前が重複していることが原因。\n対処 以下のコマンドを使用するとリモートリポジトリのタグでローカルリポジトリを更新します。\ngit fetch --tags -f 参考  git - How to get rid of \u0026ldquo;would clobber existing tag\u0026rdquo; - Stack Overflow  ","description":"git pull を行ったら would clobber existing tag というエラーが発生したので解決メモ","id":331,"section":"tech","tags":["Git"],"title":"【Git】 would clobber existing tag を解決する","uri":"https://c-a-p-engineer.github.io/tech/2022/02/23/git-existing-tag/"},{"content":"【AWS】MFA デバイスの削除する MFA設定途中に中断してしまってMFAデバイスを認証せずに残ってしまった際の対処メモ\n問題の発生  MFAデバイスの設定 仮想デバイスの設定 エンディティが既に存在します と表示された。  これは前回設定途中に中断してしまったことから発生。\nAWS CLIで対処 ログインは出来ていたのでシークレットキーの発行を行い AWS CLI を駆使して確認。\nデバイスの確認 まずはデバイスの確認を行います。\naws iam list-virtual-mfa-devices\naws iam list-virtual-mfa-devices 実行結果\n1 2 3 4 5 6 7 8 9 10  { \u0026#34;VirtualMFADevices\u0026#34;: [ { \u0026#34;SerialNumber\u0026#34;: \u0026#34;arn:aws:iam::123456789012:mfa/ExampleMFADevice\u0026#34; }, { \u0026#34;SerialNumber\u0026#34;: \u0026#34;arn:aws:iam::123456789012:mfa/Fred\u0026#34; } ] }   デバイスの削除 デバイスの確認で自分の中途半端に残ったデバイスのシリアルナンバーを特定して削除。\naws iam delete-virtual-mfa-device\naws iam delete-virtual-mfa-device --serial-number arn:aws:iam::123456789012:mfa/MFATest これを実行することで再度MFAの設定が可能になります。\n参考  Troubleshooting general IAM issues - I am not authorized to perform: iam:DeleteVirtualMFADevice  ","description":"MFA設定途中に中断してしまってMFAデバイスを認証せずに残ってしまった際の対処メモ","id":332,"section":"tech","tags":["AWS"],"title":"【AWS】MFA デバイスの削除する","uri":"https://c-a-p-engineer.github.io/tech/2022/02/20/aws-mfa-device-delete/"},{"content":"【AWS CLI】プロファイルを切り替えて使用する。 複数のサービスなどに関わっている場合、AWSのアカウントを切り替える必要があったりするのでそのためのメモ\nAWSのプロファイル設定 まずはAWSのプロファイルの設定を行います。\n Windows: %USERPROFILE%\\.aws\\credentials Linux or Mac: ~/.aws/credentials  1 2 3 4 5 6 7  [default]aws_access_key_id=XXXXXXXXXXXXXXXXXXXaws_secret_access_key=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX[user1]aws_access_key_id=XXXXXXXXXXXXXXXXXXXaws_secret_access_key=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  ちなみに僕の場合はプロファイルの設定をし忘れないようにあえて default は設定していません。\nプロファイルの切り替え コマンド実行時に都度指定 --profile で使用したいプロファイルを指定します。\naws configure list --profile user1 環境変数で切り替え  Linux or Mac  1  export AWS_PROFILE=user1    Windows  1  set AWS_PROFILE user1   参考  名前付きプロファイル - AWS Command Line Interface  ","description":"複数のサービスなどに関わっている場合、AWSのアカウントを切り替える必要があったりするのでそのためのメモ","id":333,"section":"tech","tags":["AWS"],"title":"【AWS CLI】プロファイルを切り替えて使用する","uri":"https://c-a-p-engineer.github.io/tech/2022/02/19/aws-cli-profile/"},{"content":"【PHP】github のリポジトリから直接 composer require でインストール github のリポジトリから直接 composer require でインストールするメモ。\nOSSのリポジトリの突然の削除や非公開の自作のパッケージを使用する際に使用できる方法です。\ncomposer に追記 以前に作成したパッケージを利用します。\nc-a-p-engineer/hello-world-composer: Hello,World in Composer\n1 2 3 4 5 6 7 8 9  { \u0026#34;repositories\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;c-a-p-engineer/hello-world-composer\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;vcs\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://github.com/c-a-p-engineer/hello-world-composer\u0026#34; } ] }    name パッケージの別名（なしでも可 vcs リポジトリのタイプ Repositories#Types url パッケージのURL  インストール インストール方法\n1  composer require [パッケージ名]:dev-[ブランチ名]   実際にインストールする方法は以下になります。\n1  composer require c-a-p-engineer/hello-world-composer:dev-master   これでインストールされ使用することが可能です。\n参考  Handling private packages - Composer  ","description":"github のリポジトリから直接 composer require でインストールするメモ","id":334,"section":"tech","tags":["php","composer"],"title":"【PHP】github のリポジトリから直接 composer require でインストール","uri":"https://c-a-p-engineer.github.io/tech/2022/02/07/composer-vcs-github/"},{"content":"【Windows】winget を使用してパッケージ管理をする Windows のCLIパッケージ管理ソフト winget を使用してパッケージ管理をする。\nこれを導入することによって今まで一々アプリサイトに行ってインストールしていた面倒な作業がなくなります。\nwinget はWindows Storeからインストールします。\nアプリ インストーラーからインストールが可能です。\nインストールが完了したらコマンドプロンプトを開き、以下のコマンドでバージョンが出たらインストール確認をできます。\n1  winget -v   パッケージを探す search コマンド (winget) - Microsoft Docs firefox を探してみます。\n1  winget search firefox   検索結果\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  名前 ID バージョン 一致 ソース ---------------------------------------------------------------------------------------------------- Mozilla Firefox Browser 9NZVDKPMR9RD Unknown msstore Mozilla Firefox Mozilla.Firefox 96.0.3 winget Mozilla Firefox ESR Mozilla.Firefox.ESR 91.5.1 Command: firefox winget Mozilla Firefox (Beta) Mozilla.Firefox.Beta 97.0 Command: firefox winget Firefox Developer Edition Mozilla.Firefox.DeveloperEdition 97.0b7 Tag: firefox winget MozBackup JasnaPaka.MozBackup 1.5.1 Tag: firefox winget PWAsForFirefox filips.FirefoxPWA 1.4.0 Tag: firefox winget Mypal Feodor2.Mypal 29.3.0 Tag: firefox winget Basilisk basilisk.basilisk 52.9.2021.12.13 Tag: firefox winget Nightly Mozilla.Firefox.Nightly 97.0a1 winget Pale Moon MoonchildProductions.PaleMoon 29.4.4 Tag: firefox-fork winget LibreWolf LibreWolf.LibreWolf 96.0.3 Tag: firefox-fork winget   パッケージをインストール install コマンド (winget) - Microsoft Docs\nFirefox Developer Edition をインストールしてみます。\nこの時、searchで表示された名前指定してください。\n1  winget install \u0026#34;Firefox Developer Edition\u0026#34;   パッケージの一覧 list コマンド (winget) - Microsoft Docs\nパッケージの一覧を取得します。\n1  winget list   この際に winget 以外でもインストールされているものが出力されます。\n1 2 3 4  名前 ID バージョン 利用可能 ソース ----------------------------------------------------------------------------------------------------------------------------------------- ペイント Microsoft.Paint_8wekyb3d8bbwe 11.2110.0.0 Firefox Developer Edition Mozilla.Firefox.DeveloperEdition 97.0 97.0b7 winget   パッケージのアップグレード upgrade コマンド (winget) - Microsoft Docs\nすべてのアプリをアップグレードします。\n1  winget upgrade --all   指定のアプリのアップグレード\n1  winget upgrade \u0026#34;Firefox Developer Edition\u0026#34;   パッケージのアンイストール uninstall コマンド (winget) - Microsoft Docs\nFirefox Developer Edition をアンインストールしてみます。\n1  winget uninstall \u0026#34;Firefox Developer Edition\u0026#34;   パッケージのエクスポート export コマンド (winget) - Microsoft Docs\n現在 winget で管理可能なアプリケーションを json に吐き出します。\nこれによりアプリのインストール済みのアプリの情報が保存できます。\n1  winget export ./winget.json   パッケージのインポート import コマンド (winget) - Microsoft Docs\nimport にて保存した json を読み込ませてアプリの一括インストールを行います。\n1  winget import ./winget.json   参考  winget ツールを使用したアプリケーションのインストールと管理 - Microsoft Docs  ","description":"Windows のCLIパッケージ管理ソフト winget を使用してパッケージ管理をする","id":335,"section":"tech","tags":["Windows","winget"],"title":"【Windows】winget を使用してパッケージ管理をする","uri":"https://c-a-p-engineer.github.io/tech/2022/02/05/windows-winget/"},{"content":"PhpSpreadsheet を少しでも軽くする方法 PHP で Excel を扱える PhpSpreadsheet がとにかく重く、メモリを使うので少しでも軽くする方法メモ。\nサンプル 書き込み、追記でないのであれば読み取りモードにすることで早くなります。\nまた最後にメモリを解放することでメモリの圧迫にも対応\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  use PhpOffice\\PhpSpreadsheet\\IOFactory; class Excel{ public function load($filePath, $sheetName){ $reader = IOFactory::createReader(\u0026#39;Xlsx\u0026#39;); // セルのデータだけ読み取る  $reader-\u0026gt;setReadDataOnly(true); // 特定のシートだけ読み取る  $reader-\u0026gt;setLoadSheetsOnly($sheetName); $spreadsheet = $reader-\u0026gt;load($filePath); // TODO 処理  // ワークシートを閉じてメモリを解放  $spreadsheet-\u0026gt;disconnectWorksheets(); $spreadsheet-\u0026gt;garbageCollect(); } }   参考  Read data only Read specific sheets only Clearing a Workbook from memory  ","description":"PhpSpreadsheet を少しでも軽くする方法メモ","id":336,"section":"tech","tags":["PHP"],"title":"PhpSpreadsheet を少しでも軽くする方法","uri":"https://c-a-p-engineer.github.io/tech/2022/01/30/phpspreadsheet-speedup/"},{"content":"Zipコマンドで特定のファイルを削除する Zipコマンドで特定のファイルを削除するメモ\nコマンド 圧縮されたファイルから特定のファイルを削除するコマンドは --delete or -d を付けることで可能です。\n1 2 3 4 5  # ZIP化 zip -r function.zip ./* # 不要ファイルを削除 zip --delete function.zip \u0026#34;*temp_dir*\u0026#34; \u0026#34;*temp*\u0026#34;```   色んなファイルをZIPに圧縮する場合、一々除外オプションを付けるより最後にこのコマンドを使って削除する方が楽です。\n参考     Remove single file from zip archive on Linux - Super User\n","description":"Zipコマンドで特定のファイルを削除するメモ","id":337,"section":"tech","tags":["Linux"],"title":"Zipコマンドで特定のファイルを削除する","uri":"https://c-a-p-engineer.github.io/tech/2022/01/26/zip-command-file-delete/"},{"content":"【AWS CLI】CloudWatchLogs を操作する AWS CLI で CloudWatchLogs を操作するメモ\nコマンド すべては紹介していないので足りない場合は公式を見てください。\nlogs — AWS CLI 1.22.41 Command Reference\nもしlocalstack を使用して確認したい場合は --endpoint-url http://localstack:4566 \\ とエンドポイントを指定すると向き先の変更ができます。\nCloudWatchLogs に対する操作ができない場合は権限などを疑ってみてください。\nロググループの作成 1 2 3 4  aws logs \\ create-log-group \\ --log-group-name TestLogGroup \\ --region ap-northeast-1   ログストリームの作成 1 2 3 4 5  aws logs \\ create-log-stream \\ --log-group-name TestLogGroup \\ --log-stream-name TestLogStream \\ --region ap-northeast-1   ログ送信 1 2 3 4 5  aws logs put-log-events \\ --log-group-name TestLogGroup \\ --log-stream-name TestLogStream \\ --log-events \\ timestamp=1461997171845,message=\u0026#34;test log message from AWS CLI\u0026#34;   ロググループ確認 1 2  aws logs describe-log-streams \\ --log-group-name TestLogGroup   ログをリアルタイムで確認する 1 2 3  aws logs tail \\ --follow \\ TestLogGroup   参考  logs — AWS CLI 1.22.41 Command Reference AWS CLIを使用してCloudWatchLogsを操作してみる | DevelopersIO  ","description":"AWS CLI で CloudWatchLogs を操作するメモ","id":338,"section":"tech","tags":["AWS","AWS CloudWatch Logs"],"title":"【AWS CLI】CloudWatchLogs を操作する","uri":"https://c-a-p-engineer.github.io/tech/2022/01/24/aws-cli-cloudwatchlogs/"},{"content":"【Laravel】CloudWatch Logs にログを出力する方法 Laravel で AWS の CloudWatch Logs にログを出力する方法。\n実装 1. composer インストール 1  composer require maxbanton/cwh   2. ログクラス作成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  \u0026lt;?php namespace App\\Logging; use Aws\\CloudWatchLogs\\CloudWatchLogsClient; use Maxbanton\\Cwh\\Handler\\CloudWatch; use Monolog\\Logger; class CloudWatchLoggerFactory { /** * Create a custom Monolog instance. * * @param array $config * @return \\Monolog\\Logger */ public function __invoke(array $config) { $sdkParams = $config[\u0026#34;sdk\u0026#34;]; $tags = $config[\u0026#34;tags\u0026#34;] ?? [ ]; $name = $config[\u0026#34;name\u0026#34;] ?? \u0026#39;cloudwatch\u0026#39;; // AWS CloudWatchLogs Cliant  $client = new CloudWatchLogsClient($sdkParams); $handler = new CloudWatch( $client, $config[\u0026#34;log_group\u0026#34;], // ロググループ  $config[\u0026#34;log_stream\u0026#34;], // ログストリーム  $config[\u0026#34;retention\u0026#34;], // ログ保持期間  10000, $tags ); $logger = new Logger($name); $logger-\u0026gt;pushHandler($handler); return $logger; } }   3. 設定追加 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026#39;cloudwatch\u0026#39; =\u0026gt; [ \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;custom\u0026#39;, // 作成したクラス  \u0026#39;via\u0026#39; =\u0026gt; \\App\\Logging\\CloudWatchLoggerFactory::class, \u0026#39;sdk\u0026#39; =\u0026gt; [ // AWS リージョン  \u0026#39;region\u0026#39; =\u0026gt; env(\u0026#39;AWS_DEFAULT_REGION\u0026#39;, \u0026#39;us-east-1\u0026#39;), \u0026#39;version\u0026#39; =\u0026gt; \u0026#39;latest\u0026#39;, // デプロイ先にIAMロールがアタッチされている場合、アタッチ済みロールを使用するなら削除する必要あり  \u0026#39;credentials\u0026#39; =\u0026gt; [ // AWS アクセスキー  \u0026#39;key\u0026#39; =\u0026gt; env(\u0026#39;AWS_ACCESS_KEY_ID\u0026#39;), // AWS シークレット  \u0026#39;secret\u0026#39; =\u0026gt; env(\u0026#39;AWS_SECRET_ACCESS_KEY\u0026#39;) ] ], // ロググループ名  \u0026#39;log_group\u0026#39; =\u0026gt; env(\u0026#39;CLOUDWATCH_LOG_GROUP\u0026#39;, \u0026#39;log-group\u0026#39;), // ログストリーム名  \u0026#39;log_stream\u0026#39; =\u0026gt; env(\u0026#39;CLOUDWATCH_LOG_STREAM\u0026#39;, \u0026#39;log-stream\u0026#39;), // ログ保持期間  \u0026#39;retention\u0026#39; =\u0026gt; env(\u0026#39;CLOUDWATCH_LOG_RETENTION\u0026#39;, 7), \u0026#39;level\u0026#39; =\u0026gt; env(\u0026#39;CLOUDWATCH_LOG_LEVEL\u0026#39;, \u0026#39;error\u0026#39;) ],   注意点 CloudWatchLogs を使用するのでいくつかの注意点があります。\n CloudWatchLogs に対する以下の権限が必要（面倒ならフル権限を与えましょう  CreateLogGroup ロググループの作成 CreateLogStream ログストリームの作成 PutLogEvents ログ送信 DescribeLogStreams ログ一覧   config/logging.php の credentials の設定  デプロイ先にIAMロールがアタッチされている場合、アタッチ済みロールを使用するなら削除する必要があります。    参考  php - Laravel 5.6 aws cloudwatch log - Stack Overflow  ","description":"Laravel で AWS の CloudWatch Logs にログを出力する方法","id":339,"section":"tech","tags":["PHP","Laravel","AWS CloudWatch Logs"],"title":"【Laravel】CloudWatch Logs にログを出力する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/01/22/laravel-aws-cloudwatchlogs/"},{"content":"【AWS Lambda】AWS Lambda で突然の死！ AWS Lambda がなぜかログも突然の死！何も言わずにただただ死んでいく！？\nなぜだ！？\nログが出ない AWS Lambda をでは stdout または stderr に書き込む事によって CloudWatch Logs にログが出されます。\nだがなぜか出ない。\n以下のような開始、終了、レポートしか出力されない状況に陥ってしまいました。\n1 2 3  START RequestId: c793869b-ee49-115b-a5b6-4fd21e8dedac Version: $LATEST END RequestId: c793869b-ee49-115b-a5b6-4fd21e8dedac REPORT RequestId: c793869b-ee49-115b-a5b6-4fd21e8dedac\tDuration: 128.83 ms\tBilled Duration: 200 ms\tMemory Size: 128 MB\tMax Memory Used: 74 MB\tInit Duration: 166.62 ms\tXRAY TraceId: 1-5d9d007f-0a8c7fd02xmpl480aed55ef0\tSegmentId: 3d752xmpl1bbe37e\tSampled: true   ログが出ない原因 ログが出ない原因は2つほどありました。\nタイムアウト 処理がタイムアウトするとタイムアウト時点で Lambda 落ちるようです。\n試してみて以下のような流れを感じました。\nLambda 処理終了 → Lambda の stdout stderr を CloudWatch Logs に送信 → Lambda 終了\nこの流れのため Lambda がタイムアウト時点でいっぱいまで動くとログを送信する時間がないように感じます。\nバッファリング構成\n timeoutMs - バッチをバッファーする最大時間（ミリ秒単位）。デフォルト: 1,000。最小: 25 最大: 30,000。\n 対策は タイムアウトさせない ことです。\nログ出力 Lambda はログの出力容量が以下の決まっております。\nバッファリング構成\n maxBytes - メモリにバッファするログの最大サイズ （バイト単位）。デフォルト: 262,144。最小: 262,144。最大: 1,048,576。\n このため大量のログを送るとクラッシュします。\n Lambda は、ランタイムがクラッシュした場合など、入力ストリームが閉じられている場合、ログをフラッシュします。\n 僕の場合、デバッグ用のログを大量に入れていたのでランタイムがクラッシュ → タイムアウトまで時間を食いつぶすという現象でした。\n対策は stdout stderr を通さず、直接 CloudWatch Logs にログを送る ことです。\nそうすることによりランタイムがクラッシュしない、タイムアウトしてもログが CloudWatch Logs に残ります。\n参考  AWS Lambda の Amazon CloudWatch Logs へのアクセス - AWS Lambda Lambda ログ API - AWS Lambda  ","description":"AWS Lambdaがなぜかログも突然の死！何も言わずにただただ死んでいく！？なぜだ！？","id":340,"section":"tech","tags":["AWS","AWS Lambda"],"title":"【AWS Lambda】AWS Lambda でログも出さすに突然の死！","uri":"https://c-a-p-engineer.github.io/tech/2022/01/20/aws-lambda-log-crush/"},{"content":"【Git】ファイル名の大文字・小文字の変更を検知 Gitではデフォルトでファイル名の大文字・小文字の変更は検知しない設定になっているため、ファイル名の大文字・小文字の変更を検知するメモ\n確認 1 2  $ git config --local core.ignorecase true   true だとファイル名の大小文字の変更を検知しません。\n変更 1  $ git config --local core.ignorecase false   false にしてファイル名の大小文字の変更を検知します。\n変更確認 1 2  $ git config --local core.ignorecase false   false になったのでこれで検知することが可能になりました。\n参考  Git - git config core.ignoreCase  ","description":"Gitではデフォルトでファイル名の大文字・小文字の変更は検知しない設定になっているため、ファイル名の大文字・小文字の変更を検知するメモ","id":341,"section":"tech","tags":["Git"],"title":"【Git】ファイル名の大文字・小文字の変更を検知","uri":"https://c-a-p-engineer.github.io/tech/2022/01/11/git-ignorecase/"},{"content":"【PHP】ignore_user_abortで接続が切れても処理を実行させ続ける。 PHPは接続が切られると処理が中断させられますが \u0026lsquo;ignore_user_abort\u0026rsquo; を使用すると接続が切れても処理を実行させ続ける事ができます。\nPHP: ignore_user_abort - Manual\n注意\nブラウザからの接続が切れても裏でプロセスが走り続けるので使い所によってはプロセスが大量に発生する可能性があります。\nそれだけに使い所が難しいものになると思っています。  サンプル 公式からのサンプルを元にしています。\nPHP: ignore_user_abort - Manual#example1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  \u0026lt;?php // 接続が切れてもプロセスを実行 ignore_user_abort(true); // タイムアウトなし set_time_limit(0); echo \u0026#39;PHP における接続ハンドリングのテスト\u0026#39;; $file = \u0026#39;log.txt\u0026#39; file_put_contents($file, \u0026#39;START\\n\u0026#39;); // 無限ループ while(1) { switch (connection_status()) { case CONNECTION_NORMAL: // アクティブ  file_put_contents($file, \u0026#39;ACTIVE\\n\u0026#39;); break; case CONNECTION_ABORTED: // ブラウザ切断  // 無限ループから抜ける  file_put_contents($file, \u0026#39;ABORTED\\n\u0026#39;); break 2; case CONNECTION_TIMEOUT: // PHP タイムアウト  // 無限ループから抜ける  file_put_contents($file, \u0026#39;TIMEOUT\\n\u0026#39;); break 2; default: // その他  break; } // 10 秒間お休み  file_put_contents($file, \u0026#39;SLEEP\\n\u0026#39;); sleep(10); } // TODO file_put_contents($file, \u0026#39;END\\n\u0026#39;);   これで接続が中断されてもステータスを受け取ってログを書き込みに来ます。\nこれを使用すれば、たとえば処理の途中切断を受け取ったらログを書き込む、DBをロールバックさせるなど、さまざまなことが可能になります。\n参考  PHP: ignore_user_abort - Manual PHP: connection_status - Manual  ","description":"ignore_user_abortを使用すると接続が切れても処理を実行させ続ける事が出来ます。","id":342,"section":"tech","tags":["PHP"],"title":"【PHP】ignore_user_abortで接続が切れても処理を実行させ続ける","uri":"https://c-a-p-engineer.github.io/tech/2022/01/08/php-ignore_user_abort/"},{"content":"【GitHub】GitHub Actions で Lighthouse を使用して自動的にサイトのSEOなどをチェックする GitHub Actions で Lighthouse を使用して自動的にサイトのSEOなどをチェックする方法。\nLighthouseを導入する サンプルの通りにまずは導入してみます。\nGitHub Lighthouse#Basic\nurls には検査対象のURLをカンマ区切りで設定してください。\n1 2 3 4 5 6 7 8 9 10 11 12  name:Lighthouseon:[pull_request]jobs:lighthouse:runs-on:ubuntu-lateststeps:- uses:actions/checkout@master- name:Lighthouseuses:foo-software/lighthouse-check-action@masterwith:urls:\u0026#39;https://www.foo.software,https://www.google.com\u0026#39;  Lighthouse 特定スコア以下を失敗扱いにする 特定スコア以下を失敗扱いにします。\nGitHub Lighthouse#Failing Workflows by Enforcing Minimum Scores\nこれを行うことでスコアが落ちた時に通知などさせることが出来ます。\nurls には検査対象のURLをカンマ区切りで設定してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  name:Lighthouseon:[pull_request]jobs:lighthouse-check:runs-on:ubuntu-lateststeps:- uses:actions/checkout@master- name:Lighthouseuses:foo-software/lighthouse-check-action@masterid:lighthouseCheckwith:urls:\u0026#39;https://www.foo.software,https://www.foo.software/contact\u0026#39;# 各スコア数値- name:Verify Lighthouse Check resultsuses:foo-software/lighthouse-check-status-action@masterwith:lighthouseCheckResults:${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}minAccessibilityScore:\u0026#34;90\u0026#34;minBestPracticesScore:\u0026#34;50\u0026#34;minPerformanceScore:\u0026#34;50\u0026#34;minProgressiveWebAppScore:\u0026#34;50\u0026#34;minSeoScore:\u0026#34;50\u0026#34;# 失敗時の処理- if:failure()run:echo failure  参考  Lighthouse Check · Actions · GitHub Marketplace Lighthouse Example | Doc  ","description":"GitHub Actions で Lighthouse を使用して自動的にサイトのSEOなどをチェックする方法","id":343,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions で Lighthouse を使用して自動的にサイトのSEOなどをチェックする","uri":"https://c-a-p-engineer.github.io/tech/2022/01/01/github-actions-lghthouse/"},{"content":"【Git】git で自動的に prune する 不要になったブランチを取り除くために prune を自動的に行う設定メモ\nprune は Gitで削除されたリポジトリをローカルから取り除くためのコマンドです。\npull 時に手動で行う 一応 pull時に手動 prune する方法\n1  git pull --prune   Git 全体に設定 Gitに設定して fetch する際に自動的に削除\ngit config --global fetch.prune true 特定リポジトリにのみ有効化する git config remote.origin.prune true Git Bash 以外でも prune させる この設定がないと TortoiseGit などのGit GUIツールで動かないことがあるようです。\ngit config --global gui.pruneDuringFetch true 参考情報  Automatic prune with Git fetch or pull - StackOverflow  ","description":"不要になったブランチを取り除くために prune を自動的に行う設定メモ","id":344,"section":"tech","tags":["Git"],"title":"【Git】git で自動的に prune する","uri":"https://c-a-p-engineer.github.io/tech/2021/12/31/git-prune-setting/"},{"content":"【VSCode】VSCodeのプラグイン開発を始める VSCodeのプラグイン開発を始めるためのメモ\n1. 環境の用意 私の場合は Docker と .devcontainer を使用しました。\n.devcontainer はこちらのものを使用しました。\n masoncusack /\nnodejs-typescript-dev-container  2. ジェネレーターインストール 最初に VSCode の拡張機能のジェネレーターをインストールします。\n1  npm install -g yo generator-code   3. 雛形の作成 yo code とコマンドを打つと以下のように雛形の作成が始まります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  _-----_ ╭──────────────────────────╮ | | │ Welcome to the Visual │ |--(o)--| │ Studio Code Extension │ `---------´ │ generator! │ ( _´U`_ ) ╰──────────────────────────╯ /___A___\\  / | ~ | __\u0026#39;.___.\u0026#39;__ ´ ` |° ´ Y ` ? What type of extension do you want to create? ? What\u0026#39;s the name of your extension? ? What\u0026#39;s the identifier of your extension? ? What\u0026#39;s the description of your extension? ? Initialize a git repository? ? Bundle the source code with webpack? ? Which package manager to use? ? Do you want to open the new folder with Visual Studio Code?    ? What type of extension do you want to create?  拡張機能のタイプ   ? What\u0026rsquo;s the name of your extension?  拡張機能名   ? What\u0026rsquo;s the identifier of your extension?  拡張機能のID   ? What\u0026rsquo;s the description of your extension?  拡張機能の説明   ? What\u0026rsquo;s your publisher name?  公開者   ? Initialize a git repository?  git の初期化    4.プラグインの確認 テンプレートを作成すると Hello,World が表示されるプラグインが作られます。\nテンプレートが作成されたディレクトリをルートディレクトリになるようにVSCodeを開きます。\n F5 を押すとデバックが実行され、デバック時に新たなVSCodeが開きます。 開いたVSCode側で Ctrl + Shift + P でコマンドパレットを開きます。 Hello World と入力 Hello, World とダイアログが表示されます。  5. パッケージ化  パッケージ化をするためにパッケージを入れます。  1  npm i -D vsce   パッケージ化を実行\n※README.md がデフォルトのままだと警告が出て止まります。  1  npx vsce package   パッケージをインストールする\n出力されたパッケージを指定してVSCodeにインストールする事が可能です。  code --install-extension helloworld-0.0.1.vsix 参考情報  Your First Extension | Visual Studio Code Extension API vscodeの拡張機能を作ってみた - Zenn  ","description":"VSCodeのプラグイン開発を始めるためのメモ","id":345,"section":"tech","tags":["Visual Studio Code"],"title":"【VSCode】VSCodeのプラグイン開発を始める","uri":"https://c-a-p-engineer.github.io/tech/2021/12/30/vscode-extension-develop/"},{"content":"【DB】テーブルを簡単に一括削除する方法 データベースでテーブルを簡単に一括削除する方法\nSQL スキーマで一括削除 特定のスキーマのテーブルを全て削除します。\n1 2  dropschemapubliccascade;createschemapublic;  他のスキーマも消す場合はスキーマ毎に削除してください。\nデータベースを作り直す データベースごと削除して再作成します。\n1 2  dropdatabaseDATABASE_NAME;createdatabaseDATABASE_NAME;  参考情報  How can I drop all the tables in a PostgreSQL database? - Stack Overflow  ","description":"データベースでテーブルを簡単に一括削除する方法","id":346,"section":"tech","tags":["DB"],"title":"【DB】テーブルを簡単に一括削除する方法","uri":"https://c-a-p-engineer.github.io/tech/2021/12/28/db-drop-tables/"},{"content":"【VSCode】SQLTools を使用してSQLを自動的に整形する VSCode でSQLを自動的に整形するためのメモ\n1. SQLTools インストール まずはSQLToolsをダウンロードします。\nSQLTools - Visual Studio Marketplace\nDBドライバを入れておけばよりSQLファイルを直接DBに接続して実行することが可能です。\nSQLTools #Supported Drivers\n2.setting.json SQLToolsの設定を行う。\nSQLTools - Settings Properties\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  { // SQLTools接続情報 \u0026#34;sqltools.connections\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;MySQL\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;localhost\u0026#34;, \u0026#34;driver\u0026#34;: \u0026#34;MySQL\u0026#34;, \u0026#34;port\u0026#34;: 3306, \u0026#34;database\u0026#34;: \u0026#34;test_db\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;root\u0026#34;, \u0026#34;askForPassword\u0026#34;: false, \u0026#34;password\u0026#34;: \u0026#34;root\u0026#34;, \u0026#34;connectionTimeout\u0026#34;: 15 } ], // SQLTools フォーマット \u0026#34;sqltools.format\u0026#34;: { \u0026#34;language\u0026#34;: \u0026#34;sql\u0026#34;, \u0026#34;indentSize\u0026#34;: 2, \u0026#34;reservedWordCase\u0026#34;: \u0026#34;lower\u0026#34;, \u0026#34;linesBetweenQueries\u0026#34;: 1 }, // フォーマッター設定 \u0026#34;[sql]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;mtxr.sqltools\u0026#34; }, // 保存時フォーマット設定 \u0026#34;editor.formatOnSave\u0026#34;: true }   3. SQLを自動整形 どうのように整形されるか試してみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  SELECTa,bFROMtCROSSJOINt2ont.id=t2.id_t;SELECTDISTINCTname,ROUND(age/7)field1,18+20ASfield2,\u0026#39;some string\u0026#39;FROMfoo;-- here is a comment # another comment UPDATE\u0026#34;log\u0026#34;SET\u0026#34;time\u0026#34;=\u0026#39;2020-02-01 09:00:00\u0026#39;WHERE\u0026#34;id\u0026#34;=1RETURNING\u0026#34;time\u0026#34;;CREATETABLEfoo(idINTEGERPRIMARYKEY,nameVARCHAR(200)NOTNULL);ALTERTABLEsupplierMODIFYsupplier_namechar(100)NOTNULL;selectt.column1Кириллица_cyrilic_alias,t.column2Latin_aliasfromdb_tabletwherea\u0026gt;=some_date1-- from anda\u0026lt;some_date2-- to andb\u0026gt;=some_date3-- and andb\u0026lt;some_date4-- where, select etc. and1=1;  保存後は以下のようになります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  selecta,bfromtcrossjoint2ont.id=t2.id_t;selectdistinctname,ROUND(age/7)field1,18+20asfield2,\u0026#39;some string\u0026#39;fromfoo;-- here is a comment # another comment update\u0026#34;log\u0026#34;set\u0026#34;time\u0026#34;=\u0026#39;2020-02-01 09:00:00\u0026#39;where\u0026#34;id\u0026#34;=1returning\u0026#34;time\u0026#34;;createtablefoo(idINTEGERprimarykey,nameVARCHAR(200)notnull);altertablesuppliermodifysupplier_namechar(100)notnull;selectt.column1Кириллица_cyrilic_alias,t.column2Latin_aliasfromdb_tabletwherea\u0026gt;=some_date1-- from anda\u0026lt;some_date2-- to andb\u0026gt;=some_date3-- and andb\u0026lt;some_date4-- where, select etc. and1=1;  参考情報  SQLTools  ","description":"VSCode でSQLを自動的に整形するためのメモ","id":347,"section":"tech","tags":["Visual Studio Code"],"title":"【VSCode】SQLTools を使用してSQLを自動的に整形する","uri":"https://c-a-p-engineer.github.io/tech/2021/12/23/vscode-sqltools/"},{"content":"【PHP】PHPでツイートする PHPで簡単にツイートをする方法\n1. Twitter Developer Twitter Developer に登録して、各種キーを確保してください。\nだいぶ前に登録したのでうろ覚えなので詳しくは Google先生 に聞いてください。\n英語で登録する必要がありますが、翻訳ソフトを使用しても通過するかと思います。\n審査には数日かかるらしいです。\n審査通過後、アプリを作成して各種キーを取得してください。\nアプリを作成する際は権限を Read And Write にしないとツイートする権限がないので注意してください。\n2. composer install まずはTwitter用のパッケージをインストールします。\nabraham/twitteroauth\n1  composer require abraham/twitteroauth   3. 自動ツイートコード tweet.phpを作ってPHPのコードを書きます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u0026lt;?php require __DIR__ . \u0026#39;/vendor/autoload.php\u0026#39;; use Abraham\\TwitterOAuth\\TwitterOAuth; $apiKey = \u0026#39;XXXXXXXXXX\u0026#39;; $apiSecret = \u0026#39;XXXXXXXXXX\u0026#39;; $accessToken = \u0026#39;XXXXXXXXXX\u0026#39;; $accessTokenSecret = \u0026#39;XXXXXXXXXX\u0026#39;; $connection = new TwitterOAuth($apiKey, $apiSecret, $accessToken, $accessTokenSecret); $result = $connection-\u0026gt;post(\u0026#34;statuses/update\u0026#34;, [ \u0026#34;status\u0026#34; =\u0026gt; \u0026#39;Hello,World\u0026#39;, ]); var_dump($result);   4. 実行 作ったPHPファイルを実行します。\n1  php tweet.php   これでPHPからツイートされます。\n参考情報  abraham/twitteroauth  ","description":"PHPで簡単にツイートをする方法","id":348,"section":"tech","tags":["PHP","Twitter"],"title":"【PHP】PHPでツイートする","uri":"https://c-a-p-engineer.github.io/tech/2021/12/19/php-tweet/"},{"content":"【PHPUnit】PHPUnit This element is not expected.. PHPUnit を実行すると以下のようなエラーが出る。\n1 2 3 4  The following problems have been detected: Line 38:p - Element \u0026#39;log\u0026#39;: This element is not expected..   原因 原因は PHPUnit9.3 の場合、log の記載方法が変わった。\nphpunit/ChangeLog-9.3\n対処 エラーが出る以下の書き方を変更。\n1 2 3  \u0026lt;logging\u0026gt; \u0026lt;log type=\u0026#34;junit\u0026#34; target=\u0026#34;logs/test/report.xml\u0026#34;/\u0026gt; \u0026lt;/logging\u0026gt;   ↓ 以下のように変更する。\n1 2 3  \u0026lt;logging\u0026gt; \u0026lt;junit outputFile=\u0026#34;logs/test/report.xml\u0026#34;/\u0026gt; \u0026lt;/logging\u0026gt;   参考情報  php - Why Doesn\u0026rsquo;t PHPUnit 9 expect the log child element of logging phpunit.xml.dist - Stack Overflow phpunit/ChangeLog-9.3  ","description":"PHPUnit を実行すると This element is not expected.. が出る","id":349,"section":"tech","tags":["PHP","PHPUnit"],"title":"【PHPUnit】PHPUnit This element is not expected..","uri":"https://c-a-p-engineer.github.io/tech/2021/12/18/php-unit-log-expected/"},{"content":"【PHP】PHPで簡単スクレイピング PHPで簡単にスクレイピングを始める\n環境  PHP7.1 より上のバージョン Goutte - GitHub  パッケージのインストール composer を利用してインストール\n1  composer require fabpot/goutte   使い方 基本的な使い方は GitHub に記載されています。\n Goutte - GitHub  アクセス 指定のURLにアクセスする。\n1 2 3 4 5 6 7 8  \u0026lt;?php require __DIR__ . \u0026#39;/vendor/autoload.php\u0026#39;; use Goutte\\Client; $client = new Client(); $crawler = $client-\u0026gt;request(\u0026#39;GET\u0026#39;, \u0026#39;https://www.google.com/\u0026#39;);   リンクをクリックする 指定のリンクをクリックする。\n1 2 3 4 5 6 7 8 9 10  \u0026lt;?php require __DIR__ . \u0026#39;/vendor/autoload.php\u0026#39;; use Goutte\\Client; $client = new Client(); $crawler = $client-\u0026gt;request(\u0026#39;GET\u0026#39;, \u0026#39;https://ja.wikipedia.org/\u0026#39;); $link = $crawler-\u0026gt;selectLink(\u0026#39;ウィキペディア\u0026#39;)-\u0026gt;link(); $crawler = $client-\u0026gt;click($link); var_dump($crawler);   属性を取得 画像の src を取得する。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;?php require __DIR__ . \u0026#39;/vendor/autoload.php\u0026#39;; use Goutte\\Client; $client = new Client(); $crawler = $client-\u0026gt;request(\u0026#39;GET\u0026#39;, \u0026#39;https://www.google.com/\u0026#39;); // 画像保存用変数 $images = []; // 画像を取得 $crawler-\u0026gt;filter(\u0026#39;img\u0026#39;)-\u0026gt;each(function ($node) use (\u0026amp;$images) { // 画像のSRCを取得  $images[] = $node-\u0026gt;filter(\u0026#39;img\u0026#39;)-\u0026gt;attr(\u0026#34;src\u0026#34;); }); var_dump($images);   ユーザエージェントを変更 ユーザーエージェントを変更します。\n1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?php require __DIR__ . \u0026#39;/vendor/autoload.php\u0026#39;; use Goutte\\Client; $client = new Client(); // ユーザーエージェントを設定 $client-\u0026gt;setServerParameter(\u0026#39;HTTP_USER_AGENT\u0026#39;, \u0026#39;test\u0026#39;); $crawler = $client-\u0026gt;request(\u0026#39;GET\u0026#39;, \u0026#39;https://www.ugtop.com/spill.shtml\u0026#39;); var_dump($crawler); exit;   参考情報  Goutte - GitHub  ","description":"PHPで簡単にスクレイピングを始める","id":350,"section":"tech","tags":["PHP","スクレイピング"],"title":"【PHP】PHPで簡単スクレイピング","uri":"https://c-a-p-engineer.github.io/tech/2021/12/17/php-scraping/"},{"content":"【GoLang】コーディング規約 Goのコーディング規約まとめ\nコーディング規約 インデント  タブを使用  半角スペースは使用しない    文字数  1行あたりの文字数の制限はない  長すぎる場合は改行しても良い    コメント  /* */ ブロックコメント // 行コメント 連続したコメントは縦に揃える  1 2 3 4  type T struct { name\tstring\t// name of the object \tvalue\tint\t// its value }   演算子  演算子の前後にスペースを入れない。  演算子の優先順位を明確にする時のみスペースを入れる。括弧は使用しない    1  x \u0026lt;\u0026lt; 8 + y \u0026lt;\u0026lt; 16   自動整形 以下のコマンドを使用することで go が自動的に整形をしてくれます\n1  go fmt hoge.go   アスタリスクで複数のファイルを一括でやってくれます。\n1  go fmt *   命名規則  ローワーキャメルケース  hogePiyo   アッパーキャメルケース  HogePiyo    ディレクトリ名  決まりなし？  ファイル名  決まりなし？  関数、構造体  内部向け  ローワーキャメルケース    1 2  // packageの内に公開する場合 func hogePiyo(filename string) (string, error) {}    外部向け  アッパーキャメルケース    1 2  // packageの外に公開する場合 func HogePiyo(filename string) (string, error) {}   type  ローワーキャメルケース  コンストラクタ  NewBook（New + 生成対象の構造体名）  インターフェイス  1つのメソッドを持つインターフェイスの場合  Reader（Read メソッドだけを持つインタフェース）    参考情報  Effective GO - The Go Programming Language  ","description":"GoLang のコーディング規約まとめ","id":351,"section":"tech","tags":["GoLang","コーディング規約"],"title":"【GoLang】コーディング規約","uri":"https://c-a-p-engineer.github.io/tech/2021/12/15/golang-coding-style/"},{"content":"【AWS Lambda Python】Python外部ライブラリのLayer一覧 AWS LambdaではPythonのライブラリによってはにLayerにする必要があります。\nLayerを作成するのも手間なので、すでに存在するLayerを使用しましょう。\nLayer Layerの情報こちらのGitHubにあります。\nkeithrozario/Klayers: Python Packages as AWS Lambda Layers\n使用したいLayerを探す方法  deployments python バージョン arns リージョン 使用したいパッケージ情報のArnを参照  使用可能なLayer 2021/12/11 現在使用可能なLayer一覧\n Cerberus aiobotocore aiohttp ansible arrow asyncio aws-lambda-powertools aws-psycopg2 aws-requests-auth aws-xray-sdk bcrypt beautifulsoup4 black boltons boto3 chevron cloudsplaining construct crhelper cryptography datadog dropbox dynamodb-encryption-sdk elasticsearch envelopes exchangelib ffmpeg-python flashtext geopy google-auth google-auth-oauthlib graphene grpcio gspread idna itsdangerous jellyfish jinja2 jsonschema kafka-python lambda-cache lambda-decorators langdetect ldap3 libgthread-so loguru lxml matplotlib mpld3 nltk numpy opencv-python-headless openpyxl opensearch-py pandas paramiko parliament passlib pika Pillow praw pulp pyarrow pycryptodome pydantic PyJWT pymongo PyMUPDF PyMySQL PyNaCl pyOpenSSL pyparsing pyqldb pysftp pytesseract python-docx python-Levenshtein-wheels pytz PyYAML rdklib records redshift-connector reportlab requests requests-html scipy shapely simplejson slackclient spacy spacy_model_en_small spacy_model_es_small SQLAlchemy tablib textdistance tinydb tldextract translate tweepy twilio xarray  参考  keithrozario/Klayers: Python Packages as AWS Lambda Layers  ","description":"AWS LambdaではPythonのライブラリによってはにLayerにする必要があります。Layerを作成するのも手間なので、すでに存在するLayerを使用しましょう。","id":352,"section":"tech","tags":["AWS","AWS Lambda","Python"],"title":"【AWS Lambda Python】Python外部ライブラリのLayer一覧","uri":"https://c-a-p-engineer.github.io/tech/2021/12/11/aws-lambda-python-layer-list/"},{"content":"【Python】SQLAlchemy where in 検索を行う PythonのSQLAlchemyでwhere句のinの検索を行う方法。\n失敗 SQLAlchemyで配列をinで検索するとエラーが出ます。\n1 2 3  bind_ids = [1, 2, 3, 4] query = \u0026#34;SELECT * FROM sampe_table t WHERE t.id IN (:ids;)\u0026#34; conn.execute(sqlalchemy.text(query), ids=bind_ids)   成功 inの検索を行う場合は以下のようにすると成功します。\nin → = ANY を使用してください。\n1 2 3  bind_ids = [1, 2, 3, 4] query = \u0026#34;SELECT * FROM sampe_table t WHERE t.id = ANY(:ids);\u0026#34; conn.execute(sqlalchemy.text(query), ids=bind_ids)   発行SQL\n1  SELECT*FROMsampe_tabletWHEREt.id=ANY(ARRAY[1,2,3,4]);  参考  python - How can I bind a list to a parameter in a custom query in SQLAlchemy? - Stack Overflow  ","description":"PythonのSQLAlchemyでwhere句のinの検索を行う方法","id":353,"section":"tech","tags":["Python","DB","PostgreSQL"],"title":"【Python】SQLAlchemy where in 検索を行う","uri":"https://c-a-p-engineer.github.io/tech/2021/12/11/python-sqlalchemy-where-in/"},{"content":"【Python】PostgreSQL使用時に文字列をエスケープする方法 PythonでPostgreSQL使用時に文字列をエスケープする方法メモ\nSQLエスケープ psycopg2 を使用します。\npsycopg2 を入れるには pip install psycopg2 でインストールが出来ます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  from psycopg2.extensions import adapt # SQLエスケープ def sql_escape(param): # 無名関数化 escape = lambda param: adapt(str(param).encode(\u0026#39;utf-8\u0026#39;).decode(\u0026#39;latin-1\u0026#39;)) # リスト対応 if isinstance(param, list): param = map(escape, param) return \u0026#34;,\u0026#34;.join(map(str, param)) # 辞書型対応 if isinstance(param, dict): param = map(escape, param) return (\u0026#34; , \u0026#34;.join(param.values())) # その他 return escape(param) # エスケープ対象文字列 param = \u0026#34; \u0026#39; \\ \u0026#34; # エスケープ string = str(sql_escape(param)) # 表示 print(string)   出力結果\n1 2  $ python main.py \u0026#39; \u0026#39;\u0026#39; \\\\ \u0026#39;   サンプルのシングルクォーテーションとバックスラッシュはエスケープされてシングルクォーテーションで囲まれます。\n参考  psycopg2.extensions – Extensions to the DB API - Psycopg 2.9.2 documentation  ","description":"PythonでPostgreSQL使用時に文字列をエスケープする方法メモ","id":354,"section":"tech","tags":["Python","DB","PostgreSQL"],"title":"【Python】PostgreSQL使用時に文字列をエスケープする方法","uri":"https://c-a-p-engineer.github.io/tech/2021/12/11/python-psycopg2-escape/"},{"content":"VSCode LiveShare でゲストに一部のファイルが共有されない VSCode の LiveShare を使用しているとゲストに .gitignore に記述された一部ファイルが共有されないという現象がありました。\n原因 VSCodeのセキュリティ対策として .gitignore に記述された一部ファイルが共有されません。\n対策 全てのファイルを共有する ホスト側に無効化するファイルをプロジェクト直下に配置する。\n1 2 3 4  { \u0026#34;$schema\u0026#34;: \u0026#34;http://json.schemastore.org/vsls\u0026#34;, \u0026#34;gitignore\u0026#34;:\u0026#34;none\u0026#34; }   細かい設定 1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;$schema\u0026#34;: \u0026#34;http://json.schemastore.org/vsls\u0026#34;, \u0026#34;gitignore\u0026#34;:\u0026#34;none\u0026#34;, \u0026#34;excludeFiles\u0026#34;:[ \u0026#34;*.p12\u0026#34;, \u0026#34;*.cer\u0026#34;, \u0026#34;token\u0026#34;, \u0026#34;.gitignore\u0026#34; ], \u0026#34;hideFiles\u0026#34;: [ \u0026#34;bin\u0026#34;, \u0026#34;obj\u0026#34; ] }   参考  【Tips】VSCode Live Share で.gitignore に記述したファイルが共有されない - Qiita Security - Visual Studio Live Share | Microsoft Docs #Controlling file access and visibility  ","description":"VSCode の LiveShare を使用しているとゲストに .gitignore に記述された一部ファイルが共有されないという現象がありました。","id":355,"section":"tech","tags":["Visual Studio Code"],"title":"VSCode LiveShare でゲストに一部のファイルが共有されない","uri":"https://c-a-p-engineer.github.io/tech/2021/12/06/vscode-liveshare-hidden/"},{"content":"【Python】パッケージを一括削除 インストール済みのパッケージを削除する方法\n削除方法 一括削除 現在入っているものを一括で削除。\nパッケージを消す前にインストール済みのパッケージを保存する場合は pip freeze \u0026gt; requirements.txt を行ってください。\npip freeze | xargs pip uninstall -y\n必要なものを再インストールする場合 一括削除した後に必要なものだけを再インストールして環境をきれいにする場合\n1. パッケージ記録 インストール済みのパッケージを保存\npip freeze \u0026gt; requirements.txt\n2. パッケージを選定 requirements.txt を開いて不要なものを削除\n3. 一括削除 パッケージを一括削除\npip freeze | xargs pip uninstall -y\n4. インストール requirements.txt に残したパッケージを再インストール\npip install -r requirements.txt\n参考  pipでインストールしたモジュールを全て削除 - Qiita  ","description":"インストール済みのパッケージを削除する方法","id":356,"section":"tech","tags":["Python"],"title":"【Python】パッケージを一括削除","uri":"https://c-a-p-engineer.github.io/tech/2021/12/04/python-pip-bulk-uninstall/"},{"content":"【AWS Lambda Python】pytzが使えない対応方法 AWS Lambda上で pytz を利用することが出来ません。\n対応方法メモ。\n失敗例 pytz を使用すると AWS Lambda 上で失敗します。\n1 2 3 4 5 6 7 8 9 10 11  from datetime import datetime import pytz def lambda_handler(event, context): # フォーマット date_format=\u0026#39;%Y/%m/%d%H:%M:%S %Z\u0026#39; # タイムゾーン設定 date = datetime.now(tz=pytz.timezone(\u0026#39;Asia/Tokyo\u0026#39;)) # 表示 print(\u0026#39;Japan DateTime is :\u0026#39;, date.strftime(date_format))   1 2 3 4 5  Response: { \u0026#34;errorMessage\u0026#34;: \u0026#34;Unable to import module \u0026#39;lambda_function\u0026#39;: No module named \u0026#39;pytz\u0026#39;\u0026#34;, \u0026#34;errorType\u0026#34;: \u0026#34;Runtime.ImportModuleError\u0026#34; }   対応方法 dateutil を使用するように修正します。\n1 2 3 4 5 6 7 8 9 10 11 12  from datetime import datetime from dateutil import tz def lambda_handler(event, context): # フォーマット date_format=\u0026#39;%Y/%m/%d%H:%M:%S %Z\u0026#39; # タイムゾーン time_zone = tz.gettz(\u0026#39;Asia/Tokyo\u0026#39;) # 日付 date = datetime.now(tz=time_zone) # 表示 print(\u0026#39;Japan DateTime is :\u0026#39;, date.strftime(date_format))   参考  amazon web services - Python timezone using only modules available in AWS Lambda? - Stack Overflow  ","description":"AWS Lambda上で pytz を利用することが出来ません。対応方法メモ。","id":357,"section":"tech","tags":["AWS","AWS Lambda","Python"],"title":"【AWS Lambda Python】pytzが使えない対応方法","uri":"https://c-a-p-engineer.github.io/tech/2021/12/04/aws-lambda-python-pytz/"},{"content":"【AWS Lambda Python】Postgresを利用する方法 AWS Lambda上で psycopg2 を利用することが出来ません。\nそのため、AWS Lambda用の psycopg2 を入れる必要があります。\n対応方法 1. ライブラリをダウンロード こちらからダウンロード。\npsycopg2 Python Library for AWS Lambda\nもしくは git clone してください。\n1  git clone https://github.com/jkehler/awslambda-psycopg2.git   2. 使用するバージョン Pythonのバージョンに合わせて、ダウンロードしたディレクトリの psycopg2-3.x を Lambdaにデプロイするコードと同じディレクトリに配置。\n3. ディレクトリ名変更 psycopg2-3.x → psycopg2 に変更。\n4. Lambdaにデプロイ Lambdaに psycopg2 のフォルダも合わせてデプロイしてください。\n参考  AWSのLambdaからPostgresを利用  ","description":"AWS Lambda上の Python で psycopg2 を利用することが出来ません。そのため、AWS Lambda用の psycopg2 を入れる必要があります。","id":358,"section":"tech","tags":["AWS","AWS Lambda","Python"],"title":"【AWS Lambda Python】Postgresを利用する方法","uri":"https://c-a-p-engineer.github.io/tech/2021/12/04/aws-lambda-python-psycopg2/"},{"content":"【Laravel】ログをJSON化する方法 ログをJSON化する方法\nサンプルコード 確認環境 PHP 8.0.1\nLaravel 8.73.2 JSONフォーマットクラスを作成 ログのフォーマットを変更するクラスを作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?php declare(strict_types=1); namespace App\\Logging; use Monolog\\Formatter\\LineFormatter; class JsonLogFormatter extends LineFormatter { public function format(array $record):string { return json_encode(parent::format($record)); } }   ログ適用クラスを作成 ログのフォーマットを適用させるクラスを作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;?php declare(strict_types=1); namespace App\\Logging; use App\\Logging\\JsonLogFormatter; class JsonLogApply { public function __invoke($logging) { $jsonFormatter = new JsonLogFormatter(); foreach($logging-\u0026gt;getHandlers() as $handler) { $handler-\u0026gt;setFormatter($jsonFormatter); } } }   ログを追加 logging.php にログを追加。\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?php return [ // この行を追加  \u0026#39;json\u0026#39; =\u0026gt; [ \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;daily\u0026#39;, \u0026#39;path\u0026#39; =\u0026gt; storage_path(\u0026#39;logs/laravel.log\u0026#39;), \u0026#39;level\u0026#39; =\u0026gt; env(\u0026#39;LOG_LEVEL\u0026#39;, \u0026#39;debug\u0026#39;), \u0026#39;days\u0026#39; =\u0026gt; 14, \u0026#39;tap\u0026#39; =\u0026gt; [App\\Logging\\JsonLogApply::class], ], ]   設定を変更 .env の設定を変更\n1  LOG_CHANNEL=custom  ログを仕込む Welcomeページに仕込みました。\n1 2 3 4 5 6 7 8 9 10  \u0026lt;?php use Illuminate\\Support\\Facades\\Route; use Illuminate\\Support\\Facades\\Log; Route::get(\u0026#39;/\u0026#39;, function () { Log::debug(\u0026#39;test\u0026#39;); return view(\u0026#39;welcome\u0026#39;); });   出力結果 JSONになって出力されるようになりました。\n1  {\u0026#34;message\u0026#34;:\u0026#34;test\u0026#34;,\u0026#34;context\u0026#34;:[],\u0026#34;level\u0026#34;:100,\u0026#34;level_name\u0026#34;:\u0026#34;DEBUG\u0026#34;,\u0026#34;channel\u0026#34;:\u0026#34;local\u0026#34;,\u0026#34;datetime\u0026#34;:\u0026#34;2021-12-01T03:52:01.518468+00:00\u0026#34;}}   参考  LaravelのログをJsonで吐き出せる様にする方法、AWSのCloudWatchを使おう。 - Qiita  ","description":"LaravelでログをJSON化する方法","id":359,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】ログをJSON化する方法","uri":"https://c-a-p-engineer.github.io/tech/2021/12/01/laravel-log-json/"},{"content":"【Laravel】ログにログ出力元のファイル情報などを出力する Laravelで簡単にログにログ出力元のファイル情報などを出力する方法メモ。\nサンプルコード 確認環境 PHP 8.0.1\nLaravel 8.73.2 ログカスタマイズクラスを作成 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  \u0026lt;?php declare(strict_types=1); namespace App\\Logging; use Monolog\\Logger; class CustomLog { public function __invoke($monolog) { foreach ($monolog-\u0026gt;getHandlers() as $handler) { // ファイル名、行、クラス名、ファンクション名  $handler-\u0026gt;pushProcessor(new \\Monolog\\Processor\\IntrospectionProcessor( \\Monolog\\Logger::DEBUG, [ // 出力しないフォルダ  \u0026#39;Monolog\\\\\u0026#39;, \u0026#39;Illuminate\\\\\u0026#39;, \u0026#39;Fruitcake\\\\\u0026#39;, ] )); // ホスト名  $handler-\u0026gt;pushProcessor(new \\Monolog\\Processor\\HostnameProcessor()); // メモリ最大使用量  $handler-\u0026gt;pushProcessor(new \\Monolog\\Processor\\MemoryPeakUsageProcessor()); // メモリ使用量  $handler-\u0026gt;pushProcessor(new \\Monolog\\Processor\\MemoryUsageProcessor()); // プロセスID  $handler-\u0026gt;pushProcessor(new \\Monolog\\Processor\\ProcessIdProcessor()); } } }   ログを追加 logging.php にログを追加。\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?php return [ // この行を追加  \u0026#39;custom\u0026#39; =\u0026gt; [ \u0026#39;driver\u0026#39; =\u0026gt; \u0026#39;daily\u0026#39;, \u0026#39;path\u0026#39; =\u0026gt; storage_path(\u0026#39;logs/laravel.log\u0026#39;), \u0026#39;level\u0026#39; =\u0026gt; env(\u0026#39;LOG_LEVEL\u0026#39;, \u0026#39;debug\u0026#39;), \u0026#39;days\u0026#39; =\u0026gt; 14, \u0026#39;tap\u0026#39; =\u0026gt; [App\\Logging\\CustomLog::class], ], ]   設定を変更 .env の設定を変更\n1  LOG_CHANNEL=custom  ログを仕込む Welcomeページに仕込みました。\n1 2 3 4 5 6 7 8 9 10  \u0026lt;?php use Illuminate\\Support\\Facades\\Route; use Illuminate\\Support\\Facades\\Log; Route::get(\u0026#39;/\u0026#39;, function () { Log::debug(\u0026#39;test\u0026#39;); return view(\u0026#39;welcome\u0026#39;); });   出力結果 ログに適用したプロセスIDなどが出力されるようになりました。\n1  [2021-12-01 02:44:56] local.DEBUG: test {\u0026#34;process_id\u0026#34;:7,\u0026#34;memory_usage\u0026#34;:\u0026#34;2 MB\u0026#34;,\u0026#34;memory_peak_usage\u0026#34;:\u0026#34;2 MB\u0026#34;,\u0026#34;hostname\u0026#34;:\u0026#34;d2dc8b7547c8\u0026#34;,\u0026#34;file\u0026#34;:\u0026#34;/var/www/app/public/index.php\u0026#34;,\u0026#34;line\u0026#34;:52,\u0026#34;class\u0026#34;:null,\u0026#34;function\u0026#34;:null}   参考  [Laravel] ログにファイル名と行番号を追加する | akamist blog  ","description":"Laravelで簡単にログにログ出力元のファイル情報などを出力する方法","id":360,"section":"tech","tags":["PHP","Laravel"],"title":"【Laravel】ログにログ出力元のファイル情報などを出力する","uri":"https://c-a-p-engineer.github.io/tech/2021/12/01/laravel-log-custom/"},{"content":"【PHP】柔らかいプロパティの扱い __set __get の罠 柔軟な PHP の柔らかいプロパティの扱いでマジックメソッド __set __get の罠があります。\nPHP: マジックメソッド - Manual\n確認環境  PHP 7.3.0-8.0.13  https://3v4l.org/ 上で確認    PHPはとても柔軟 PHP はとても柔軟な言語で以下のように宣言していないプロパティを実行しても柔軟に吸収をしてくれます。\n1 2 3 4 5 6 7  \u0026lt;?php class Hoge{ } $hoge = new Hoge(); $hoge-\u0026gt;piyo = \u0026#39;piyo\u0026#39;; var_dump($hoge);   出力結果\nobject(Hoge)#1 (2) { [\u0026quot;piyo\u0026quot;]=\u0026gt; string(4) \u0026quot;piyo\u0026quot; } __get __setを使ってみる マジックメソッドの __get __set を使用してみます。\n __get はクラスにないプロパティを取得する際に呼ばれます。 __set はクラスにないプロパティを設定する際に呼ばれます。  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026lt;?php class Hoge { public function __set($name, $value) { $this-\u0026gt;$name = $value; } public function __get($name) { if(isset($this-\u0026gt;$name)) { return $this-\u0026gt;$name; } return null; } } $hoge = new Hoge(); $hoge-\u0026gt;piyo = \u0026#39;piyo\u0026#39;; var_dump($hoge);   出力結果\n1 2 3 4  object(Hoge)#1 (2) {  [\u0026#34;piyo\u0026#34;]=\u0026gt; string(4) \u0026#34;piyo\u0026#34; }   __set __get の罠 マジックメソッドの __get __set を使用はなんにも問題ないように見えますが…\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  \u0026lt;?php class Hoge { public function __set($name, $value) { $this-\u0026gt;$name = $value; } public function __get($name) { if(isset($this-\u0026gt;$name)) { return $this-\u0026gt;$name; } return null; } } $hoge = new Hoge(); $hoge-\u0026gt;piyo = \u0026#39;piyo\u0026#39;; $hoge-\u0026gt;fuga[0] = \u0026#39;test\u0026#39;; var_dump($hoge);   こうすると Notice が出てきます。\nどこかしら不具合が出る可能性が高くなるので気をつけてください。\nこの場合、先に __get が動いてしまい、存在しないクラスにないプロパティ fuga の配列を見ようとしてエラーが出ます。\nおそらく配列の場合は配列のキーを主体にしているためだと思います。\nとても柔らかくしたい 柔軟なやり取りを行いたい場合は __get __set を使わないようするのが一番だと思われます。\n1 2 3 4 5 6 7 8 9  \u0026lt;?php class Hoge { } $hoge = new Hoge(); $hoge-\u0026gt;piyo = \u0026#39;piyo\u0026#39;; $hoge-\u0026gt;fuga[0] = \u0026#39;test\u0026#39;; var_dump($hoge);   1 2 3 4 5 6 7 8 9  object(Hoge)#1 (2) {  [\u0026#34;piyo\u0026#34;]=\u0026gt; string(4) \u0026#34;piyo\u0026#34; [\u0026#34;fuga\u0026#34;]=\u0026gt; array(1) { [0]=\u0026gt; string(4) \u0026#34;test\u0026#34; } }   ","description":"柔軟な PHP の柔らかいプロパティの扱いでマジックメソッド __set __get 罠","id":361,"section":"tech","tags":["PHP"],"title":"【PHP】柔らかいプロパティの扱い __set __get の罠","uri":"https://c-a-p-engineer.github.io/tech/2021/11/25/php-get-set/"},{"content":"VSCodeで同人誌の技術本執筆環境を作った 技術本執筆をしたいと思っていましたが、中々執筆環境をどうしようか悩んでいろいろなツールを試してましたが、VSCodeで執筆環境お整えてみました。\n環境構築 VSCode執筆環境用リポジトリを作成しておりますのでこちらを利用するのも良いかも知れません。\nVSCodeに以下のプラグインのインストールを行います。\n Markdown PDF\nMarkdown → PDF 変換 Markdown Preview Enhanced\nMarkdownプレビュー PDF Preview\nPDF プレビュー Draw.io Integration\nDraw.io 画像制作用 テキスト校正くん\nテキスト校正用  設定 VSCodeの設定ファイルは以下のようにしてすると .md 保存時に自動的に pdf ファイルを自動的に出力してくれるようになります。\n細かい設定に方法にツイては各プラグインのページを見てください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  /* * Markdown PDF */ // 改行 \u0026#34;markdown-pdf.breaks\u0026#34;: true, // css \u0026#34;markdown-pdf.styles\u0026#34;: [ \u0026#34;./css/style.css\u0026#34;, ], // 余白 \u0026#34;markdown-pdf.margin.top\u0026#34;: \u0026#34;2cm\u0026#34;, \u0026#34;markdown-pdf.margin.bottom\u0026#34;: \u0026#34;3.5cm\u0026#34;, \u0026#34;markdown-pdf.margin.right\u0026#34;: \u0026#34;2cm\u0026#34;, \u0026#34;markdown-pdf.margin.left\u0026#34;: \u0026#34;2cm\u0026#34;, // 保存時自動変換 \u0026#34;markdown-pdf.convertOnSave\u0026#34;: true, // 出力フォルダ \u0026#34;markdown-pdf.outputDirectory\u0026#34;: \u0026#34;./output/\u0026#34;, // header/footer 表示 \u0026#34;markdown-pdf.displayHeaderFooter\u0026#34;: true, // 自動変換除外ファイル \u0026#34;markdown-pdf.convertOnSaveExclude\u0026#34;: [ \u0026#34;README.md\u0026#34;, ], /* * Markdown Preview Enhanced */ // 改行設定 \u0026#34;markdown.preview.breaks\u0026#34;: true   参考  VS CodeとMarkdownで書いた技術同人誌に導入したCSS組版 - Qiita  ","description":"VSCodeで同人誌の技術本執筆環境を作った。","id":362,"section":"tech","tags":["Visual Studio Code"],"title":"VSCodeで同人誌の技術本執筆環境を作った","uri":"https://c-a-p-engineer.github.io/tech/2021/11/23/vscode-book-writing/"},{"content":"【Docker】ローカル環境で AWS サービスのモックが使える 【Localstack】 S3やSQSなどのAWSのテストや検証を行いたい時に一々AWS環境に用意するのも面倒。\nそんな時に使えるDockerでローカル環境で気軽にAWSサービスを使用できるモック環境の「Localstack」のご紹介。\nDocker環境構築 以下のリポジトリにファイルがございます。\n Docker AWS Mock  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  version:\u0026#39;3\u0026#39;services:localstack:container_name:localstackimage:localstack/localstack:latestports:- \u0026#34;4566:4566\u0026#34;- \u0026#34;4571:4571\u0026#34;environment:- SERVICES=${SERVICES- }- DEBUG=${DEBUG- }- DATA_DIR=${DATA_DIR- }- LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }- HOST_TMP_FOLDER=${TMPDIR:-/tmp/}localstack- DOCKER_HOST=unix:///var/run/docker.sockvolumes:- \u0026#34;${TMPDIR:-/tmp/localstack}:/tmp/localstack\u0026#34;- \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34;# AWS CLIaws-cli:container_name:aws-cliimage:amazon/aws-cli:latestenvironment:AWS_ACCESS_KEY_ID:${AWS_ACCESS_KEY_ID}AWS_SECRET_ACCESS_KEY:${AWS_SECRET_ACCESS_KEY}AWS_DEFAULT_REGION:${AWS_DEFAULT_REGION}AWS_DEFAULT_OUTPUT:${AWS_DEFAULT_OUTPUT}entrypoint:\u0026#34;aws\u0026#34;command:\u0026#34;help\u0026#34;tty:true  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  ################################################################################# General Setup #################################################################################### Paths ################################################## Choose storage path on your machine. For all storage systemsDATA_PATH_HOST=./data# AWS SettingsAWS_ACCESS_KEY_ID=AWS_ACCESS_KEY_IDAWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEYAWS_DEFAULT_REGION=ap-northeast-1AWS_DEFAULT_OUTPUT=json# Localstack ServersLOCALSTACK_SERVICES=s3  ※ LOCALSTACK_SERVICES に使用したいサービスを記載してください。\nlocalstack で使用できるサービス こちらに記載がありました。（2021/11/20 現時点\n localstack - docker hub    ACM API Gateway CloudFormation CloudWatch CloudWatch Logs DynamoDB DynamoDB Streams EC2 Elasticsearch Service EventBridge (CloudWatch Events) Firehose IAM Kinesis KMS Lambda Redshift Route53 S3 SecretsManager SES SNS SQS SSM StepFunctions STS   使用する際は AWS CLI Command の値を使用するとのこと。\n例えば S3 を使用したい場合は s3 となります。\nAWS コマンドを localstack に実行する サンプルの aws-cli 環境に入ってやります。\n※既に AWS CLI が入っているのであれば不要\n1  docker exec -it aws-cli sh   localstack に向けて実行するため --endpoint-url が必要になります。\nホスト側から実行する場合は localstack → localhostにしてください。\n試しに localstack に S3 のバケットを作成。\n1 2  aws --endpoint-url=http://localstack:4566 \\ s3 mb s3://develop   作成できたら以下のコマンドで確認\n1 2  aws --endpoint-url=http://localstack:4566 \\ s3 ls   これでローカル環境でAWSの様々なサービスを試すことが出来ます。\n参考  localstack - github localstack - docker hub  ","description":"Dockerでローカル環境で気軽にAWSサービスを使用できるモック環境の「Localstack」のご紹介","id":363,"section":"tech","tags":["Docker"],"title":"【Docker】ローカル環境で AWS サービスのモックが使える 【Localstack】","uri":"https://c-a-p-engineer.github.io/tech/2021/11/20/aws-mock-localstack/"},{"content":"VSCode で簡単に開発環境を整える devcontainer 開発環境を作る際にただでさえ、ローカル環境を整えるのに苦労しますがエディタなどの環境を整えるのも一苦労します。\nその言った時に VSCode の devcontainer を使用するととても簡単に環境を整える事が出来ます。\n前提  VSCode をエディタとして利用  プラグイン Remote - Containers 導入済み   Docker を導入済み  簡単にご説明しますと Docker 内で VSCode が起動するので環境が同一になるように作られています。\n Developing inside a Container using Visual Studio Code Remote Development  導入方法 試しにサンプルリポジトリを使用してみます。\n microsoft / vscode-remote-try-python を試しにダウンロードしてください。 VSCode 内でコマンド \u0026gt; Remote-Containers: Open Folder in Container を実行するとフォルダダイアログが開かれます。 フォルダダイアログから .devcontainer があるフォルダを開きます。 VSCodeが新たに開き直されてDockerが実行されます。 開き終わると環境が構築されます。  サンプルのファイルは Dockerfiile を指定していますが docker-compose.yml を利用することなども出来ます。\nこれだけで複雑な環境を作る必要なく使用が可能です。\n","description":"VSCode で簡単に開発環境を整える devcontainer","id":364,"section":"tech","tags":["Visual Studio Code"],"title":"VSCode で簡単に開発環境を整える devcontainer","uri":"https://c-a-p-engineer.github.io/tech/2021/11/18/vscode-devconteiner/"},{"content":"【Docker】Docker Desktop VPN を使用しているとwsl2でエラーが出る Docker Desktop で VPN を使用しているとwsl2でエラーが出る。\n現象 Docker Desktop を Hyper-v から wsl2 に切り替え。\n切り替えて再起動後に Docker Desktop がエラーを出すようになりました。\n原因 VPN を設定している事が原因でした。\n対策 対策は以下のコマンドを使用してネットワーク情報を初期化します。\nwsl --shutdown netsh winsock reset 参考  Error The attempted operation is not supported for the type of object referenced when using virtual network adapter on wsl2 · Issue #5351 · microsoft/WSL  ","description":"Docker Desktop で VPN を使用しているとwsl2でエラーが出る","id":365,"section":"tech","tags":["Git"],"title":"【Docker】Docker Desktop で VPN を使用しているとwsl2でエラーが出る","uri":"https://c-a-p-engineer.github.io/tech/2021/11/09/docker-wsl2-vpn-error/"},{"content":"【Git】 autocrlf false なのに CRLF に自動変換される現象 Git で autocrlf false なのに CRLF に自動変換される現象が発生。\nその解決方法のメモ。\n現象 Git の autocrlf=false なのにリポジトリにアップされているファイルと改行コードが違う。\nautocrlf を確認 まずは autocrlf の確認をして自動変換がなされないことを確認\ngit config --global core.autocrlf  input   checkout: 元のまま     commit: LFに変換   true   checkout: CRLFへ変換     commit: LFに変換   false   checkout: 元のまま     commit: 元のまま    もし設定されてなければ以下のコマンドで false に設定すると自動変換されません。\ngit config --global core.autocrlf false 原因 犯人は.gitattributes .gitattributes の設定が犯人でした。\n1 2  # Set the default behavior, in case people don\u0026#39;t have core.autocrlf set.*text=auto  \n * text=auto にすると変換を行うかどうかはGit任せになります。\nこの設定少し厄介で、\nautocrlfが「false」の状態でこの.gitattributesを追加するとautocrlfの設定を無視してCRLFに変換されるそうです。ええ・・・\n「input」なら問題なしです。\n引用元：【Git】変更していないのに勝手に変更されるファイルがある時の対処法 | offlo.in（オフロイン）\n 対策 対策をいくつか。\n外す 指定を辞めます。\n1  # * text eol=lf  指定する ちゃんと指定すること\n1  *text eol=lf  注意点 ただし、上記2つの方法をやった後はローカルのリポジトリを取得しなおさないと中途半端な状態になるので作り直すようにしてください。\n参考  【Git】変更していないのに勝手に変更されるファイルがある時の対処法 | offlo.in（オフロイン）  ","description":"Git で autocrlf false なのに CRLF に自動変換される現象","id":366,"section":"tech","tags":["Git"],"title":"【Git】 autocrlf false なのに CRLF に自動変換される現象","uri":"https://c-a-p-engineer.github.io/tech/2021/11/07/git-autocrlf-auto/"},{"content":"【Docker】docker-compose の環境変数にデフォルト値を設定する方法 docker-compose の環境変数にデフォルト値を設定する方法のメモ。\nデフォルト値の設定方法 通常 通常 .env から取得して環境変数を使用する方法\n1 2 3 4  version:\u0026#39;3\u0026#39;services:python:image:\u0026#34;python:${PYTHON_VERSION}\u0026#34;   デフォルト値を設定 .env に PYTHON_VERSION が設定されていない、もしくは空の時 Python3 のイメージを持ってくる設定。\n1 2 3 4  version:\u0026#39;3\u0026#39;services:python:image:\u0026#34;python:${PYTHON_VERSION:-3}\u0026#34;    ${VARIABLE:-default} VARIABLE が未設定、もしくは empty であれば default を設定する。 ${VARIABLE-default} VARIABLE が未設定であれば default を設定する。  エラーの設定 変数が設定されていない場合にエラーを出す事も出来ます。\n1 2 3 4  version:\u0026#39;3\u0026#39;services:python:image:\u0026#34;python:${PYTHON_VERSION:?err}\u0026#34;    ${VARIABLE:?err} VARIABLE が未設定 、もしくはemptyであればdefaultを設定する。 ${VARIABLE?err} VARIABLE が未設定 、defaultを設定する。  参考  Environment variables in Compose | Docker Documentation  ","description":"docker-compose の環境変数にデフォルト値を設定する方法。","id":367,"section":"tech","tags":["Docker"],"title":"【Docker】docker-compose の環境変数にデフォルト値を設定する方法","uri":"https://c-a-p-engineer.github.io/tech/2021/10/29/docker-variable-default/"},{"content":"【GitHub】GitHub Actions で PHP を自動整形させる GitHub Actions で PHP_codesniffer を利用して PHP の自動整形させる方法。\nちなみにプルリクなどの際にコードチェックしてくれるのは以下の方法で可能なようです。\nchekalsky / phpcs-action\nPHP自動整形 先に以下のようにローカルで一度インストールして composer.json に入れるようにしてください。\ncomposer require --dev \u0026quot;squizlabs/php_codesniffer\u0026quot; ※サンプルでは masterブランチにコミットする度に整形が走ります。\n出来ればコミットログが汚くなるのが嫌であればローカルで実行するなりする方法を考えてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  name:PHP_CodeSniffieron:push:branches:- masterjobs:create-rss:runs-on:ubuntu-lateststeps:# Checkout- name:Checkoutuses:actions/checkout@v2# Composer Install- name:Install Dependenciesrun:composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist# PHPCS- name:PHPCSrun:./vendor/bin/phpcbf .# Commit- name:Commitif:${{ failure() }}uses:stefanzweifel/git-auto-commit-action@v4.2.0with:commit_message:PHPCS  if: ${{ failure() }} にしている理由ですが、 PHP_codesniffer では例え実行が成功しても phpcbfは修正したエラーの量を返す ようです。\n squizlabs/PHP_CodeSniffer - Gitter  参考  squizlabs/PHP_CodeSniffer - Gitter  ","description":"GitHub Actions で PHP_codesniffer を利用して PHP の自動整形させる方法。","id":368,"section":"tech","tags":["GitHub","PHP"],"title":"【GitHub】GitHub Actions で PHP を自動整形させる","uri":"https://c-a-p-engineer.github.io/tech/2021/10/22/github-actions-php_codesniffer/"},{"content":"【PHP】PHP_CodeSniffier を使用してコードをPSR（コーディング規約）に基づいて整形する PHP のパッケージ、 PHP_CodeSniffer を使用してPSR（PHPコーディング規約）に基づいて整形させる方法。\n squizlabs /PHP_CodeSniffer  インストール方法 基本的に開発でしか使わないはずなので --dev を付けてインストール。\ncomposer require --dev \u0026quot;squizlabs/php_codesniffer\u0026quot; インストールが完了したら以下でヘルプが出てくることを確認。\n./vendor/bin/phpcs -h 使い方 使用可能なコーディング規約を確認。\n./vendor/bin/phpcs -i 使用可能なPSRが出てきます。\nThe installed coding standards are MySource, PEAR, PSR1, PSR12, PSR2, Squiz and Zend 設定 以下のような作りが基本的な設定ファイルになります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;ruleset name=\u0026#34;PSR12\u0026#34;\u0026gt; \u0026lt;description\u0026gt;PSR12 rules\u0026lt;/description\u0026gt; \u0026lt;!-- 拡張子の指定 --\u0026gt; \u0026lt;arg name=\u0026#34;extensions\u0026#34; value=\u0026#34;php\u0026#34; /\u0026gt; \u0026lt;!-- 適用コーディング規約の指定 --\u0026gt; \u0026lt;rule ref=\u0026#34;PSR12\u0026#34; /\u0026gt; \u0026lt;!-- 出力に色を適用 --\u0026gt; \u0026lt;arg name=\u0026#34;colors\u0026#34; /\u0026gt; \u0026lt;!-- オプション p:進捗表示 s:エラー表示時にルールを表示 --\u0026gt; \u0026lt;arg value=\u0026#34;ps\u0026#34; /\u0026gt; \u0026lt;!-- 除外ディレクトリ --\u0026gt; \u0026lt;exclude-pattern\u0026gt;/vendor/\u0026lt;/exclude-pattern\u0026gt; \u0026lt;/ruleset\u0026gt;   以下のように特定のルールの中で除外や追加することも可能です。\n1 2 3 4 5 6 7 8 9 10 11  \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;ruleset name=\u0026#34;PSR12\u0026#34;\u0026gt; \u0026lt;description\u0026gt;PSR12 rules\u0026lt;/description\u0026gt; \u0026lt;rule ref=\u0026#34;PSR12\u0026#34;\u0026gt; \u0026lt;!-- \u0026#34;PSR12\u0026#34; の中で除外するルールがあれば記載 --\u0026gt; \u0026lt;!--\u0026lt;exclude name=\u0026#34;Generic.Files.LineLength\u0026#34;/\u0026gt;--\u0026gt; \u0026lt;!--\u0026lt;exclude name=\u0026#34;PSR1.Classes.ClassDeclaration\u0026#34;/\u0026gt;--\u0026gt; \u0026lt;/rule\u0026gt; \u0026lt;!-- 追加するルールがあれば記載 --\u0026gt; \u0026lt;!--\u0026lt;rule ref=\u0026#34;PEAR.WhiteSpace.ObjectOperatorIndent\u0026#34;/\u0026gt;--\u0026gt; \u0026lt;/ruleset\u0026gt;   設定をチェック\n./vendor/bin/phpcs -e 設定の各種対応するものはこちらから見ることが出来ます。\nPHP CodeSnifferにおけるPSR1,2の検知箇所と対応するSniffer - Qiita\n実行  基本的なソースコードチェック  phpcs --report=[summary|source] --standard=[ルール名|設定ファイル] [ファイル|ディレクトリ] 各種オプションはなくても大丈夫です。\nphpcs.xml が作られていれば基本的に読み込まれています。\n ファイル別に出力  ./vendor/bin/phpcs --report=summary .  ルール別に出力  ./vendor/bin/phpcs --report=source . ソースコードの自動整形  基本的なソースコードの自動整形  ./vendor/bin/phpcbf --standard=[ルール名|設定ファイル] [ファイル|ディレクトリ]  実行  ./vendor/bin/phpcbf . 参考  PHP_CodeSniffierのインストールと使い方 - Qiita LaravelにPHP_CodeSnifferを導入しコーディング規約（PSR）に沿った記述を行う  ","description":"PHP_CodeSniffier を使用してコードをPSR（コーディング規約）に基づいて整形する","id":369,"section":"tech","tags":["PHP"],"title":"【PHP】PHP_CodeSniffier を使用してコードをPSR（コーディング規約）に基づいて整形する","uri":"https://c-a-p-engineer.github.io/tech/2021/10/22/php_codesniffer/"},{"content":"【VSCode】ファイル検索時に出てこないファイルを検索対象にする Windows で VSCode を使用して Ctrl + pファイル検索時に出ないことがあります。\nVSCode でファイル検索時に出てこないファイルを検索対象にする方法をメモ。\n方法 設定画面 1.ファイル \u0026gt; ユーザ設定 \u0026gt; 設定\n2.search.useIgnoreFiles を検索。\n3.チェックをは外す\nsetting.json 1.ファイル \u0026gt; ユーザ設定 \u0026gt; 設定\n2.右上のファイルアイコンを開く\n3.setting.json の search.useIgnoreFiles の値に false を記入 or 以下の行を追記\n1 2 3  { \u0026#34;search.useIgnoreFiles\u0026#34;: false }   参考  VSCodeでvendor配下のファイルが検索できない · lighthouse-dev.github.io  ","description":"VSCodeでファイル検索時に出てこないファイルを検索対象にする方法メモ。","id":370,"section":"tech","tags":["Visual Studio Code"],"title":"【VSCode】ファイル検索時に出てこないファイルを検索対象にする","uri":"https://c-a-p-engineer.github.io/tech/2021/10/17/vscode-ignorefiles/"},{"content":"Windows で Docker failed to initialize の対処方法 Windows で Docker起動時に Docker failed to initialize というダイアログが出てきた時の対処方法メモ\n対処方法 %appdata%\\Docker のフォルダを削除する事で起動しました。\n具体的には C:\\Users\\{ユーザ名}\\AppData\\Roaming\\Docker のフォルダです。\n参考  Docker failed to initialize · Issue #3088 · docker/for-win  ","description":"Docker起動時に Docker failed to initialize というダイアログが出てきた時の対処方法メモ","id":371,"section":"tech","tags":["Docker"],"title":"Windows で Docker failed to initialize の対処方法","uri":"https://c-a-p-engineer.github.io/tech/2021/10/13/docker-failed-to-initialize/"},{"content":"Mysqlテーブルバックアップ方法 Mysql で簡単にテーブルのバックアップをする方法。\nこれさえ、あればテーブルのバックアップを簡単に取っておくことが出来ます。\nサンプル 1 2 3 4 5  -- テーブルの構造コピー CREATETABLE[バックアップ先テーブル名]LIKE[バックアップ元テーブル名];-- データコピー INSERTINTO[バックアップ先テーブル名]SELECT*FROM[バックアップ元テーブル名];  参考  MySQL :: MySQL 8.0 リファレンスマニュアル :: 13.1.20.3 CREATE TABLE \u0026hellip; LIKE ステートメント MySQL :: MySQL 8.0 リファレンスマニュアル :: 13.2.6.1 INSERT \u0026hellip; SELECT ステートメント  ","description":"Mysql で簡単にテーブルのバックアップをする方法","id":372,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】テーブルバックアップ方法","uri":"https://c-a-p-engineer.github.io/tech/2021/10/13/mysql-table-backup/"},{"content":"GitHub Actions Dockerを使う GitHub Actions で自分が構築したDockerを使ってテストなどをする方法。\nDokcer を使う CentOS の Image を pull してバージョンを出力するだけ\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  name:Dockeron:push:branches:- masterjobs:deploy:# Ubunturuns-on:ubuntu-lateststeps:# Docker Set Up- name:Docker Set Uprun:|docker pull centos# Docker Exec- name:Docker Execrun:|docker run centos sh -c \u0026#34;cat /etc/redhat-release\u0026#34;  Docker Compose を使う Docker で環境を作る際は Docker Compose で設定していることが多いと思いますので実際には使用する際にはこちらの方がメインになると思います。\nDocker Compose の用意 サンプルなのでCentOS の Image を作るだけ。\n1 2 3 4 5 6 7  version:\u0026#39;3\u0026#39;services:centos:image:centoscontainer_name:centostty:true  GitHub Actions で Docker Compose 別途Dockerとソースファイルが別れている場合があると思いますが今回はそのパターンを割愛しています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  name:Docker Composeon:push:branches:- masterjobs:deploy:# Ubunturuns-on:ubuntu-lateststeps:# Checkout- name:Checkoutuses:actions/checkout@v2with:submodules:truefetch-depth:0# Docker Set Up- name:Docker Set Uprun:|docker-compose up -d --build# CentOS Version- name:CentOS Versionrun:|docker-compose exec -T centos sh -c \u0026#34;cat /etc/redhat-release\u0026#34;  ","description":"GitHub Actions で Docker を使ってみます","id":373,"section":"tech","tags":["GitHub","Docker"],"title":"【GitHub】GitHub Actions で Docker を使う","uri":"https://c-a-p-engineer.github.io/tech/2021/10/09/github-actions-docker/"},{"content":"【bash】パイプした時の各終了ステータスを確認する bash 利用時に | を利用してパイプする時がありますが、これがエラーになるとどこで落ちているかわからない時があります。\nPIPESTATUS を利用して確認します。\nサンプル 実行 1  exit 0 | exit 1 | exit 2   確認方法 各パイプのステータスの確認\necho ${PIPESTATUS[@]} \u0026gt; 0 1 2 指定の位置のパイプのステータスを取得（0～\necho ${PIPESTATUS[1]} \u0026gt; 1 最後のステータスだけ確認する方法はこちら\nこの方法はパイプを使用してなくても可能です。\n1 2  echo $? \u0026gt; 2   ","description":"bash 利用時に | を利用してパイプする時がありますが、これがエラーになるとどこで落ちているかわからない時があります。","id":374,"section":"tech","tags":["bash"],"title":"【bash】パイプした時の各終了ステータスを確認する","uri":"https://c-a-p-engineer.github.io/tech/2021/10/08/bash-pipistatus/"},{"content":"知らずに多重地獄になりつつあるSES界隈について ネットの記事で多重下請け構造を辞めようとというのがあって、酷かったので私見をまとめました。\n健全な界隈と不健全な界隈 ここで図に記しているSIerは元請けという間隔でお読みください。\n不健全なSES界隈 SES企業同士で案件を回し合って下請けからの仕事を更に多重化しています。\n健全なSES界隈 発注者にSESで入ってSIerとのやり取りを助ける、またSIerとの直取引で健全化を図る狙いのようです。\n健全であるように見える ただこれは健全化を図っているように見えますがSIerと取引するためには実績や信用がないと取引することが出来ず、SIerからの多くのSES企業が締め出される可能性が高いです。\nまた一部の取引可能なSES企業に何らかの手を使って経由して人を入れる可能性が出てきます。\n発注者もエンジニアなどを使わずにコンサルを入れるかと思います。\n営業努力を怠るSES企業 昨今では自社で営業するのではなく営業会社を通す事が多くなりました。\nこれは確かに今までの多重下請け構造ではないですが、営業会社を経由しているので自社の営業力が育ちません。\nまた社員を1人で送り出したりするため会社のチーム力など上げることも難しくなります。\n商流を上げるべし 本来であれば営業努力を行い、商流を上げることによって単価が上がり多くの利益を生むことが出来ます。\n現状、営業会社の出現によりその商流を上げる努力をしない企業が増えています。\n企業ごと方針は違うので否定はしませんが、チーム力を上げ自社が元請けになれるように頑張るのが一番儲けが出る可能性が高いです。\nただ薄利多売で人売りをする分には営業会社に営業を丸投げして社員を送り出すのが簡単です。\nまとめ  多重下請け構造の原因は企業同士で案件のやり取りをしているから 健全化した場合に多くの企業が死ぬ。 営業会社の利用判断は考える必要がある。 商流を上げれば利益も増える。 商流を上げる必要がなければ営業会社を利用する手もある。  ","description":"知らずに多重地獄になりつつあるSES界隈について","id":375,"section":"tech","tags":["IT業界"],"title":"知らずに多重地獄になりつつあるSES界隈について","uri":"https://c-a-p-engineer.github.io/tech/2021/10/03/multiple-subcontracting/"},{"content":"【Python】 Bar Chart Race を使ってグラフ動画を作る Python で Bar Chart Race を使用してグラフ動画を作る方法。\n環境  Python3  ffmpeg の導入 動画作成用に ffmpeg を導入してください。\napt install -y ffmpeg パッケージインストール 動画作成用のパッケージ Bar Chart Race\npip bar_chart_race グラフの日本語表示用パッケージ japanize-matplotlib - PyPI\npip japanize_matplotlib ソースコード グラフの元データは 新型コロナウイルス(COVID-19)感染症の対応について｜内閣官房新型コロナウイルス感染症対策推進室 から取得させていただいています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  import requests import json import pandas as pd import bar_chart_race as bcr import japanize_matplotlib # コロナの感染者を取得 r = requests.get(\u0026#39;https://opendata.corona.go.jp/api/Covid19JapanAll\u0026#39;) with open(\u0026#39;covid19_daily.json\u0026#39;, \u0026#39;w\u0026#39;) as f: f.write(r.text) # JSONを読み込む data = json.load(open(\u0026#39;covid19_daily.json\u0026#39;)) # JSONをデータフレームにする df = pd.DataFrame(data[\u0026#34;itemList\u0026#34;]) # 整形 # 10行ごとにデータ変換 df = df.pivot_table( index=\u0026#39;date\u0026#39;, columns=\u0026#39;name_jp\u0026#39;, values=\u0026#39;npatients\u0026#39;).dropna()[::10] # アニメーションをmp4で保存する bcr.bar_chart_race( df=df, filename=\u0026#39;covid19_daily.mp4\u0026#39;, title=\u0026#39;COVID-19 都道府県別感染者数\u0026#39;, orientation=\u0026#39;h\u0026#39;, sort=\u0026#39;desc\u0026#39;, n_bars=10, )   動画 出来上がった動画はこちらになります。\nSorry, your browser doesn't support embedded videos.  参考  【簡単/無料】「動くグラフ」の作り方を解説 | キノコード Bar Chart Race  ","description":"Python で Bar Chart Race を使用してグラフ動画を作る","id":376,"section":"tech","tags":["Python"],"title":"【Python】Bar Chart Race を使ってグラフ動画を作る","uri":"https://c-a-p-engineer.github.io/tech/2021/09/25/python-bar_chart_race/"},{"content":"pipコマンドまとめ pip コマンドを使用してパッケージのインストール、アップデート、複数パッケージの一括インストールなどをメモ。\nパッケージの確認 パッケージの一覧 既にインストール済みのパッケージの一覧を出力します。\npip list 最新でないパッケージの一覧 --outdated のオプションを付けると 最新版ではないパッケージ だけ表示されます。\npip list --outdated パッケージのインストール インストール パッケージののインストール\npip install パッケージ名 バージョンの指定 == を利用してバージョンの指定が可能です。\npip install パッケージ名==1.25 バージョン確認 バージョンを指定しない状態で == で指定可能なバージョンが出てきます。\npip install パッケージ名== パッケージ アップデート --upgrade or -U のオプションを追加することで最新版にアップデートすることが可能です。\npip install --upgrade パッケージ名 \npip install -U パッケージ名 パッケージ アンインストール パッケージのアンイストールを行います。\npip uninstall パッケージ名 pip の依存関係チェック パッケージの依存性を確認する\npip check パッケージリストの書き出し 現在インストールされているパッケージをファイルに書き出します。\npip freeze \u0026gt; requirements.txt 一括インストール方法 freeze で書き出されたパッケージを一括して入れることが可能です。\npip install -r requirements.txt 参考  Python, pipでrequirements.txtを使ってパッケージ一括インストール | note.nkmk.me Pythonライブラリのインストール － pipの使い方 - ガンマソフト株式会社  ","description":"pip コマンドを使用してパッケージのインストール、アップデート、複数パッケージの一括インストールなどをメモ。","id":377,"section":"tech","tags":["Python"],"title":"【Python】 pipまとめ","uri":"https://c-a-p-engineer.github.io/tech/2021/09/22/python-pip-requirements/"},{"content":"docker-compose で .env ファイルを使って環境ごとに設定を変える docker-compose 構築時に環境ごとに設定を変えたいことがあります。\nそういった時に .env ファイルに設定値を書き込んで読むようにする方法のメモ。\n.envファイルを作成 .env ファイルを docker-compose.yml と同じ階層に用意すると docker-compose 内で変数のように展開できます。\n1 2 3 4 5 6 7 8  # バージョン指定PYTHON_VERSION=2# HOST側のコードパスAPP_CODE_PATH_HOST=../# コンテナ側のコードパスAPP_CODE_PATH_CONTAINER=/var/www  docker-compose.yml ${設定名} で .env に設定した値を展開することが出来ます。\nargs に Dockerfile に使用したい設定値を使用します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  version:\u0026#39;3.8\u0026#39;volumes:db-store:services:python:container_name:pythonbuild:context:.dockerfile:./python/Dockerfileargs:- PYTHON_VERSION=${PYTHON_VERSION}volumes:- ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}working_dir:${APP_CODE_PATH_CONTAINER}tty:true  Dockerfile docker-compose.yml で args に入れた PYTHON_VERSION を使用します。\n1 2 3 4 5 6  # 値がない場合用にデフォルト値を設定ARG PYTHON_VERSION=3 # 指定されたバージョンのイメージを取得FROMpython:${PYTHON_VERSION}RUN apt-get update  ","description":"docker-compose で .env ファイルを使って環境ごとに設定を変える方法","id":378,"section":"tech","tags":["Docker"],"title":"docker-compose で .env ファイルを使って環境ごとに設定を変える","uri":"https://c-a-p-engineer.github.io/tech/2021/09/17/docker-compose-env/"},{"content":"Googleカレンダーへ予定を追加するリンクを作る Googleカレンダーへ予定を追加するリンクを作ってみます。\nGoogleカレンダー 追加リンク リンク自体はこのようにすれば簡単に作ることが出来ます。\nhttps://www.google.com/calendar/render?action=TEMPLATE\u0026amp;text=MTG\u0026amp;dates=20210910T120000/20210910T130000\u0026amp;details=meeting\u0026amp;add=example@example.com\nパラメータ説明 設定できる各種パラメーター\n   パラメーター 必須 説明     action ○ action=TEMPLATE\n「TEMPLATE」固定。   text ○ 予定の件名   details  詳細   dates  日時 開始日時/終了日時\n例） dates=20090621T063000Z/20090621T080000Z\nフォーマット：YYYYMMDDTHHmmSSZ/YYYYMMDDTHHmmSSZ   location  場所   add  ゲストのメールアドレス    リンク作成    名称 値     予定名    詳細    日時    場所    ゲストのメールアドレス    予定名     \n参考  Googleカレンダーの予定を追加するURLリンク - Qiita Googleカレンダーに追加するURLリンクを自動生成してくれるツール  ","description":"Googleカレンダーへ予定を追加するリンクを作ってみます。","id":379,"section":"tech","tags":["Google"],"title":"Googleカレンダーへ予定を追加するリンクを作る","uri":"https://c-a-p-engineer.github.io/tech/2021/09/10/google-calendar-link/"},{"content":"WSL に Docker を入れて使う Docker Desktop を使用しないで WSL に Docker を入れて使います。\n理由としてはWSLのDockerの方が軽くて早いと聞いたのでやってみようかと、大企業ではDocker Desktop が有料になるので一応やっておこうと思いました。\nDocker is Updating and Extending Our Product Subscriptions - Docker Blog\n Docker Desktop remains free for small businesses （fewer than 250 employees AND less than $10 million in annual revenue）, personal use, education, and non-commercial open source projects.\nDocker Desktopは、スモールビジネス（従業員数250人以下かつ年間売上高1000万ドル未満）、個人利用、教育機関、非商用のオープンソースプロジェクトであれば、引き続き無料でご利用いただけます。\n 動作環境 ・Windows10 Pro\n・WSL2\n・Ubuntu20.04（WSL）\nWSLの用意 WSLの用意がない方はインストールガイドを見ておすすめください。\n公式のインストールガイドはこちらになります。\nWindows 10 用 Windows Subsystem for Linux のインストール ガイド\nWSLのUbuntu上にDockerをインストール WSL内で進めます。\nDockerのドキュメントはこちら（リンクは install using the repository から）\nInstall Docker Engine on Ubuntu | Docker Documentation\nDockerの起動 WSL内でDockerを起動\n1  sudo /etc/init.d/docker start   Dockerの自動起動設定 入れただけだと自動起動しないのでWSL内で設定。\n1  sudo /etc/init.d/docker start   Docker Compose をインストール Dockerのドキュメントはこちら\nInstall Docker ComposeDocumentation\n参考  Docker Desktopに依存しない、WindowsでのDocker環境 - Qiita  ","description":"Docker Desktop を使用しないで WSL に Docker を入れて使います。","id":380,"section":"tech","tags":["Windows"],"title":"WSL に Docker を入れて使う","uri":"https://c-a-p-engineer.github.io/tech/2021/09/08/windoes-wsl-docker/"},{"content":"WSL2 を入れてみる 通称 WSL と呼ばれる Windows Subsystem for Linux を導入してみました。\n公式のインストールガイドはこちらになります。\nWindows 10 用 Windows Subsystem for Linux のインストール ガイド\n動作要件  WSL 2 に更新するには、Windows 10 を実行している必要があります。\n・x64 システムの場合:バージョン 1903 以降、ビルド 18362 以上。\n・ARM64 システムの場合:バージョン 2004 以降、ビルド 19041 以上。\n・18362 より前のビルドは WSL 2 をサポートしていません。 Windows 更新アシスタントを使用して、お使いのバージョンの Windows を更新します。\n 簡易的な手順 コマンド一発で簡単にインストールも可能です。\nWindows Insider 用の簡略化されたインストール\n1  wsl --install   手順  管理者権限で PowerShell を実行 Linux 用 Windows サブシステム\u0026quot; オプション機能を有効にする  1  dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart   仮想マシンの機能を有効にする  1  dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart    Linuxカーネル更新プログラムをダウンロード\nLinux カーネル更新プログラム パッケージをダウンロードする\n  WSL 2 を既定のバージョンとして設定する\n  1  wsl --set-default-version 2   Windows Store から Linux ディストリビューションを選択\n選択した Linux ディストリビューションをインストールする インストール完了後に起動 起動後にアカウント名/パスワードを設定  これで完了です。\n詳細はインストールページ見てわかるかとは思いますがメモを残しておきました。\nWSLメモ WSLの確認 PowerShell から以下のコマンドでディストリビューション名が確認できます。\n1  wsl --list --verbose   Linuxにログイン PowerShell から以下のコマンドで指定のディストリビューション。\nディストリビューション名の指定がない場合はデフォルトのディストリビューションにログインします。\n1  wsl -d {ディストリビューション名}   root でログイン 1  wsl -u root   ユーザの追加 sudo adduser hoge_user ユーザ指定でログイン 1  wsl -u hoge_user   Windowsからディストリビューションに接続 ファイルエクスプローラーに \\\\wsl$ を入力\nディストリビューションのアンイストール 1  wsl --unregister {ディストリビューション名}   参考  Windows 10 用 Windows Subsystem for Linux のインストール ガイド WSL2の初歩メモ - Qiita  ","description":"通称 WSL と呼ばれる Windows Subsystem for Linux を導入してみました。","id":381,"section":"tech","tags":["Windows"],"title":"WSL2 を入れてみる","uri":"https://c-a-p-engineer.github.io/tech/2021/09/06/windoes-wsl2-install/"},{"content":"無料で使える WebSocket サーバー「Achex」 無料で使える WebSocket サーバー「Achex」を使用してみました。\nAchex\nこちらは簡単に使用することが可能なのでチャットシステムなど簡単に作れそうです。\nただし、使用する際はフリーのサーバーなのでセキュリティが必要なものにはおすすめしません。\nサンプル 簡単なチャットシステムです。\n複数のブラウザで開けばチャットが出来ます。\nまた他に開いている人が居ればやり取りが出来ます。\n古いログは表示されません。\n 送信   var chat = document.getElementById(\"chat\"); // ID生成 var id = Math.random().toString(32).substring(2); document.getElementById(\"id\").innerHTML = 'ID : ' + id; // WS接続（Achexへ接続） ws = new WebSocket(\"wss://cloud.achex.ca/chat\"); // WS接続 ws.onopen = e = { console.log('open'); chat.innerHTML = 'You ID : ' + id + '（' + getDateTime() + '）'; // 認証（auth, passwordは何でもOK） ws.send(JSON.stringify({\"auth\": \"hoge\", \"password\": \"1234\"})); // ws.send(JSON.stringify({\"to\": \"hoge\", \"id\": id, \"message\": 'Login'})); } // メッセージ受信 ws.onmessage = e = { console.log('message'); console.log(e); var obj = JSON.parse(e.data); if(obj.auth == 'OK'){ // 認証OK return; } addChat(obj.id, obj.message); } // WS切断 ws.onclosed = e = { console.log('closed'); ws.send(JSON.stringify({\"to\": \"hoge\", \"id\": id, \"message\": 'Logout'})); } // メッセージ送信 function sendChat(){ let msgElem = document.getElementById(\"msg\"); let msg = msgElem.value; msgElem.value = \"\"; ws.send(JSON.stringify({\"to\": \"hoge\", \"id\": id, \"message\": msg})); } // チャット function addChat(id, msg){ chat.innerHTML = id + ' : ' + msg + '（' + getDateTime() + '）' + '\n' + chat.innerHTML; } // 1桁の数字を0埋めで2桁にする var toDoubleDigits = function(num) { num += \"\"; if (num.length === 1) { num = \"0\" + num; } return num; }; // 日時取得 YYYY/MM/DD HH:DD:MI:SS形式で取得 var getDateTime = function() { var date = new Date(); var year = date.getFullYear(); var month = toDoubleDigits(date.getMonth() + 1); var day = toDoubleDigits(date.getDate()); var hour = toDoubleDigits(date.getHours()); var min = toDoubleDigits(date.getMinutes()); var sec = toDoubleDigits(date.getSeconds()); return year + '/' + month + '/' + day + ' ' + hour + ':' + min + ':' + sec; };  サンプルソース 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  \u0026lt;div id=\u0026#34;id\u0026#34; style=\u0026#34;width:100%;border:solid 1px #FFFFFF;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;input id=\u0026#34;msg\u0026#34; type=\u0026#34;text\u0026#34; style=\u0026#34;width:80%;\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt; \u0026lt;button id=\u0026#34;send\u0026#34; type=\u0026#34;button\u0026#34; onclick=\u0026#34;sendChat()\u0026#34;\u0026gt;送信\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;chat\u0026#34; style=\u0026#34;width:100%;height:300px;border:solid 1px #FFFFFF;overflow:auto;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var chat = document.getElementById(\u0026#34;chat\u0026#34;); // ID生成 var id = Math.random().toString(32).substring(2); document.getElementById(\u0026#34;id\u0026#34;).innerHTML = \u0026#39;ID : \u0026#39; + id; // WS接続（Achexへ接続） ws = new WebSocket(\u0026#34;wss://cloud.achex.ca/chat\u0026#34;); // WS接続 ws.onopen = e =\u0026gt; { console.log(\u0026#39;open\u0026#39;); chat.innerHTML = \u0026#39;You ID : \u0026#39; + id + \u0026#39;（\u0026#39; + getDateTime() + \u0026#39;）\u0026#39;; // 認証（auth, passwordは何でもOK） \tws.send(JSON.stringify({\u0026#34;auth\u0026#34;: \u0026#34;hoge\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;1234\u0026#34;})); //  ws.send(JSON.stringify({\u0026#34;to\u0026#34;: \u0026#34;hoge\u0026#34;, \u0026#34;id\u0026#34;: id, \u0026#34;message\u0026#34;: \u0026#39;Login\u0026#39;})); } // メッセージ受信 ws.onmessage = e =\u0026gt; { console.log(\u0026#39;message\u0026#39;); console.log(e); var obj = JSON.parse(e.data); if(obj.auth == \u0026#39;OK\u0026#39;){ // 認証OK  return; } addChat(obj.id, obj.message); } // WS切断 ws.onclosed = e =\u0026gt; { console.log(\u0026#39;closed\u0026#39;); ws.send(JSON.stringify({\u0026#34;to\u0026#34;: \u0026#34;hoge\u0026#34;, \u0026#34;id\u0026#34;: id, \u0026#34;message\u0026#34;: \u0026#39;Logout\u0026#39;})); } // メッセージ送信 function sendChat(){ let msgElem = document.getElementById(\u0026#34;msg\u0026#34;); let msg = msgElem.value; msgElem.value = \u0026#34;\u0026#34;; ws.send(JSON.stringify({\u0026#34;to\u0026#34;: \u0026#34;hoge\u0026#34;, \u0026#34;id\u0026#34;: id, \u0026#34;message\u0026#34;: msg})); } // チャット function addChat(id, msg){ chat.innerHTML = id + \u0026#39; : \u0026#39; + msg + \u0026#39;（\u0026#39; + getDateTime() + \u0026#39;）\u0026#39; + \u0026#39;\u0026lt;br\u0026gt;\u0026#39; + chat.innerHTML; } // 1桁の数字を0埋めで2桁にする var toDoubleDigits = function(num) { num += \u0026#34;\u0026#34;; if (num.length === 1) { num = \u0026#34;0\u0026#34; + num; } return num; }; // 日時取得 YYYY/MM/DD HH:DD:MI:SS形式で取得 var getDateTime = function() { var date = new Date(); var year = date.getFullYear(); var month = toDoubleDigits(date.getMonth() + 1); var day = toDoubleDigits(date.getDate()); var hour = toDoubleDigits(date.getHours()); var min = toDoubleDigits(date.getMinutes()); var sec = toDoubleDigits(date.getSeconds()); return year + \u0026#39;/\u0026#39; + month + \u0026#39;/\u0026#39; + day + \u0026#39; \u0026#39; + hour + \u0026#39;:\u0026#39; + min + \u0026#39;:\u0026#39; + sec; }; \u0026lt;/script\u0026gt;   参考  Achex WebSocket - Web API | MDN  ","description":"無料で使える WebSocket サーバー「Achex」を使用してみました。","id":382,"section":"tech","tags":["JavaScript"],"title":"無料で使える WebSocket サーバー「Achex」","uri":"https://c-a-p-engineer.github.io/tech/2021/09/03/websocket-achex/"},{"content":"【JavaScript】スクリーンキャプチャを取得する PCのスクリーンキャプチャを取得するためのメモ\nサンプル Start Capture\u0026nbsp;Stop Capture\n  const videoElem = document.getElementById(\"video\"); const logElem = document.getElementById(\"log\"); const startElem = document.getElementById(\"start\"); const stopElem = document.getElementById(\"stop\"); // 画面取得オプション var displayMediaOptions = { video: { cursor: \"always\" }, audio: false }; // イベント登録 startElem.addEventListener(\"click\", function(evt) { startCapture(); }, false); stopElem.addEventListener(\"click\", function(evt) { stopCapture(); }, false); // 画面表示開始 async function startCapture() { try { videoElem.srcObject = await navigator.mediaDevices.getDisplayMedia(displayMediaOptions); dumpOptionsInfo(); } catch(err) { console.error(\"Error: \" + err); } } // 画面表示停止 function stopCapture(evt) { let tracks = videoElem.srcObject.getTracks(); tracks.forEach(track = track.stop()); videoElem.srcObject = null; }  サンプルソース 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  \u0026lt;p\u0026gt;\u0026lt;button id=\u0026#34;start\u0026#34;\u0026gt;Start Capture\u0026lt;/button\u0026gt;\u0026amp;nbsp;\u0026lt;button id=\u0026#34;stop\u0026#34;\u0026gt;Stop Capture\u0026lt;/button\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;video id=\u0026#34;video\u0026#34; autoplay\u0026gt;\u0026lt;/video\u0026gt; \u0026lt;strong\u0026gt;Log:\u0026lt;/strong\u0026gt; \u0026lt;pre id=\u0026#34;log\u0026#34;\u0026gt;\u0026lt;/pre\u0026gt; \u0026lt;script\u0026gt; const videoElem = document.getElementById(\u0026#34;video\u0026#34;); const logElem = document.getElementById(\u0026#34;log\u0026#34;); const startElem = document.getElementById(\u0026#34;start\u0026#34;); const stopElem = document.getElementById(\u0026#34;stop\u0026#34;); // 画面取得オプション var displayMediaOptions = { video: { cursor: \u0026#34;always\u0026#34; }, audio: false }; // イベント登録 startElem.addEventListener(\u0026#34;click\u0026#34;, function(evt) { startCapture(); }, false); stopElem.addEventListener(\u0026#34;click\u0026#34;, function(evt) { stopCapture(); }, false); // 画面表示開始 async function startCapture() { try { videoElem.srcObject = await navigator.mediaDevices.getDisplayMedia(displayMediaOptions); dumpOptionsInfo(); } catch(err) { console.error(\u0026#34;Error: \u0026#34; + err); } } // 画面表示停止 function stopCapture(evt) { let tracks = videoElem.srcObject.getTracks(); tracks.forEach(track =\u0026gt; track.stop()); videoElem.srcObject = null; } \u0026lt;/script\u0026gt;   参考  Using the Screen Capture API - Web APIs | MDN  ","description":"PCのスクリーンキャプチャを取得する","id":383,"section":"tech","tags":["JavaScript"],"title":"【JavaScript】PCのスクリーンキャプチャを取得する","uri":"https://c-a-p-engineer.github.io/tech/2021/08/29/javascript-display/"},{"content":"【JavaScript】カメラを取得して画面に表示する Web上でカメラ・マイクを取得、表示・停止するだけ。\nサンプル Start video Stop video\n\n var video = document.getElementById('video'); var constraints = { audio: true, video: true }; // カメラ・マイク開始 function startVideo() { navigator.mediaDevices.getUserMedia(constraints) .then(function(mediaStream) { video.srcObject = mediaStream; video.onloadedmetadata = function(e) { video.play(); }; }) .catch(function(err) { console.log(err.name + \": \" + err.message); }); } // カメラ・マイク停止 function stopVideo() { let stream = video.srcObject; let tracks = stream.getTracks(); tracks.forEach(function(track) { track.stop(); }); video.srcObject = null; }  サンプルソース 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  \u0026lt;button type=\u0026#34;button\u0026#34; onclick=\u0026#34;startVideo();\u0026#34;\u0026gt;Start video\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; onclick=\u0026#34;stopVideo();\u0026#34;\u0026gt;Stop video\u0026lt;/button\u0026gt; \u0026lt;video id=\u0026#34;video\u0026#34; autoplay style=\u0026#34;width: 240px; height: 180px; border: 1px solid black;\u0026#34;\u0026gt;\u0026lt;/video\u0026gt; \u0026lt;script\u0026gt; var video = document.getElementById(\u0026#39;video\u0026#39;); var constraints = { audio: true, video: true }; // カメラ・マイク開始  function startVideo() { navigator.mediaDevices.getUserMedia(constraints) .then(function(mediaStream) { video.srcObject = mediaStream; video.onloadedmetadata = function(e) { video.play(); }; }) .catch(function(err) { console.log(err.name + \u0026#34;: \u0026#34; + err.message); }); } // カメラ・マイク停止  function stopVideo() { let stream = video.srcObject; let tracks = stream.getTracks(); tracks.forEach(function(track) { track.stop(); }); video.srcObject = null; } \u0026lt;/script\u0026gt;   参考  MediaDevices.getUserMedia() - Web API | MDN MediaStreamTrack.stop() - Web API | MDN  ","description":"Web上でカメラ・マイクを取得、表示・停止するだけ。","id":384,"section":"tech","tags":["JavaScript"],"title":"【JavaScript】カメラ・マイクを取得して画面に表示する","uri":"https://c-a-p-engineer.github.io/tech/2021/08/27/javascript-video/"},{"content":"【Flutter】Flutter Web に 広告（Google Adsense） を入れてみた。 Flutter Webに広告を入れる際にアプリ用のAdMob広告とは別にする必要があり、Google AdSenseの対応してみました。\nサンプルコード HTML側とDart側で対応が必要になります。\nHTML まずはHTML側の対応です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;!-- body内に挿入 --\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; footer{ width: 100%; height: 100px; /* 広告の高さに合わせる */ background-color: #eeeeee; text-align: center; padding: 0; position: absolute; bottom: 0; z-index: 100; } \u0026lt;/style\u0026gt; \u0026lt;footer id=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;!-- Google AdSenseタグ --\u0026gt; \u0026lt;/footer\u0026gt;   Dart アプリの下部にWebの場合は広告用の枠を取るようにします。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter/foundation.dart\u0026#39; show kIsWeb; // 広告の高さに合わせる double adHeight = 100; void main() =\u0026gt; runApp(MyApp()); class MyApp extends StatefulWidget { MyApp({Key? key}) : super(key: key); @override _MyAppState createState() =\u0026gt; _MyAppState(); } class _MyAppState extends State\u0026lt;MyApp\u0026gt; { @override void initState() { super.initState(); // Web判定  if (kIsWeb) { adHeight = 100; } else { adHeight = 0; } } @override Widget build(BuildContext context) { return MaterialApp( title: \u0026#39;Hello, World\u0026#39;, theme: ThemeData( primarySwatch: Colors.blue, ), home: Scaffold( appBar: AppBar( title: Text(\u0026#34;SAMPLE\u0026#34;), ), body: Center( child: Column( children: [ Expanded(flex: 1, child: Text(\u0026#34;hello\u0026#34;)), // 広告の枠  Container(height: adHeight, color: Colors.red), ], ), ), ), ); } }   参考  flutter web に広告を入れたい - Qiita  ","description":"Flutter Webに広告を入れる際にアプリ用のAdMob広告とは別にする必要があり、Google AdSenseの対応してみました。","id":385,"section":"tech","tags":["Flutter"],"title":"【Flutter】Flutter Web に 広告（Google Adsense） を入れてみた。","uri":"https://c-a-p-engineer.github.io/tech/2021/08/09/flutter-web-adsense/"},{"content":"【GitHub Actions】Flutter Web Build を自動化 GitHub Actions で Flutter Web Build を自動化してみました。\nサンプル サンプルでは Flutter Web の build を行っております。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  name:Flutter Buildon:push:branches:- masterjobs:deploy:# Ubunturuns-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v2- name:Flutter Setupuses:subosito/flutter-action@v1with:flutter-version:\u0026#39;2.0.5\u0026#39;- name:Flutter Web Buildrun:|flutter pub get flutter build web# Commit- name:Update Flutter Web uses:stefanzweifel/git-auto-commit-action@v4.2.0with:commit_message:Update Build Files  Web以外の build 方法も下記にまとめられています。\nFlutter action · Actions · GitHub Marketplace\n参考  Flutter action · Actions · GitHub Marketplace  ","description":"GitHub Actions で Flutter Web Build を自動化してみました。","id":386,"section":"tech","tags":["GitHub","Flutter"],"title":"【GitHub Actions】Flutter Web Build を自動化","uri":"https://c-a-p-engineer.github.io/tech/2021/08/09/github-actions-flutter-web-build/"},{"content":"【Flutter】FloatingActionButton の位置を調整する Flutter の FloatingActionButton の位置を調整します。\nFloatingActionButton の位置 margin と padding で可能です。\n（必要な方だけで構いません。\n1 2 3 4 5 6 7 8  floatingActionButton: Container( margin: const EdgeInsets.only(bottom: 50), padding: const EdgeInsets.only(bottom: 50),  child: FloatingActionButton( child: Icon(Icons.remove), onPressed: () =\u0026gt; null, ), ),   EdgeInsets の設定 EdgeInsets には以下のようにすると複数の間隔を取ることが出来ます。\n1 2 3 4 5 6 7  floatingActionButton: Container( margin: const EdgeInsets.only(top: 100, left:50),  child: FloatingActionButton( child: Icon(Icons.remove), onPressed: () =\u0026gt; null, ), ),   EdgeInsets には以下の4つが設定可能です。\n top left right bottom  参考  flutter move floatingActionButton up 50 pixels - Stack Overflow 【Flutter】Containerのmarginの設定方法 – EdgeInsetsをざっくりまとめる | tty×Dev  ","description":"【Flutter】FloatingActionButton の位置を調整する","id":387,"section":"tech","tags":["Flutter"],"title":"【Flutter】FloatingActionButton の位置を調整する","uri":"https://c-a-p-engineer.github.io/tech/2021/08/08/flutter-floatingactionbutton/"},{"content":"【開発】アジャイルソフトウェア開発宣言を読み解く 開発手法のアジャイルですが、とてもふわっとしていて、アジャイル開発宣言からどのようなものか読み解いて行こうかと思います。\n※これが正しいアジャイルだとも言えないものなので注意してください。\nアジャイルソフトウェア開発宣言 まずはアジャイルソフトウェア開発宣言を見てみましょう。\nアジャイルソフトウェア開発宣言\n 私たちは、ソフトウェア開発の実践\nあるいは実践を手助けをする活動を通じて、\nよりよい開発方法を見つけだそうとしている。\nこの活動を通して、私たちは以下の価値に至った。\nプロセスやツールよりも個人と対話を、\n包括的なドキュメントよりも動くソフトウェアを、\n契約交渉よりも顧客との協調を、\n計画に従うことよりも変化への対応を、\n価値とする。すなわち、左記のことがらに価値があることを\n認めながらも、私たちは右記のことがらにより価値をおく。\n 良くある誤解 よく「アジャイルってこうでしょ？」という勘違いを多々見かけます。\n ドキュメントは要らない 柔軟な対応が必要なので計画は立てない  他にも多々見受けられますが、明らかにアジャイルソフトウェア開発宣言と違うものだけ を選びました。\n誤読の原因 これらの誤読の原因は以下の部分が原因があると推測します。\n 左記のことがらに価値があることを認めながらも、私たちは右記のことがらにより価値をおく。\n 記載されているのは より価値をおく をおくです。\n例えばドキュメントを書かないとは一切書かれておりません。\nアジャイルソフトウェア開発宣言でも 左記のことがらにかちがあることを認めながら と記載されています。\nアジャイル宣言の背後にある原則 アジャイルソフトウェア開発宣言とは別に アジャイル宣言の背後にある原則 というものがあります。\n 私たちは以下の原則に従う:\n顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。\n要求の変更はたとえ開発の後期であっても歓迎します。\n変化を味方につけることによって、お客様の競争力を引き上げます。\n動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。\nビジネス側の人と開発者は、プロジェクトを通して日々一緒に働かなければなりません。\n意欲に満ちた人々を集めてプロジェクトを構成します。\n環境と支援を与え仕事が無事終わるまで彼らを信頼します。\n情報を伝えるもっとも効率的で効果的な方法はフェイス・トゥ・フェイスで話をすることです。\n動くソフトウェアこそが進捗の最も重要な尺度です。\nアジャイル･プロセスは持続可能な開発を促進します。\n一定のペースを継続的に維持できるようにしなければなりません。\n技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。\nシンプルさ（ムダなく作れる量を最大限にすること）が本質です。\n最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。\nチームがもっと効率を高めることができるかを定期的に振り返り、それに基づいて自分たちのやり方を最適に調整します。\n アジャイル宣言の背後にある原則\nアジャイル宣言の背後にはこれだけの原則があります。\nアジャイル原則まとめ アジャイル原則を簡単にまとめると以下のようになります。\n 顧客の満足度が最優先 価値のあるソフトウェアを早く継続的に提供 変化を味方につけ、お客様の競争力を引き上げるために要求変更は開発の後期でも歓迎 動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリース ビジネス側の人と開発者は、プロジェクトを通して一緒に働く 動くソフトウェアこそが進捗の最も重要な尺度 一定のペースを継続的に維持できるようにしなければならない 技術的な卓越性と優れた設計に対する注意が速さを高める 無駄なく作れる量を最大限にすることが本質 最良のアーキテクチャ・要求・設計は自己組織的（チームメンバが個々が直接的な管理者が居なくても成り立つ）なチームから生み出される チームが効率を高めることが出来るか定期的に振り返り、最適に調整  アジャイル開発宣言を読み解く アジャイル原則を踏まえてアジャイル開発宣言を読み解いていきます。\n 顧客満足度が最優先 顧客と良く話し合う 開発者だけではなく、ビジネス側の人間もチームとしてプロジェクトを通して働く 2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリース 動くソフトウェアが進捗の最も重要な尺度 動くソフトウェアは重要ではあるがドキュメントは不要ではない 価値のあるソフトウェアを早く継続的に提供 計画を立てるが計画よりも顧客のために開発の後期でも変化への対応を行う 無駄なく作れる量で行う 技術的に高いメンバーを揃える必要がある チームメンバーが自己管理でき必要である 定期的に振り返りを行い、改善を行う  なんちゃってアジャイルになる問題点 アジャイル開発宣言だけを読んでアジャイル開発をやってみようとすると良く以下のような問題が発生します。\n チームメンバが自己管理出来る高いレベルがないと成り立たないのにチームメンバの管理が必要になる 動くソフトウェアに価値が置かれすぎてドキュメントが作られない 開発後期に大きな仕様が変更される 計画が度々変わるので計画を立てない、立てづらい 短い間隔で無駄なく開発出来る量で行う必要があるのに顧客満足が優先される 定期的な振り返りがなく、問題点の改善が行われない  まとめ アジャイル開発において多々問題が発生するのは「アジャイル」という開発手法がアジャイル開発宣言からふわっと広まってしまったせいだと考えています。\nまた間違ったアジャイルを経験した人が、そのまま「アジャイル開発」といって開発を広めている気もします。\nアジャイルソフトウェア開発宣言、背後の原則を読んでいたら本来のアジャイルは個々人に高いレベルが要求されるように感じました。\nチームに経験が浅い人が入ると問題が発生するような気がします。\nまたIPAもアジャイル開発宣言について資料を出していますのでよく読んでください。\nアジャイルソフトウェア開発宣言の読みとき方\n参考  アジャイルソフトウェア開発宣言 アジャイル宣言の背後にある原則 アジャイルソフトウェア開発宣言の読みとき方 アジャイル開発版「情報システム・モデル取引・契約書」～ユーザ／ベンダ間の緊密な協働によるシステム開発で、DXを推進～：IPA 独立行政法人 情報処理推進機構  ","description":"アジャイルソフトウェア開発宣言を読み解いていきます。","id":388,"section":"tech","tags":["開発"],"title":"【開発】アジャイルソフトウェア開発宣言を読み解く","uri":"https://c-a-p-engineer.github.io/tech/2021/08/01/agile-manifesto/"},{"content":"【GitHub】GitHub Actions を利用して PHPUnit を実行する ローカルで実行するのに時間がかる場合があるので GitHub Actions を利用して PHPUnit を実行してみました。\nサンプルコード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  name:PHPUniton:[push]jobs:test:name:Testruns-on:ubuntu-latest# PHPのバージョンを複数指定strategy:matrix:php-version:[\u0026#39;7.4\u0026#39;,\u0026#39;8.0\u0026#39;]steps:# PHP Setup- name:Setup PHP ${{ matrix.php-version }}uses:shivammathur/setup-php@v2with:php-version:${{ matrix.php-version }}- name:Checkoutuses:actions/checkout@v2- name:Install dependenciesrun:composer install --prefer-dist --no-progress --no-suggest# テストを実行- name:Run PHPUnitrun:php ./vendor/bin/phpunit tests/  これを利用することによりGitHub Actionsでテストを実行してもらえます。\nまた、複数バージョンを指定することによりPHPのバージョンアップのテストを行うことが可能です。\n参考  GitHub ActionsでPHPUnitを実行する - Qiita GitHubActionsでPHP7.4環境のPHPUnitを実行する - istyle Tech Blog  ","description":"GitHub Actions を利用して PHPUnit を実行してみました。","id":389,"section":"tech","tags":["PHP","GitHub"],"title":"【GitHub】GitHub Actions を利用して PHPUnit を実行する","uri":"https://c-a-p-engineer.github.io/tech/2021/07/30/github-actions-phpunit/"},{"content":"【PHP】mkdir でファイル作成時に複数階層を一気に作る PHPで mkdir でファイルを作成する際に複数階層のディレクトリを一気に作る方法メモ\nサンプルコード これだけで可能です。\n1 2  \u0026lt;?php mkdir(\u0026#39;/test1/test2\u0026#39;, 0777, true);   第一引数の $directory に作成したディレクトリを指定。\n第三引数の $recursive に true を指定すると途中のディレクトリがない場合に作成してくれます。\n1 2 3 4 5 6  mkdir( string $directory, int $permissions = 0777, bool $recursive = false, resource $context = ? ): bool   参考  PHP: mkdir - Manual  ","description":"PHPで mkdir でファイルを作成する際に複数階層のディレクトリを一気に作る方法メモ","id":390,"section":"tech","tags":["PHP"],"title":"【PHP】mkdir でファイル作成時に複数階層を一気に作る","uri":"https://c-a-p-engineer.github.io/tech/2021/07/29/php-mkdir-hierarchy/"},{"content":"7zip を利用してドラッグ \u0026amp; ドロップで簡単にzip圧縮をさせる方法 時々、ファイルを色々と圧縮したいのですが手動でzip圧縮するのが辛いので対応してみました。\n前提  Windows\n※Windows10以外では確認しておりません。 7zip\nインストールは ダウンロード | 7zip からお願いします。  ソースコード メモ帳やエディタを開いてbatファイルを作成します。\n1 2 3 4 5  @echo off set ZIP_PATH=\u0026#34;C:\\Program Files\\7-Zip\\7z.exe\u0026#34; for %%f in (%*) do ( %ZIP_PATH% a -tzip %%f.zip %%f )   2行目の ZIP_PATH はご自分がインストールした 7z のパスを指定してください。\n使ってみる ZIP化したいフォルダやファイルを選択して作成した zip.bat に落とすと元ファイルと同一場所に ***.zip というファイルを順次作成してくれます。\n参考  ドラッグ＆ドロップで7zに圧縮できるバッチファイル  ","description":"時々、ファイルを色々と圧縮したいのですが手動でzip圧縮するのが辛いので対応してみました。","id":391,"section":"tech","tags":["ツール","Windows"],"title":"7zip を利用してドラッグ \u0026 ドロップで簡単にzip圧縮をさせる方法","uri":"https://c-a-p-engineer.github.io/tech/2021/07/26/7zip-drag-and-drop/"},{"content":"【PHP】厳密な型付けをしよう PHPは動的型付け言語として知られていますが、厳密な型付けが出来ます。\n必要、不必要を判断してPHPで厳密な型付けをしてみましょう。\n環境  PHP 7.0.0以上\nPHP7の時に実装された機能になります。 PHP 5.6.x から PHP 7.0.x への移行 (新機能)  使ってみる PHPファイルの先頭行に以下を追加。\n1 2  \u0026lt;?php declare(strict_types=1);   サンプル\n1 2 3 4 5 6 7 8 9  \u0026lt;?php declare(strict_types=1); function sum(int $a, int $b) { return $a + $b; } var_dump(sum(1, 2)); var_dump(sum(1.5, 2.5));   こうすると sum(1.5, 2.5) の箇所は int型ではなく、 float型になるのでエラーが出ます。\n注意事項 警告\n内部関数の中からの関数呼び出しは、 strict_types 宣言の影響を受けません。  注意\n厳密な型付けは、strict モードが有効になったファイルの 内部 から行われる関数呼び出しに適用されます。\nそのファイルで宣言された関数への呼び出しに対して適用されるわけではありません。\n厳密な型付けが有効になっていないファイルから、厳密な型付けが有効になっているファイルで定義された関数を呼び出した場合は、呼び出し側の好み(型の強制)が尊重され、値は型変換されます。  警告\n厳密な型付けは、スカラー型の宣言に対してのみ定義されます。  各種注意事項をまとめると以下になります。\n PHPで用意された内部関数は strict_types の影響は受けない。 型の強制については呼び出し側が尊重されるので呼び出し側が厳密モードでないなら緩い型変換モードになります。\n→実際のプロジェクトで使用する場合は全てのファイルで厳密モードにするのが好ましい\n※混在はバグの原因になりやすいため スカラー型の宣言に対してのみ  参考  厳密な型付け  ","description":"PHPで厳密な型付けをしてみましょう。","id":392,"section":"tech","tags":["PHP"],"title":"【PHP】厳密な型付けをしよう","uri":"https://c-a-p-engineer.github.io/tech/2021/07/24/php-strict_types/"},{"content":"composer の package を自作してみる composer の package を自作してみました。\npackage を作りのテンプレートに以下のようなものがありますが、今回は最小構成で簡単に作ってみました。\nphp-pds/skeleton: Standard PHP package skeleton.\ncomposer.json作成 composer init を実行して質問に答えていくだけ。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  composer init Welcome to the Composer config generator This command will guide you through creating your composer.json config. Package name (\u0026lt;vendor\u0026gt;/\u0026lt;name\u0026gt;) [root/app]: c-a-p-engineer/hello-world-composer Description []: Hello,World Author [, n to skip]: n Minimum Stability []: dev Package Type (e.g. library, project, metapackage, composer-plugin) []: library License []: MIT Define your dependencies. Would you like to define your dependencies (require) interactively [yes]? Search for a package: Would you like to define your dev dependencies (require-dev) interactively [yes]? Search for a package: Add PSR-4 autoload mapping? Maps namespace \u0026#34;CAPEngineer\\HelloWorldComposer\u0026#34; to the entered relative path. [src/, n to skip]: { \u0026#34;name\u0026#34;: \u0026#34;c-a-p-engineer/hello-world-composer\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Hello,World\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;library\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;MIT\u0026#34;, \u0026#34;autoload\u0026#34;: { \u0026#34;psr-4\u0026#34;: { \u0026#34;CAPEngineer\\\\HelloWorldComposer\\\\\u0026#34;: \u0026#34;src/\u0026#34; } }, \u0026#34;minimum-stability\u0026#34;: \u0026#34;dev\u0026#34;, \u0026#34;require\u0026#34;: {} } Do you confirm generation [yes]? Generating autoload files Generated autoload files Would you like the vendor directory added to your .gitignore [yes]? yes PSR-4 autoloading configured. Use \u0026#34;namespace CAPEngineer\\HelloWorldComposer;\u0026#34; in src/ Include the Composer autoloader with: require \u0026#39;vendor/autoload.php\u0026#39;;   PHPファイルを作成 PHPファイルを作成します。\n1 2 3 4 5 6 7 8 9 10  \u0026lt;?php namespace CAPEngineer\\HelloWorldComposer\\HelloWorld; class HelloWorld { public function say() { return \u0026#39;Hello, World\u0026#39;; } }   GitHub に push 作成したファイル群を GitHub に push してください。\nこの時、README.md などパッケージに不要なファイルは削除しましょう。\nPackagist に登録  Packagist にアクセス。 ユーザ登録をしてください。 上部のナビゲーションの Submit を選択。 Gitub の Repository URL を登録。\n※同一名称が多いと注意が出てきますが気にせず進めます。  実際に作った composer は こちらになります。\nc-a-p-engineer/hello-world-composer: Hello,World in Composer\n実際に使ってみる まずは composer からインストール。\ncomposer require c-a-p-engineer/hello-world-composer 1 2 3 4 5 6 7 8  \u0026lt;?php use CAPEngineer\\HelloWorldComposer\\HelloWorld\\HelloWorld; require __DIR__.\u0026#39;/../vendor/autoload.php\u0026#39;; $helloWorld = new HelloWorld(); echo $helloWorld-\u0026gt;say();   これで Hello,World が表示されたら成功になります。\n参考  自作のcomposerパッケージ(hello,world)を、githubに登録して、laravelから利用できる方法 | メサイア・ワークス  ","description":"composer の package を自作してみました。","id":393,"section":"tech","tags":["PHP","composer"],"title":"composer の package を自作してみる","uri":"https://c-a-p-engineer.github.io/tech/2021/07/24/composer-package-self/"},{"content":"技術系同人誌について調べてみた 技術系同人誌を出してみたくて色々と調べてみました。\nRe:View Re:View\nMarkdown 記法で書けるのが特徴。\n色々と出来る事が多いが設定などが多種に渡るので始めるのには少々壁がある。\nノドや小口、天、地など製本に関する知識が必要。\nVivliostyle Vivliostyle\nMarkdown 記法で書けるのが特徴。\nPDFをメインにしていて、HTML/CSS → PDF としていて、CSSを使用しているのためレイアウトなどが割と簡単に出来る。\n使うのが容易だが、Re:View と比べると現段階ではまだまだ弱い箇所がある。\nFlightBooks FlightBooks\nWeb上でMarkdown記法で書くことが可能。\nWeb上のためローカルに環境を作る必要がなく、導入などが一番簡単。\nPDF出力しか現段階ではない。\nその他 Word や PowerPointなどのファイルを作成して自分でPDF出力。\n","description":"技術系同人誌を出してみたくて色々と調べてみました。","id":394,"section":"tech","tags":["ツール"],"title":"技術系同人誌について調べてみた","uri":"https://c-a-p-engineer.github.io/tech/2021/07/19/techbook/"},{"content":"RSSを取得、解析する PHPを使用して RSS を解析します。\nRSSの取得先ははてなブックマーク を使用しています。\nRSS取得 RSS の XML を取得して PHP の配列にするだけの処理です。\n1 2 3 4 5 6 7 8 9 10  \u0026lt;?php // URL $url = \u0026#34;http://b.hatena.ne.jp/search/tag?q=プログラミング\u0026amp;sort=popular\u0026amp;mode=rss\u0026#34;; // RSS（XML）を取得 $rss = simplexml_load_file($url); // 一度JSONを経由してPHPの配列化 $json = json_decode(json_encode($rss), true); var_dump($json);   これだけで可能です。\nただ注意が必要で取得したものが1つだけの場合、配列化する際に $json['item']['title'] になってしまいます。\nこれに複数ある場合は $json['item'][0]['title'] のようになります。\nメソッド化、関数化する際に以下のようにすれば統一された形になります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026lt;?php // URL $url = \u0026#34;http://b.hatena.ne.jp/search/tag?q=プログラミング\u0026amp;sort=popular\u0026amp;mode=rss\u0026#34;; // RSS（XML）を取得 $rss = simplexml_load_file($url); // 一度JSONを経由してPHPの配列化 $json = json_decode(json_encode($rss), true); if(!is_null($json[\u0026#39;item\u0026#39;][\u0026#39;title\u0026#39;] ?? null)){ // 1件のみの場合は配列化  $json[\u0026#39;item\u0026#39;] = [0 =\u0026gt; $json[\u0026#39;item\u0026#39;]]; }  var_dump($json);   参考  はてブの検索結果をRSSフィードとしてslackに垂れ流す - Qiita  ","description":"PHPを使用して RSS を取得、解析します。","id":395,"section":"tech","tags":["PHP"],"title":"【PHP】RSSを取得・解析する","uri":"https://c-a-p-engineer.github.io/tech/2021/07/10/php-rss/"},{"content":"GitHub Actions で自動的にGoogleにsitemap.xmlを送信する SEO対策のために sitemap.xml を GitHub Actions を利用して自動的に送信するように致しました。\nsitemap.xml を送信する 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  name:update-sitemapon:schedule:- cron:\u0026#39;0 0,12 * * *\u0026#39;jobs:update-sitemap:runs-on:ubuntu-lateststeps:- name:Update Google Ping Sitemaprun:|curl -X GET \u0026#34;https://www.google.com/ping?sitemap=https://example.com/sitemap.xml\u0026#34; curl -X GET \u0026#34;https://www.google.com/ping?sitemap=https://example2.com/sitemap.xml\u0026#34; curl -X GET \u0026#34;https://www.google.com/ping?sitemap=https://example3.com/sitemap.xml\u0026#34;  ※cron の時間は UTC なので 日本時間で考えると -9 時間されますので注意してください。\n参考  サイトマップの作成と送信 | Google 検索セントラル | Google Developers Google Search Console へのサイトマップの更新通知を GitHub Actions で定期実行しよう | fwywd（フュード） ワークフローをトリガーするイベント - GitHub Docs  ","description":"GitHub Actions で自動的にGoogleにsitemap.xmlを送信するようにしました。","id":396,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions で自動的にGoogleにsitemap.xmlを送信する","uri":"https://c-a-p-engineer.github.io/tech/2021/07/07/github-actions-google-sitemap/"},{"content":"GitHub Actions Discordに通知してみる push された通知など Discord に通知してみます。\nDiscord の用意 サーバー選択-\u0026gt;連携サービス-\u0026gt;ウェブフック-\u0026gt;新しいウェブフック\nウェブフックを作成後、URLを取得。\nGitHub の用意 取得した URL から DISCORD_WEBHOOK_ID と DISCORD_WEBHOOK_ID を取得します。\nhttps://discordapp.com/api/webhooks/{DISCORD_WEBHOOK_ID}/{DISCORD_WEBHOOK_TOKEN} 1.導入したい Repository の Settingsを選択。\n2.左のメニューの Secrets を指定\n3.右上の New repository secret を選択。\n4.Name に DISCORD_WEBHOOK_ID を設定。\n5.Value に取得した DISCORD_WEBHOOK_ID を設定。\n※ DISCORD_WEBHOOK_TOKEN も同様\nGitHub Actionsの設定 GitHub Actions を作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  name:Discordon:pushjobs:slack:# Ubunturuns-on:ubuntu-lateststeps:# Slack- name:Discord Notifyuses:appleboy/discord-action@0.0.3with:webhook_id:${{ secrets.DISCORD_WEBHOOK_ID }}webhook_token:${{ secrets.DISCORD_WEBHOOK_TOKEN }}color:\u0026#34;#48f442\u0026#34;username:\u0026#34;GitHub Bot\u0026#34;args:GitHub Actions Discord Notification ${{ github.event.repository.url }}  参考  appleboy/discord-action: GitHub Action that sends a Discord message. githubからdiscordに通知をする方法 - Qiita GitHub Actions のコンテキストおよび式の構文 - GitHub Docs  ","description":"GitHub Actions を利用して Discord に通知してみました。","id":397,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions Discord に通知してみる","uri":"https://c-a-p-engineer.github.io/tech/2021/07/07/github-actions-discode-notification/"},{"content":"GitHub Actions コミットメッセージ取得 GitHub Actions でコミットメッセージを取得する際のパラメータ\n以下のどちらかを使用してください。\ngithub.event.head_commit.message github.event.commits[0].message 参考  GitHub Action Get Commit Message - Stack Overflow webhook イベントとペイロード - GitHub Docs  ","description":"GitHub Actions でコミットメッセージ取得","id":398,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions コミットメッセージ取得","uri":"https://c-a-p-engineer.github.io/tech/2021/07/07/github-actions-commit-message/"},{"content":"GitHub Actions Slackに通知してみる push された通知など Slack に通知してみます。\nSlack の用意 以下の Slack アプリの Incoming Webhook を利用します。\n Incoming Webhook  Webhook URL を取得します。\nGitHub の用意  導入したい Repository の Settingsを選択。 左のメニューの Secrets を指定 右上の New repository secret を選択。 Name に SLACK_WEBHOOK_URL を設定。 Value に取得した Webhook URL を設定。  GitHub Actionsの設定 GitHub Actions を作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  name:Slackon:pushjobs:slack:# Ubunturuns-on:ubuntu-lateststeps:# Slack- name:Slack Notificationuses:tokorom/action-slack-incoming-webhook@mainenv:INCOMING_WEBHOOK_URL:${{ secrets.SLACK_WEBHOOK_URL }}with:text:GitHub Actions Slack Notification  これを push すると以下のように Slack に通知が行きます。\n通知のカスタマイズ 通知をカスタマイズすることが出来ます。\nattachments を追加することによって通知をカスタマイズ出来ます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  name:Slackon:pushjobs:slack:# Ubunturuns-on:ubuntu-lateststeps:# Slack- name:Slack Notificationuses:tokorom/action-slack-incoming-webhook@mainenv:INCOMING_WEBHOOK_URL:${{ secrets.SLACK_WEBHOOK_URL }}with:text:Start GitHub Actionsattachments:|[ { \u0026#34;color\u0026#34;: \u0026#34;good\u0026#34;, \u0026#34;author_name\u0026#34;: \u0026#34;${{ github.actor }}\u0026#34;, \u0026#34;author_icon\u0026#34;: \u0026#34;${{ github.event.sender.avatar_url }}\u0026#34;, \u0026#34;fields\u0026#34;: [ { \u0026#34;title\u0026#34;: \u0026#34;Push Repository\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;${{ github.event.repository.url }}\u0026#34; } ] } ]  以下のようにプッシュした人の名前とアバター画像、Repository の URL が通知されます。\n参考  tokorom/action-slack-incoming-webhook: GitHub Action for Slack Incoming Webhook GitHub Actions のコンテキストおよび式の構文 - GitHub Docs  ","description":"GitHub Actions を利用して Slack に通知してみました。","id":399,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions Slack に通知してみる","uri":"https://c-a-p-engineer.github.io/tech/2021/07/05/github-actions-slack-notification/"},{"content":"Mysql が立ち上がらない（パスワード設定エラー） Docker で Mysql が立ち上がらなかったのでメモ。\n現象 Docker で Mysql のコンテナ立ち上げ時にうまく立ち上がらなかったので docker-compose logs でログを確認\n同じようなログ2種類を確認しました。\n[ERROR] [Entrypoint]: MYSQL_USER=\u0026quot;root\u0026quot;, MYSQL_USER and MYSQL_PASSWORD are for configuring a regular user and cannot be used for the root user Remove MYSQL_USER=\u0026quot;root\u0026quot; and use one of the following to control the root user password: - MYSQL_ROOT_PASSWORD - MYSQL_ALLOW_EMPTY_PASSWORD - MYSQL_RANDOM_ROOT_PASSWORD [ERROR] [Entrypoint]: Database is uninitialized and password option is not specified You need to specify one of the following: - MYSQL_ROOT_PASSWORD - MYSQL_ALLOW_EMPTY_PASSWORD - MYSQL_RANDOM_ROOT_PASSWORD 原因 原因は MYSQL_USER=\u0026quot;root\u0026quot; で root ユーザのパスワード設定は MYSQL_PASSWORD でするなとの事。\n1 2 3 4 5 6 7 8 9 10 11 12  version:\u0026#39;3\u0026#39;services:mysql:image:mysql:8.0container_name:mysqlports:- \u0026#34;3306:3306\u0026#34;environment:MYSQL_DATABASE:test_dbMYSQL_USER:rootMYSQL_PASSWORD:passw0rd  対処 10行目の様に root ユーザ用のパスワードを追加。\n12行目で 通常ユーザを設定します。\n1 2 3 4 5 6 7 8 9 10 11 12 13  version:\u0026#39;3\u0026#39;services:mysql:image:mysql:8.0container_name:mysqlports:- \u0026#34;3306:3306\u0026#34;environment:MYSQL_ROOT_PASSWORD:rootpwMYSQL_DATABASE:test_dbMYSQL_USER:userMYSQL_PASSWORD:passw0rd  これで問題なく起動できました。\n","description":"Docker で Mysql が立ち上がらない現象が発生したためメモ。","id":400,"section":"tech","tags":["Docker","Mysql"],"title":"【Docker】Mysql が立ち上がらない（ユーザ設定エラー）","uri":"https://c-a-p-engineer.github.io/tech/2021/07/05/docker-mysql/"},{"content":"MailHog を利用してメールテスト環境を作る メールの送信テストを行う際にメールアドレスなどの用意が面倒だったため、MailHog を利用してメールテスト環境を作りました。\nMailHog MailHog\n mailhog/MailHog: Web and API based SMTP testing  Docker に MailHog 導入 docker-compose.yml に以下を追加\n1 2 3 4 5 6  mailhog:container_name:mailhogimage:mailhog/mailhog:latestports:- \u0026#34;8025:8025\u0026#34;- \u0026#34;1025:1025\u0026#34;  PHP Dockerfile PHP を利用してメール送信をするため PHP の Dockerfile に以下を追加\n1 2 3 4 5  # mailhog対応RUN curl -sSLO https://github.com/mailhog/mhsendmail/releases/download/v0.2.0/mhsendmail_linux_amd64 \\  \u0026amp;\u0026amp; chmod +x mhsendmail_linux_amd64 \\  \u0026amp;\u0026amp; mv mhsendmail_linux_amd64 /usr/local/bin/mhsendmail \u0026amp;\u0026amp; echo \u0026#39;sendmail_path = \u0026#34;/usr/local/bin/mhsendmail --smtp-addr=mailhog:1025\u0026#34;\u0026#39; \u0026gt; /usr/local/etc/php/conf.d/sendmail.ini  --smtp-addr=mailhog:1025 の箇所は --smtp-addr=サービス名:SMTPポート番号 になります。\nメール送信 実際にメールを送信してみます。\n1  php -r \u0026#34;mail(\u0026#39;test@example.com\u0026#39;, \u0026#39;テストタイトル\u0026#39;, \u0026#39;テスト本文\u0026#39;, \u0026#39;From: from@example.com\u0026#39;);\u0026#34;;   メール確認 MailHog の確認画面で送信の確認が出来ます。\nhttp://localhost:8025/\n一覧画面でメールが届いている事を確認\n詳細画面で本文を確認\nこれでメールのテストが出来ます。\n","description":"メールの送信テストを行う際にメールアドレスなどの用意が面倒だったため、MailHog を利用してメールテスト環境を作りました。","id":401,"section":"tech","tags":["Docker","Mail"],"title":"【Docker】MailHog を利用してメールテスト環境を作る","uri":"https://c-a-p-engineer.github.io/tech/2021/07/04/docker-mailhog/"},{"content":"error: RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: CANCEL (err 8) Git を利用していて以下のエラーが発生しました。\nerror: RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: CANCEL (err 8) 対処 以下のコマンド HTTP/2 から HTTP/1.1 にダウングレードすることで解決しました。\ngit config --global http.version HTTP/1.1 他には以下の対応でも解決するとのことです。\n Gitクライアントを利用している場合はバージョンアップする HTTPSではなくSSHでプッシュする  参考  Fix error : RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)  ","description":"Git で error: RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: CANCEL (err 8) が発生した時の対処","id":402,"section":"tech","tags":["Git"],"title":"【Git】error: RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: CANCEL (err 8)","uri":"https://c-a-p-engineer.github.io/tech/2021/06/29/github-error-rpc-failed/"},{"content":"Flutter web can\u0026rsquo;t load network image from another domain エラーで画像が取得できない場合の対処 Flutter で以下のようにして画像を取得しようとした際に別ドメインのためにエラーが発生したので対処しました。\n失敗コード Image.network を使用するとエラーが発生します。\n1 2 3 4 5 6 7 8  class MyImage extends StatelessWidget { @override Widget build(BuildContext context) { String imageUrl = \u0026#34;image_url\u0026#34;; return Image.network(imageUrl), } }   対応方法 画像を取得してHTMLを生成するようにして対処を行います。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import \u0026#39;dart:html\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;dart:ui\u0026#39; as ui; class MyImage extends StatelessWidget { @override Widget build(BuildContext context) { String imageUrl = \u0026#34;image_url\u0026#34;; ui.platformViewRegistry.registerViewFactory( imageUrl, (int _) =\u0026gt; ImageElement()..src = imageUrl, ); return HtmlElementView( viewType: imageUrl, ); } }   参考  Flutter web can\u0026rsquo;t load network image from another domain - Stack Overflow  ","description":"Flutter で画像取得を行う際に「Flutter web can't load network image from another domain」が出た時の対処","id":403,"section":"tech","tags":["Flutter"],"title":"【Flutter】Flutter web can't load network image from another domain エラーで画像が取得できない場合の対処","uri":"https://c-a-p-engineer.github.io/tech/2021/06/22/flutter-image-another-domain/"},{"content":"GitHub Actions を利用して自動コミット GitHub Actions を利用して Hugo を利用している当ブログを自動ビルド \u0026amp; 自動コミットしてみた。\nサンプルコード Hugoを利用した当ブログを以下の yml を使用して自動的にビルド \u0026amp; コミットするようにしてみました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  name:github pageson:pushjobs:deploy:# Ubunturuns-on:ubuntu-lateststeps:# Checkout- name:Checkoutuses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod# Setup Hugo- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.83.1\u0026#39;extended:true# Hugo Build- name:Buildrun:|cd ./blog rm -rf ../docs hugo --minify mv -fv ./public/ ../docs/# Commit- name:Update Hugouses:stefanzweifel/git-auto-commit-action@v4.2.0with:commit_message:Update Build Files  最初は戸惑いましたが使用感としてはとても楽。\nGitHub Actions の実行やログもGitHub上で確認できます。\n参考 GitHub Actions  Actions | GitHub GitHub Actionsのドキュメント - GitHub Docs  Hugo GitHub Actions  peaceiris/actions-hugo: GitHub Actions for Hugo ⚡️ Setup Hugo quickly and build your site fast. Hugo extended, Hugo Modules, Linux (Ubuntu), macOS, and Windows are supported.  ","description":"GitHub Actions を利用して Hugo のブログを自動ビルド \u0026 自動コミットしてみた。","id":404,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions を利用して Hugo のブログを自動ビルド \u0026 自動コミット","uri":"https://c-a-p-engineer.github.io/tech/2021/06/19/github-actions-deploy/"},{"content":"GitHub Actions を利用して成果物を保存する GitHub Actions でテストをした時などログが出るかと思います。\nそういった成果物などをコミットするとブランチが汚れるしわざわざSlackなどに送るのも面倒。\nなので一時的にGitHubにアップする事が可能なのです。\nサンプルコード サンプルは test/* という名称のブランチでしか発動しないので気をつけてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  # Workflowname:upload-artifact-sampleon:# 発動条件 pushpush:# 発動ブランチ test/*branches:- test/*# JOBjobs:artifact-sample:runs-on:ubuntu-lateststeps:# 成果用としてアップロードするファイルを作成- name:artifact outputid:rndrun:|echo \u0026#34;Hello, World\u0026#34; \u0026gt; hello.txt# 成果物アップロード- name:artifact uploaduses:actions/upload-artifact@v2.2.0with:# 保存ファイル名（name.zip）name:hello# 保存するファイルpath:hello.txt# 保存期間（日）retention-days:3  対象のリポジトリ \u0026gt; Actions \u0026gt; 対象の「Action」 \u0026gt; 画面下部に「Artifacts」 ありますので、そこからダウンロードが可能です。\n参考  ワークフロー データを成果物として保存する - GitHub Docs  ","description":"GitHub Actions を利用して成果物を保存する","id":405,"section":"tech","tags":["GitHub"],"title":"【GitHub】GitHub Actions を利用して成果物を保存する","uri":"https://c-a-p-engineer.github.io/tech/2021/11/13/github-actions-artifact/"},{"content":"TCPDF で HTML 上で改ページを行う PHP の PDF 出力用ライブラリ TCPDF で HTML 上で改ページを行う方法。\nサンプルコード \u0026lt;br pagebreak=\u0026quot;true\u0026quot;/\u0026gt; を追加するだけで可能です。\nサンプルでは AddPage() を一回しかして居ないのに2ページ出てきます。\n※ライブラリは別途、自分で入れてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;?php include \u0026#34;./TCPDF/tcpdf.php\u0026#34;; //ライブラリの読み込み  // 用紙の向き・unit単位・用紙フォーマットを指定します $tcpdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, \u0026#39;UTF-8\u0026#39;, false); $tcpdf-\u0026gt;setFont(\u0026#39;kozminproregular\u0026#39;); $tcpdf-\u0026gt;setPrintHeader(false); $tcpdf-\u0026gt;setPrintFooter(false); $tcpdf-\u0026gt;AddPage(); $html = \u0026#39;\u0026lt;br pagebreak=\u0026#34;true\u0026#34;/\u0026gt;\u0026#39;; $tcpdf-\u0026gt;WriteHTML($html, true, 0, false, true, \u0026#39;L\u0026#39;); $tcpdf-\u0026gt;Output(\u0026#39;test.pdf\u0026#39;, \u0026#39;I\u0026#39;);   参考  Example 006 : WriteHTML() · TCPDF pdf - Manual Page Break in TCPDF - Stack Overflow  ","description":"PHP の PDF 出力用ライブラリ TCPDF で HTML 上で改ページを行う方法","id":406,"section":"tech","tags":["TCPDF"],"title":"【PHP】TCPDF で HTML 上で改ページを行う","uri":"https://c-a-p-engineer.github.io/tech/2021/06/18/tcpdf-br-paging/"},{"content":"Android Studio を入れる Android Studio を Ubuntu に入れたのでメモ。\nインストール手順 1.JDKインストール Android は Java を使用しているのでJDKをインストール。\napt -y install openjdk-11-jdk 2.JAVA_HOMEの設定 Javaにパスを通す\nexport JAVA_HOME=\u0026quot;/usr/lib/jvm/java-1.11.0-openjdk-amd64\u0026quot; 3.リポジトリの追加 Android Studio のリポジトリを追加\nadd-apt-repository ppa:maarten-fonville/android-studio 4.パッケージ一覧を更新 パッケージを更新。\napt update 5.Android Studio インストール Android Studio インストール\napt -y install android-studio 6.Android Studio起動 Android Studio の起動は以下のコマンドを実行するだけ。\n/opt/android-studio/bin/studio.sh ","description":"Ubuntu に Android Studio を入れる","id":407,"section":"tech","tags":["Android Studio"],"title":"【Ubuntu】Android Studio を入れる","uri":"https://c-a-p-engineer.github.io/tech/2021/06/15/android-studio/"},{"content":"Flutter の開発環境を Docker で作ってみた Flutter を触ってみたくて Flutter の開発環境を Docker で作ってみました。\nDocker 作った Docker は以下のリポジトリに入れています。\nc-a-p-engineer/docker-flutter\n使用したDocker Image\n dorowu/ubuntu-desktop-lxde-vnc | Docker Hub\n大本の Docker Image は以前、以下の記事で紹介したものです。\n【Docker】Ubuntuでリモートデスクトップ  使用方法 README.md に記載していますが、以下のコマンドだけで開発完了を作れます。\ndocker-compose up -d --build サンプルまで作る Docker 内に入る。\ndocker exec -it flutter bash もしくは以下のURLに接続して作業します。（ターミナルを開いてください）\n http://127.0.0.1:6080/   作業ディレクトリ  cd /src 2.サンプル作成\nflutter サンプルを作成\nflutter create . 3.サンプル起動\nport:55555 でサーバー起動\nflutter run -d web-server --web-port 55555 --web-hostname 0.0.0.0 http://localhost:5555 で確認\n4.build\nflutter build web ビルドしたファイルはアップする事で実際にWebにアップすることで使用することが出来ます。\nFlutter Demo\nAndoroid用の設定 Androidの設定\n以下の設定を有効にするとAndoroid Studioをインストールします。\n.env.example → .env\nINSTALL_ANDROID=true\n2.Andoroid Studioの起動\nDocker build後にDocker内（http://127.0.0.1:6080/）で実行して Andoroid Studio を設定してください。\n/opt/android-studio/bin/studio.sh\n3.Andoroid Studioの設定\n起動後\nダイアログの右下のConfigure \u0026gt; Android SDK \u0026gt; タブのSDK Toolsを選択 \u0026gt; Android ADK Command-line Tools をチェック \u0026gt; OK\n※初期起動のダイアログでやり忘れたら以下の手順で実行\nAndoroid Studio 起動中\nツールバー Tools \u0026gt; SDK Toolsを選択 \u0026gt; Android ADK Command-line Tools をチェック \u0026gt; OK\n3.SDKの設定\nflutter config --android-sdk /root/Android/Sdk /root/Andorid/Sdk を適宜変えてください。\n4.Androidの設定\nflutter doctor --android-licenses 全て y でOKです。\n5.インストールの確認\nflutter doctor 以下の画像のようになったら Andoroid の開発環境も整います。\n※ただし、Andoroid Studio のエミュレータは現在Docker上では動かないようなのでご注意してください。（Andoroid エミュレータはVM上では動かない模様）\n","description":"Flutter を触ってみたくて Flutter の開発環境を Docker で作ってみました","id":408,"section":"tech","tags":["Flutter","Docker"],"title":"【Flutter】Flutter の開発環境を Docker で作ってみた","uri":"https://c-a-p-engineer.github.io/tech/2021/06/14/flutter-docker/"},{"content":"private リポジトリを clone する ちょいちょい忘れるのでメモ。\ngit clone https://{ユーザ名}:{パスワード}@github.com/hoge/for.git ただし二段階認証を設定している場合は通常の GitHub のログインパスワードでは clone 出来ません。\nGitHub から token を発行して対応してください。\nGitHubに二段階認証を設定した後にGit操作できない時の解決策 - Qita\n","description":"GitHub の private リポジトリを clone する","id":409,"section":"tech","tags":["GitHub"],"title":"【GitHub】private リポジトリを clone する","uri":"https://c-a-p-engineer.github.io/tech/2021/06/11/github-private-clone/"},{"content":"root ユーザでは Google Chrome が起動しない Ubuntu を使用していて何故か Google Chrome が起動しない現象を確認しました。\n原因 Ubuntu では root ユーザの場合に Google Chrome がセキュリティ上の都合で起動しません。\n解決方法 解決方法自体は簡単です。\n--no-sandbox を付けるだけで起動が出来ます。\nですが、root ユーザのサンドボックスを外すのはセキュリティの都合上、推奨しません。\nお気をつけてください。\nコマンドラインから起動 コマンドラインから起動する場合は以下のようにすれば起動できます。\ngoogle-chrome --no-sandbox 上記のように --no-sandbox を入れて起動すればOKです。\nリンクなども上記のように修正すればいけます。\nChrome の修正 Google Chrome 起動 bash を修正します。\n/usr/bin/google-chrome を開いて最終行に --no-sandbox を追加します。\n1  exec -a \u0026#34;$0\u0026#34; \u0026#34;$HERE/chrome\u0026#34; \u0026#34;$@\u0026#34;   ↓ --no-sandbox を付与\n1  exec -a \u0026#34;$0\u0026#34; \u0026#34;$HERE/chrome\u0026#34; \u0026#34;$@\u0026#34; --no-sandbox   これで Google Chrome を起動することが出来ます。\n","description":"Ubunt で root ユーザでは Google Chrome が起動しない現象","id":410,"section":"tech","tags":["Linux","Ubuntu"],"title":"【Ubuntu】root ユーザでは Google Chrome が起動しない","uri":"https://c-a-p-engineer.github.io/tech/2021/06/09/ubuntu-chrome-root/"},{"content":"【VSCode】拡張機能メモ マーケットプレイスから拡張機能を探すことができます。\nまた VSCode から探すことも可能です。\nVisual Studio Marketplace\n日本語化 VSCodeの日本語化\nJapanese Language Pack for Visual Studio Code\nMaterial Icon Theme 拡張子に合わせてアイコンを表示\nMaterial Icon Theme\ncode-eol 改行コードを表示\ncode-eol\nzenkaku 全角スペースを表示\nzenkaku\n※半角スペースは editor.renderWhitespace の設定を all にすることで表示可能\nindent-rainbow インデント色付け\nindent-rainbow\nDocker Docker管理用\nDocker\nGit Graph Gitを視覚的に扱う\nGit Graph\nGitLens ソースコード上に変更履歴を表示\nGitLens — Git supercharged\n","description":"VSCode 今現在使用している拡張機能のメモ","id":411,"section":"tech","tags":["Visual Studio Code"],"title":"【VSCode】拡張機能メモ - 2021年06月","uri":"https://c-a-p-engineer.github.io/tech/2021/06/06/vscode-extend/"},{"content":"関数 empty は罠 PHPの関数 empty はとても使いやすく入力値の検査などに使いやすいですがこれが罠なんです。\n・PHP: empty - Manual\nempty の使いやすさ PHPマニュアルにある empty の説明はこれだけです。\n empty — 変数が空であるかどうかを検査する\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026lt;?php echo \u0026#39;未定義\u0026#39; . PHP_EOL; var_dump(empty($hoge)); echo PHP_EOL; echo \u0026#39;入力なし（文字数0）\u0026#39; . PHP_EOL; var_dump(empty(\u0026#39;\u0026#39;)); echo PHP_EOL; echo \u0026#39;NULL\u0026#39; . PHP_EOL; var_dump(empty(null)); echo PHP_EOL; echo \u0026#39;値あり\u0026#39; . PHP_EOL; var_dump(empty(\u0026#39;値あり\u0026#39;)); echo PHP_EOL;   出力結果\n1 2 3 4 5 6 7 8 9 10 11  未定義 bool(true) 入力なし（文字数0） bool(true) NULL bool(true) 値あり bool(false)   このように変数が未定義、文字数0や null の場合に true を返します。\nわざわざ、変数未定義チェック、null チェック、文字数チェックなどを行う必要がなくとても簡単にチェックをしてくれます。\nこれだけだと 入力値がないものをに対してtrue を返す関数だと思ってしまいます。\nemptyの罠 今度は数値で確認してみます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026lt;?php echo \u0026#39;0\u0026#39; . PHP_EOL; var_dump(empty(0)); echo PHP_EOL; echo \u0026#39;1\u0026#39; . PHP_EOL; var_dump(empty(1))); echo PHP_EOL; echo \u0026#39;-1\u0026#39; . PHP_EOL; var_dump(empty(-1)); echo PHP_EOL; echo \u0026#39;0000\u0026#39; . PHP_EOL; var_dump(empty(\u0026#39;0000\u0026#39;)); echo PHP_EOL;   出力結果\n1 2 3 4 5 6 7 8 9 10 11  0 bool(true) 1 bool(false) -1 bool(false) 0000 bool(false)   何か挙動が怪しいです。\n0 で true (空)扱いになります。\nemptyの罠の原因 empty 関数について、内部で以下のように動いているためです。\n表を見ていると false にも true や空の配列に true を返したりします。\n   式 empty()     $x = \u0026ldquo;\u0026quot;; true   $x = null; true   var $x; true   $x が未定義 NULL   $x = array(); true   $x = array(\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;); false   $x = false; true   $x = true; false   $x = 1; false   $x = 42; false   $x = 0; true   $x = -1; false   $x = \u0026ldquo;1\u0026rdquo;; false   $x = \u0026ldquo;0\u0026rdquo;; true   $x = \u0026ldquo;-1\u0026rdquo;; false   $x = \u0026ldquo;php\u0026rdquo;; false   $x = \u0026ldquo;true\u0026rdquo;; false   $x = \u0026ldquo;false\u0026rdquo;; false    PHP: PHP 型の比較表 - Manual\n対策 対策としては empty の表を理解して使用する。\nもしくはちゃんと意図した動作を明確に書くことです。\nnullチェックでは is_null、文字数チェックでは strlenなど行いたい処理に合わして明確に処理を書いてください。\n個人的な見解ですが empty だけだと処理の意図が伝わりづらい事があるので出来るだけ処理を明確に書く方がメンテナンス性が高い気がします。\n","description":"PHPの関数 empty はとても使いやすく入力値の検査などに使いやすいですがこれが罠なんです。","id":412,"section":"tech","tags":["PHP"],"title":"【PHP】関数 empty は罠","uri":"https://c-a-p-engineer.github.io/tech/2021/06/04/php-empty/"},{"content":"配列を扱う時にとても有用な array_column PHP で配列を扱う時にとても有用な関数 array_column をご紹介します。\nPHPマニュアル上でとても有用な例まで載っているのですがあまりこのような使われ方をせずに for や foreach を使用しているのを多々見るので今回記事化しました。\narray_column を使用すれば例えばセレクトボックスに入れるデータなど一括で簡単に作れますので作れます。\n配列の中の連想配列から指定のキーを抜き出して配列する 配列の中の連想配列から指定のキーを抜き出して配列にします。\n・PHP: array_column - Manual 例1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026lt;?php // データベースから返ってきたレコードセットの例 $records = [ [ \u0026#39;id\u0026#39; =\u0026gt; 2135, \u0026#39;first_name\u0026#39; =\u0026gt; \u0026#39;John\u0026#39;, \u0026#39;last_name\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39;, ], [ \u0026#39;id\u0026#39; =\u0026gt; 3245, \u0026#39;first_name\u0026#39; =\u0026gt; \u0026#39;Sally\u0026#39;, \u0026#39;last_name\u0026#39; =\u0026gt; \u0026#39;Smith\u0026#39;, ], [ \u0026#39;id\u0026#39; =\u0026gt; 5342, \u0026#39;first_name\u0026#39; =\u0026gt; \u0026#39;Jane\u0026#39;, \u0026#39;last_name\u0026#39; =\u0026gt; \u0026#39;Jones\u0026#39;, ], [ \u0026#39;id\u0026#39; =\u0026gt; 5623, \u0026#39;first_name\u0026#39; =\u0026gt; \u0026#39;Peter\u0026#39;, \u0026#39;last_name\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39;, ] ]; $first_names = array_column($records, \u0026#39;first_name\u0026#39;); print_r($first_names);   出力結果\n1 2 3 4 5 6 7  Array ( [0] =\u0026gt; John [1] =\u0026gt; Sally [2] =\u0026gt; Jane [3] =\u0026gt; Peter )   配列の中の連想配列から指定した複数のキーを抜き出して配列する 配列の中の連想配列から指定した複数のキーを抜き出して配列します。\n PHP: array_column - Manual 例2  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026lt;?php // データベースから返ってきたレコードセットの例 $records = [ [ \u0026#39;id\u0026#39; =\u0026gt; 2135, \u0026#39;first_name\u0026#39; =\u0026gt; \u0026#39;John\u0026#39;, \u0026#39;last_name\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39;, ], [ \u0026#39;id\u0026#39; =\u0026gt; 3245, \u0026#39;first_name\u0026#39; =\u0026gt; \u0026#39;Sally\u0026#39;, \u0026#39;last_name\u0026#39; =\u0026gt; \u0026#39;Smith\u0026#39;, ], [ \u0026#39;id\u0026#39; =\u0026gt; 5342, \u0026#39;first_name\u0026#39; =\u0026gt; \u0026#39;Jane\u0026#39;, \u0026#39;last_name\u0026#39; =\u0026gt; \u0026#39;Jones\u0026#39;, ], [ \u0026#39;id\u0026#39; =\u0026gt; 5623, \u0026#39;first_name\u0026#39; =\u0026gt; \u0026#39;Peter\u0026#39;, \u0026#39;last_name\u0026#39; =\u0026gt; \u0026#39;Doe\u0026#39;, ] ]; $last_names = array_column($records, \u0026#39;last_name\u0026#39;, \u0026#39;id\u0026#39;); print_r($last_names);   出力結果\n1 2 3 4 5 6 7  Array ( [2135] =\u0026gt; Doe [3245] =\u0026gt; Smith [5342] =\u0026gt; Jones [5623] =\u0026gt; Doe )   オブジェクトの public プロパティから指定のプロパティを抜き出して配列にする オブジェクトの public プロパティから指定のプロパティを抜き出して配列にします。\n PHP: array_column - Manual 例3  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;?php class User { public $username; public function __construct(string $username) { $this-\u0026gt;username = $username; } } $users = [ new User(\u0026#39;user 1\u0026#39;), new User(\u0026#39;user 2\u0026#39;), new User(\u0026#39;user 3\u0026#39;), ]; print_r(array_column($users, \u0026#39;username\u0026#39;));   出力結果\n1 2 3 4 5 6  Array ( [0] =\u0026gt; user 1 [1] =\u0026gt; user 2 [2] =\u0026gt; user 3 )   オブジェクトの public プロパティから指定のプロパティを抜き出して配列にする オブジェクトの public プロパティから指定のプロパティを抜き出して配列にします。\n PHP: array_column - Manual 例4  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;?php class Person { private $name; public function __construct(string $name) { $this-\u0026gt;name = $name; } public function __get($prop) { return $this-\u0026gt;$prop; } public function __isset($prop) : bool { return isset($this-\u0026gt;$prop); } } $people = [ new Person(\u0026#39;Fred\u0026#39;), new Person(\u0026#39;Jane\u0026#39;), new Person(\u0026#39;John\u0026#39;), ]; print_r(array_column($people, \u0026#39;name\u0026#39;));   出力結果\n1 2 3 4 5 6  Array ( [0] =\u0026gt; Fred [1] =\u0026gt; Jane [2] =\u0026gt; John )   ","description":"PHPで配列を扱う時にとても有用な関数 array_column をご紹介。","id":413,"section":"tech","tags":["PHP"],"title":"【PHP】配列を扱う時にとても有用な array_column","uri":"https://c-a-p-engineer.github.io/tech/2021/06/02/php-array_column/"},{"content":"連続でPOST、GETなどの送信すると前のログイン情報を引き継いでしまう？ PHPUnit でメソッド内で連続で POST、GETなどの送信すると前のログイン情報を引き継いでしまう？現象を確認しました。\nテストの都合上 PHPUnit で1メソッド内で連続で POST、GET など行いました。\n※通常ではログイン状態確認テストと未ログイン状態確認テストなど別に書くと思われますが特殊なケースです。\nそうすると何故か以下のような現象を確認しました。\n・未ログインで送信 → ログイン送信 → 未ログインで接続\n・ログイン送信 → 未ログイン送信 → ログインで接続\nなぜか最初に送信した状態をを引き継いでいました。\n確認環境  PHP 7.4 PHPUnit 9,5 Laravel 6.2  失敗コード ログイン後のステータスコードを確認後に、ログインしてステータスを確認するというテストです。\n以下のようなコードですと何故かログアウトされていませんでした。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;?php namespace Tests\\Feature\\Sample; use PHPUnit\\Framework\\TestCase; class SampleTest extends TestCase { /** * @test */ public function getTest() { // ログイン  Auth::loginUsingId(1); // ユーザページ  $response = $this-\u0026gt;get(\u0026#39;/user\u0026#39;); // ユーザページなのでログインでは200  $response-\u0026gt;assertStatus(200); // ログアウト  Auth::logout(); // ユーザページ  $response = $this-\u0026gt;get(\u0026#39;/user\u0026#39;); // ユーザページなので未ログインでは403  $response-\u0026gt;assertStatus(403); } }   何故かログアウトしてもログイン状態として判定されて 403 にならずに 200 になって失敗します。\nサンプルコード 何故かログアウトしてもログイン状態として判定されるため、色々考えてセッション破棄などもしましたがテストの中で保存しているようです。\nただこれを特定するのも時間がかかるため少々力技で解決しました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  \u0026lt;?php namespace Tests\\Feature\\Sample; use PHPUnit\\Framework\\TestCase; class SampleTest extends TestCase { /** * @test */ public function getTest() { // ログイン  Auth::loginUsingId(1); // ユーザページ  $response = $this-\u0026gt;get(\u0026#39;/user\u0026#39;); // ユーザページなのでログインでは200  $response-\u0026gt;assertStatus(200); // 初期化  $this-\u0026gt;setUp(); // ログアウト  Auth::logout(); // ユーザページ  $response = $this-\u0026gt;get(\u0026#39;/user\u0026#39;); // ユーザページなので未ログインでは403  $response-\u0026gt;assertStatus(403); } }   setUp() を使用して初期化します。\nこうすることによってテストの初期化が走ってどこかに残ったセッションのデータを破棄します。\n参考  4. フィクスチャ — PHPUnit latest Manual  ","description":"PHPUnitでメソッド内で連続でPOST、GETなどの送信すると前のログイン情報を引き継いでしまう？現象を確認しました。","id":414,"section":"tech","tags":["PHP","PHPUnit","テスト"],"title":"【PHPUnit】メソッド内で連続でPOST、GETなどの送信すると前のログイン情報を引き継いでしまう？","uri":"https://c-a-p-engineer.github.io/tech/2021/06/01/phpunit-session-destroy/"},{"content":"ウィンドウの大きさを設定、制限する Electronのウィンドウの大きさを設定、制限する。\nウィンドウの最小の大きさ、最大の大きさを設定します。\nサンプルコード ウィンドウ生成時に以下の用に minWidth などを入れることによりウィンドウの最小、最大の大きさを設定してウィンドウサイズの制限が可能です。\n1 2 3 4 5 6 7 8 9 10 11 12 13  const window = new BrowserWindow({ // 初期表示 width: 500, height: 500, // ウィンドウサイズの最小 minWidth : 300, minHeight: 300, // ウィンドウサイズの最大 maxWidth : 800, maxHeight : 800, })   参考  javascript - electron BrowserWindow min height and width not working after hide() show() methods - Stack Overflow  ","description":"Electronでウィンドウの大きさを設定、制限する方法","id":415,"section":"tech","tags":["Electron"],"title":"【Electron】ウィンドウの大きさを設定、制限する","uri":"https://c-a-p-engineer.github.io/tech/2021/05/30/electron-window-min/"},{"content":"strtotime でのオーバーフロー？ 加減算時の罠 PHP の文字列から日付に変換する strtotime の関数には加算、減算発生する際などに発生する様々な罠があります。\n今回その罠をご紹介。\n日付がオーバーフロー 10,000年以上の西暦を入力された場合、オーバーフロー（？）されて日付が UNIX タイムスタンプが0秒扱いになるようです。\n1 2 3 4 5 6 7 8 9 10  \u0026lt;?php // 正常 $date = \u0026#39;9999-12-31 23:59:59\u0026#39;; $date = date(\u0026#39;Y-m-d H:i:s\u0026#39;, strtotime($date)); echo \u0026#39;正常 :\u0026#39; . $date . PHP_EOL; // オーバーフロー $date = \u0026#39;10000-01-01 00:00:00\u0026#39;; $date = date(\u0026#39;Y-m-d H:i:s\u0026#39;, strtotime($date)); echo \u0026#39;オーバーフロー:\u0026#39; . $date . PHP_EOL;   実行すると 10000年以上をしていた場合 1970-01-01 00:00:00 と表示されてしまいます。\n正常 :9999-12-31 23:59:59 オーバーフロー:1970-01-01 00:00:00 日時がおかしくても自動で計算 1 2 3 4 5  \u0026lt;?php // 自動計算 $date = \u0026#39;2021-06-31 24:00:00\u0026#39;; $date = date(\u0026#39;Y-m-d H:i:s\u0026#39;, strtotime($date)); echo \u0026#39;自動計算:\u0026#39; . $date;   06/31 は存在しない（6月は30日まで）\n→ 07/01 に繰り上げ\n→ 24:00:00 は存在しない（時間は23：59：59まで）\n→ 07/02 に繰り上げ\nこのように計算されて下記のような実行結果になります。\n自動計算:2021-07-02 00:00:00 月の加減算 月の加減算を行う場合に自動計算が発生する可能性があります。\n月の加算 月の加算を行う場合 +2 month などと表記すると月の加算を行ってくれます。\n1 2 3 4 5  \u0026lt;?php // 加算 $date = \u0026#39;2021-07-31 00:00:00\u0026#39;; $date = date(\u0026#39;Y-m-d H:i:s\u0026#39;, strtotime($date . \u0026#39;+2 month\u0026#39;)); echo \u0026#39;加算:\u0026#39; . $date;   7月の月末から2ヶ月後にすると期待値としては9月の末になって欲しいかと思います。\nただ9月は30日までなので \u0026lsquo;09/31\u0026rsquo; → \u0026lsquo;10/01\u0026rsquo; と繰り上げをされてしまいます。\n加算:2021-10-01 00:00:00 月の減算 月の加算を行う場合 -2 month などと表記すると月の減算を行ってくれます。\n1 2 3 4 5  \u0026lt;?php // 減算 $date = \u0026#39;2021-07-31 00:00:00\u0026#39;; $date = date(\u0026#39;Y-m-d H:i:s\u0026#39;, strtotime($date . \u0026#39;-1 month\u0026#39;)); echo \u0026#39;減算:\u0026#39; . $date;   7月の月末から1ヶ月前にすると期待値としては6月の末になって欲しいかと思います。\nただ6月にはならずに7月のまま \u0026lsquo;07/31\u0026rsquo; → \u0026lsquo;07/01\u0026rsquo; と30日引かれた状態になります。\n減算:2021-07-01 00:00:00 参考  PHP: strtotime - Manual  ","description":"PHP の文字列から日付に変換する strtotime の関数には加算、減算発生する際に発生する様々な罠があります。今回その罠をご紹介。","id":416,"section":"tech","tags":["PHP"],"title":"【PHP】strtotime バグ？オーバーフロー？加減算時の罠","uri":"https://c-a-p-engineer.github.io/tech/2021/05/22/php-strtotime/"},{"content":"PHPでAPIドキュメント（API Blueprint \u0026amp; aglio）をスクレイピングする。 API Blueprint \u0026amp; aglio で出力されたAPIドキュメントをPHPを利用してスクレイピングしてみます。\nAPIドキュメントを解析 → 自動テスト出来たら良いなと思いやってみました。\nサンプル サンプルに使用している default.html はこちらの aglio の GitHub のものを使用しています。\n aglio/default.html at master · danielgtaylor/aglio  解析に使用したHTMLはこちらです。\n default.html\ndefault.html 以外では確認しておりませんので必要な場合は改修をして使用してください。  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129  \u0026lt;?php use DOMDocument; use DOMXPath; // APIドキュメント読込 $html = file_get_contents(\u0026#39;default.html\u0026#39;); $dom = new DOMDocument(\u0026#39;1.0\u0026#39;, \u0026#39;UTF-8\u0026#39;); $html = mb_convert_encoding($html, \u0026#34;HTML-ENTITIES\u0026#34;, \u0026#39;auto\u0026#39;); @$dom-\u0026gt;loadHTML($html); $xpath = new DOMXPath($dom); // 各APIを取得 $content = $xpath-\u0026gt;query(\u0026#39;//div[contains(@class, \u0026#34;action\u0026#34;)]\u0026#39;); $apis = []; foreach($content as $ivalue){ // HTML読込  $idom = new DOMDocument(\u0026#39;1.0\u0026#39;, \u0026#39;UTF-8\u0026#39;); $html = mb_convert_encoding($ivalue-\u0026gt;ownerDocument-\u0026gt;saveXML($ivalue), \u0026#34;HTML-ENTITIES\u0026#34;, \u0026#39;auto\u0026#39;); @$idom-\u0026gt;loadHTML($html); $ixpath = new DOMXPath($idom); // method  $method = $ixpath-\u0026gt;query(\u0026#39;//a[contains(@class, \u0026#34;method\u0026#34;)]\u0026#39;); // uri  $uri = $ixpath-\u0026gt;query(\u0026#39;//span[contains(@class, \u0026#34;uri\u0026#34;)]\u0026#39;); // description  $description = $ixpath-\u0026gt;query(\u0026#39;//h4/following-sibling::ul\u0026#39;); $descriptionStrs = []; foreach($description as $value){ $descriptionStrs[] = $value-\u0026gt;nodeValue; } // Request  $requestXpath = \u0026#39;//div[contains(@class, \u0026#34;title\u0026#34;) and contains(*, \u0026#34;Request\u0026#34;)]\u0026#39;; $requestElements = $ixpath-\u0026gt;query($requestXpath); $tempRequests = []; foreach($requestElements as $key =\u0026gt; $elements){ $i = $key + 1; // Header  $requestHeaderElem = $ixpath-\u0026gt;query($requestXpath . \u0026#39;[\u0026#39; . $i . \u0026#39;]/following::div/div/pre\u0026#39;); $requestHeader = null; if(!is_null($requestHeaderElem[0] ?? null)){ // Headerを各行に分解  $requestHeader = $requestHeaderElem[0]-\u0026gt;ownerDocument-\u0026gt;saveXML($requestHeaderElem[0]); $requestHeader = strip_tags(str_replace([\u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;br/\u0026gt;\u0026#39;], PHP_EOL, $requestHeader)); } // Body  $requestBodyElem = $ixpath-\u0026gt;query(\u0026#39;//div[contains(*, \u0026#34;Request\u0026#34;)]/following::div/following::pre/code\u0026#39;); // Requestの後のResponse数をカウント  $responseHeaderElem = $ixpath-\u0026gt;query($requestXpath . \u0026#39;[\u0026#39; . $i . \u0026#39;]/following::div[contains(@class, \u0026#34;title\u0026#34;) and contains(*, \u0026#34;Response\u0026#34;)]\u0026#39;); $tempRequests[] = [ \u0026#39;requestHeader\u0026#39; =\u0026gt; $requestHeader, \u0026#39;requestBody\u0026#39; =\u0026gt; $requestBodyElem[0]-\u0026gt;nodeValue ?? null, \u0026#39;beforResponseCount\u0026#39; =\u0026gt; count($requestHeaderElem), ]; } // Response  $response = []; // Status  $responseStatus = $ixpath-\u0026gt;query(\u0026#39;//div[contains(*, \u0026#34;Response\u0026#34;)]/strong/code\u0026#39;); foreach($responseStatus as $key =\u0026gt; $elements){ // Header  $responseHederElem = $ixpath-\u0026gt;query(\u0026#39;//div[contains(*, \u0026#34;Response\u0026#34;)]/following::div[\u0026#39; . $key . \u0026#39;][contains(@class, \u0026#34;collapse-content\u0026#34;)]/div[1]/pre[1]/code\u0026#39;); $responseHeder = null; if(!is_null($responseHederElem[0] ?? null)){ // Headerを各行に分解  $responseHeder = $responseHederElem[0]-\u0026gt;ownerDocument-\u0026gt;saveXML($responseHederElem[0]); $responseHeder = explode(PHP_EOL, strip_tags(str_replace([\u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;br/\u0026gt;\u0026#39;], PHP_EOL, $responseHeder))); } // Body  $responseBodyElem = $ixpath-\u0026gt;query(\u0026#39;//div[contains(*, \u0026#34;Response\u0026#34;)]/following::div[\u0026#39; . $key . \u0026#39;][contains(@class, \u0026#34;collapse-content\u0026#34;)]/div[1]/pre[2]/code\u0026#39;); $response[] = [ \u0026#39;responseStatus\u0026#39; =\u0026gt; $elements-\u0026gt;nodeValue ?? null, \u0026#39;responseHeder\u0026#39; =\u0026gt; $responseHeder, \u0026#39;responseBody\u0026#39; =\u0026gt; $responseBodyElem[0]-\u0026gt;nodeValue ?? null, ]; } // Request に対しての Response を当て込む  $request = []; for($i = (count($tempRequests) - 1); 0 \u0026lt;= $i; $i--){ $value = $tempRequests[$i]; $responseCount = $value[\u0026#39;beforResponseCount\u0026#39;] - ($tempRequests[($i + 1)][\u0026#39;beforResponseCount\u0026#39;] ?? 0); if($responseCount \u0026lt; 0){ $responseCount = 0; } $temp = []; for($j = $responseCount; 0 \u0026lt; $j; $j--){ $key = $j - 1; $temp[$response[$j][\u0026#39;responseStatus\u0026#39;]] = $response[$j]; } $request[] = [ \u0026#39;requestHeader\u0026#39; =\u0026gt; $value[\u0026#39;requestHeader\u0026#39;], \u0026#39;requestBody\u0026#39; =\u0026gt; $value[\u0026#39;requestBody\u0026#39;], \u0026#39;response\u0026#39; =\u0026gt; $temp, ]; } // GETのようにRequestがないものの対策  if(count($tempRequests) == 0){ $temp = []; foreach($response as $value){ $temp[$value[\u0026#39;responseStatus\u0026#39;]] = $value;; } $request[] = [ \u0026#39;requestHeader\u0026#39; =\u0026gt; null, \u0026#39;requestBody\u0026#39; =\u0026gt; null, \u0026#39;response\u0026#39; =\u0026gt; $temp, ]; } // API毎に整理  $apis[] = [ \u0026#39;method\u0026#39; =\u0026gt; $method[0]-\u0026gt;nodeValue ?? null, \u0026#39;uri\u0026#39; =\u0026gt; $uri[0]-\u0026gt;nodeValue ?? null, \u0026#39;description\u0026#39; =\u0026gt; implode(\u0026#39;\u0026#39;, $descriptionStrs), \u0026#39;request\u0026#39; =\u0026gt; $request, ]; } var_dump($apis);     実行結果array:8 [ 0 =\u0026gt; array:4 [ \u0026#34;method\u0026#34; =\u0026gt; \u0026#34;GET\u0026#34; \u0026#34;uri\u0026#34; =\u0026gt; \u0026#34;https://api.example.com/notes\u0026#34; \u0026#34;description\u0026#34; =\u0026gt; \u0026#34;Get a list of notes.\u0026#34; \u0026#34;request\u0026#34; =\u0026gt; array:1 [ 0 =\u0026gt; array:3 [ \u0026#34;requestHeader\u0026#34; =\u0026gt; null \u0026#34;requestBody\u0026#34; =\u0026gt; null \u0026#34;response\u0026#34; =\u0026gt; array:1 [ 200 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;200\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; null \u0026#34;responseBody\u0026#34; =\u0026gt; null ] ] ] ] ] 1 =\u0026gt; array:4 [ \u0026#34;method\u0026#34; =\u0026gt; \u0026#34;POST\u0026#34; \u0026#34;uri\u0026#34; =\u0026gt; \u0026#34;https://api.example.com/notes\u0026#34; \u0026#34;description\u0026#34; =\u0026gt; \u0026#34;Create a new note using a title and an optional content body.\u0026#34; \u0026#34;request\u0026#34; =\u0026gt; array:2 [ 0 =\u0026gt; array:3 [ \u0026#34;requestHeader\u0026#34; =\u0026gt; \u0026#34;Content-Type: application/json\u0026#34; \u0026#34;requestBody\u0026#34; =\u0026gt; \u0026#34;\u0026#34;\u0026#34; {\\n\u0026#34;title\u0026#34;: \u0026#34;My new note\u0026#34;,\\n\u0026#34;body\u0026#34;: \u0026#34;This is the body\u0026#34;\\n} \u0026#34;\u0026#34;\u0026#34; \u0026#34;response\u0026#34; =\u0026gt; array:2 [ 201 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;201\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; null \u0026#34;responseBody\u0026#34; =\u0026gt; null ] 400 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;400\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; array:1 [ 0 =\u0026gt; \u0026#34;Content-Type: application/json\u0026#34; ] \u0026#34;responseBody\u0026#34; =\u0026gt; \u0026#34;\u0026#34;\u0026#34; {\\n\u0026#34;error\u0026#34;: \u0026#34;Invalid title\u0026#34;\\n} \u0026#34;\u0026#34;\u0026#34; ] ] ] 1 =\u0026gt; array:3 [ \u0026#34;requestHeader\u0026#34; =\u0026gt; \u0026#34;Content-Type: application/json\u0026#34; \u0026#34;requestBody\u0026#34; =\u0026gt; \u0026#34;\u0026#34;\u0026#34; {\\n\u0026#34;title\u0026#34;: \u0026#34;My new note\u0026#34;,\\n\u0026#34;body\u0026#34;: \u0026#34;This is the body\u0026#34;\\n} \u0026#34;\u0026#34;\u0026#34; \u0026#34;response\u0026#34; =\u0026gt; array:2 [ 201 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;201\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; null \u0026#34;responseBody\u0026#34; =\u0026gt; null ] 400 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;400\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; array:1 [ 0 =\u0026gt; \u0026#34;Content-Type: application/json\u0026#34; ] \u0026#34;responseBody\u0026#34; =\u0026gt; \u0026#34;\u0026#34;\u0026#34; {\\n\u0026#34;error\u0026#34;: \u0026#34;Invalid title\u0026#34;\\n} \u0026#34;\u0026#34;\u0026#34; ] ] ] ] ] 2 =\u0026gt; array:4 [ \u0026#34;method\u0026#34; =\u0026gt; \u0026#34;GET\u0026#34; \u0026#34;uri\u0026#34; =\u0026gt; \u0026#34;https://api.example.com/notes/id?body=false\u0026#34; \u0026#34;description\u0026#34; =\u0026gt; \u0026#34;Get a single note.\u0026#34; \u0026#34;request\u0026#34; =\u0026gt; array:1 [ 0 =\u0026gt; array:3 [ \u0026#34;requestHeader\u0026#34; =\u0026gt; null \u0026#34;requestBody\u0026#34; =\u0026gt; null \u0026#34;response\u0026#34; =\u0026gt; array:2 [ 200 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;200\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; null \u0026#34;responseBody\u0026#34; =\u0026gt; null ] 404 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;404\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; array:3 [ 0 =\u0026gt; \u0026#34;Content-Type: application/json\u0026#34; 1 =\u0026gt; \u0026#34;X-Request-ID: f72fc914\u0026#34; 2 =\u0026gt; \u0026#34;X-Response-Time: 4ms\u0026#34; ] \u0026#34;responseBody\u0026#34; =\u0026gt; null ] ] ] ] ] 3 =\u0026gt; array:4 [ \u0026#34;method\u0026#34; =\u0026gt; \u0026#34;PUT\u0026#34; \u0026#34;uri\u0026#34; =\u0026gt; \u0026#34;https://api.example.com/notes/id\u0026#34; \u0026#34;description\u0026#34; =\u0026gt; \u0026#34;Update a single note by setting the title and/or body.If the value for title or body is null or undefined, then the corresponding value is not modified on the server. However, if you send an empty string instead then it will permanently overwrite the original value.\u0026#34; \u0026#34;request\u0026#34; =\u0026gt; array:2 [ 0 =\u0026gt; array:3 [ \u0026#34;requestHeader\u0026#34; =\u0026gt; \u0026#34;Content-Type: application/json\u0026#34; \u0026#34;requestBody\u0026#34; =\u0026gt; \u0026#34;\u0026#34;\u0026#34; {\\n\u0026#34;title\u0026#34;: \u0026#34;Grocery List (Safeway)\u0026#34;\\n} \u0026#34;\u0026#34;\u0026#34; \u0026#34;response\u0026#34; =\u0026gt; array:2 [ 200 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;200\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; null \u0026#34;responseBody\u0026#34; =\u0026gt; null ] 404 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;404\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; array:3 [ 0 =\u0026gt; \u0026#34;Content-Type: application/json\u0026#34; 1 =\u0026gt; \u0026#34;X-Request-ID: f72fc914\u0026#34; 2 =\u0026gt; \u0026#34;X-Response-Time: 4ms\u0026#34; ] \u0026#34;responseBody\u0026#34; =\u0026gt; null ] ] ] 1 =\u0026gt; array:3 [ \u0026#34;requestHeader\u0026#34; =\u0026gt; \u0026#34;Content-Type: application/json\u0026#34; \u0026#34;requestBody\u0026#34; =\u0026gt; \u0026#34;\u0026#34;\u0026#34; {\\n\u0026#34;title\u0026#34;: \u0026#34;Grocery List (Safeway)\u0026#34;\\n} \u0026#34;\u0026#34;\u0026#34; \u0026#34;response\u0026#34; =\u0026gt; array:2 [ 200 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;200\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; null \u0026#34;responseBody\u0026#34; =\u0026gt; null ] 404 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;404\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; array:3 [ 0 =\u0026gt; \u0026#34;Content-Type: application/json\u0026#34; 1 =\u0026gt; \u0026#34;X-Request-ID: f72fc914\u0026#34; 2 =\u0026gt; \u0026#34;X-Response-Time: 4ms\u0026#34; ] \u0026#34;responseBody\u0026#34; =\u0026gt; null ] ] ] ] ] 4 =\u0026gt; array:4 [ \u0026#34;method\u0026#34; =\u0026gt; \u0026#34;DELETE\u0026#34; \u0026#34;uri\u0026#34; =\u0026gt; \u0026#34;https://api.example.com/notes/id\u0026#34; \u0026#34;description\u0026#34; =\u0026gt; \u0026#34;Delete a single note\u0026#34; \u0026#34;request\u0026#34; =\u0026gt; array:1 [ 0 =\u0026gt; array:3 [ \u0026#34;requestHeader\u0026#34; =\u0026gt; null \u0026#34;requestBody\u0026#34; =\u0026gt; null \u0026#34;response\u0026#34; =\u0026gt; array:2 [ 204 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;204\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; null \u0026#34;responseBody\u0026#34; =\u0026gt; null ] 404 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;404\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; array:3 [ 0 =\u0026gt; \u0026#34;Content-Type: application/json\u0026#34; 1 =\u0026gt; \u0026#34;X-Request-ID: f72fc914\u0026#34; 2 =\u0026gt; \u0026#34;X-Response-Time: 4ms\u0026#34; ] \u0026#34;responseBody\u0026#34; =\u0026gt; null ] ] ] ] ] 5 =\u0026gt; array:4 [ \u0026#34;method\u0026#34; =\u0026gt; \u0026#34;GET\u0026#34; \u0026#34;uri\u0026#34; =\u0026gt; \u0026#34;https://api.example.com/users?name=alice\u0026amp;joinedBefore=2011-01-01\u0026amp;joinedAfter=2011-01-01\u0026amp;sort=joined\u0026amp;limit=25\u0026#34; \u0026#34;description\u0026#34; =\u0026gt; \u0026#34;Get a list of users. Example:\u0026#34; \u0026#34;request\u0026#34; =\u0026gt; array:1 [ 0 =\u0026gt; array:3 [ \u0026#34;requestHeader\u0026#34; =\u0026gt; null \u0026#34;requestBody\u0026#34; =\u0026gt; null \u0026#34;response\u0026#34; =\u0026gt; array:1 [ 200 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;200\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; null \u0026#34;responseBody\u0026#34; =\u0026gt; null ] ] ] ] ] 6 =\u0026gt; array:4 [ \u0026#34;method\u0026#34; =\u0026gt; \u0026#34;GET\u0026#34; \u0026#34;uri\u0026#34; =\u0026gt; \u0026#34;https://api.example.com/tags\u0026#34; \u0026#34;description\u0026#34; =\u0026gt; \u0026#34;Get a list of bars\u0026#34; \u0026#34;request\u0026#34; =\u0026gt; array:1 [ 0 =\u0026gt; array:3 [ \u0026#34;requestHeader\u0026#34; =\u0026gt; null \u0026#34;requestBody\u0026#34; =\u0026gt; null \u0026#34;response\u0026#34; =\u0026gt; array:1 [ 200 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;200\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; null \u0026#34;responseBody\u0026#34; =\u0026gt; null ] ] ] ] ] 7 =\u0026gt; array:4 [ \u0026#34;method\u0026#34; =\u0026gt; \u0026#34;GET\u0026#34; \u0026#34;uri\u0026#34; =\u0026gt; \u0026#34;https://api.example.com/tags/id\u0026#34; \u0026#34;description\u0026#34; =\u0026gt; \u0026#34;\u0026#34; \u0026#34;request\u0026#34; =\u0026gt; array:1 [ 0 =\u0026gt; array:3 [ \u0026#34;requestHeader\u0026#34; =\u0026gt; null \u0026#34;requestBody\u0026#34; =\u0026gt; null \u0026#34;response\u0026#34; =\u0026gt; array:1 [ 200 =\u0026gt; array:3 [ \u0026#34;responseStatus\u0026#34; =\u0026gt; \u0026#34;200\u0026#34; \u0026#34;responseHeder\u0026#34; =\u0026gt; null \u0026#34;responseBody\u0026#34; =\u0026gt; null ] ] ] ] ] ]      ","description":"API Blueprint \u0026 aglio で出力されたAPIドキュメントをPHPを利用してスクレイピングしてみます。","id":417,"section":"tech","tags":["PHP"],"title":"【PHP】PHPでAPIドキュメント（API Blueprint \u0026 aglio）をスクレイピングする。","uri":"https://c-a-p-engineer.github.io/tech/2021/05/22/php-aglio-scraping/"},{"content":"GitHub の HTML を Web上でプレビューする方法 GitHub 上にある HTML は GitHub で見るとコードとして表示されますが、それをWeb上でプレビューする方法。\nGitHub \u0026amp; BitBucket HTML Preview 1.GitHub \u0026amp; BitBucket HTML Preview にアクセス\n2.テキストボックスに見たい GitHub 上のHTMLを指定\nサンプル例：https://github.com/twbs/bootstrap/blob/gh-pages/2.3.2/index.html\n3.【Preview】ボタンを押下\n4.HTMLが表示される\nまた直接URLで以下のように指定することも出来ます。\nhttp://htmlpreview.github.io/?https://github.com/twbs/bootstrap/blob/gh-pages/2.3.2/index.html\n参考  htmlpreview/htmlpreview.github.com: HTML Preview for GitHub Repositories  ","description":"GitHub 上にある HTML は GitHub で見るとコードとして表示されますが、それをWeb上でプレビューする方法。","id":418,"section":"tech","tags":["GitHub"],"title":"GitHub の HTML を Web上でプレビューする方法","uri":"https://c-a-p-engineer.github.io/tech/2021/05/22/github-html-preview/"},{"content":"PHP を使用して簡単にスクレイピングをしてみる データの解析のため、PHPにスクレイピングをさせてみました。\nサンプル サンプルは Google から png 形式の画像を抜き出しを行っています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  \u0026lt;?php use DOMDocument; use DOMXPath; // HTML読み込み $html = file_get_contents(\u0026#39;https://www.google.com/\u0026#39;); $dom = new DOMDocument(\u0026#39;1.0\u0026#39;, \u0026#39;UTF-8\u0026#39;); $html = mb_convert_encoding($html, \u0026#34;HTML-ENTITIES\u0026#34;, \u0026#39;auto\u0026#39;); @$dom-\u0026gt;loadHTML($html); // 要素を検索 $xpath = new DOMXPath($dom); // 画像タグのsrcにpngを含むものを検索（DOMNodeListを取得） $contents = $xpath-\u0026gt;query(\u0026#39;//img[contains(@src, \u0026#34;png\u0026#34;)]\u0026#39;); // 取得したDOMNodeListをforeach // $value = DOMElement foreach($contents as $value){ // HTMLとして表示  echo \u0026#39;HTML\u0026#39;; echo $value-\u0026gt;ownerDocument-\u0026gt;saveXML($value) . PHP_EOL; // HTML内の文字列を出力（HTMLタグは除去）  echo \u0026#39;string\u0026#39;; echo $value-\u0026gt;nodeValue . PHP_EOL; }   取得結果\nHTML \u0026quot;\u0026lt;img alt=\u0026quot;Google\u0026quot; height=\u0026quot;92\u0026quot; src=\u0026quot;/images/branding/googlelogo/1x/googlelogo_white_background_color_272x92dp.png\u0026quot; style=\u0026quot;padding:28px 0 14px\u0026quot; width=\u0026quot;272\u0026quot; id=\u0026quot;hplogo\u0026quot;/\u0026gt;\u0026quot; String \u0026quot;\u0026quot; HTMLが取得できました。\n今回は画像タグで　\u0026lt;img /\u0026gt; のためHTML内には文字列がありません。\n解説 DOMDocument でHTMLを読み込み\n→DOMXPath で要素を検索し DOMNodeList を取得\n→ DOMNodeList に含まれている DOMElement を展開、解析など\nこれで簡単にスクレイピング出来ますね。\n例えば aタグ を検索 → href からリンクを辿って指定のサイトのデータを抜き出す事なども可能です。\n参考  PHP: DOMDocument - Manual PHP: DOMXPath::query - Manual PHP: DOMNodeList - Manual PHP: DOMElement - Manual XPathで指定したテキストがある次の要素を取得する方法 - Qiita  ","description":"PHP を使用して簡単にスクレイピングをしてみる","id":419,"section":"tech","tags":["PHP"],"title":"【PHP】PHPを使って簡単にスクレイピングしてみる","uri":"https://c-a-p-engineer.github.io/tech/2021/05/21/php-scraping/"},{"content":"ノーブレークスペース（\\u00a0）への対処 HTML を解析するプログラムを書いていたら置換などが出来ない 空白（ ） を発見しました。\n調査 該当の文字列のユニコードの値を取得するため json にしてました。\n1 2  $html = \u0026#39;hoge piyo\u0026#39;; var_dump(json_encode($html, true));   ※サンプルの空白は通常のスペースになっています。\n1  string(14) \u0026#34;hoge\\u00a0piyo\u0026#34;   これで文字列を特定出来ました。\n\\u00a0 このスペースは ノーブレークスペース というもので HTML の \u0026amp;nbsp の事。\n ノーブレークスペース - Wikipedia  対処 文字列として対処 1 2 3 4  $html = \u0026#39;hoge piyo\u0026#39;; $exp = expload (`\\u{00a0}`, $html); var_dump($exp);   正規表現で対処 1 2 3 4  $html = \u0026#39;hoge piyo\u0026#39;; $exp = preg_split (`~\\x{00a0}~siu`, $html); var_dump($exp);   ","description":"PHP でのノーブレークスペース（\\u00a0）への対処","id":420,"section":"tech","tags":["HTML","PHP"],"title":"【PHP】ノーブレークスペース（\\u00a0）への対処","uri":"https://c-a-p-engineer.github.io/tech/2021/05/20/php-nobreak-space/"},{"content":"ローカルブランチが最新か判定するbashスクリプト Git のローカルブランチが最新か判定するbashスクリプト\nbash cd /git/repo は実際に調べたいディレクトリをしていしてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  #!/bin/sh  cd /git/repo changed=0 git remote update \u0026amp;\u0026amp; git status -uno | grep -q \u0026#39;Your branch is behind\u0026#39; \u0026amp;\u0026amp; changed=1 if [ $changed = 1 ]; then # 更新 git pull echo \u0026#34;Updated successfully\u0026#34;; else # 最新 echo \u0026#34;Up-to-date\u0026#34; fi   これを cron に設定することで自動的に最新にすることが出来ます。\n参考  bash - Check if pull needed in Git - Stack Overflow  ","description":"Git のローカルブランチが最新か判定するbashスクリプト","id":421,"section":"tech","tags":["git","bash"],"title":"【bash】Git のローカルブランチが最新か判定するbashスクリプト","uri":"https://c-a-p-engineer.github.io/tech/2021/05/17/bash-git-update/"},{"content":"メニューバーを非表示にする方法 Electron でメニューバーがデフォルトで表示されるため非表示にする方法\n環境  Ubuntu 20.04.2 LTS Node.js 14.16.0 LTS  通常 通常は下図のように上部にメニューバーが表示されます。\nメニューバー非表示 ソースは Electron のQuick Start Guide | Electronのものを使っています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  const { app, BrowserWindow } = require(\u0026#39;electron\u0026#39;) const path = require(\u0026#39;path\u0026#39;) function createWindow () { const win = new BrowserWindow({ width: 800, height: 600, webPreferences: { preload: path.join(__dirname, \u0026#39;preload.js\u0026#39;) } }) win.setMenu(null);  win.loadFile(\u0026#39;index.html\u0026#39;) } app.whenReady().then(() =\u0026gt; { createWindow() app.on(\u0026#39;activate\u0026#39;, () =\u0026gt; { if (BrowserWindow.getAllWindows().length === 0) { createWindow() } }) }) app.on(\u0026#39;window-all-closed\u0026#39;, () =\u0026gt; { if (process.platform !== \u0026#39;darwin\u0026#39;) { app.quit() } })   行12行目に win.setMenu(null); を追加してウィンドウのメニューに null を設定すれば良いだけです。\n","description":"Electron でメニューバーを非表示にする方法","id":422,"section":"tech","tags":["Electron"],"title":"【Electron】メニューバーを非表示にする方法","uri":"https://c-a-p-engineer.github.io/tech/2021/05/08/electron-nomenu/"},{"content":"Ubuntu で Windows インストーラー作成時に出る wine is required エラー対処方法 Electron で Ubuntu Windows インストーラー作成時に出る wine is required エラー対処方法。\n環境  Ubuntu 20.04.2 LTS Node.js 14.16.0 LTS  エラー 【Electron】Windows用実行ファイルを作成 で Ubuntu で Windows 用のインストーラーを作成時に electron-builder を実行した際に以下のエラーが発生しました。\n1 2 3 4 5 6 7 8  $ npx electron-builder --win --x64 • electron-builder version=22.10.5 os=4.19.128-microsoft-standard • cannot check updates error=TypeError: update_notifier_1.default is not a function • writing effective config file=dist/builder-effective-config.yaml • packaging platform=win32 arch=x64 electron=12.0.6 appOutDir=dist/win-unpacked • default Electron icon is used reason=application icon is not set ⨯ wine is required, please see https://electron.build/multi-platform-build#linux ⨯ /src/node_modules/app-builder-bin/linux/x64/app-builder exited with code ERR_ELECTRON_BUILDER_CANNOT_EXECUTE failedTask=build stackTrace=Error: /src/node_modules/app-builder-bin/linux/x64/app   原因 原因は Windows 用のインストーラー作成する際に Wine という Linux 上で Windows 向けアプリケーションを実行するソフトが入っていないのが原因になります\n解決方法 Wine を入れることで解決します。\n以下のリンクの指示通りにインストールします。\n Ubuntu - WineHQ Wiki  以下のコマンドを実行することで解決します。\nsudo dpkg --add-architecture i386 wget -nc https://dl.winehq.org/wine-builds/winehq.key sudo apt-key add winehq.key sudo apt update sudo apt install --install-recommends winehq-stable ","description":"Electron で Ubuntu Windows インストーラー作成時に出る wine is required エラー対処方法","id":423,"section":"tech","tags":["Electron","Ubuntu"],"title":"【Electron】Ubuntu で Windows インストーラー作成時に出る wine is required エラー対処方法","uri":"https://c-a-p-engineer.github.io/tech/2021/05/06/electron-ubuntu-wine-required/"},{"content":"Windows用実行ファイルを作成 【Electron】Hello,World! を表示するまで で作った環境で進めています。\n環境  Ubuntu 20.04.2 LTS Node.js 14.16.0 LTS  electron-builder インストール Electron の実行用ファイル作成用のために electron-builder をインストールします。\n1  npm install -D electron-builder   インストールの確認\n1  npx electron-builder --help   各種ドキュメント\n electron-builder electron-userland/electron-builder: A complete solution to package and build a ready for distribution Electron app with “auto update” support out of the box  Windows 実行ファイル作成 1  npx electron-builder --win --x64   実行すると dist の中に my-electron-app Setup 0.1.0.exe が出来ています。\n名前は package.json に記載されている name + Setup + version + .exe で作成されます。\nまた dist/win-unpacked に実行用ファイル my-electron-app.exe があります。\n参考  【入門】Electron完全に理解した  ","description":"Electron で作ったものをWindows用の実行ファイルにします。","id":424,"section":"tech","tags":["Electron"],"title":"【Electron】Windows用実行ファイルを作成","uri":"https://c-a-p-engineer.github.io/tech/2021/05/06/electron-pack/"},{"content":"Hello,World! Electron で Hello,World! を出力するまでを行っていきます。\nElectron 公式のチュートリアルを見て進めていきます。\nQuick Start Guide | Electron\n環境  Ubuntu 20.04.2 LTS Node.js 14.16.0 LTS  Hello,World! フォルダ構成 my-electron-app/ ├── package.json ├── main.js ├── preload.js └── index.html コマンド実行 1 2 3  mkdir my-electron-app \u0026amp;\u0026amp; cd my-electron-app npm init -y npm install -D electron   ファイル作成 起動用のjs作成\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  const { app, BrowserWindow } = require(\u0026#39;electron\u0026#39;) const path = require(\u0026#39;path\u0026#39;) function createWindow () { const win = new BrowserWindow({ width: 800, height: 600, webPreferences: { preload: path.join(__dirname, \u0026#39;preload.js\u0026#39;) } }) win.loadFile(\u0026#39;index.html\u0026#39;) } app.whenReady().then(() =\u0026gt; { createWindow() app.on(\u0026#39;activate\u0026#39;, () =\u0026gt; { if (BrowserWindow.getAllWindows().length === 0) { createWindow() } }) }) app.on(\u0026#39;window-all-closed\u0026#39;, () =\u0026gt; { if (process.platform !== \u0026#39;darwin\u0026#39;) { app.quit() } })   メインのHTML画面の作成\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello World!\u0026lt;/title\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Security-Policy\u0026#34; content=\u0026#34;script-src \u0026#39;self\u0026#39; \u0026#39;unsafe-inline\u0026#39;;\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body style=\u0026#34;background: white;\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; We are using Node.js \u0026lt;span id=\u0026#34;node-version\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;, Chromium \u0026lt;span id=\u0026#34;chrome-version\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;, and Electron \u0026lt;span id=\u0026#34;electron-version\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   起動時に読み込むjs作成\n1 2 3 4 5 6 7 8 9 10  window.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, () =\u0026gt; { const replaceText = (selector, text) =\u0026gt; { const element = document.getElementById(selector) if (element) element.innerText = text } for (const type of [\u0026#39;chrome\u0026#39;, \u0026#39;node\u0026#39;, \u0026#39;electron\u0026#39;]) { replaceText(`${type}-version`, process.versions[type]) } })   package.json編集 package.json を以下のようにファイルを修正します。\n1 2 3 4 5 6 7 8 9 10  { \u0026#34;name\u0026#34;: \u0026#34;my-electron-app\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;your name\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;My Electron app\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;main.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;electron .\u0026#34; } }   実行 以下のコマンドにて実行できます。\n1  npm start   実行時に --no-sandbox というエラーが出たら以下のリンクの対処を行ってください。\n【Electron】Running as root without \u0026ndash;no-sandbox is not supported. エラーのの対処法\n","description":"Electron で Hello,World! を表示するまでを行っていきます。","id":425,"section":"tech","tags":["Electron"],"title":"【Electron】Hello,World! を表示するまで","uri":"https://c-a-p-engineer.github.io/tech/2021/05/04/electron-hello-world/"},{"content":"Electron で作られたアプリの一覧 Electron で作られたアプリの一覧\n公式アプリ一覧  Electron 公式アプリ一覧 Electron Apps | Electron  Electronを使って作られたアプリ  Electron (ソフトウェア) | Wikipedia\nElectron Apps | Electron  Atom\nAtom Discord\nDiscord Skype\nAtom Slack\nSlack Visual Studio Code\nVisual Studio Code    ","description":"Electron で作られたアプリの一覧","id":426,"section":"tech","tags":["Electron"],"title":"【Electron】サンプルアプリ一覧","uri":"https://c-a-p-engineer.github.io/tech/2021/05/03/electron-sample-list/"},{"content":"Electron で Running as root without \u0026ndash;no-sandbox is not supported. エラーの対処法 Electron で Running as root without \u0026ndash;no-sandbox is not supported. エラーの対処法。\n実行環境  Ubuntu 20.04.2 LTS Node v14.16.1  エラーの発生 Electron を実行のために下記のコマンドを実行します。\n1  npm start   そうすると以下のエラーが出力されて Electron が実行出来ませんでした。\n1  [1683:0501/092842.091389:FATAL:electron_main_delegate.cc(252)] Running as root without --no-sandbox is not supported. See https://crbug.com/638180./src/node_modules/electron/dist/electron exited with signal SIGTRAP   pakage.json の修正 pakage.json の修正を行います。\n以下の箇所を見つけて修正を行います。\n1 2 3  \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;electron .\u0026#34; },    --no-sandbox を付与します。\n1 2 3  \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;electron . --no-sandbox\u0026#34; },   再度以下のコマンドを実行すると Electron が起動します。\n1  npm start   参考  electron-quick-start on debian _ \u0026ndash;no-sandbox is not supported · Issue #19454 · electron/electron  ","description":"Electron で Running as root without --no-sandbox is not supported. エラーの対処法","id":427,"section":"tech","tags":["Electron"],"title":"【Electron】Running as root without --no-sandbox is not supported. エラーのの対処法","uri":"https://c-a-p-engineer.github.io/tech/2021/05/01/electron-error-no-sandbox/"},{"content":"Node.js をインストール備忘録 UbuntuにNode.js をインストールする備忘録\n実行環境  Ubuntu 20.04.2 LTS  PPAを利用して Node.js をインストール 16.x の箇所を変更することで他のバージョンをインストールすることが可能です。\n使用可能なバージョンは NodeSourceドキュメント で確認が可能です。\n1 2  curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash - sudo apt install -y nodejs   インストール確認\n1  node -v   バージョン情報\n1  v16.0.0   参考  Ubuntu 20.04にNode.jsをインストールする方法 | DigitalOcean  ","description":"UbuntuにNode.js をインストールする備忘録","id":428,"section":"tech","tags":["Ubuntu","Node.js"],"title":"【Ubuntu】Node.js をインストール","uri":"https://c-a-p-engineer.github.io/tech/2021/04/30/ubuntu-nodejs-install/"},{"content":"Linuxのプロセスを一括でkillする方法 テストなどをしていると無駄なプロセスが立ち上がり続ける事があります。\n大量のプロセスが発生した時に ps コマンドで一々プロセスID調べて kill するのも手間なので特定のプロセス名を指定して一括 kill する方法です。\n一括kill まずは ps を実行してコマンド名を調べましょう。\n1  ps   PSの実行結果\n1 2 3 4 5 6 7 8 9  PID TTY TIME CMD 17 pts/1 00:00:00 bash 82 pts/1 00:00:00 ps 27935 pts/1 00:00:00 /usr/sbin/httpd 27936 pts/1 00:00:00 /usr/sbin/httpd 27937 pts/1 00:00:00 /usr/sbin/httpd 27938 pts/1 00:00:00 /usr/sbin/httpd 27939 pts/1 00:00:00 /usr/sbin/httpd 27940 pts/1 00:00:00 /usr/sbin/httpd   ここでプロセス名を指定して一括 kill します。\nこの場合は httpd と指定すれば立ち上がっている httpd のプロセスを一括で kill してくれます。\n1  pgrep [プロセス名] | xargs kill   ","description":"Linuxのプロセスを一括でkillする方法","id":429,"section":"tech","tags":["Linux","Linuxコマンド"],"title":"【Linux】プロセスを一括でkillする","uri":"https://c-a-p-engineer.github.io/tech/2021/04/24/linux-pgrep-xargs/"},{"content":"Warning: exec(): Unable to fork の対処 PHP で exec() 使用時に Warning: exec(): Unable to fork が発生することがあります。\nその対処方法です。\n原因 原因はいくつか理由があります。\n 権限がない プロセス数上限  対処方法 権限付与 例えば exec('rm -r hoge.txt') 実行時に hoge.txt を削除する権限がない場合に発生します。\nそのため権限を変更して対応するが可能です。\nまた、指定のコマンドへのパスが通ってない可能性もありますので確認が必要です。\nプロセス数上限（Linux） 以下のコマンドでプロセス数の上限を調べることが可能です。\n1  ulimit -u   unlimited と表示されたら無制限です。\nプロセス数の上限が設定されていたら今度は現在実行されているプロセス数を調べます。\n以下のコマンドにてプロセスの確認が出来ます。\n1  ps aux   指定したプロセス名だけ表示する\n1  ps aux | grep [プロセス名]   不要なプロセスを見つけたらプロセスを kill しましょう。\n1  kill [プロセスID]   参考  php - 警告:exec():PHPでforkできません - ITツールウェブ CakePHP - CakePHP3からrmコマンドを実行したら警告エラーが出てファイルが削除されない｜teratail  ","description":"PHP で exec() 使用時に Warning: exec(): Unable to fork 使用時のエラー対処方法","id":430,"section":"tech","tags":["PHP"],"title":"【PHP】Warning: exec(): Unable to fork の対処","uri":"https://c-a-p-engineer.github.io/tech/2021/04/23/php-exec-unable-fork/"},{"content":"Dockerでリモートデスクトップが出来るUbuntuを作る 色々作るのが面倒なので以下のDockerリポジトリを発見しました。\n dorowu/ubuntu-desktop-lxde-vnc | Docker Hub  以下を使用しています。\n デスクトップ - lxde リモート - VNC  Quick Start クイックスタートをやってみると簡単にリモートデスクトップが成功！\nしかもブラウザで接続できるように設定されていてありがたいです。\n http://127.0.0.1:6080/  Docker Compose 色々と再利用しやすいようにDocker Composeを作成してGitHubリポジトリにアップロードしておきました。\nGitHub - c-a-p-engineer/docker-ubuntu-remote-desktop\n","description":"Docker Hub に Ubuntuでリモートデスクトップが可能なものがあったので紹介。","id":431,"section":"tech","tags":["Docker","Ubuntu"],"title":"【Docker】Ubuntuでリモートデスクトップ","uri":"https://c-a-p-engineer.github.io/tech/2021/04/11/docker-ubuntu-remote-desktop/"},{"content":"PHP で Database の Tableを丸ごとコピー テストをする際にテスト用のDBを整備するのが面倒だったのでPHPでDatabaseのTable定義を使用してテーブルのコピーを作成するようにしました。\nPHPUnitを使用する際など一々Databaseを整備する必要がなくなるのでとても有用で PHPUnit 実行前に行うと整備する手間がなくなります。\nDatabase Copy 使用するDBユーザーに権限がなければ失敗しますので使用する場合はDBの権限に気をつけてください。\nmysql を使用していますので違うDBを使用するのであれば気をつけてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105  \u0026lt;?php /** * Database Copy */ class DatabaseCopy { /** * DataBase Type * * @var string */ public $db = \u0026#39;mysql\u0026#39;; /** * Database Host * * @var string */ public $dbhost = \u0026#39;localhost\u0026#39;; /** * DataBase Port * * @var string */ public $dbport = \u0026#39;3306\u0026#39;; /** * DataBase Name * * @var string */ public $dbname = \u0026#39;develop\u0026#39;; /** * Database charset * * @var string */ public $charset = \u0026#39;utf-8\u0026#39;; /** * Database User Name * * @var string */ public $user = \u0026#39;db-user\u0026#39;; /** * Database Password * * @var string */ public $password = \u0026#39;db-password\u0026#39;; /** * DataBase Execute * * @param string $testDb * @return void */ public function exe(string $testDb) : void { // コピー元のDBへ接続  $dsn = \u0026#34;{$this-\u0026gt;db}:host={$this-\u0026gt;dbhost};port={$this-\u0026gt;dbport};dbname={$this-\u0026gt;dbname};charset={$this-\u0026gt;charset}\u0026#34;; $pdoOrigin = new PDO($dsn, $this-\u0026gt;user, $this-\u0026gt;password, [ PDO::ATTR_ERRMODE =\u0026gt; PDO::ERRMODE_EXCEPTION, ]); // コピー先のDBがあれば削除  $pdoOrigin-\u0026gt;query(\u0026#39;drop database if exists \u0026#39; . $testDb); // コピー先のDBを作成  $pdoOrigin-\u0026gt;query(\u0026#39;create database \u0026#39; . $testDb); // コピー先のDBの接続  $dsn = \u0026#34;{$this-\u0026gt;db}:host={$this-\u0026gt;dbhost};port={$this-\u0026gt;dbport};dbname={$testDb};charset={$this-\u0026gt;charset}\u0026#34;; $pdoCopy = new PDO($dsn, $this-\u0026gt;user, $this-\u0026gt;password, [ PDO::ATTR_ERRMODE =\u0026gt; PDO::ERRMODE_EXCEPTION, ]); // DB一覧を取得  $rows = $pdoOrigin-\u0026gt;query(\u0026#39;show tables\u0026#39;)-\u0026gt;fetchAll(PDO::FETCH_ASSOC); $column = \u0026#39;Tables_in_\u0026#39; . $this-\u0026gt;dbname; // Table Copy  foreach ($rows as $value) { // Create SQL 取得  $createSql = $pdoOrigin-\u0026gt;query(\u0026#39;show create table \u0026#39; . $value[$column])-\u0026gt;fetchAll(PDO::FETCH_ASSOC); // Table 削除  $pdoCopy-\u0026gt;query(\u0026#39;drop table if exists \u0026#39; . $createSql[0][\u0026#39;Table\u0026#39;]); // Table 作成  $pdoCopy-\u0026gt;query($createSql[0][\u0026#39;Create Table\u0026#39;]); // AUTO_INCREMENT をリセット  if (strpos($createSql[0][\u0026#39;Create Table\u0026#39;], \u0026#39;AUTO_INCREMENT\u0026#39;) !== false) { $pdoCopy-\u0026gt;query(\u0026#39;alter table \u0026#39; . $createSql[0][\u0026#39;Table\u0026#39;] . \u0026#39; auto_increment = 1\u0026#39;); } } } }   ","description":"テスト用のDBの整備が手間だったのでPHPで Database の Table定義を丸ごとコピーしました。","id":432,"section":"tech","tags":["PHP","DB"],"title":"PHP で Database の Tableを丸ごとコピー","uri":"https://c-a-p-engineer.github.io/tech/2021/04/10/php-database-copy/"},{"content":"Laravel で PHPUnit を使用してメール本文を確認する方法 Laravel では 通常Mail送信時のメール内容の確認が出来ません。\nただ文言の修正時に一々メールを送信して目で確認するのもとてもコストが掛かります。\nそのためにメール本文を確認する方法を確認します。\n確認環境  PHP 7.4 PHPUnit 9,5 Laravel 6.2  メールの用意 メールの参考はこちらを使用。\nビューデータ - Laravel 6.x メール\n メールクラス  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  \u0026lt;?php namespace App\\Mail; use Illuminate\\Bus\\Queueable; use Illuminate\\Mail\\Mailable; use Illuminate\\Queue\\SerializesModels; class SampleMail extends Mailable { use Queueable, SerializesModels; /** * メッセージの生成 * * @return $this */ public function build() { return $this-\u0026gt;view(\u0026#39;emails.sample_view\u0026#39;) -\u0026gt;text(\u0026#39;emails.sample_text\u0026#39;); } }   サンプルのView\n1  \u0026lt;p\u0026gt;HTML\u0026lt;/p\u0026gt;   サンプルテキストのView\n1  TEXT   メール本文テスト 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  \u0026lt;?php namespace Tests\\Unit\\Mail; use App\\Mail\\SampleMail; use Illuminate\\Support\\HtmlString; use ReflectionClass; use Tests\\TestCase; use View; class SampleMailTest extends TestCase { /** * サンプルメール * * @test * @return void */ public function testSampleMail() { // メール  $mail = new SampleMail(); $mail-\u0026gt;build(); // View のみの場合レンダリングして確認  $render = $mail-\u0026gt;render(); // ReflectionClassを使用してViewを生成する  $refrection = new ReflectionClass(get_class($mail)); $output = $refrection-\u0026gt;getMethod(\u0026#39;buildView\u0026#39;); $output-\u0026gt;setAccessible(true); $mailView = $output-\u0026gt;invoke($mail); // 変換用キー  $kyes = [ 0 =\u0026gt; \u0026#39;html\u0026#39;, 1 =\u0026gt; \u0026#39;text\u0026#39;, \u0026#39;html\u0026#39; =\u0026gt; \u0026#39;html\u0026#39;, \u0026#39;text\u0026#39; =\u0026gt; \u0026#39;text\u0026#39;, ]; // メール内容を生成  $views = []; if(is_array($mailView)){ foreach($mailView as $key =\u0026gt; $view){ if($view instanceof HtmlString){ $views[$kyes[$key]] = $view-\u0026gt;toHtml(); }elseif(is_string($view)){ $views[$kyes[$key]] = View::make($view, $mail-\u0026gt;buildViewData())-\u0026gt;render(); } } }else{ $views[\u0026#39;html\u0026#39;] = View::make($mailView[0], $mail-\u0026gt;buildViewData())-\u0026gt;render(); } // HTML  $this-\u0026gt;assertEquals($view[\u0026#39;html\u0026#39;], \u0026#39;\u0026lt;p\u0026gt;HTML\u0026lt;/p\u0026gt;\u0026#39;); // TEXT  $this-\u0026gt;assertEquals($view[\u0026#39;text\u0026#39;], \u0026#39;TEXT\u0026#39;); // 確認  // dd($views);  } }   PHPUnit を実行\n1  vendor/bin/phpunit tests/Unit/Mails/MemberRegisterMailTest.php --env=dusk   PHPUnit の実行結果\n1 2 3 4 5 6 7  PHPUnit 9.5.0 by Sebastian Bergmann and contributors. . 1 / 1 (100%) Time: 00:16.955, Memory: 32.00 MB OK (1 test, 2 assertions)   69行目のddの結果\n1 2 3 4  array:2 [ \u0026#34;html\u0026#34; =\u0026gt; \u0026#34;\u0026lt;p\u0026gt;HTML\u0026lt;/p\u0026gt;\u0026#34; \u0026#34;text\u0026#34; =\u0026gt; \u0026#34;TEXT\u0026#34; ]   ","description":"Laravel で PHPUnit を使用してメール本文を確認する方法","id":433,"section":"tech","tags":["PHP","Laravel","PHPUnit","テスト"],"title":"Laravel で PHPUnit を使用してメール本文を確認する方法","uri":"https://c-a-p-engineer.github.io/tech/2021/03/26/laravel-phpunit-mail-text/"},{"content":"PHP サブフォルダ内のファイルを纏めて取得する PHP サブフォルダ内のファイルをまとめて取得する。\nファイルの取得 以下の2つを使用します。\n  RecursiveIteratorIterator - Manual - PHP\n再帰的なイテレータの反復処理に使用します。\n  RecursiveDirectoryIterator - Manual - PHP\nRecursiveDirectoryIterator は、 ファイルシステムのディレクトリを再帰的に反復処理するためのインターフェイスです。\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  \u0026lt;?php use FilesystemIterator; use RecursiveDirectoryIterator; use RecursiveIteratorIterator; function listFiles($dir){ $iterator = new RecursiveIteratorIterator( new RecursiveDirectoryIterator( $dir, FilesystemIterator::SKIP_DOTS | FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ), RecursiveIteratorIterator::LEAVES_ONLY ); $list = []; foreach($iterator as $pathname =\u0026gt; $info){ $list[] = $pathname; } return $list; } //検索するディレクトリ $dir = __DIR__; var_dump(listFiles($dir));   実行結果\n1 2 3 4 5 6 7 8 9 10  array(4) { [0]=\u0026gt; string(9) \u0026#34;/hoge.txt\u0026#34; [1]=\u0026gt; string(14) \u0026#34;/hoge/hoge.txt\u0026#34; [2]=\u0026gt; string(9) \u0026#34;/piyo.txt\u0026#34; [3]=\u0026gt; string(14) \u0026#34;/piyo/piyo.txt\u0026#34; }    FilesystemIterator::SKIP_DOTS は ., .. をスキップします。 FilesystemIterator::KEY_AS_PATHNAME で 配列の key にパス名が入るようになります。 FilesystemIterator::CURRENT_AS_FILEINFO を設定すると $info に SplFileInfoが入ります。\nそうすると $info-\u0026gt;getATime() を行うとファイルの最終アクセス時刻を取得することなど出来ます。  ","description":"PHP サブフォルダ内のファイルをまとめて取得する","id":434,"section":"tech","tags":["PHP"],"title":"【PHP】サブフォルダ内のファイルをまとめて取得する","uri":"https://c-a-p-engineer.github.io/tech/2021/03/20/php-getfiles/"},{"content":"PHPUnit のテスト用のテストサンプル 以前の PHPUnit テスト実行時に利用可能なフックインターフェイス のテスト用のテストサンプルを作りました。\nこれは PHPUnit のフックインターフェイスのテスト用のテストサンプル。\nPHPUnit の Error や Warning など色んなテスト結果出力させます。\n確認環境  PHP 7.4 PHPUnit 9.5  テストファイル作成 以下のテスト結果が発生するようにしています。\n 成功（Success） 未実装（Incomplete） 危険（Risky） スキップ（） エラー（Error） 失敗（Failure） 警告（Warning）  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72  \u0026lt;?php namespace Tests; use Exception; use PHPUnit\\Framework\\Assert; class ExampleTest extends TestCase { /** * 成功テスト * * @test */ public function testSuccess(){ $this-\u0026gt;assertTrue(true); } /** * 未完成テスト * * @test */ public function testIncomplete(){ $this-\u0026gt;markTestIncomplete(\u0026#39;Incomplete\u0026#39;); } /** * 危険テスト * * @test */ public function testRisky(){ $this-\u0026gt;markAsRisky(); } /** * スキップテスト * * @test */ public function testSkipp(){ $this-\u0026gt;markTestSkipped(\u0026#39;Skipp\u0026#39;); } /** * エラーテスト * * @test */ public function testError(){ throw new Exception(\u0026#39;Error\u0026#39;); } /** * 失敗テスト * * @test */ public function testFailure(){ $this-\u0026gt;assertTrue(false); } /** * 警告テスト * * @test */ public function testWarning(){ Assert::assertXmlStringEqualsXmlFile(\u0026#39;example.file\u0026#39;, null); } }   PHPUnit実行 phpunit Tests/ExampleTest.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  .IRSEFW 7 / 7 (100%) Time: 00:10.407, Memory: 12.00 MB There was 1 error: 1) Tests\\ExampleTest::testError Exception: error /var/www/php/tests/ExampleTest.php:52 -- There was 1 warning: 1) Tests\\Example::testWarning assertNotIsWritable() is deprecated and will be removed in PHPUnit 10. Refactor your code to use assertIsNotWritable() instead. -- There was 1 failure: 1) Tests\\ExampleTest::testFailure Failed asserting that false is true. /var/www/php/tests/ExampleTest.php:61 -- There was 1 risky test: 1) Tests\\ExampleTest::testRisky This test did not perform any assertions /var/www/php/tests/ExampleTest.php:33 ERRORS! Tests: 7, Assertions: 3, Errors: 1, Failures: 1, Warnings: 1, Skipped: 1, Incomplete: 1, Risky: 1.   これで色んな種別の結果が出てきます。\n","description":"PHPUnit のテスト用のテストサンプル。PHPUnit の Error や Warning など色んなテスト結果出力させます。","id":435,"section":"tech","tags":["PHP","PHPUnit","テスト"],"title":"PHPUnit のテスト用のテストサンプル","uri":"https://c-a-p-engineer.github.io/tech/2021/03/19/phpunit-test-sample/"},{"content":"PHPUnit テスト実行時に利用可能なフックインターフェイス PHPUnit を拡張してテスト実行時にテストの成功や失敗、エラー、終了などをフックするインターフェイスを実装する。\nphpunit.xmlに追加 phpunit.xml にextensionを追加する\nTestRunner エクステンションの組み込み\n1 2 3 4 5 6 7  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;phpunit xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:noNamespaceSchemaLocation=\u0026#34;https://schema.phpunit.de/7.1/phpunit.xsd\u0026#34;\u0026gt; \u0026lt;extensions\u0026gt; \u0026lt;!-- フック用ファイルのパス --\u0026gt; \u0026lt;extension class=\u0026#34;Tests\\Extension\\TestHooksExtension\u0026#34;/\u0026gt;  \u0026lt;/extensions\u0026gt; \u0026lt;/phpunit\u0026gt;   フック用ファイルの作成 PHPUnit 実行時のフックするためのファイル作成。\n使用可能なフックインターフェイスを実装した例です。\n利用可能なフックインターフェイス\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84  \u0026lt;?php namespace Tests\\Extension; use PHPUnit\\Runner\\AfterIncompleteTestHook; use PHPUnit\\Runner\\AfterLastTestHook; use PHPUnit\\Runner\\AfterRiskyTestHook; use PHPUnit\\Runner\\AfterSkippedTestHook; use PHPUnit\\Runner\\AfterSuccessfulTestHook; use PHPUnit\\Runner\\AfterTestErrorHook; use PHPUnit\\Runner\\AfterTestFailureHook; use PHPUnit\\Runner\\AfterTestHook; use PHPUnit\\Runner\\AfterTestWarningHook; use PHPUnit\\Runner\\BeforeFirstTestHook; use PHPUnit\\Runner\\BeforeTestHook; class TestHooksExtension implements AfterIncompleteTestHook, AfterRiskyTestHook, AfterSkippedTestHook, AfterSuccessfulTestHook, AfterTestErrorHook, AfterTestFailureHook, AfterTestWarningHook, BeforeFirstTestHook, BeforeTestHook, AfterTestHook, AfterLastTestHook { /** * @interface AfterIncompleteTestHook */ public function executeAfterIncompleteTest(string $test, string $message, float $time): void{ // AfterIncompleteTestHook  // テスト未完成  } /** * @interface AfterRiskyTestHook */ public function executeAfterRiskyTest(string $test, string $message, float $time): void{ // AfterRiskyTestHook  // テスト危険  } /** * @interface AfterSkippedTestHook */ public function executeAfterSkippedTest(string $test, string $message, float $time): void{ // AfterSkippedTestHook  // テストスキップ  } /** * @interface AfterSuccessfulTestHook */ public function executeAfterSuccessfulTest(string $test, float $time): void{ // AfterSuccessfulTestHook  // テスト成功  } /** * @interface AfterTestErrorHook */ public function executeAfterTestError(string $test, string $message, float $time): void{ // AfterTestErrorHook  // テストエラー  } /** * @interface AfterTestFailureHook */ public function executeAfterTestFailure(string $test, string $message, float $time): void{ // AfterTestFailureHook  // テスト失敗  } /** * @interface AfterTestWarningHook */ public function executeAfterTestWarning(string $test, string $message, float $time): void{ // AfterTestWarningHook  // テスト警告  } }   上記ファイルを読み込ませた状態で実行すると各種イベントをフックできます。\nそのため、例えばテスト終了後やエラー時にチャットに通知するなどが可能になります。\n","description":"PHPUnit を拡張してテスト実行時にテストの成功や失敗、エラー、終了などをフックするインターフェイスを実装する","id":436,"section":"tech","tags":["PHP","PHPUnit","テスト"],"title":"PHPUnit テスト実行時に利用可能なフックインターフェイス","uri":"https://c-a-p-engineer.github.io/tech/2021/03/17/phpunit-hook/"},{"content":"Larave メールをマルチパート化 Laravel のメールで view を指定すると Laravel では view を実行してHTMLを生成します。\nそうするとHTMLメールになってしまいます。\nただし、一部のメーラーだとHTMLメールが受け取れないのでテキストメールとのマルチパート化をする必要がありましたので、その時のメモ。\ntrait を作成 trait を作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  \u0026lt;?php namespace App\\Mails; use Illuminate\\Support\\HtmlString; use View; trait MailMultiPartViewTextTrait { /** * Build the view for the message. * * @return array|string * * @throws \\ReflectionException */ protected function buildView() { if (isset($this-\u0026gt;view) \u0026amp;\u0026amp; !isset($this-\u0026gt;textView)) { // View だけ設定されている場合、Viewを生成してhtml、textの自動マルチパート化を行う  // View を生成する  $view = View::make($this-\u0026gt;view, $this-\u0026gt;buildViewData())-\u0026gt;render(); // styleタグ内を削除  $text = preg_replace(\u0026#34;/\u0026lt;style\\\\b[^\u0026gt;]*\u0026gt;(.*?)\u0026lt;\\\\/style\u0026gt;/s\u0026#34;, \u0026#34;\u0026#34;, $view); // タグを削除  $text = strip_tags($text); return array_filter([ \u0026#39;html\u0026#39; =\u0026gt; new HtmlString($view), \u0026#39;text\u0026#39; =\u0026gt; new HtmlString(ltrim($text)), ]); } return parent::buildView(); } }   メールを使用する サンプルはこちらから使用\nLaravel 7.x メール\nuse に MailMultiPartViewTextTrait を追加する。\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?php namespace App\\Mail; use App\\Order; use Illuminate\\Bus\\Queueable; use Illuminate\\Mail\\Mailable; use Illuminate\\Queue\\SerializesModels; class OrderShipped extends Mailable { use Queueable, SerializesModels, MailMultiPartViewTextTrait;    メールソースを確認すると以下の情報が増えてマルチパート化されます。\nContent-Type: multipart/alternative;\nContent-Type: text/plain; charset=utf-8\n","description":"Laravel でのメール送信を自動的にマルチパート化する方法","id":437,"section":"tech","tags":["Laravel"],"title":"Laravel メールを自動的にマルチパート化する","uri":"https://c-a-p-engineer.github.io/tech/2021/03/13/laravel-mail-multipart/"},{"content":"composer メモリオーバー対策 composer を使用するとたまに使用可能メモリを超えた場合にメモリオーバーエラーが発生します。\nその時の対処方法のメモ。\nエラー 1 2  composer install PHP Fatal error: Allowed memory size of 2097152 bytes exhausted (tried to allocate 1974272 bytes) in Unknown on line 0   メモリ制限解除 composer には COMPOSER_MEMORY_LIMIT という環境変数があるので COMPOSER_MEMORY_LIMIT=-1 を付けると composer のメモリ制限がなくなります。\n1  COMPOSER_MEMORY_LIMIT=-1 composer install   ","description":"PHP の composer 使用時のメモリオーバー対策","id":438,"section":"tech","tags":["php","composer"],"title":"composer メモリオーバー対策","uri":"https://c-a-p-engineer.github.io/tech/2021/03/11/php-composer/"},{"content":"Laravel View の文字列取得 Laravel で View の文字列を取得したい時の対応\n※Laravel 6.2 で確認\nサンプルソース 1 2  \u0026lt;?php $viewStr = View::make(\u0026#39;home\u0026#39;)-\u0026gt;render();   指定のセクションを取得\n1 2  \u0026lt;?php $viewStr = View::make(\u0026#39;home\u0026#39;)-\u0026gt;renderSections()[\u0026#39;content\u0026#39;];   ","description":"Laravel の View 文字列を取得する方法","id":439,"section":"tech","tags":["Laravel"],"title":"Laravel View の文字列取得","uri":"https://c-a-p-engineer.github.io/tech/2021/03/10/laravel-view-render/"},{"content":"private property・method を読み書き・実行 諸事情によりクラスのprivateなproperty、Methodを触る必要がありました。\nその時のメモです。\nReflectionClass ReflectionClass\nReflectionClass を使用することで指定されたクラスのことを調べることが可能です。\nサンプルコード まず実験するための　SampleClass を作成します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  \u0026lt;?php class SampleClass { /** * @var string プライベートプロパティ */ private $text = \u0026#39;text\u0026#39;; /** * プライベート変数を出力 */ public function textOutput() { echo $this-\u0026gt;text.PHP_EOL; } /** * !で囲う * @param @string $str 文字列 * @return string */ private function output(string $str):string { return \u0026#34;!{$str}!\u0026#34;; } /** * num1とnum2を足す * @param int num1 足す数値 * @param int num2 足す数値 * @return int */ private function sum(int $num1, int $num2):int { return $num1+$num2; } }   通常アクセスした場合 private property 1 2  $sample = new SampleClass(); echo $sample-\u0026gt;text;   実行結果\n1  PHP Fatal error: Uncaught Error: Cannot access private property SampleClass::$text   private method 1 2 3  \u0026lt;?php $sample = new SampleClass(); echo $sample-\u0026gt;output(\u0026#39;Hello,World\u0026#39;);   ↓実行結果\nPHP Fatal error: Uncaught Error: Call to private method SampleClass::output() from context ReflectionClassを使用 実際に ReflectionClass を使用してprivateなproperty、Methodに読み書き、使用してみる。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  \u0026lt;?php $sample = new SampleClass(); $refrection = new ReflectionClass(get_class($sample)); // プライベートプロパティ text の内容を出力 echo \u0026#39;Private Property Before--------------------\u0026#39;.PHP_EOL; $sample-\u0026gt;textOutput(); // ------プロパティの読み書き------ // 該当のプロパティを取得 $privateText = $refrection-\u0026gt;getProperty(\u0026#39;text\u0026#39;); // アクセス権限の取得 $privateText-\u0026gt;setAccessible(true); // 書き込み $privateText-\u0026gt;setValue($sample, \u0026#34;Change Text\u0026#34;); echo PHP_EOL.\u0026#39;Private Property After----------------------\u0026#39;.PHP_EOL; // 読み込み echo $privateText-\u0026gt;getValue($sample).PHP_EOL; // プライベートプロパティ text の内容を出力 $sample-\u0026gt;textOutput(); echo PHP_EOL.\u0026#39;Private Method------------------------------\u0026#39;.PHP_EOL; // ------メソッドの実行------ // 該当の関数を取得 $output = $refrection-\u0026gt;getMethod(\u0026#39;output\u0026#39;); // アクセス権限の取得 $output-\u0026gt;setAccessible(true); // 確認実行 echo $output-\u0026gt;invoke($sample, \u0026#39;Hello,World\u0026#39;).PHP_EOL; // 該当の関数を取得 $sum = $refrection-\u0026gt;getMethod(\u0026#39;sum\u0026#39;); // アクセス権限の取得 $sum-\u0026gt;setAccessible(true); // 確認実行 変数が複数の時 echo $sum-\u0026gt;invoke($sample, 1, 2).PHP_EOL;   実行結果\n1 2 3 4 5 6 7 8 9 10  Private Property Before-------------------- text Private Property After---------------------- Change Text Change Text Private Method------------------------------ !Hello,World! 3   注意 本来 private になどにされて外部からアクセス出来ないようにされているのは何らかの理由があります。\nこれはそれを捻じ曲げて行う行為ですので注意してください。\n本当にそこをいじるべきなのか、いじったらどんな影響があるかを考えてみてから使用したほうが良いです。\n僕は本当にどうしようもなかったので使わざるを得なかったです。\n","description":"PHPでクラスの private property・method に対して読み書き・実行するする方法のメモ","id":440,"section":"tech","tags":["PHP"],"title":"【PHP】ReflectionClass を使ってクラスの private property・method に読み書き・実行する方法","uri":"https://c-a-p-engineer.github.io/tech/2021/03/02/php-reflectionclass/"},{"content":"Firefoxアドオンまとめ 開発などで使用しているアドオンメモ\n便利系 Tree Style Tab - ツリー型タブ Tree Style Tab - ツリー型タブ\n開いているタブのURLをQR化してくれます。\nスマホなどでテストする際にURLを簡単に共有可能。\nTab2QR Tab2QR\n開いているタブのURLをQR化してくれます。\nスマホとのURLを簡単に共有可能。\n開発系 FlagFox Flagfox\nウェブサーバーの物理的な位置をアドレスバーに国旗として追加してくれます。\nまた国旗クリックするとIP情報などサーバーの詳細情報を得ることが出来ます。\nOctotree - GitHub code tree Octotree - GitHub code tree\nGitHub を開いた際に左側にファイルエクスプローラーを出してくれます。\nGihub 閲覧に役立ちます。\nSelenium IDE Selenium IDE\nブラウザの操作を記憶してくれます。\nSeleniumという自動テストツールのテスト作成ツールなのですがブラウザで記録、再生が出来るため面倒な操作を何度も行う時にも使用出来ます。\n広告対策 uBlacklist uBlacklist\n指定したサイトが Google の検索結果で表示されないようにするアドオンです。\n検索結果に出てきて迷惑なサイトをこれでシャットアウト可能です。\nuBlock Origin uBlock Origin\n広告ブロッカー\n","description":"今現在Firefoxで自分が使用しているアドオンまとめ","id":441,"section":"tech","tags":["Firefox"],"title":"【Firefox】アドオンまとめ","uri":"https://c-a-p-engineer.github.io/tech/2021/02/27/firefox-addon/"},{"content":"xlst の バージョン 1.0 では文字列置換が出来ない こちらの記事（【PHP】PHPUnit の出力ログを見やすくHTMLに変換）で xsltproc を入れてxlstを使用したのですが xlstprc ではバージョン1.0しかサポートしておらず、文字列の置換が出来ません。\nxlstのバージョン1.0では文字の置換は可能なのですが、1文字単位で置換を行うため、文字列の置換を導入致しました。\nテンプレート導入 xsltファイル内に以下のテンプレートを追記。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;xsl:template name=\u0026#34;string-replace-all\u0026#34;\u0026gt; \u0026lt;xsl:param name=\u0026#34;text\u0026#34; /\u0026gt; \u0026lt;xsl:param name=\u0026#34;replace\u0026#34; /\u0026gt; \u0026lt;xsl:param name=\u0026#34;by\u0026#34; /\u0026gt; \u0026lt;xsl:choose\u0026gt; \u0026lt;xsl:when test=\u0026#34;contains($text, $replace)\u0026#34;\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;substring-before($text,$replace)\u0026#34; /\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;$by\u0026#34; /\u0026gt; \u0026lt;xsl:call-template name=\u0026#34;string-replace-all\u0026#34;\u0026gt; \u0026lt;xsl:with-param name=\u0026#34;text\u0026#34; select=\u0026#34;substring-after($text,$replace)\u0026#34; /\u0026gt; \u0026lt;xsl:with-param name=\u0026#34;replace\u0026#34; select=\u0026#34;$replace\u0026#34; /\u0026gt; \u0026lt;xsl:with-param name=\u0026#34;by\u0026#34; select=\u0026#34;$by\u0026#34; /\u0026gt; \u0026lt;/xsl:call-template\u0026gt; \u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:otherwise\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;$text\u0026#34; /\u0026gt; \u0026lt;/xsl:otherwise\u0026gt; \u0026lt;/xsl:choose\u0026gt; \u0026lt;/xsl:template\u0026gt;   使用方法 実際に使用してみます。\n1 2 3 4 5 6 7 8  \u0026lt;xsl:variable name=\u0026#34;myVariable\u0026#34;\u0026gt; \u0026lt;xsl:call-template name=\u0026#34;string-replace-all\u0026#34;\u0026gt; \u0026lt;xsl:with-param name=\u0026#34;text\u0026#34; select=\u0026#34;\u0026#39;This is a {old} text\u0026#39;\u0026#34; /\u0026gt; \u0026lt;xsl:with-param name=\u0026#34;replace\u0026#34; select=\u0026#34;\u0026#39;{old}\u0026#39;\u0026#34; /\u0026gt; \u0026lt;xsl:with-param name=\u0026#34;by\u0026#34; select=\u0026#34;\u0026#39;New\u0026#39;\u0026#34; /\u0026gt; \u0026lt;/xsl:call-template\u0026gt; \u0026lt;/xsl:variable\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;$myVariable\u0026#34;/\u0026gt;   説明付き\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!-- 変数 myVariable の宣言 --\u0026gt; \u0026lt;xsl:variable name=\u0026#34;myVariable\u0026#34;\u0026gt; \u0026lt;!-- テンプレート string-replace-all を呼び出す --\u0026gt; \u0026lt;xsl:call-template name=\u0026#34;string-replace-all\u0026#34;\u0026gt; \u0026lt;!-- 文字列 --\u0026gt; \u0026lt;xsl:with-param name=\u0026#34;text\u0026#34; select=\u0026#34;\u0026#39;This is a {old} text\u0026#39;\u0026#34; /\u0026gt; \u0026lt;!-- 置換対象 --\u0026gt; \u0026lt;xsl:with-param name=\u0026#34;replace\u0026#34; select=\u0026#34;\u0026#39;{old}\u0026#39;\u0026#34; /\u0026gt; \u0026lt;!-- 置換後の文字列 --\u0026gt; \u0026lt;xsl:with-param name=\u0026#34;by\u0026#34; select=\u0026#34;\u0026#39;New\u0026#39;\u0026#34; /\u0026gt; \u0026lt;/xsl:call-template\u0026gt; \u0026lt;/xsl:variable\u0026gt; \u0026lt;!-- 変換後の文字列 This is a New text を出力 --\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;$myVariable\u0026#34;/\u0026gt;   参考  xpath - XSLT string replace - Stack Overflow  ","description":"xlstのバージョン1.0では文字列の置換が出来ません。文字列の置換の導入方法をメモ。","id":442,"section":"tech","tags":["XSLT"],"title":"【XSLT】文字列の置換を導入","uri":"https://c-a-p-engineer.github.io/tech/2021/02/26/xslt-string-replace/"},{"content":"存在チェックINSERT文 重複行を挿入しない方法 データ登録時に同一データがある場合は一意制約違反でエラーが発生したり、重複を挿入したくない時のためのメモ。\n挿入済みデータの存在チェックを行い、同一データの挿入を防ぎます。\nサンプル用テーブル 1 2 3 4 5  CREATETABLEIFNOTEXISTS`user`(`email`varchar(50)DEFAULTNULLCOMMENT\u0026#39;メールアドレス\u0026#39;,`password`varchar(50)DEFAULTNULLCOMMENT\u0026#39;パスワード\u0026#39;,PRIMARYKEY(`MAIL_ADDRESS`))ENGINE=InnoDBDEFAULTCHARSET=utf8mb4COMMENT=\u0026#39;ユーザマスタ\u0026#39;AUTO_INCREMENT=1;  通常のINSERT文 通常のINSERT文だと以下のようなSQLの用になります。\n1 2 3 4  INSERTINTO`user`VALUES(\u0026#39;hoge@example.org\u0026#39;,\u0026#39;piyo\u0026#39;)  このまま使用した場合、同一のメールアドレスが登録済みの場合はINSERTがエラーになってしまいます。\n存在チェックINSERT文 NOT EXISTS を使用して既にテーブルに登録済みか確認をします。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  INSERTINTO`user`SELECT\u0026#39;hoge@example.org\u0026#39;,\u0026#39;piyo\u0026#39;FROMDUALWHERENOTEXISTS(SELECT\u0026#39;X\u0026#39;FROM`user`WHERE`email`=\u0026#39;hoge@example.org\u0026#39;);  このようにすれば大量のデータ投入時に一意制約違反のエラーの対処が必要ありません。\nただし、今度はエラーが出ないため本来「重複したら確認する必要がある」というものがあれば、このような事はせずに地道にSELECTで存在チェック → INSERT → エラー確認としてください。\n仕事内容によっては2重に登録しようとした原因を追求する必要が出てくる可能性がもあります。\n","description":"存在チェックを行い、データを挿入する時に同一のデータがある場合は挿入したくないって時に使えるSQLのメモ","id":443,"section":"tech","tags":["Mysql","DB"],"title":"【Mysql】存在チェックINSERT文 重複行を挿入しない方法","uri":"https://c-a-p-engineer.github.io/tech/2021/02/23/mysql-exists-insert/"},{"content":"PHPUnit の出力ログを見やすくHTMLに変換 PHPUnitのログが見にくいためにHTMLに変換して見やすくします。\nログを出力する PHPUnitの説明に従いまずはXML形式のログを出力するようにします。\n3. XML 設定ファイル — PHPUnit latest Manual\n1 2 3  \u0026lt;logging\u0026gt; \u0026lt;log type=\u0026#34;junit\u0026#34; target=\u0026#34;./tests/log/logfile.xml\u0026#34;/\u0026gt; \u0026lt;/logging\u0026gt;   これでPHPUnit実行後に ./tests/log/logfile.xml のログファイルが出力されます。\n1  vendor/bin/phpunit   出力ファイル\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;testsuites\u0026gt; \u0026lt;testsuite name=\u0026#34;\u0026#34; tests=\u0026#34;2\u0026#34; assertions=\u0026#34;2\u0026#34; errors=\u0026#34;0\u0026#34; failures=\u0026#34;0\u0026#34; skipped=\u0026#34;0\u0026#34; time=\u0026#34;1.102644\u0026#34;\u0026gt; \u0026lt;testsuite name=\u0026#34;Unit\u0026#34; tests=\u0026#34;1\u0026#34; assertions=\u0026#34;1\u0026#34; errors=\u0026#34;0\u0026#34; failures=\u0026#34;0\u0026#34; skipped=\u0026#34;0\u0026#34; time=\u0026#34;0.037481\u0026#34;\u0026gt; \u0026lt;testsuite name=\u0026#34;Tests\\Unit\\ExampleTest\u0026#34; file=\u0026#34;/var/www/html/tests/Unit/ExampleTest.php\u0026#34; tests=\u0026#34;1\u0026#34; assertions=\u0026#34;1\u0026#34; errors=\u0026#34;0\u0026#34; failures=\u0026#34;0\u0026#34; skipped=\u0026#34;0\u0026#34; time=\u0026#34;0.037481\u0026#34;\u0026gt; \u0026lt;testcase name=\u0026#34;testBasicTest\u0026#34; class=\u0026#34;Tests\\Unit\\ExampleTest\u0026#34; classname=\u0026#34;Tests.Unit.ExampleTest\u0026#34; file=\u0026#34;/var/www/html/tests/Unit/ExampleTest.php\u0026#34; line=\u0026#34;15\u0026#34; assertions=\u0026#34;1\u0026#34; time=\u0026#34;0.037481\u0026#34; /\u0026gt; \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuite\u0026gt; \u0026lt;testsuite name=\u0026#34;Feature\u0026#34; tests=\u0026#34;1\u0026#34; assertions=\u0026#34;1\u0026#34; errors=\u0026#34;0\u0026#34; failures=\u0026#34;0\u0026#34; skipped=\u0026#34;0\u0026#34; time=\u0026#34;0.296235\u0026#34;\u0026gt; \u0026lt;testsuite name=\u0026#34;Tests\\Feature\\ExampleTest\u0026#34; file=\u0026#34;/var/www/html/tests/Feature/ExampleTest.php\u0026#34; tests=\u0026#34;1\u0026#34; assertions=\u0026#34;1\u0026#34; errors=\u0026#34;0\u0026#34; failures=\u0026#34;0\u0026#34; skipped=\u0026#34;0\u0026#34; time=\u0026#34;0.296235\u0026#34;\u0026gt; \u0026lt;testcase name=\u0026#34;testBasicTest\u0026#34; class=\u0026#34;Tests\\Feature\\ExampleTest\u0026#34; classname=\u0026#34;Tests.Feature.ExampleTest\u0026#34; file=\u0026#34;/var/www/html/tests/Feature/ExampleTest.php\u0026#34; line=\u0026#34;15\u0026#34; assertions=\u0026#34;1\u0026#34; time=\u0026#34;0.296235\u0026#34; /\u0026gt; \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuite\u0026gt; \u0026lt;/testsuites\u0026gt;   XMLからHTMLに変換する 実際に出力されたxmlファイルからHTMLファイルに変換してみます。\nxsltproc を導入 xslproc を導入する必要があります。\nyum apt-get  yum -y install libxslt cf.   apt-get install xsltproc     'use strict'; var containerId = JSON.parse(\"\\\"2f93bdf4279643a5\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  xsltファイルの用意 XMLからHTMLファイルに変換するためにはxsltファイルの用意をしなければいけません。\n僕は以下のxsltを使用させていただきました。\nPHPUNIT xslt\n  phpunit.xsltu0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;xsl:stylesheet version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34;\u0026gt; \u0026lt;!-- PHPUnit logfile XLST template This fileset provides an easy way to view the PHPUnit XML (JUnit) logfiles in a human readable manner using a web browser. Use this either in combination with the accompanying html file or add the following tag straight after the xml opening tag of the logfile: \u0026lt;?xml-stylesheet type=\u0026#34;text/xsl\u0026#34; href=\u0026#34;phpunit.xslt\u0026#34;?\u0026gt; The thresholds used for the colour-coding can be changed by adjusting the variables at the top of this file. Be careful when changing the values: the double quoting is intentional and needed. Don\u0026#39;t remove. Copyright ©2014 Juliette Reinders Folmer (Twitter: @jrf_nl / GitHub: @jrfnl) License: DWTFYW Updates will be published via: https://gist.github.com/jrfnl/3c28ea6d9b07fd48656d Loosely inspired by: https://www.ruby-forum.com/topic/120869 NB: This was quickly thrown together. There are probably better ways to do bits of it. Feel free to suggest them via the gist comment form ;-) --\u0026gt; \u0026lt;!-- The percentage of tests which need to have failed for the failures cell colour to go from orange to red. Default value: 0.4 (=40%) --\u0026gt; \u0026lt;xsl:variable name=\u0026#34;fail_bad\u0026#34; select=\u0026#34;\u0026#39;0.4\u0026#39;\u0026#34; /\u0026gt; \u0026lt;!-- The thresholds used for the time colour coding in seconds. --\u0026gt; \u0026lt;xsl:variable name=\u0026#34;very_bad_time\u0026#34; select=\u0026#34;\u0026#39;10\u0026#39;\u0026#34; /\u0026gt; \u0026lt;xsl:variable name=\u0026#34;bad_time\u0026#34; select=\u0026#34;\u0026#39;3\u0026#39;\u0026#34; /\u0026gt; \u0026lt;xsl:variable name=\u0026#34;not_so_good_time\u0026#34; select=\u0026#34;\u0026#39;1\u0026#39;\u0026#34; /\u0026gt; \u0026lt;xsl:variable name=\u0026#34;good_time\u0026#34; select=\u0026#34;\u0026#39;0.4\u0026#39;\u0026#34; /\u0026gt; \u0026lt;!-- Whether to show the details of passed tests. Set to 1 to show. Default value: 0 (no) --\u0026gt; \u0026lt;xsl:variable name=\u0026#34;show_success_detail\u0026#34; select=\u0026#34;\u0026#39;0\u0026#39;\u0026#34; /\u0026gt; \u0026lt;xsl:template match=\u0026#34;/\u0026#34;\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; * { font-family: tahoma, verdana, sans-serif; font-size: 96%; } a { text-decoration: none; } a:hover { text-decoration: underline; } h3, h4 { padding: 1em 0 0.5em; } table { width: 100%; border-collapse: collapse; } table#high-level { width: auto; } table tr { vertical-align: top; } table td, table th { padding: 0.2em 1em 0.3em 1em; } table th { text-align: left; } table tr.top { background-color: #dddddd; border-bottom: 2px solid #000000; } table tr.test-file { margin-top: 0.2em; font-weight: bold; background-color: #eeeeee; border-top: 1px solid #666666; } table tr.test-file th { padding-top: 0.5em; } table tr.single-test th { padding-left: 3em; } table#summary td { border-left: 1px solid #cccccc; border-right: 1px solid #cccccc; } table td.nr { text-align: center; } table td.time { text-align: right; } .pass { color: #999999; background-color: #C1FFC1; } .failed { background-color: #FFDAB9; } .errored { background-color: #FFB8BA; } .fail, .fail-lot { color: #FFFFEE; background-color: #C51F1F; font-weight: bold; } .fail-some { color: #FFFFEE; background-color: #FFB90F; font-weight: bold; } .very-bad-time { background-color: #FA8072; font-weight: bold; } .bad-time { background-color: #FFA54F; } .not-so-good-time { background-color: #FFEC8B; } .sort-of-ok { background-color: #BFEFFF; } .good-time { background-color: #C1FFC1; } .no-tests { text-decoration: line-through; text-decoration-style: double; } .error-detail-type, .fail-detail-type { padding-left: 2em; font-weight: bold; } .error-detail-detail, .fail-detail-detail { padding-left: 4em; white-space: pre-wrap; padding-bottom: 1em; } .backlink { text-align: right; font-size: 80%; } .backlink span { font-size: 140%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;xsl:apply-templates/\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;xsl:template match=\u0026#34;/testsuites/testsuite\u0026#34; mode=\u0026#34;high-level\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Test Totals: \u0026lt;xsl:value-of select=\u0026#34;@name\u0026#34;/\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;table id=\u0026#34;high-level\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;b\u0026gt;Number of Tests:\u0026lt;/b\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@tests\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;b\u0026gt;Number of Assertions:\u0026lt;/b\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@assertions\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;b\u0026gt;Number of Failures:\u0026lt;/b\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@failures\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;b\u0026gt;Number of Errors:\u0026lt;/b\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@errors\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;b\u0026gt;Execution Time:\u0026lt;/b\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@time\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;xsl:template match=\u0026#34;testsuites\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;xsl:apply-templates select=\u0026#34;/testsuites/testsuite\u0026#34; mode=\u0026#34;high-level\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;Summary\u0026lt;/h3\u0026gt; \u0026lt;table id=\u0026#34;summary\u0026#34;\u0026gt; \u0026lt;tr class=\u0026#34;top\u0026#34;\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Tests\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Assertions\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Failures\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Errors\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Execution Time\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;xsl:apply-templates select=\u0026#34;//testsuite\u0026#34;/\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;xsl:apply-templates select=\u0026#34;//testsuite[count(testsuite) = 0]\u0026#34; mode=\u0026#34;details\u0026#34;/\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;xsl:template match=\u0026#34;//testsuite\u0026#34;\u0026gt; \u0026lt;xsl:variable name=\u0026#34;hasfailures\u0026#34;\u0026gt; \u0026lt;xsl:choose\u0026gt; \u0026lt;xsl:when test=\u0026#34;(@failures div @tests ) \u0026gt; $fail_bad\u0026#34;\u0026gt; fail-lot\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@failures \u0026amp;gt; 0\u0026#34;\u0026gt; fail-some\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@tests \u0026amp;gt; 0 and @failures = 0 and @errors = 0\u0026#34;\u0026gt; pass\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:otherwise\u0026gt;\u0026lt;/xsl:otherwise\u0026gt; \u0026lt;/xsl:choose\u0026gt; \u0026lt;/xsl:variable\u0026gt; \u0026lt;xsl:variable name=\u0026#34;haserrors\u0026#34;\u0026gt; \u0026lt;xsl:choose\u0026gt; \u0026lt;xsl:when test=\u0026#34;@errors \u0026amp;gt; 0\u0026#34;\u0026gt; fail\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@tests \u0026amp;gt; 0 and @failures = 0 and @errors = 0\u0026#34;\u0026gt; pass\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:otherwise\u0026gt;\u0026lt;/xsl:otherwise\u0026gt; \u0026lt;/xsl:choose\u0026gt; \u0026lt;/xsl:variable\u0026gt; \u0026lt;xsl:variable name=\u0026#34;passes\u0026#34;\u0026gt; \u0026lt;xsl:choose\u0026gt; \u0026lt;xsl:when test=\u0026#34;@tests \u0026amp;gt; 0 and @failures = 0 and @errors = 0\u0026#34;\u0026gt; pass\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:otherwise\u0026gt;\u0026lt;/xsl:otherwise\u0026gt; \u0026lt;/xsl:choose\u0026gt; \u0026lt;/xsl:variable\u0026gt; \u0026lt;xsl:variable name=\u0026#34;isslow\u0026#34;\u0026gt; \u0026lt;xsl:choose\u0026gt; \u0026lt;xsl:when test=\u0026#34;@time \u0026amp;gt; $very_bad_time\u0026#34;\u0026gt; very-bad-time\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@time \u0026amp;gt; $bad_time\u0026#34;\u0026gt; bad-time\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@time \u0026amp;gt; $not_so_good_time\u0026#34;\u0026gt; not-so-good-time\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@tests \u0026amp;gt; 0 and @time \u0026amp;lt; $good_time\u0026#34;\u0026gt; good-time\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@tests = 0\u0026#34;\u0026gt;\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:otherwise\u0026gt; sort-of-ok\u0026lt;/xsl:otherwise\u0026gt; \u0026lt;/xsl:choose\u0026gt; \u0026lt;/xsl:variable\u0026gt; \u0026lt;xsl:variable name=\u0026#34;testname\u0026#34; select=\u0026#34;@name\u0026#34; /\u0026gt; \u0026lt;xsl:choose\u0026gt; \u0026lt;xsl:when test=\u0026#34;count(testsuite) = 0\u0026#34;\u0026gt; \u0026lt;tr class=\u0026#34;single-test\u0026#34;\u0026gt; \u0026lt;xsl:choose\u0026gt; \u0026lt;xsl:when test=\u0026#34;count(testcase) \u0026amp;gt; 0\u0026#34;\u0026gt; \u0026lt;th\u0026gt;\u0026lt;a href=\u0026#34;#{$testname}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@name\u0026#34;/\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/th\u0026gt; \u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:otherwise\u0026gt; \u0026lt;th\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@name\u0026#34;/\u0026gt;\u0026lt;/th\u0026gt; \u0026lt;/xsl:otherwise\u0026gt; \u0026lt;/xsl:choose\u0026gt; \u0026lt;td class=\u0026#34;nr{$passes}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@tests\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;nr{$passes}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@assertions\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;nr{$hasfailures}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@failures\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;nr{$haserrors}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@errors\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;time{$isslow}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@time\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@name != \u0026#39;\u0026#39;\u0026#34;\u0026gt; \u0026lt;tr class=\u0026#34;test-file\u0026#34;\u0026gt; \u0026lt;th\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@name\u0026#34;/\u0026gt;\u0026lt;/th\u0026gt; \u0026lt;td class=\u0026#34;nr{$passes}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@tests\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;nr{$passes}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@assertions\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;nr{$hasfailures}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@failures\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;nr{$haserrors}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@errors\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;time{$isslow}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@time\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:otherwise\u0026gt;\u0026lt;/xsl:otherwise\u0026gt; \u0026lt;/xsl:choose\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;xsl:template match=\u0026#34;//testsuite[count(testsuite) = 0]\u0026#34; mode=\u0026#34;details\u0026#34;\u0026gt; \u0026lt;xsl:variable name=\u0026#34;testname\u0026#34; select=\u0026#34;@name\u0026#34; /\u0026gt; \u0026lt;xsl:choose\u0026gt; \u0026lt;xsl:when test=\u0026#34;count(testcase) \u0026amp;gt; 0 and ( $show_success_detail = 1 or ( $show_success_detail = 0 and ( @failures \u0026amp;gt; 0 or @errors \u0026amp;gt; 0 ) ) )\u0026#34;\u0026gt; \u0026lt;h4 id=\u0026#34;{$testname}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@name\u0026#34;/\u0026gt;\u0026lt;/h4\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr class=\u0026#34;top\u0026#34;\u0026gt; \u0026lt;th\u0026gt;Test name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Assertions\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Time\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;xsl:apply-templates select=\u0026#34;testcase\u0026#34;/\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p class=\u0026#34;backlink\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#summary\u0026#34;\u0026gt;\u0026lt;span\u0026gt;\u0026amp;#8613;\u0026lt;/span\u0026gt; Back to summary\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;count(testcase) = 0\u0026#34;\u0026gt; \u0026lt;h4 id=\u0026#34;{$testname}\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;no-tests\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@name\u0026#34;/\u0026gt;\u0026lt;/span\u0026gt; (no tests found)\u0026lt;/h4\u0026gt; \u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:otherwise\u0026gt;\u0026lt;/xsl:otherwise\u0026gt; \u0026lt;/xsl:choose\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;xsl:template match=\u0026#34;testcase\u0026#34;\u0026gt; \u0026lt;xsl:variable name=\u0026#34;isslow\u0026#34;\u0026gt; \u0026lt;xsl:choose\u0026gt; \u0026lt;xsl:when test=\u0026#34;@time \u0026amp;gt; $very_bad_time\u0026#34;\u0026gt; very-bad-time\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@time \u0026amp;gt; $bad_time\u0026#34;\u0026gt; bad-time\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@time \u0026amp;gt; $not_so_good_time\u0026#34;\u0026gt; not-so-good-time\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@tests \u0026amp;gt; 0 and @time \u0026amp;lt; $good_time\u0026#34;\u0026gt; good-time\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;@tests = 0\u0026#34;\u0026gt;\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:otherwise\u0026gt; sort-of-ok\u0026lt;/xsl:otherwise\u0026gt; \u0026lt;/xsl:choose\u0026gt; \u0026lt;/xsl:variable\u0026gt; \u0026lt;xsl:variable name=\u0026#34;class\u0026#34;\u0026gt; \u0026lt;xsl:choose\u0026gt; \u0026lt;xsl:when test=\u0026#34;count(failure) \u0026amp;gt; 0\u0026#34;\u0026gt;failed\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:when test=\u0026#34;count(error) \u0026amp;gt; 0\u0026#34;\u0026gt;errored\u0026lt;/xsl:when\u0026gt; \u0026lt;xsl:otherwise\u0026gt;pass\u0026lt;/xsl:otherwise\u0026gt; \u0026lt;/xsl:choose\u0026gt; \u0026lt;/xsl:variable\u0026gt; \u0026lt;tr class=\u0026#34;{$class}\u0026#34;\u0026gt; \u0026lt;th\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@name\u0026#34;/\u0026gt;\u0026lt;/th\u0026gt; \u0026lt;td\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@assertions\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;time{$isslow}\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@time\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;xsl:apply-templates select=\u0026#34;error\u0026#34;/\u0026gt; \u0026lt;xsl:apply-templates select=\u0026#34;failure\u0026#34;/\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;xsl:template match=\u0026#34;error\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;error-detail-type\u0026#34; colspan=\u0026#34;3\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@type\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;error-detail-detail\u0026#34; colspan=\u0026#34;3\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;.\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;xsl:template match=\u0026#34;failure\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;fail-detail-type\u0026#34; colspan=\u0026#34;3\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;@type\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;fail-detail-detail\u0026#34; colspan=\u0026#34;3\u0026#34;\u0026gt;\u0026lt;xsl:value-of select=\u0026#34;.\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/xsl:template\u0026gt; \u0026lt;/xsl:stylesheet\u0026gt;      xsltproc を実行 実際に実行してみます。\n1  xsltproc phpunit.xslt tests/log/logfile.xml \u0026gt; output.html   これで output.html が出力されるようにされます。\n効率化を図って PHPUnit = 試験表になるようにすれば業務効率化出来るかと思い調べました。\n試験表と自動テストを別々に書いた場合、試験表と自動テストのどちらもチェックする必要があるので1つにまとめられたらかなりの効率化が可能になると思われます。\n参考  phpunitで作成したテストケースをもとに試験項目表を作成する - Qiita  ","description":"PHPUnit の出力ログをXML形式から見やすいHTMLに変換する方法メモ","id":444,"section":"tech","tags":["PHP","PHPUnit"],"title":"【PHP】PHPUnit の出力ログを見やすくHTMLに変換","uri":"https://c-a-p-engineer.github.io/tech/2021/02/22/phpunit-xsltproc/"},{"content":"PHP の緩やかな比較 PHP は比較演算子の == を使用した際に緩やかな比較を行います。\nこの緩やかな比較はとても間違いやすくて曖昧になりやすいため気をつけて使わなければいけません。\n比較する際に数値の 0 と 数字の '0' を比較して true になるようになっています。\nこれはとてもありがたいのですが、バグの元になりやすいです。\nPHP: PHP 型比較表 - Manual\n== による緩やかな比較表     true false 1 0 -1 \u0026ldquo;1\u0026rdquo; \u0026ldquo;0\u0026rdquo; \u0026ldquo;-1\u0026rdquo; null array() \u0026ldquo;php\u0026rdquo; \u0026quot;\u0026quot;     true true false true false true true false true false false true false   false false true false true false false true false true true false true   1 true false true false false true false false false false false false   0 false true false true false false true false true false true true   -1 true false false false true false false true false false false false   \u0026ldquo;1\u0026rdquo; true false true false false true false false false false false false   \u0026ldquo;0\u0026rdquo; false true false true false false true false false false false false   \u0026ldquo;-1\u0026rdquo; true false false false true false false true false false false false   null false true false true false false false false true true false true   array() false true false false false false false false true true false false   \u0026ldquo;php\u0026rdquo; true false false true false false false false false false true false   \u0026quot;\u0026quot; false true false true false false false false true false false true    とても分かりづらい表になっています。\n条件式の注意 条件式では緩やかな比較を知らず識らずのうちに使用する人が多いです。\nif 例えばif文なのですが bool 型なら良いのですがこういったif文に意識せずに使うと事故の元になります。\nとりあえず実際に曖昧な比較を行って見ます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026lt;?php $hoges = [ true, false, 1, 0, -1, \u0026#34;1\u0026#34;, \u0026#34;0\u0026#34;, \u0026#34;-1\u0026#34;, null, array(), \u0026#34;php\u0026#34;, \u0026#34;\u0026#34;, ]; foreach ( $hoges as $value ){ $result = null; if ( $value ) { $result = true; } else { $result = false; } var_dump($value, $result); echo \u0026#39;----\u0026#39; . PHP_EOL; }   実行結果\n  if 実行結果  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  bool(true) bool(true) ---- bool(false) bool(false) ---- int(1) bool(true) ---- int(0) bool(false) ---- int(-1) bool(true) ---- string(1) \u0026#34;1\u0026#34; bool(true) ---- string(1) \u0026#34;0\u0026#34; bool(false) ---- string(2) \u0026#34;-1\u0026#34; bool(true) ---- NULL bool(false) ---- array(0) { } bool(false) ---- string(3) \u0026#34;php\u0026#34; bool(true) ---- string(0) \u0026#34;\u0026#34; bool(false) ----     \nとてもわかりづらいものになりました。\nこれは間違いやすく保守性が悪くなります。\nまた行いたい処理の意図としての可読性が落ちます。\n（文字数は確かに減りますが…\nif($hoge) は基本的に bool 型以外では使うことはおすすめしません。\nswitch switchに関してはさらに辛い状況です。\nこちらは緩やかな比較しか出来ないので気をつけてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  \u0026lt;?php $hoges = [ true, false, 1, 0, -1, \u0026#34;1\u0026#34;, \u0026#34;0\u0026#34;, \u0026#34;-1\u0026#34;, null, array(), \u0026#34;php\u0026#34;, \u0026#34;\u0026#34;, ]; foreach ( $hoges as $value ){ switch ($value) { case \u0026#34;php\u0026#34;: var_dump($value, \u0026#39;php\u0026#39;); echo \u0026#39;----\u0026#39; . PHP_EOL; break; case true: var_dump($value, true); echo \u0026#39;----\u0026#39; . PHP_EOL; break; case false: var_dump($value, false); echo \u0026#39;----\u0026#39; . PHP_EOL; break; default: echo \u0026#39;default\u0026#39; . PHP_EOL; break; } }   実行結果\n  switch 実行結果  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  bool(true) string(3) \u0026#34;php\u0026#34; ---- bool(false) bool(false) ---- int(1) bool(true) ---- int(0) bool(false) ---- int(-1) bool(true) ---- string(1) \u0026#34;1\u0026#34; bool(true) ---- string(1) \u0026#34;0\u0026#34; bool(false) ---- string(2) \u0026#34;-1\u0026#34; bool(true) ---- NULL bool(false) ---- array(0) { } bool(false) ---- string(3) \u0026#34;php\u0026#34; string(3) \u0026#34;php\u0026#34; ---- string(0) \u0026#34;\u0026#34; bool(false) ----     \nあえて \u0026quot;php\u0026quot; という条件にしてみましたが案の定全然違う条件に引っかかりました。\nbool(true) が \u0026quot;php\u0026quot; の条件に引っかかります。\n注意 緩やかな比較を意図せず使用するとバグのもとになるので気をつけてください。\n厳密な比較を行いたい場合は === を使用してください。\nただし、今度は数値と数字の違いなどに気をつける必要が出てきます。\n","description":"PHPの緩やかな比較な比較はバグのもとになりやすいのでご注意ください。","id":445,"section":"tech","tags":["PHP"],"title":"【PHP】緩やかな比較","uri":"https://c-a-p-engineer.github.io/tech/2021/02/21/php-comparaisions-loose/"},{"content":"git pull したら error: cannot lock ref が出たので対処 git pullをしたら以下のようなエラーが出てきました。\n1  error: cannot lock ref \u0026#39;refs/remotes/origin/feature/hoge/fuga\u0026#39;: \u0026#39;refs/remotes/origin/feature/hoge\u0026#39; exists; cannot create \u0026#39;refs/remotes/origin/feature/hoge/fuga\u0026#39;   エラー理由 これは古いブランチ refs/remotes/origin/feature/hoge は既にリモートリポジトリから削除されているのですがローカルに存在するために git pull しても新たに refs/remotes/origin/feature/hoge/fuga が作れないというのが理由です。\ngit remote prune を実行して解決方法 git remote prune を使用することでローカルに存在するがリモートリポジトリに存在しないブランチを削除してくれます。\n1  $ git remote prune [ブランチ名]   1 2 3 4 5 6 7 8  $ git remote prune origin Pruning origin URL: [リモートリポジトリのURL] * [pruned] origin/[ブランチ名] * [pruned] origin/[ブランチ名] ……… …… …   この時に表示されたブランチ達が削除されていきます。\nその後は ```git pull`` して最新を取得することが可能になります。\n","description":"git pull したら error: cannot lock ref が出たので対処方法をメモ","id":446,"section":"tech","tags":["Git"],"title":"【Git】pull したら error: cannot lock ref が出たので対処","uri":"https://c-a-p-engineer.github.io/tech/2021/02/20/git-prune/"},{"content":"PHP の int最大値 PHP の int型の最大値は32bit環境では2147483647、64bit環境では9223372036854775808となります。\nプログラム言語によりますが int型で宣言されているものが int型の桁数を超えた場合にオーバーフローが発生します。\nでも、PHPは動的型付け言語のためint型の最大値を超えた場合は自動的に float型になります。\n確認環境 PHP Version:8.0.1 通常の動作 1 2 3 4 5  \u0026lt;?php // 桁数が多いため32bit版での説明 $max = PHP_INT_MAX; // 2147483647 var_dump($max); var_dump($max + 1);   実行結果\nint(2147483647) float(2147483648) 実行すると自動的に float型に切り替わってしまいます。\nですがPHPでもオーバーフローが発生する場合があるのです。\nちなみにPHP_INT_MAXはその環境での int型最大値を取得してくれます。\nオーバーフロー オーバーフローするパターンです。\n配列キー 配列の数値キーが int型最大値を超えた場合、オーバーフローします。\n1 2 3  \u0026lt;?php $hoge = array(PHP_INT_MAX =\u0026gt; \u0026#34;MAX\u0026#34;, PHP_INT_MAX + 1 =\u0026gt; \u0026#34;OVER FLOW\u0026#34;); var_dump($hoge);   実行結果\narray(2) { [2147483647]=\u0026gt; string(3) \u0026quot;MAX\u0026quot; [-2147483648]=\u0026gt; string(9) \u0026quot;OVER FLOW\u0026quot; } 結果は上記の通りになってしまいます。\nなので配列の数値キーを使う場合はお気をつけ下さい。\nintval関数 intval関数を使用した際に、int型の最大値を超えた float型の値を、強制的に int型にするため発生します。\nPHP: intval - Manual\n1 2 3  \u0026lt;?php var_dump(intval(PHP_INT_MAX)); var_dump(intval(PHP_INT_MAX + 1));   実行結果\nint(2147483647) int(-2147483648) 結果はオーバーフローしてしまいます。\n強制的に int型にした時にオーバーフローが発生してしまいます。\n注意 パターンによってはオーバーフローも発生することがあるのでご注意ください。\n","description":"PHPは動的型付けのため、数値がオーバーフローを起こさないと考えられています。ただし、条件によっては発生するので危険なため覚えておくのが良いでしょう。","id":447,"section":"tech","tags":["PHP"],"title":"【PHP】int型でオーバーフロー","uri":"https://c-a-p-engineer.github.io/tech/2021/02/19/php-intval/"},{"content":"uniqidの危険性 PHPでは uniqid という一意のIDを生成するという意味の名を持つ関数が存在します。\nですがこれを安易に使用するととても危険です。\nPHP: uniqid - Manual\n確認環境 PHP Version:8.0.1 どこが危険なの？  一意なIDを生成する\n マニュアルを読んでいると下記のような説明があります。\n警告\nこの関数は、戻り値の一意性を保証するものではありません。 ほとんどのシステムは、NTP などでシステムクロックを調整するので、 システム時刻は絶えず変更されます。 したがって、この関数がプロセス/スレッドの一意の ID を返さない可能性があります。 一意性を高めるには、more_entropy を使用してください。 \nuniqidの生成方法 uniqid のPHPのソース側を見てもらえればわかるのですが、IDを生成する際にマイクロ秒の値を使用しています。\nphp-src/uniqid.c at master · php/php-src\nそのため、全く同じマイクロ秒で処理を行われた場合に一意のIDになりません。\n実際にここに記載されている人はマシンスペックが凄いのか全て同じIDが出力されたようです。\nPHP: uniqid - Manual#hackan at gmail dot com\n本当に一意のID 簡単なのがUUIDを使う。\nUUID - Wikipedia\n最近のFWではUUIDの生成をサポートしているので使用するのが良いでしょう。\nLaravelではUUIDは Str::uuid() で生成出来ます。\nStr::uuid\n一意になるように作る 普通にこれだけを実行してもわかるのですが近似値になります。\nマシンスペックが早く、ナノ秒単位で処理が行われたら同じ値になります。\n1 2 3 4 5  \u0026lt;?php // Test for($i = 0; $i \u0026lt; 20; $i++) { echo uniqid() . PHP_EOL; }   サンプルとしてランダムな文字列、UUIDの生成の2種類を用意しました。\nランダムな文字列 先程の同じIDが出力されると例に出したリンクですがこの中で行っています。\nPHP: uniqid - Manual#hackan at gmail dot com\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u0026lt;?php function uniqidReal($lenght = 13) { // uniqid gives 13 chars, but you could adjust it to your needs.  if (function_exists(\u0026#34;random_bytes\u0026#34;)) { $bytes = random_bytes(ceil($lenght / 2)); } elseif (function_exists(\u0026#34;openssl_random_pseudo_bytes\u0026#34;)) { $bytes = openssl_random_pseudo_bytes(ceil($lenght / 2)); } else { throw new Exception(\u0026#34;no cryptographically secure random function available\u0026#34;); } return substr(bin2hex($bytes), 0, $lenght); } // Test echo \u0026#34;uniqid() \\tuniqidReal()\u0026#34;, PHP_EOL; for($i = 0; $i \u0026lt; 20; $i++) { echo uniqid(), \u0026#34;\\t\u0026#34;, uniqidReal(), PHP_EOL; }   試してみたましたが出力結果は以下のように uniqid 使用側は近似値、 作ったuniqidReal() はランダムになりました。\nuniqid() uniqidReal() 602ddd5025c24\te37315f1b880e 602ddd5025c35\t63c429d4047b3 602ddd5025c3c\t80ab5f4ec5a1b 602ddd5025c44\t4a4ef9ac6a371 602ddd5025c4b\t87fc41a8e0575 602ddd5025c52\tf8a7f5196133f 602ddd5025c59\te7e91230587b9 602ddd5025c60\t5992e6e7220d7 602ddd5025c67\t7a17f778c1b8d 602ddd5025c6e\t612ed5ab84cc3 602ddd5025c75\t6a70ab07fca9d 602ddd5025c7c\t96c24bc181230 602ddd5025c83\t1978ad8de70e5 602ddd5025c8a\t9a8d980520480 602ddd5025c91\t1432de3d8f3e1 602ddd5025c98\te397181f3efd6 602ddd5025ca0\t5eb5c937f9c8a 602ddd5025ca7\t22b1011ea59d9 602ddd5025cae\t2c8a42f06a5fb 602ddd5025cb5\ta2a081d824f2d UUIDの生成 UUIDの生成サンプル\nPHP: uniqid - Manual#Andrew Moore\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121  \u0026lt;?php class UUID { public static function v3($namespace, $name) { if(!self::is_valid($namespace)) return false; // Get hexadecimal components of namespace  $nhex = str_replace(array(\u0026#39;-\u0026#39;,\u0026#39;{\u0026#39;,\u0026#39;}\u0026#39;), \u0026#39;\u0026#39;, $namespace); // Binary Value  $nstr = \u0026#39;\u0026#39;; // Convert Namespace UUID to bits  for($i = 0; $i \u0026lt; strlen($nhex); $i+=2) { $nstr .= chr(hexdec($nhex[$i].$nhex[$i+1])); } // Calculate hash value  $hash = md5($nstr . $name); return sprintf(\u0026#39;%08s-%04s-%04x-%04x-%12s\u0026#39;, // 32 bits for \u0026#34;time_low\u0026#34;  substr($hash, 0, 8), // 16 bits for \u0026#34;time_mid\u0026#34;  substr($hash, 8, 4), // 16 bits for \u0026#34;time_hi_and_version\u0026#34;,  // four most significant bits holds version number 3  (hexdec(substr($hash, 12, 4)) \u0026amp; 0x0fff) | 0x3000, // 16 bits, 8 bits for \u0026#34;clk_seq_hi_res\u0026#34;,  // 8 bits for \u0026#34;clk_seq_low\u0026#34;,  // two most significant bits holds zero and one for variant DCE1.1  (hexdec(substr($hash, 16, 4)) \u0026amp; 0x3fff) | 0x8000, // 48 bits for \u0026#34;node\u0026#34;  substr($hash, 20, 12) ); } public static function v4() { return sprintf(\u0026#39;%04x%04x-%04x-%04x-%04x-%04x%04x%04x\u0026#39;, // 32 bits for \u0026#34;time_low\u0026#34;  mt_rand(0, 0xffff), mt_rand(0, 0xffff), // 16 bits for \u0026#34;time_mid\u0026#34;  mt_rand(0, 0xffff), // 16 bits for \u0026#34;time_hi_and_version\u0026#34;,  // four most significant bits holds version number 4  mt_rand(0, 0x0fff) | 0x4000, // 16 bits, 8 bits for \u0026#34;clk_seq_hi_res\u0026#34;,  // 8 bits for \u0026#34;clk_seq_low\u0026#34;,  // two most significant bits holds zero and one for variant DCE1.1  mt_rand(0, 0x3fff) | 0x8000, // 48 bits for \u0026#34;node\u0026#34;  mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff) ); } public static function v5($namespace, $name) { if(!self::is_valid($namespace)) return false; // Get hexadecimal components of namespace  $nhex = str_replace(array(\u0026#39;-\u0026#39;,\u0026#39;{\u0026#39;,\u0026#39;}\u0026#39;), \u0026#39;\u0026#39;, $namespace); // Binary Value  $nstr = \u0026#39;\u0026#39;; // Convert Namespace UUID to bits  for($i = 0; $i \u0026lt; strlen($nhex); $i+=2) { $nstr .= chr(hexdec($nhex[$i].$nhex[$i+1])); } // Calculate hash value  $hash = sha1($nstr . $name); return sprintf(\u0026#39;%08s-%04s-%04x-%04x-%12s\u0026#39;, // 32 bits for \u0026#34;time_low\u0026#34;  substr($hash, 0, 8), // 16 bits for \u0026#34;time_mid\u0026#34;  substr($hash, 8, 4), // 16 bits for \u0026#34;time_hi_and_version\u0026#34;,  // four most significant bits holds version number 5  (hexdec(substr($hash, 12, 4)) \u0026amp; 0x0fff) | 0x5000, // 16 bits, 8 bits for \u0026#34;clk_seq_hi_res\u0026#34;,  // 8 bits for \u0026#34;clk_seq_low\u0026#34;,  // two most significant bits holds zero and one for variant DCE1.1  (hexdec(substr($hash, 16, 4)) \u0026amp; 0x3fff) | 0x8000, // 48 bits for \u0026#34;node\u0026#34;  substr($hash, 20, 12) ); } public static function is_valid($uuid) { return preg_match(\u0026#39;/^\\{?[0-9a-f]{8}\\-?[0-9a-f]{4}\\-?[0-9a-f]{4}\\-?\u0026#39;. \u0026#39;[0-9a-f]{4}\\-?[0-9a-f]{12}\\}?$/i\u0026#39;, $uuid) === 1; } } // Usage // Named-based UUID. $v3uuid = UUID::v3(\u0026#39;1546058f-5a25-4334-85ae-e68f2a44bbaf\u0026#39;, \u0026#39;SomeRandomString\u0026#39;); $v5uuid = UUID::v5(\u0026#39;1546058f-5a25-4334-85ae-e68f2a44bbaf\u0026#39;, \u0026#39;SomeRandomString\u0026#39;); // Pseudo-random UUID $v4uuid = UUID::v4(); // Output echo \u0026#39;UUID:v3:\u0026#39; . $v3uuid . PHP_EOL; echo \u0026#39;UUID:v4:\u0026#39; . $v4uuid . PHP_EOL; echo \u0026#39;UUID:v5:\u0026#39; . $v5uuid . PHP_EOL;   最後に PHPマニュアルを見てこういった罠に気をつけてください。\n","description":"PHPではuniqidという一意のIDを生成するという意味の名を持つ関数が存在します。ですがこれを安易に使用するととても危険です。","id":448,"section":"tech","tags":["PHP"],"title":"【PHP】uniqidの危険性","uri":"https://c-a-p-engineer.github.io/tech/2021/02/18/php-uniqid/"},{"content":"Laravel Dusk テスト間でセッションデータを破棄する方法 Laravel Duskでテストを作成していると1クラス内で複数のテストメソッドを作った場合に同じブラウザでテストをされていたようでエラーになりました。\nそのため、例えばテストでログインした場合、次のテスト時にはログアウトを都度しなければいけないのと、前のセッションデータが残っていて想定してないエラーが発生する可能性があります。\n今回はその対策をメモ。\nサンプルテスト（失敗） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  \u0026lt;?php class LoginTest extends DuskTestCase { public function testLogin() { $this-\u0026gt;browse(function (Browser $browser) { $browser-\u0026gt;visit(\u0026#39;/admin\u0026#39;) -\u0026gt;type(\u0026#39;email\u0026#39;, \u0026#39;hoge@exampl.org\u0026#39;) -\u0026gt;type(\u0026#39;password\u0026#39;, \u0026#39;hogepass\u0026#39;) -\u0026gt;press(\u0026#39;Login\u0026#39;) -\u0026gt;assertSee(\u0026#39;Loading...\u0026#39;); }); } public function testLoginFailure(){ $this-\u0026gt;browse(function (Browser $browser){ // I have to add this to logout first, otherwise it\u0026#39;s already logged in for this test!  $browser-\u0026gt;visit(\u0026#39;/admin/logout\u0026#39;); $browser-\u0026gt;visit(\u0026#39;/admin\u0026#39;) -\u0026gt;type(\u0026#39;email\u0026#39;, \u0026#39;fuga@exampl.org\u0026#39;) -\u0026gt;type(\u0026#39;password\u0026#39;, \u0026#39;fugapass\u0026#39;) -\u0026gt;press(\u0026#39;Login\u0026#39;) -\u0026gt;assertSee(\u0026#39;These credentials do not match our records.\u0026#39;); }); } }   この場合、行18行目でわざわざログアウトしています。\nそうすると前のデータが残って予期せぬエラーが発生する可能性もあります。\nサンプルテスト（成功） $this-\u0026gt;browse を $this-\u0026gt;createBrowsersFor に変更するだけ対応可能です。\nこうすることによってテストごとに新たなブラウザを生成します。\n  修正コードを開く  修正コード 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026lt;?php class LoginTest extends DuskTestCase { public function testLogin() { $this-\u0026gt;createBrowsersFor(function (Browser $browser) {  $browser-\u0026gt;visit(\u0026#39;/admin\u0026#39;) -\u0026gt;type(\u0026#39;email\u0026#39;, \u0026#39;hoge@exampl.org\u0026#39;) -\u0026gt;type(\u0026#39;password\u0026#39;, \u0026#39;hogepass\u0026#39;) -\u0026gt;press(\u0026#39;Login\u0026#39;) -\u0026gt;assertSee(\u0026#39;Loading...\u0026#39;); }); } public function testLoginFailure(){ $this-\u0026gt;createBrowsersFor(function (Browser $browser){  $browser-\u0026gt;visit(\u0026#39;/admin\u0026#39;) -\u0026gt;type(\u0026#39;email\u0026#39;, \u0026#39;fuga@exampl.org\u0026#39;) -\u0026gt;type(\u0026#39;password\u0026#39;, \u0026#39;fugapass\u0026#39;) -\u0026gt;press(\u0026#39;Login\u0026#39;) -\u0026gt;assertSee(\u0026#39;These credentials do not match our records.\u0026#39;); }); } }      クッキーの削除 人によっては createBrowsersFor だけでは不十分のようで、setup時にクッキーを破棄して対応をする必要があるようです。\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;?php class LoginTest extends DuskTestCase { /** * Temporal solution for cleaning up session */ protected function setUp() { parent::setUp(); foreach (static::$browsers as $browser) { $browser-\u0026gt;driver-\u0026gt;manage()-\u0026gt;deleteAllCookies();  } }   参考  php - Laravel Dusk, how to destroy session data between tests - Stack Overflow  追記（2021/02/16） 僕の場合 createBrowsersFor ではうまく行かなかったので browse で deleteAllCookies で対応いたしました。\nLaravel Dusk バージョン  Laravel Dusk 6.11\n ","description":"Laravel Duskだと1クラス内でのテストケースだと同一ブラウザがテストされてしまいます。それを防ぐための対策です。","id":449,"section":"tech","tags":["PHP","Laravel","テスト"],"title":"Laravel Dusk テスト間でセッションデータを破棄する方法","uri":"https://c-a-p-engineer.github.io/tech/2021/02/13/laravel-dusk-session-destroy/"},{"content":"【PHP】VSCode で Xdebug を使用してデバッグをする方法 VSCode を使用しての PHP デバッグ方法メモ。\n前提  VSCode をエディタとして利用  プラグイン Remote - Containers 導入済み   Docker を導入済み  簡単にご説明しますと Docker 内で VSCode が起動するので環境が同一になるように作られています。\n Developing inside a Container using Visual Studio Code Remote Development  ディレクトリ構造 ├── .vscode │ └── launch.json ├── docker │ └── web │ ├── Dockerfile │ └── xdebug.ini ├── docker-compose.yml └── src └── index.php Docker環境構築 docker-compose.yml docker-compose.yml を用意\n1 2 3 4 5 6 7 8 9 10 11  version:\u0026#39;3\u0026#39;services:web:container_name:webbuild:./docker/webports:- \u0026#39;8080:80\u0026#39;volumes:- ./src:/var/www/html- ./docker/web/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini  Dockerfile PHP の Dockerfile を用意。\n1 2 3 4 5 6 7 8 9 10  FROMphp:8.1.2-apacheRUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\  git \\  unzip \\  vim# xdebug インストールRUN pecl install xdebug \\  \u0026amp;\u0026amp; docker-php-ext-enable xdebug  xedebug.ini xdebugの設定（php.ini に含めてもOK\n1 2 3 4 5 6 7 8 9  [xdebug] ; xdebug のモード（debug xdebug.mode=debug ; デバッグの開始 xdebug.start_with_request=yes ; ホスト指定 xdebug.client_host=host.docker.internal ; ホスト側のポート指定 xdebug.client_port=9003   VScode デバッグ用設定ファイル debug 設定\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, // php.iniで設定したポート番号 \u0026#34;pathMappings\u0026#34;: { // Dockerのドキュメントルート:ローカルのドキュメントルート \u0026#34;/var/www/html/\u0026#34;: \u0026#34;${workspaceRoot}/php\u0026#34; } } ] }   プラグインインストール PHPデバッグをのプラグインをVSCodeにインストール\nPHP Debug\nPHP index.phpを用意\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026lt;?php declare(strict_types=1); for ($i = 1; $i \u0026lt;= 100; $i++) { if ($i % 15 === 0) { echo \u0026#39;FizzBuzz\u0026#39;; } elseif ($i % 3 === 0) { echo \u0026#39;Fizz\u0026#39;; } elseif ($i % 5 === 0) { echo \u0026#39;Buzz\u0026#39;; } else { echo $i; } echo PHP_EOL; }   デバッグの実行  index.php の行番号横をダブルクリックしてブレークポイントを設定 docker-compose up -d でDockerを起動 デバッグの実行（下記のいずれかの方法  F5 Ctrl + Shift + d → 再生ボタンを押して実行 メニューバー → 実行 → デバッグの開始   http://localhost:8080/ に接続  これでデバッグが開始されます。\n参考  【PHP】VScodeでXdebugを使ってデバッグする  ","description":"VSCode を使用しての PHP デバッグ方法メモ","id":450,"section":"tech","tags":["PHP"],"title":"【PHP】VSCode で Xdebug を使用してデバッグをする方法","uri":"https://c-a-p-engineer.github.io/tech/2022/02/12/php-xdebug-vscode/"},{"content":"応用情報技術者試験に合格した！ 2020年の秋季の応用情報技術者試験で合格して晴れて資格取得できました。\n今回はその時の勉強方法などをまとめておきます。\n応用情報技術者試験とは IPAが主催している情報系の資格です。国家資格扱いになります。\nしかも、ありがたいことに一生モノの資格です。\n（資格によっては認定日から数年経つと期限切れの扱いになるものがあります）\nIPA 独立行政法人 情報処理推進機構：試験制度：試験区分一覧\n何故、応用情報技術者試験を受けたのか？ 僕は応用の前の基本情報の資格は取得出来ませんでした。（ITパスポートは取得済み）\n当時としての理由としては社会人成り立てで仕事が忙しくて勉強時間がなく、現在のようにWebなどで勉強出来る環境が充実してなかったのが理由です。\nまた基本情報の午後問がプログラミング言語の問題が出るのですが、僕のメイン言語はPHPで基本情報を取得する際に新たに言語の勉強が必要になるのです。\nそうなると勉強時間が増えてしまう、また新たに別言語を勉強するよりも一つ上の応用情報技術者試験の午後問については、午前問題を勉強していれば答えられる応用問題がいくつもあるのです。\n勉強方法 勉強方法はひたすら以下のサイトの過去問題をやるのみでした。\n直近3～5年の過去問をひたすら繰り返すのみ。\n過去問と同一問題や数値や言葉を少し変えた問題が出てきます。\nスマホを駆使してスキマ時間中に通勤、トイレ、育児中でも1問1問解いていきました。\n午前問題 応用情報技術者過去問道場｜応用情報技術者試験.com\n午後過去問 情報セキュリティは必須のようなので特にそこは勉強をしておくべきです。\n午後問題の分野別まとめ｜応用情報技術者試験.com\nマインドマップ 勉強用に少しマインドマップにまとめていましたので公開しておきます。\n平成31年 春季 令和元年 秋季 資格について 資格は絶対勉強すべきって訳ではないです。\nただ最近言われるポートフォリオではプログラミングくらいしか測れませんし、どこかからコピーして作ったものだとプログラミングも出来るかわかりません。\n僕の場合はブログなどを晒す、ポートフォリオを作るより新たな知識を身につける且つ自己研鑽のために取得しています。\n試験ではテクノロジ、マネジメント、ストラテジの大まかな3つの分野から出題されますので合格することで応用情報技術者試験に合格できる能力があるという証明になります。\n面白そうな資格があれば受けてみるのも良いと思います。\n","description":"応用情報技術者試験に合格したので合格に向けての戦略をまとめてみました。","id":451,"section":"tech","tags":["資格"],"title":"応用情報技術者試験 合格記録","uri":"https://c-a-p-engineer.github.io/tech/2021/02/10/ap-pass/"},{"content":"【Firefox】タスクマネージャーを開いて各タブの使用メモリなどを確認する方法 Firefoxが重いと感じた時にタスクマネージャーを開いてどのタブがメモリを使っているかなどを確認をする方法\nタスクマネージャーの開き方  メニューボタン「三」をクリックします。 「その他のツール」をクリックします。 「タスクマネージャー」をクリックします。 タスクマネージャーが新しいタブで開きます。  アドレスバーに about:performance と入力して、タスクマネージャーのページを開くこともできます。\nタスクマネージャーの見方  名前  現在 Firefox で実行されているタブや拡張機能の名前が表示されます。\n拡張機能の ID もこの列に含まれます。   種類  リスト内のその項目がタブかアドオンかを示します。   消費電力への影響  CPU によって使用される消費電力を表示します。\n高い電力消費のタスクはバッテリーを速く消費し、システムの性能を遅くするでしょう。   メモリー  システムで現在タスクが使用している RAM の合計を表示します。    参考  タスクマネージャー - どのタブや拡張機能が Firefox を遅くしているか確認する  ","description":"Firefoxが重いと感じた時にタスクマネージャーを開いてどのタブがメモリを使っているかなどを確認をする方法","id":452,"section":"tech","tags":["Firefox"],"title":"【Firefox】タスクマネージャーを開いて各タブの使用メモリなどを確認する方法","uri":"https://c-a-p-engineer.github.io/tech/2022/02/09/firefox-performance/"},{"content":"HUGOにブログを変更致しました。 今回HUGOにブログを移行致しました。\nその理由をご説明させていだきます。\n以前のブログ達 WordPressのブログ 最初のブログはこちら\nScrap Enngineer\n最初のブログはWordPressを使用して作りました。\nWordPressは簡単にブログを作成出来るとても優れたCMSではあります。\nしかし、多々問題がありました。\n PHPとDBが必要 脆弱性対策 バックアップ問題 サーバーの必要性  WordPressは簡単なのですがこれらの問題が色々と難しく、継続的な保守が必要でした。\n僕の場合は個人ブログだったので良いのですが企業サイトなどの場合はWordPress、ミドルウェアなど様々な対応をしてハッキング対策をする必要がります。\nまたバックアップもDBが消失した際に消えたりするので中々に辛いところでした。\nBlogger 次に使用したのがBloggerでした。\nSE人生ログ\nこちらはGoogleが提供しているブログシステムになります。\nこちらはWordPressのような面倒な保守はしなくて良くて、いい具合でしたが、デザインの修正などが少々手間でした。\nWordPressよりは機能的に劣るが簡単にブログをやれる利点がありました。\nですが、こちらはGoogleが提供しているシステムのため記事の修正画面などが更新されてやりづらくなり、そのため更新が面倒になりました。\nHUGOを選んだ理由 今回ブログに選んだHUGOですが、こちらは静的ファイルジェネレーターになります。\nHUGO\nWordPressのようにPHPを使用して動的に色々するものではなくファイルを出力するだけになるのです。\nそのためWordPressと違いDB不要なため、ファイルホスティングだけで済みます。\nまたHUGOはマークダウン記法が採用されているため簡単に記事を書くことが可能です。\n","description":"HUGOにブログを変更いたしました。その理由をご説明させて頂きます。","id":453,"section":"tech","tags":["雑記"],"title":"HUGOにブログを変更いたしました","uri":"https://c-a-p-engineer.github.io/tech/2021/02/08/blog-move/"},{"content":"はじめに ブログ主が色々なメモをするためのブログになっております。\n間違った内容など、ご指摘事項がありましたらTwitter経由でご連絡していただけると幸いです。\n著作権について ブログの記事の内容やコードの内容については、自由に使って頂いて大丈夫です。\nただし、コピーを行い記事を作成する・悪意のある改変、抜粋などがありましたら抗議させていただきます。\nまた使用している画像はフリーの画像などを使っていますので、著作権が当ブログにないものがありますのでお気をつけてください。\nお問い合わせ Twitterからお願いします。\nTwitter\n","description":"こぴぺたん ログ","id":454,"section":"","tags":null,"title":"About","uri":"https://c-a-p-engineer.github.io/about/"}]