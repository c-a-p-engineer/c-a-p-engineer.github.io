<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Python on こぴぺたん ログ</title><link>https://c-a-p-engineer.github.io/categories/python/</link><description>Recent content in Python on こぴぺたん ログ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Wed, 16 Jul 2025 02:00:00 +0900</lastBuildDate><atom:link href="https://c-a-p-engineer.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>ffmpeg＋SoX×Python：ノイズキャンセリングパイプラインの作り方</title><link>https://c-a-p-engineer.github.io/tech/2025/07/15/ffmpeg-sox-audio-denoise-pipeline/</link><pubDate>Wed, 16 Jul 2025 02:00:00 +0900</pubDate><atom:modified>Wed, 16 Jul 2025 02:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/07/15/ffmpeg-sox-audio-denoise-pipeline/</guid><description>&lt;h1 id="はじめに">はじめに&lt;/h1>
&lt;p>ノイズキャンセリングは、マイク特有のハムノイズや環境音を低減し、クリアな音声を得るための技術です。単体のツールだけでは対応が難しい場合もありますが、&lt;strong>ffmpeg&lt;/strong> のFFTベースノイズ除去フィルタと、&lt;strong>SoX&lt;/strong> の詳細なプロファイル除去・ダイナミックレンジ圧縮を組み合わせることで、より高品質な結果を得られます。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>LibreOfficeでサクッとPPTX→PDF化！</title><link>https://c-a-p-engineer.github.io/tech/2025/07/15/libreoffice_pptx2pdf/</link><pubDate>Wed, 16 Jul 2025 02:00:00 +0900</pubDate><atom:modified>Wed, 16 Jul 2025 02:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/07/15/libreoffice_pptx2pdf/</guid><description>&lt;h1 id="libreofficeでサクッとpptxpdf化">LibreOfficeでサクッとPPTX→PDF化！&lt;/h1>
&lt;p>LibreOfficeのCLIを使えばコマンド一発でPPTXをPDFに変換できます。&lt;br />
「とりあえずPDF化できればOK」という場合はこちらがオススメ。Pythonのスクリプト例も紹介します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>PDF</category><category>PDF</category><category>Python</category></item><item><title>【Python】プログラムをCtrl+Cで安全に停止させる3つの方法【SIGINT対応】</title><link>https://c-a-p-engineer.github.io/tech/2025/06/13/python-sigint-ctrlc-handling/</link><pubDate>Fri, 13 Jun 2025 02:00:00 +0900</pubDate><atom:modified>Fri, 13 Jun 2025 02:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/06/13/python-sigint-ctrlc-handling/</guid><description>&lt;h1 id="pythonプログラムをctrlcで安全に停止させる3つの方法sigint対応">【Python】プログラムをCtrl+Cで安全に停止させる3つの方法【SIGINT対応】&lt;/h1>
&lt;p>Pythonスクリプトを実行中に&lt;code>Ctrl+C&lt;/code>で安全に停止させたい場合、**シグナル（SIGINT）**の正しい扱いが重要です。&lt;/p>
&lt;h2 id="tryexcept-keyboardinterruptで簡潔に捕捉する">try/except KeyboardInterruptで簡潔に捕捉する&lt;/h2>
&lt;h3 id="-概要">🔍 概要&lt;/h3>
&lt;p>&lt;code>Ctrl+C&lt;/code>はPythonにおいて&lt;code>KeyboardInterrupt&lt;/code>例外として送出されます。&lt;code>try/except&lt;/code>でこの例外を捕捉し、終了処理を実装できます。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】questionary ｜ 対話型CLIツールを簡単に作る方法 ＆ コード例</title><link>https://c-a-p-engineer.github.io/tech/2025/04/27/python-cli-questionary-examples/</link><pubDate>Sun, 27 Apr 2025 19:00:00 +0900</pubDate><atom:modified>Sun, 27 Apr 2025 19:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/04/27/python-cli-questionary-examples/</guid><description>&lt;h1 id="pythonquestionary--対話型cliツールを簡単に作る方法--コード例">【Python】questionary ｜ 対話型CLIツールを簡単に作る方法 ＆ コード例&lt;/h1>
&lt;p>Pythonでコマンドラインツール（CLI）を作る際、ユーザーと対話するための入力方法に悩んだことはありませんか？&lt;br />
そんなときに便利なのが「&lt;strong>questionary&lt;/strong>」というライブラリです。&lt;br />
本記事では、&lt;strong>questionary&lt;/strong>のインストールから基本的な使い方、そして&lt;strong>7種類のプロンプト&lt;/strong>を使ったシンプルで実用的なコード例を紹介します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】2段階認証コード（TOTP）を自作する方法【pyotpライブラリ活用】</title><link>https://c-a-p-engineer.github.io/tech/2025/04/16/python-totp-pyotp-authcode/</link><pubDate>Wed, 16 Apr 2025 01:30:00 +0900</pubDate><atom:modified>Wed, 16 Apr 2025 01:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/04/16/python-totp-pyotp-authcode/</guid><description>&lt;h1 id="python2段階認証コードtotpを自作する方法pyotpライブラリ活用">【Python】2段階認証コード（TOTP）を自作する方法【pyotpライブラリ活用】&lt;/h1>
&lt;p>「2段階認証って便利だけど、いちいちスマホを取り出すのが面倒くさい…」&lt;br />
そんな風に感じたことはありませんか？&lt;/p>
&lt;p>&lt;strong>Pythonライブラリ&lt;code>pyotp&lt;/code>を使って、スマホを使わずに自分でTOTP認証コードを生成する方法&lt;/strong>をご紹介します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Google Colab】ランタイムを再起動する</title><link>https://c-a-p-engineer.github.io/tech/2025/03/11/colab-kernel-restart-doshutdown/</link><pubDate>Tue, 11 Mar 2025 03:40:00 +0900</pubDate><atom:modified>Tue, 11 Mar 2025 03:40:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/03/11/colab-kernel-restart-doshutdown/</guid><description>&lt;h1 id="google-colabランタイムを再起動する">【Google Colab】ランタイムを再起動する&lt;/h1>
&lt;p>Google Colab や Jupyter Notebook でカーネルをプログラム的に終了・再起動する方法として利用されるこのメソッドをご紹介します。&lt;/p>
&lt;h2 id="do_shutdown-メソッドの概要">do_shutdown メソッドの概要&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>do_shutdown&lt;/strong> は、IPythonKernel やそのサブクラスに実装されている内部メソッドで、カーネルのシャットダウン処理を行います。&lt;/li>
&lt;li>引数に &lt;code>True&lt;/code> を渡すと、確認なしで強制的にカーネルを終了し、場合によっては再起動することも可能です。&lt;/li>
&lt;li>この仕組みは、特に Google Colab や Jupyter Notebook の「再起動」機能の裏側で利用されており、長時間実行中のプロセスをクリーンに終了するために役立ちます。&lt;/li>
&lt;/ul>
&lt;h3 id="内部処理の流れ">内部処理の流れ&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>インスタンス取得:&lt;/strong>&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Google Colab</category><category>Python</category></item><item><title>【Python】エラー発生時にベル音を鳴らす方法【クロスプラットフォーム対応】</title><link>https://c-a-p-engineer.github.io/tech/2025/03/01/python-beep-on-error/</link><pubDate>Sat, 01 Mar 2025 02:30:00 +0900</pubDate><atom:modified>Sat, 01 Mar 2025 02:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/03/01/python-beep-on-error/</guid><description>&lt;h1 id="pythonエラー発生時にベル音を鳴らす方法クロスプラットフォーム対応">【Python】エラー発生時にベル音を鳴らす方法【クロスプラットフォーム対応】&lt;/h1>
&lt;p>Pythonのエラー処理において、ユーザーに視覚だけでなく音でも通知したい場合があります。この記事では、エラー発生時にベル音を鳴らし、キー入力があればそのベル音を停止する方法を、WindowsとLinux（macOS含む）両方で動作する形で解説します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】YouTube動画＆音声をダウンロードする方法【yt-dlpを活用】</title><link>https://c-a-p-engineer.github.io/tech/2025/02/07/python-yt-dlp/</link><pubDate>Thu, 27 Feb 2025 02:30:00 +0900</pubDate><atom:modified>Thu, 27 Feb 2025 02:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/02/07/python-yt-dlp/</guid><description>&lt;h1 id="pythonyoutube動画音声をダウンロードする方法yt-dlpを活用">【Python】YouTube動画＆音声をダウンロードする方法【yt-dlpを活用】&lt;/h1>
&lt;p>YouTubeの動画をダウンロードしてオフラインで視聴したい場合、Pythonを使うことで簡単に実現できます。本記事では、「yt-dlp」という強力なツールを活用して、YouTubeの動画や音声をダウンロードする方法を解説します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Google Colab】 上システム・ベンチマークを比較してみた</title><link>https://c-a-p-engineer.github.io/tech/2025/02/19/python-colab-benchmark-comparison/</link><pubDate>Wed, 19 Feb 2025 02:30:00 +0900</pubDate><atom:modified>Wed, 19 Feb 2025 02:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/02/19/python-colab-benchmark-comparison/</guid><description>&lt;h1 id="google-colab-上システムベンチマークを比較してみた">【Google Colab】 上システム・ベンチマークを比較してみた&lt;/h1>
&lt;p>Google Colab を活用して、Python を使ったシステム情報の取得や CPU / GPU のベンチマークを行いました。今回は「ローカルランタイム」、「CPU 専用環境」、「GPU 専用環境」、「TPU 環境」といった各環境の詳細情報と実行時間を比較し、その結果をまとめています。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Google Colab</category><category>Python</category></item><item><title>【Google Colab】ファイルをダウンロードする方法</title><link>https://c-a-p-engineer.github.io/tech/2025/02/16/google-colab-file-download/</link><pubDate>Sun, 16 Feb 2025 04:00:00 +0900</pubDate><atom:modified>Sun, 16 Feb 2025 04:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/02/16/google-colab-file-download/</guid><description>&lt;h1 id="google-colabファイルをダウンロードする方法">【Google Colab】ファイルをダウンロードする方法&lt;/h1>
&lt;p>今回は、Google Colab上でファイルを作成し、ダウンロードする方法をご紹介します。コードがシンプルなので、データ生成後のファイル取得がとっても簡単。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Google Colab</category><category>Python</category></item><item><title>【Google Colab】NEUTRINOを実行する方法</title><link>https://c-a-p-engineer.github.io/tech/2025/02/07/google-colab-newtrino/</link><pubDate>Fri, 07 Feb 2025 18:30:00 +0900</pubDate><atom:modified>Fri, 07 Feb 2025 18:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/02/07/google-colab-newtrino/</guid><description>&lt;h1 id="google-colabneutrinoを実行する方法">【Google Colab】NEUTRINOを実行する方法&lt;/h1>
&lt;p>NEUTRINOは、楽譜データ（MusicXML）を基に音声を合成する技術です。今回はGoogle Colab上でNEUTRINOをセットアップし、変換処理から音声出力の確認までの手順を解説します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>音声合成</category><category>Google Colab</category><category>Python</category></item><item><title>【Google Colab】AivisSpeech Engineで音声合成をする！</title><link>https://c-a-p-engineer.github.io/tech/2025/01/23/google-colab-aivis-speech-engine/</link><pubDate>Sat, 25 Jan 2025 04:30:00 +0900</pubDate><atom:modified>Sat, 25 Jan 2025 04:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/01/23/google-colab-aivis-speech-engine/</guid><description>&lt;h1 id="google-colabaivisspeech-engineで音声合成をする">【Google Colab】AivisSpeech Engineで音声合成をする！&lt;/h1>
&lt;p>Google Colab 上で AivisSpeech Engineを手軽に試すためのサンプルコードをまとめました。&lt;/p>
&lt;h2 id="aivisspeech-engine-とは">AivisSpeech Engine とは&lt;/h2>
&lt;p>&lt;strong>AivisSpeech Engine&lt;/strong>（は、オープンソースとして開発されている音声合成エンジンの一種です。GitHub 上で公開されており、リポジトリからソースコードおよびバイナリを取得できます。複数の話者スタイル（スピーカー ID）をサポートしているほか、エンジン起動後はローカルホストの REST API（&lt;code>http://127.0.0.1:10101/&lt;/code>）を通じて音声合成が可能です。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>音声合成</category><category>Google Colab</category><category>Python</category></item><item><title>【Python】Django のロギング設定メモ</title><link>https://c-a-p-engineer.github.io/tech/2025/01/20/python-django-logging/</link><pubDate>Mon, 20 Jan 2025 01:30:00 +0900</pubDate><atom:modified>Mon, 20 Jan 2025 01:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2025/01/20/python-django-logging/</guid><description>&lt;h1 id="django-のロギング設定メモ">Django のロギング設定メモ&lt;/h1>
&lt;p>Django でロギングを設定する方法について詳しく解説します。ロギングを適切に設定することで、アプリケーションのエラーハンドリングやデバッグが容易になります。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】行列ライブラリ比較：Pandas, DuckDB, Polars, Dask, Vaexのベンチマーク</title><link>https://c-a-p-engineer.github.io/tech/2024/12/26/python-matrix-library-comparison/</link><pubDate>Thu, 26 Dec 2024 03:30:00 +0900</pubDate><atom:modified>Thu, 26 Dec 2024 03:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/12/26/python-matrix-library-comparison/</guid><description>&lt;h1 id="python行列ライブラリ比較pandas-duckdb-polars-dask-vaexのベンチマーク">【Python】行列ライブラリ比較：Pandas, DuckDB, Polars, Dask, Vaexのベンチマーク&lt;/h1>
&lt;p>大規模なデータ処理を行う際、Pythonには多数の行列操作ライブラリが用意されています。代表的な5つの行列ライブラリである &lt;strong>Pandas, DuckDB, Polars, Dask, Vaex&lt;/strong> を比較し、それぞれの特徴とパフォーマンスを見ていきます。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】簡単にファイルの差分を比較する方法：HTMLで色付き・行番号付きの表示を実現</title><link>https://c-a-p-engineer.github.io/tech/2024/12/23/python-diff-html-comparison/</link><pubDate>Mon, 23 Dec 2024 12:00:00 +0900</pubDate><atom:modified>Mon, 23 Dec 2024 12:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/12/23/python-diff-html-comparison/</guid><description>&lt;h1 id="python簡単にファイルの差分を比較する方法htmlで色付き行番号付きの表示を実現">【Python】簡単にファイルの差分を比較する方法：HTMLで色付き・行番号付きの表示を実現&lt;/h1>
&lt;p>ファイルの内容を比較し、その差分を視覚的に分かりやすく表示したい場面はよくあります。コードの変更点を確認したり、設定ファイルの違いをチェックしたりする際に便利です。この記事では、Python標準ライブラリの&lt;code>difflib&lt;/code>を活用し、HTML形式で差分を色付き・行番号付きで表示する方法を詳しく解説します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Google Colab】moviepyを使用してGPUエンコードを行う方法</title><link>https://c-a-p-engineer.github.io/tech/2024/12/22/google-colab-ngrok/</link><pubDate>Sun, 22 Dec 2024 02:00:00 +0900</pubDate><atom:modified>Sun, 22 Dec 2024 02:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/12/22/google-colab-ngrok/</guid><description>&lt;h1 id="google-colabでmoviepyを使用してgpuエンコードを行う方法">Google Colabでmoviepyを使用してGPUエンコードを行う方法&lt;/h1>
&lt;p>Google Colab環境で&lt;code>moviepy&lt;/code>を使用して動画エンコードを行う際に、GPUエンコーダーとして&lt;code>h264_nvenc&lt;/code>を指定してもエラーが発生し、GPUエンコードが機能しない問題があります。本記事では、この問題の原因と解決策について詳しく解説します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】Google Colabでngrokを使ってアクセスする方法</title><link>https://c-a-p-engineer.github.io/tech/2024/12/20/google-colab-ngrok/</link><pubDate>Fri, 20 Dec 2024 03:30:00 +0900</pubDate><atom:modified>Fri, 20 Dec 2024 03:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/12/20/google-colab-ngrok/</guid><description>&lt;h1 id="pythongoogle-colabでngrokを使ってアクセスする方法">【Python】Google Colabでngrokを使ってアクセスする方法&lt;/h1>
&lt;p>Google Colab でWebサーバーを立てたりすると通常ではアクセスできないので ngrok を使ってアクセスする方法のメモ。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】PowerPointスライドをPNG画像に変換する方法</title><link>https://c-a-p-engineer.github.io/tech/2024/11/12/python_pptx2pdf2png/</link><pubDate>Tue, 12 Nov 2024 14:30:00 +0900</pubDate><atom:modified>Tue, 12 Nov 2024 14:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/11/12/python_pptx2pdf2png/</guid><description>&lt;h1 id="pythonでpowerpointスライドをpng画像に変換する方法">PythonでPowerPointスライドをPNG画像に変換する方法&lt;/h1>
&lt;p>プレゼンテーション資料や報告書の一部を画像として保存したいときに、PowerPointスライド（PPTXファイル）をPNG形式の画像に変換する方法はとても便利です。この記事では、Pythonを用いてPPTXファイルをPNG形式に変換する方法を、手順を追って詳しく解説します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】pptxファイルからノートを抽出する方法</title><link>https://c-a-p-engineer.github.io/tech/2024/11/12/python_pptx_note/</link><pubDate>Tue, 12 Nov 2024 14:30:00 +0900</pubDate><atom:modified>Tue, 12 Nov 2024 14:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/11/12/python_pptx_note/</guid><description>&lt;h1 id="pythonpptxファイルからノートを抽出する方法">【Python】pptxファイルからノートを抽出する方法&lt;/h1>
&lt;p>Pythonを使ってPowerPoint（.pptx）ファイルからスライドごとのノートを抽出する方法について解説します。プレゼンテーションの資料として、スライド内容と併せてノート情報を参照したいケースは多いと思います。このコードでは、&lt;code>python-pptx&lt;/code>ライブラリを使用してスライドのノートを抽出する方法を紹介します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】標準出力の効果的な出力制御</title><link>https://c-a-p-engineer.github.io/tech/2024/09/24/python-sys-stdout-write-flush/</link><pubDate>Tue, 24 Sep 2024 01:00:00 +0900</pubDate><atom:modified>Tue, 24 Sep 2024 01:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/09/24/python-sys-stdout-write-flush/</guid><description>&lt;h1 id="python標準出力の効果的な出力制御">【Python】標準出力の効果的な出力制御&lt;/h1>
&lt;p>Pythonで標準出力を操作する際、一般的には &lt;code>print()&lt;/code> 関数を使うことがほとんどです。しかし、より細かく標準出力を制御したい場合や、リアルタイム性が求められるアプリケーションを作成する際には、&lt;code>sys.stdout.write()&lt;/code> と &lt;code>sys.stdout.flush()&lt;/code> を使用する必要があります。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】標準出力の効果的な出力制御</title><link>https://c-a-p-engineer.github.io/tech/2024/09/29/python-sys-stdout-write-flush/</link><pubDate>Tue, 24 Sep 2024 01:00:00 +0900</pubDate><atom:modified>Tue, 24 Sep 2024 01:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/09/29/python-sys-stdout-write-flush/</guid><description>&lt;h1 id="python標準出力の効果的な出力制御">【Python】標準出力の効果的な出力制御&lt;/h1>
&lt;p>Pythonで標準出力を操作する際、一般的には &lt;code>print()&lt;/code> 関数を使うことがほとんどです。しかし、より細かく標準出力を制御したい場合や、リアルタイム性が求められるアプリケーションを作成する際には、&lt;code>sys.stdout.write()&lt;/code> と &lt;code>sys.stdout.flush()&lt;/code> を使用する必要があります。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】出力を取得、バッファする方法</title><link>https://c-a-p-engineer.github.io/tech/2024/09/18/python-io-buffer/</link><pubDate>Wed, 18 Sep 2024 01:30:00 +0900</pubDate><atom:modified>Wed, 18 Sep 2024 01:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/09/18/python-io-buffer/</guid><description>&lt;h1 id="pythonで出力を取得バッファする方法">Pythonで出力を取得、バッファする方法&lt;/h1>
&lt;p>Pythonの&lt;code>print()&lt;/code>関数は通常、コンソールに出力されます。しかし、特定の状況では、標準出力をキャプチャしてプログラム内で利用したい場合があります。たとえば、ログを収集したり、テスト中の出力を確認したりするために、出力をバッファに保存して操作することが求められます。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>Google ColabでGoogle Driveのゴミ箱内のファイルを削除する</title><link>https://c-a-p-engineer.github.io/tech/2024/09/15/google-colab-google-drive-trash/</link><pubDate>Sun, 15 Sep 2024 02:30:00 +0900</pubDate><atom:modified>Sun, 15 Sep 2024 02:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/09/15/google-colab-google-drive-trash/</guid><description>&lt;h1 id="google-colabでgoogle-driveのゴミ箱内のファイルを削除する">Google ColabでGoogle Driveのゴミ箱内のファイルを削除する&lt;/h1>
&lt;p>Google Driveを利用していると、不要になったファイルをゴミ箱に移動することがよくあります。しかし、ゴミ箱の中にはファイルがどんどん溜まってしまい、いずれ管理が面倒になることがあります。そこで今回は、&lt;strong>Google Colab&lt;/strong>を使って、Google Driveのゴミ箱内のファイルを一括削除できるコードを紹介します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>Google Colab RustでHello, world!</title><link>https://c-a-p-engineer.github.io/tech/2024/08/08/google-colab-rust/</link><pubDate>Thu, 08 Aug 2024 02:30:00 +0900</pubDate><atom:modified>Thu, 08 Aug 2024 02:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/08/08/google-colab-rust/</guid><description>&lt;h1 id="google-colab-rustでhello-world">Google Colab RustでHello, world!&lt;/h1>
&lt;p>Google ColabはPythonを中心とした開発環境ですが、Rustのプログラムも実行できます。Google ColabでRustを使用して「Hello, world!」を実行するための手順を詳しく説明します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/Rust_programming_language_black_logo.svg.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>Pythonパッケージを調べる方法</title><link>https://c-a-p-engineer.github.io/tech/2024/08/06/python-package-help/</link><pubDate>Tue, 06 Aug 2024 04:00:00 +0900</pubDate><atom:modified>Tue, 06 Aug 2024 04:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/08/06/python-package-help/</guid><description>&lt;h1 id="pythonパッケージを調べる方法">Pythonパッケージを調べる方法&lt;/h1>
&lt;p>Pythonで開発を行っていると、インストール済みのパッケージやその詳細を確認したい場面があります。また、特定のパッケージ内の関数やクラスを調べることも必要です。ここでは、Pythonパッケージを調べる方法と、その実行結果を示します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】多言語翻訳を簡単に！deep-translatorの使い方</title><link>https://c-a-p-engineer.github.io/tech/2024/06/20/python-deep-translator-/</link><pubDate>Thu, 20 Jun 2024 13:00:00 +0900</pubDate><atom:modified>Thu, 20 Jun 2024 13:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/06/20/python-deep-translator-/</guid><description>&lt;h1 id="pythonでの多言語翻訳を簡単にdeep-translatorの使い方と特徴">Pythonでの多言語翻訳を簡単に！deep-translatorの使い方と特徴&lt;/h1>
&lt;p>Pythonには、さまざまな翻訳ライブラリがありますが、オススメなのが「deep-translator」です。&lt;/p>
&lt;h2 id="deep-translatorとは">deep-translatorとは&lt;/h2>
&lt;p>deep-translatorは、複数の翻訳サービス（Google Translate、Microsoft Translator、DeepLなど）を利用して、翻訳を簡単に行うためのPythonライブラリです。このライブラリは、シンプルなAPIを提供し、初心者でも簡単に利用できるよう設計されています。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】音声ファイルを解析してリップシンク（口パク動画）を作成する方法</title><link>https://c-a-p-engineer.github.io/tech/2024/04/28/python-lip-sync/</link><pubDate>Sun, 28 Apr 2024 02:30:00 +0900</pubDate><atom:modified>Sun, 28 Apr 2024 02:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/04/28/python-lip-sync/</guid><description>&lt;h1 id="python音声ファイルを解析してリップシンク口パク動画を作成する方法">【Python】音声ファイルを解析してリップシンク（口パク動画）を作成する方法&lt;/h1>
&lt;p>音声ファイルを解析してリップシンク（口パク動画）を作成する方法。&lt;/p>
&lt;p>音声ファイルに合わせてキャラクターが話しているかのようなリップシンク動画を作成する手順を解説します。このプロセスではlibrosaで音声を分析し、cv2 (OpenCV) で画像を処理し、最後に moviepy を用いて音声とビデオを結合します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>Google Colab で Selenium の動作を録画してみる。</title><link>https://c-a-p-engineer.github.io/tech/2024/04/19/google-colab-selenium-record/</link><pubDate>Fri, 19 Apr 2024 13:00:00 +0900</pubDate><atom:modified>Fri, 19 Apr 2024 13:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/04/19/google-colab-selenium-record/</guid><description>&lt;h1 id="google-colab-で-selenium-の動作を録画してみる">Google Colab で Selenium の動作を録画してみる。&lt;/h1>
&lt;p>Google Colab で Selenium の動作を録画してみました。これで動作時にの動きを録画保存できます。&lt;/p>
&lt;h2 id="環境構築">環境構築&lt;/h2>
&lt;p>まずは環境構築を行います。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># @title 設定&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Selenium&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># xvfb インストール&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">!&lt;/span>&lt;span class="n">sudo&lt;/span> &lt;span class="n">apt&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">ffmpeg&lt;/span> &lt;span class="n">xvfb&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">!&lt;/span>&lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">selenium&lt;/span> &lt;span class="n">xvfbwrapper&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ChoromeDriver&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">!&lt;/span>&lt;span class="n">apt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">get&lt;/span> &lt;span class="n">update&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">!&lt;/span>&lt;span class="n">apt&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">chromium&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">chromedriver&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 日本語対応&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">!&lt;/span>&lt;span class="n">apt&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">fonts&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ipafont&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">gothic&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="selenium実行">Selenium実行&lt;/h2>
&lt;p>環境構築がサクッとできたのでSeleniumも実行してみます。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>Google Colab VOICEVOX ENGINEで音声生成 （CPU、GPU対応環境）</title><link>https://c-a-p-engineer.github.io/tech/2024/04/10/google-colab-voicevox-engine/</link><pubDate>Thu, 11 Apr 2024 19:00:00 +0900</pubDate><atom:modified>Thu, 11 Apr 2024 19:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/04/10/google-colab-voicevox-engine/</guid><description>&lt;h1 id="google-colab-voicevox-engineで音声生成-cpugpu対応環境">Google Colab VOICEVOX ENGINEで音声生成 （CPU、GPU対応環境）&lt;/h1>
&lt;p>Google Colab VOICEVOX ENGINEで音声生成をする際にCPU、GPUを自動で判定して環境にあったVOICEVOX環境を生成します。&lt;br />
これによりGPUが使えない状況でもCPUの環境を自動的に作ってくれます。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>Google Colab で Selenium の環境構築と実行</title><link>https://c-a-p-engineer.github.io/tech/2024/04/11/google-colab-selenium-python/</link><pubDate>Thu, 11 Apr 2024 19:00:00 +0900</pubDate><atom:modified>Thu, 11 Apr 2024 19:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/04/11/google-colab-selenium-python/</guid><description>&lt;h1 id="google-colab-で-selenium-の環境構築と実行">Google Colab で Selenium の環境構築と実行&lt;/h1>
&lt;p>Google Colab で Selenium の環境構築と実行のメモ。&lt;/p>
&lt;p>以前にも Google Colab で Selenium の実行方法を記載しましたが、以前書いたものは Google Colab 上でしか使えないものだったため、ローカルとの互換性を持たせたソースのメモです。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>Google ColabでFlask環境を構築し、Webアプリケーションを公開する方法</title><link>https://c-a-p-engineer.github.io/tech/2024/04/09/google-colab-flask/</link><pubDate>Tue, 09 Apr 2024 19:00:00 +0900</pubDate><atom:modified>Tue, 09 Apr 2024 19:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/04/09/google-colab-flask/</guid><description>&lt;h1 id="google-colabでflask環境を構築しwebアプリケーションを公開する方法">Google ColabでFlask環境を構築し、Webアプリケーションを公開する方法&lt;/h1>
&lt;p>Google Colab上でFlaskアプリケーションを構築し、&lt;code>serve_kernel_port_as_window&lt;/code> と &lt;code>serve_kernel_port_as_iframe&lt;/code> 関数を使ってアプリケーションを公開する方法を紹介します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>Google Colabでudockerを使ってDockerコンテナを実行する方法</title><link>https://c-a-p-engineer.github.io/tech/2024/04/09/google-colab-udocker/</link><pubDate>Tue, 09 Apr 2024 19:00:00 +0900</pubDate><atom:modified>Tue, 09 Apr 2024 19:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/04/09/google-colab-udocker/</guid><description>&lt;h1 id="google-colabでudockerを使ってdockerコンテナを実行する方法">Google Colabでudockerを使ってDockerコンテナを実行する方法&lt;/h1>
&lt;p>Google Colabでudockerを使ってDockerコンテナを実行する方法&lt;/p>
&lt;h2 id="udocker環境設定">udocker環境設定&lt;/h2>
&lt;p>以下のGitHubのREADMEの通りにGoogle Colab上で環境を作成します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Docker</category><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>Google Colab VOICEVOXで音声生成 CPU、GPU対応環境、自動作成版</title><link>https://c-a-p-engineer.github.io/tech/2024/04/09/google-colab-voicevox-cpu-gpu/</link><pubDate>Tue, 09 Apr 2024 02:00:00 +0900</pubDate><atom:modified>Tue, 09 Apr 2024 02:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/04/09/google-colab-voicevox-cpu-gpu/</guid><description>&lt;h1 id="google-colab-voicevoxで音声生成-cpugpu対応環境自動作成版">Google Colab VOICEVOXで音声生成 CPU、GPU対応環境、自動作成版&lt;/h1>
&lt;p>Google Colab VOICEVOXで音声生成をする際にCPU、GPUを自動で判定して環境にあったVOICEVOX環境を生成します。&lt;br />
これによりGPUが使えない状況でもCPUの環境を自動的に作ってくれます。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>PythonでGPUとCPUの処理を分ける方法</title><link>https://c-a-p-engineer.github.io/tech/2024/04/09/python-cpu-gpu/</link><pubDate>Tue, 09 Apr 2024 01:00:00 +0900</pubDate><atom:modified>Tue, 09 Apr 2024 01:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/04/09/python-cpu-gpu/</guid><description>&lt;h1 id="pythonでgpuとcpuの処理を効率的に分ける方法">PythonでGPUとCPUの処理を効率的に分ける方法&lt;/h1>
&lt;p>PPythonでGPUとCPUの処理を分ける方法メモ。プログラム内で条件分岐を使用し、GPUが利用可能な場合とそうでない場合に、それぞれ異なる処理を行う方法をTensorFlowとPyTorchを用いて説明します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>Google Colabでプログレスバーを表示する技術</title><link>https://c-a-p-engineer.github.io/tech/2024/03/12/google-tqdm/</link><pubDate>Tue, 12 Mar 2024 19:00:00 +0900</pubDate><atom:modified>Tue, 12 Mar 2024 19:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/03/12/google-tqdm/</guid><description>&lt;h1 id="google-colabでプログレスバーを表示する技術">Google Colabでプログレスバーを表示する技術&lt;/h1>
&lt;p>Google Colabratory でプログレスバーを表示するための方法を紹介します。&lt;br />
プログレスバーは、長時間実行される処理の進捗をユーザーに視覚的に伝えるための重要なツールです。これにより、プロセスの完了時間を推定したり、プログラムが正常に動作しているかどうかを確認できます。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>Google ColabでSeleniumを使ってウェブページのスクリーンショットやウェブスクレイピングを行う方法</title><link>https://c-a-p-engineer.github.io/tech/2024/02/20/google-colabo-selenium/</link><pubDate>Tue, 20 Feb 2024 19:00:00 +0900</pubDate><atom:modified>Tue, 20 Feb 2024 19:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/02/20/google-colabo-selenium/</guid><description>&lt;h1 id="google-colabでseleniumを使ってウェブページのスクリーンショットやウェブスクレイピングを行う方法">Google ColabでSeleniumを使ってウェブページのスクリーンショットやウェブスクレイピングを行う方法&lt;/h1>
&lt;p>Google Colabは、機械学習やデータ分析プロジェクトに広く使用される無料のクラウドベースのJupyterノートブック環境です。&lt;br />
しかし、この強力なツールは、ウェブページのスクリーンショットを撮るやウェブスクレイピングなど、他の多くの用途にも活用できます。&lt;br />
この記事では、Google Colabで&lt;code>google-colab-selenium&lt;/code>パッケージを使用して、これらのタスクを簡単に実行する方法を紹介します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>Google Colab で Gradio を使ってみる</title><link>https://c-a-p-engineer.github.io/tech/2024/02/15/google-colabo-gradio/</link><pubDate>Thu, 15 Feb 2024 13:00:00 +0900</pubDate><atom:modified>Thu, 15 Feb 2024 13:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/02/15/google-colabo-gradio/</guid><description>&lt;h1 id="google-colab-で-gradio-を使ってみる">Google Colab で Gradio を使ってみる&lt;/h1>
&lt;p>Google Colabを使用してGradioで公開してみる。&lt;/p>
&lt;h2 id="gradioのインストール">Gradioのインストール&lt;/h2>
&lt;p>GradioはPython 3.8以上が必要です。Google Colabでの使用開始には、以下のコマンドを実行してGradioをインストールします。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>Google Colabratoryで実装する基本的なUI</title><link>https://c-a-p-engineer.github.io/tech/2024/02/15/google-colabo-ui/</link><pubDate>Thu, 15 Feb 2024 13:00:00 +0900</pubDate><atom:modified>Thu, 15 Feb 2024 13:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/02/15/google-colabo-ui/</guid><description>&lt;h1 id="google-colabratoryで実装する基本的なui">Google Colabratoryで実装する基本的なUI&lt;/h1>
&lt;p>Google ColabノートブックにUIコンポーネントを組み込むことできます。これによりユーザーはよりダイナミックでインタラクティブなプロジェクトを作成できます。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>Google Colab で Google Drive と接続する方法</title><link>https://c-a-p-engineer.github.io/tech/2024/02/08/google-colabo-google-drive/</link><pubDate>Thu, 08 Feb 2024 19:00:00 +0900</pubDate><atom:modified>Thu, 08 Feb 2024 19:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/02/08/google-colabo-google-drive/</guid><description>&lt;h1 id="google-colab-で-google-drive-と接続する方法">Google Colab で Google Drive と接続する方法&lt;/h1>
&lt;p>Google Colab とGoogle Driveを連携させることで、データの保存、読み込み、整理をスムーズに行えます。&lt;br />
Google Colab を使って、データを分析したり、モデルを訓練したりする際には、しばしば外部のデータソースにアクセスしたり、処理したデータを保存したりする必要があります。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Google Colab</category><category>Python</category><category>Python</category></item><item><title>【Python】テキストから音声への変換：gTTSライブラリの活用</title><link>https://c-a-p-engineer.github.io/tech/2024/01/18/python-gtts/</link><pubDate>Thu, 18 Jan 2024 18:30:00 +0900</pubDate><atom:modified>Thu, 18 Jan 2024 18:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/01/18/python-gtts/</guid><description>&lt;h1 id="pythonテキストから音声への変換gttsライブラリの活用">【Python】テキストから音声への変換：gTTSライブラリの活用&lt;/h1>
&lt;p>Pythonでテキストを音声に変換する方法を紹介します。&lt;/p>
&lt;p>gTTS（Google Text-to-Speech）というライブラリを使用します。&lt;/p>
&lt;h2 id="gttsライブラリの概要">gTTSライブラリの概要&lt;/h2>
&lt;p>gTTSは、Googleのテキスト音声変換APIを利用して、テキストを音声に変換するPythonライブラリです。&lt;br />
このライブラリは多言語に対応しており、簡単なコードで高品質の音声を生成できます。&lt;br />
必要なライブラリのインストール&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>音声</category><category>Python</category></item><item><title>Google Colab で VOICEBOX で音声を生成する</title><link>https://c-a-p-engineer.github.io/tech/2024/01/18/colabo-voicevox/</link><pubDate>Thu, 18 Jan 2024 18:30:00 +0900</pubDate><atom:modified>Thu, 18 Jan 2024 18:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/01/18/colabo-voicevox/</guid><description>&lt;h1 id="google-colab-で-voicebox-で音声を生成する">Google Colab で VOICEBOX で音声を生成する&lt;/h1>
&lt;p>Google Colab 上で VOICEBOX を使用して音声を合成してみます。&lt;/p>
&lt;h2 id="voicebox-で音声を生成">VOICEBOX で音声を生成&lt;/h2>
&lt;p>実際のコード類です。&lt;/p>
&lt;h3 id="初期設定">初期設定&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#初期設定&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">!curl -sSfL https://raw.githubusercontent.com/VOICEVOX/voicevox_core/8cf307df4412dc0db0b03c6957b83b032770c31a/scripts/downloads/download.sh &lt;span class="p">|&lt;/span> bash -s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%cd voicevox_core/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">!wget https://github.com/VOICEVOX/voicevox_core/releases/download/0.14.1/voicevox_core-0.14.1+cpu-cp38-abi3-linux_x86_64.whl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">!pip install voicevox_core-0.14.1+cpu-cp38-abi3-linux_x86_64.whl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">!wget https://raw.githubusercontent.com/VOICEVOX/voicevox_core/406f6c41408836840b9a38489d0f670fb960f412/example/python/run.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="生成">生成&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 実行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;こんにちは！こぴぺたんだよ！ツイッターランドで美少女してます！&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">speaker_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">!python ./run.py --dict-dir &lt;span class="s2">&amp;#34;./open_jtalk_dic_utf_8-1.11&amp;#34;&lt;/span> --text &lt;span class="nv">$text&lt;/span> --out &lt;span class="s2">&amp;#34;../data.wav&amp;#34;&lt;/span> --speaker-id &lt;span class="nv">$speaker_id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">from IPython.display import Audio
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Audio&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;../data.wav&amp;#39;&lt;/span>, &lt;span class="nv">autoplay&lt;/span>&lt;span class="o">=&lt;/span>True&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>実際に作成した音声が以下です。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Google Colab</category><category>音声</category><category>Python</category></item><item><title>【Python】Google Colab上での顔検出</title><link>https://c-a-p-engineer.github.io/tech/2024/01/17/colab-opencv-face-rectangle-drawing/</link><pubDate>Wed, 17 Jan 2024 18:30:00 +0900</pubDate><atom:modified>Wed, 17 Jan 2024 18:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2024/01/17/colab-opencv-face-rectangle-drawing/</guid><description>&lt;h1 id="pythongoogle-colab上での顔検出">【Python】Google Colab上での顔検出&lt;/h1>
&lt;p>Pythonを利用してGoogle Colab上で顔検出をしてみました。&lt;/p>
&lt;p>Google Colabを使用して画像に顔検出を行い、検出された顔に四角を描画する方法について説明します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Google Colab</category><category>Python</category></item><item><title>【Python】SQLAlchemy where in 検索を行う</title><link>https://c-a-p-engineer.github.io/tech/2021/12/11/python-sqlalchemy-where-in/</link><pubDate>Sat, 11 Dec 2021 02:00:00 +0900</pubDate><atom:modified>Sat, 11 Dec 2021 02:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2021/12/11/python-sqlalchemy-where-in/</guid><description>&lt;h1 id="pythonsqlalchemy-where-in-検索を行う">【Python】SQLAlchemy where in 検索を行う&lt;/h1>
&lt;p>PythonのSQLAlchemyでwhere句のinの検索を行う方法。&lt;/p>
&lt;h2 id="失敗">失敗&lt;/h2>
&lt;p>SQLAlchemyで配列をinで検索するとエラーが出ます。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>DB</category><category>PostgreSQL</category><category>Python</category></item><item><title>【Python】PostgreSQL使用時に文字列をエスケープする方法</title><link>https://c-a-p-engineer.github.io/tech/2021/12/11/python-psycopg2-escape/</link><pubDate>Sat, 11 Dec 2021 01:00:00 +0900</pubDate><atom:modified>Sat, 11 Dec 2021 01:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2021/12/11/python-psycopg2-escape/</guid><description>&lt;h1 id="pythonpostgresql使用時に文字列をエスケープする方法">【Python】PostgreSQL使用時に文字列をエスケープする方法&lt;/h1>
&lt;p>PythonでPostgreSQL使用時に文字列をエスケープする方法メモ&lt;/p>
&lt;h2 id="sqlエスケープ">SQLエスケープ&lt;/h2>
&lt;p>&lt;code>psycopg2&lt;/code> を使用します。&lt;/p>
&lt;p>&lt;code>psycopg2&lt;/code> を入れるには &lt;code>pip install psycopg2&lt;/code> でインストールが出来ます。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">psycopg2.extensions&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">adapt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># SQLエスケープ&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">sql_escape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 無名関数化&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">escape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">lambda&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">adapt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;latin-1&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># リスト対応&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">param&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">escape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 辞書型対応&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">param&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">escape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; , &amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># その他&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">escape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># エスケープ対象文字列&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">param&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34; &amp;#39; \ &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># エスケープ&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sql_escape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 表示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>出力結果&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>DB</category><category>PostgreSQL</category><category>Python</category></item><item><title>【Python】パッケージを一括削除</title><link>https://c-a-p-engineer.github.io/tech/2021/12/04/python-pip-bulk-uninstall/</link><pubDate>Sat, 04 Dec 2021 04:30:00 +0900</pubDate><atom:modified>Sat, 04 Dec 2021 04:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2021/12/04/python-pip-bulk-uninstall/</guid><description>&lt;h1 id="pythonパッケージを一括削除">【Python】パッケージを一括削除&lt;/h1>
&lt;p>インストール済みのパッケージを削除する方法&lt;/p>
&lt;h2 id="削除方法">削除方法&lt;/h2>
&lt;h3 id="一括削除">一括削除&lt;/h3>
&lt;p>現在入っているものを一括で削除。&lt;br />
パッケージを消す前にインストール済みのパッケージを保存する場合は &lt;code>pip freeze &amp;gt; requirements.txt&lt;/code> を行ってください。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】Bar Chart Race を使ってグラフ動画を作る</title><link>https://c-a-p-engineer.github.io/tech/2021/09/25/python-bar_chart_race/</link><pubDate>Sat, 25 Sep 2021 17:00:00 +0900</pubDate><atom:modified>Sat, 25 Sep 2021 17:00:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2021/09/25/python-bar_chart_race/</guid><description>&lt;h1 id="python-bar-chart-race-を使ってグラフ動画を作る">【Python】 Bar Chart Race を使ってグラフ動画を作る&lt;/h1>
&lt;p>Python で Bar Chart Race を使用してグラフ動画を作る方法。&lt;/p>
&lt;h2 id="環境">環境&lt;/h2>
&lt;ul>
&lt;li>Python3&lt;/li>
&lt;/ul>
&lt;h2 id="ffmpeg-の導入">ffmpeg の導入&lt;/h2>
&lt;p>動画作成用に &lt;code>ffmpeg&lt;/code> を導入してください。&lt;/p>
&lt;pre tabindex="0">&lt;code>apt install -y ffmpeg
&lt;/code>&lt;/pre>&lt;h2 id="パッケージインストール">パッケージインストール&lt;/h2>
&lt;h3 id="動画作成用のパッケージ">動画作成用のパッケージ&lt;/h3>
&lt;p>&lt;a href="https://www.dexplo.org/bar_chart_race/" target="_blank" rel="nofollow noopener">Bar Chart Race&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>pip bar_chart_race
&lt;/code>&lt;/pre>&lt;h3 id="グラフの日本語表示用パッケージ">グラフの日本語表示用パッケージ&lt;/h3>
&lt;p>&lt;a href="https://pypi.org/project/japanize-matplotlib/" target="_blank" rel="nofollow noopener">japanize-matplotlib - PyPI&lt;/a>&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item><item><title>【Python】 pipまとめ</title><link>https://c-a-p-engineer.github.io/tech/2021/09/22/python-pip-requirements/</link><pubDate>Wed, 22 Sep 2021 01:30:00 +0900</pubDate><atom:modified>Wed, 22 Sep 2021 01:30:00 +0900</atom:modified><guid>https://c-a-p-engineer.github.io/tech/2021/09/22/python-pip-requirements/</guid><description>&lt;h1 id="pipコマンドまとめ">pipコマンドまとめ&lt;/h1>
&lt;p>&lt;code>pip&lt;/code> コマンドを使用してパッケージのインストール、アップデート、複数パッケージの一括インストールなどをメモ。&lt;/p>
&lt;h2 id="パッケージの確認">パッケージの確認&lt;/h2>
&lt;h3 id="パッケージの一覧">パッケージの一覧&lt;/h3>
&lt;p>既にインストール済みのパッケージの一覧を出力します。&lt;/p></description><dc:creator>こぴぺたん</dc:creator><media:content url="https://c-a-p-engineer.github.io/images/thumbnail/python-logo-master-v3-TM.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Python</category><category>Python</category></item></channel></rss>